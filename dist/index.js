import { createRequire } from "node:module";
import { Duplex, PassThrough, Readable, Transform, Writable, getDefaultHighWaterMark } from "node:stream";
import { aborted, callbackify, debuglog, inspect, promisify, stripVTControlCharacters } from "node:util";
import { EventEmitter, addAbortListener, on, once, setMaxListeners } from "node:events";
import process$1, { env, execArgv, execPath, hrtime, platform, stdout } from "node:process";
import { readFile, writeFile } from "node:fs/promises";
import { Buffer as Buffer$1 } from "node:buffer";
import { fileURLToPath } from "node:url";
import { ChildProcess, spawn, spawnSync } from "node:child_process";
import { StringDecoder } from "node:string_decoder";
import { appendFileSync, createReadStream, createWriteStream, readFileSync, statSync, writeFileSync } from "node:fs";
import tty from "node:tty";
import path from "node:path";
import { scheduler, setImmediate as setImmediate$1, setTimeout as setTimeout$1 } from "node:timers/promises";
import { constants } from "node:os";
import { serialize } from "node:v8";
import { finished } from "node:stream/promises";

//#region rolldown:runtime
var __create$1 = Object.create;
var __defProp$9 = Object.defineProperty;
var __getOwnPropDesc$8 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames$8 = Object.getOwnPropertyNames;
var __getProtoOf$1 = Object.getPrototypeOf;
var __hasOwnProp$8 = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function() {
	return mod || (0, cb[__getOwnPropNames$8(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps$8 = (to$1, from, except, desc) => {
	if (from && typeof from === "object" || typeof from === "function") for (var keys$1 = __getOwnPropNames$8(from), i$1 = 0, n$1 = keys$1.length, key; i$1 < n$1; i$1++) {
		key = keys$1[i$1];
		if (!__hasOwnProp$8.call(to$1, key) && key !== except) __defProp$9(to$1, key, {
			get: ((k) => from[k]).bind(null, key),
			enumerable: !(desc = __getOwnPropDesc$8(from, key)) || desc.enumerable
		});
	}
	return to$1;
};
var __toESM$1 = (mod, isNodeMode, target) => (target = mod != null ? __create$1(__getProtoOf$1(mod)) : {}, __copyProps$8(isNodeMode || !mod || !mod.__esModule ? __defProp$9(target, "default", {
	value: mod,
	enumerable: true
}) : target, mod));
var __require = /* @__PURE__ */ createRequire(import.meta.url);

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/utils.js
var require_utils$4 = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/utils.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.toCommandProperties = exports.toCommandValue = void 0;
	/**
	* Sanitizes an input into a string so it can be passed into issueCommand safely
	* @param input input to sanitize into a string
	*/
	function toCommandValue(input) {
		if (input === null || input === void 0) return "";
		else if (typeof input === "string" || input instanceof String) return input;
		return JSON.stringify(input);
	}
	exports.toCommandValue = toCommandValue;
	/**
	*
	* @param annotationProperties
	* @returns The command properties to send with the actual annotation command
	* See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
	*/
	function toCommandProperties(annotationProperties) {
		if (!Object.keys(annotationProperties).length) return {};
		return {
			title: annotationProperties.title,
			file: annotationProperties.file,
			line: annotationProperties.startLine,
			endLine: annotationProperties.endLine,
			col: annotationProperties.startColumn,
			endColumn: annotationProperties.endColumn
		};
	}
	exports.toCommandProperties = toCommandProperties;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/command.js
var require_command = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/command.js"(exports) {
	var __createBinding$12 = exports && exports.__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __setModuleDefault$12 = exports && exports.__setModuleDefault || (Object.create ? function(o$1, v) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v
		});
	} : function(o$1, v) {
		o$1["default"] = v;
	});
	var __importStar$12 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$12(result, mod, k);
		}
		__setModuleDefault$12(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.issue = exports.issueCommand = void 0;
	const os$3 = __importStar$12(__require("os"));
	const utils_1$5 = require_utils$4();
	/**
	* Commands
	*
	* Command Format:
	*   ::name key=value,key=value::message
	*
	* Examples:
	*   ::warning::This is the message
	*   ::set-env name=MY_VAR::some value
	*/
	function issueCommand(command, properties, message) {
		const cmd = new Command(command, properties, message);
		process.stdout.write(cmd.toString() + os$3.EOL);
	}
	exports.issueCommand = issueCommand;
	function issue(name$2, message = "") {
		issueCommand(name$2, {}, message);
	}
	exports.issue = issue;
	const CMD_STRING = "::";
	var Command = class {
		constructor(command, properties, message) {
			if (!command) command = "missing.command";
			this.command = command;
			this.properties = properties;
			this.message = message;
		}
		toString() {
			let cmdStr = CMD_STRING + this.command;
			if (this.properties && Object.keys(this.properties).length > 0) {
				cmdStr += " ";
				let first = true;
				for (const key in this.properties) if (this.properties.hasOwnProperty(key)) {
					const val = this.properties[key];
					if (val) {
						if (first) first = false;
						else cmdStr += ",";
						cmdStr += `${key}=${escapeProperty(val)}`;
					}
				}
			}
			cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
			return cmdStr;
		}
	};
	function escapeData(s) {
		return (0, utils_1$5.toCommandValue)(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
	}
	function escapeProperty(s) {
		return (0, utils_1$5.toCommandValue)(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
	}
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/file-command.js"(exports) {
	var __createBinding$11 = exports && exports.__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __setModuleDefault$11 = exports && exports.__setModuleDefault || (Object.create ? function(o$1, v) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v
		});
	} : function(o$1, v) {
		o$1["default"] = v;
	});
	var __importStar$11 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$11(result, mod, k);
		}
		__setModuleDefault$11(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
	const crypto$6 = __importStar$11(__require("crypto"));
	const fs$5 = __importStar$11(__require("fs"));
	const os$2 = __importStar$11(__require("os"));
	const utils_1$4 = require_utils$4();
	function issueFileCommand(command, message) {
		const filePath = process.env[`GITHUB_${command}`];
		if (!filePath) throw new Error(`Unable to find environment variable for file command ${command}`);
		if (!fs$5.existsSync(filePath)) throw new Error(`Missing file at path: ${filePath}`);
		fs$5.appendFileSync(filePath, `${(0, utils_1$4.toCommandValue)(message)}${os$2.EOL}`, { encoding: "utf8" });
	}
	exports.issueFileCommand = issueFileCommand;
	function prepareKeyValueMessage(key, value) {
		const delimiter = `ghadelimiter_${crypto$6.randomUUID()}`;
		const convertedValue = (0, utils_1$4.toCommandValue)(value);
		if (key.includes(delimiter)) throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
		if (convertedValue.includes(delimiter)) throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
		return `${key}<<${delimiter}${os$2.EOL}${convertedValue}${os$2.EOL}${delimiter}`;
	}
	exports.prepareKeyValueMessage = prepareKeyValueMessage;
} });

//#endregion
//#region node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/proxy.js
var require_proxy = __commonJS({ "node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/proxy.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.checkBypass = exports.getProxyUrl = void 0;
	function getProxyUrl$1(reqUrl) {
		const usingSsl = reqUrl.protocol === "https:";
		if (checkBypass(reqUrl)) return void 0;
		const proxyVar = (() => {
			if (usingSsl) return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
			else return process.env["http_proxy"] || process.env["HTTP_PROXY"];
		})();
		if (proxyVar) try {
			return new DecodedURL(proxyVar);
		} catch (_a$3) {
			if (!proxyVar.startsWith("http://") && !proxyVar.startsWith("https://")) return new DecodedURL(`http://${proxyVar}`);
		}
		else return void 0;
	}
	exports.getProxyUrl = getProxyUrl$1;
	function checkBypass(reqUrl) {
		if (!reqUrl.hostname) return false;
		const reqHost = reqUrl.hostname;
		if (isLoopbackAddress(reqHost)) return true;
		const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
		if (!noProxy) return false;
		let reqPort;
		if (reqUrl.port) reqPort = Number(reqUrl.port);
		else if (reqUrl.protocol === "http:") reqPort = 80;
		else if (reqUrl.protocol === "https:") reqPort = 443;
		const upperReqHosts = [reqUrl.hostname.toUpperCase()];
		if (typeof reqPort === "number") upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
		for (const upperNoProxyItem of noProxy.split(",").map((x) => x.trim().toUpperCase()).filter((x) => x)) if (upperNoProxyItem === "*" || upperReqHosts.some((x) => x === upperNoProxyItem || x.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x.endsWith(`${upperNoProxyItem}`))) return true;
		return false;
	}
	exports.checkBypass = checkBypass;
	function isLoopbackAddress(host) {
		const hostLower = host.toLowerCase();
		return hostLower === "localhost" || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
	}
	var DecodedURL = class extends URL {
		constructor(url, base) {
			super(url, base);
			this._decodedUsername = decodeURIComponent(super.username);
			this._decodedPassword = decodeURIComponent(super.password);
		}
		get username() {
			return this._decodedUsername;
		}
		get password() {
			return this._decodedPassword;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/lib/tunnel.js
var require_tunnel$1 = __commonJS({ "node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/lib/tunnel.js"(exports) {
	var net$6 = __require("net");
	var tls$2 = __require("tls");
	var http$3 = __require("http");
	var https$1 = __require("https");
	var events$1 = __require("events");
	var assert$51 = __require("assert");
	var util$39 = __require("util");
	exports.httpOverHttp = httpOverHttp;
	exports.httpsOverHttp = httpsOverHttp;
	exports.httpOverHttps = httpOverHttps;
	exports.httpsOverHttps = httpsOverHttps;
	function httpOverHttp(options) {
		var agent = new TunnelingAgent(options);
		agent.request = http$3.request;
		return agent;
	}
	function httpsOverHttp(options) {
		var agent = new TunnelingAgent(options);
		agent.request = http$3.request;
		agent.createSocket = createSecureSocket;
		agent.defaultPort = 443;
		return agent;
	}
	function httpOverHttps(options) {
		var agent = new TunnelingAgent(options);
		agent.request = https$1.request;
		return agent;
	}
	function httpsOverHttps(options) {
		var agent = new TunnelingAgent(options);
		agent.request = https$1.request;
		agent.createSocket = createSecureSocket;
		agent.defaultPort = 443;
		return agent;
	}
	function TunnelingAgent(options) {
		var self$1 = this;
		self$1.options = options || {};
		self$1.proxyOptions = self$1.options.proxy || {};
		self$1.maxSockets = self$1.options.maxSockets || http$3.Agent.defaultMaxSockets;
		self$1.requests = [];
		self$1.sockets = [];
		self$1.on("free", function onFree(socket, host, port, localAddress) {
			var options$1 = toOptions(host, port, localAddress);
			for (var i$1 = 0, len = self$1.requests.length; i$1 < len; ++i$1) {
				var pending = self$1.requests[i$1];
				if (pending.host === options$1.host && pending.port === options$1.port) {
					self$1.requests.splice(i$1, 1);
					pending.request.onSocket(socket);
					return;
				}
			}
			socket.destroy();
			self$1.removeSocket(socket);
		});
	}
	util$39.inherits(TunnelingAgent, events$1.EventEmitter);
	TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
		var self$1 = this;
		var options = mergeOptions$1({ request: req }, self$1.options, toOptions(host, port, localAddress));
		if (self$1.sockets.length >= this.maxSockets) {
			self$1.requests.push(options);
			return;
		}
		self$1.createSocket(options, function(socket) {
			socket.on("free", onFree);
			socket.on("close", onCloseOrRemove);
			socket.on("agentRemove", onCloseOrRemove);
			req.onSocket(socket);
			function onFree() {
				self$1.emit("free", socket, options);
			}
			function onCloseOrRemove(err) {
				self$1.removeSocket(socket);
				socket.removeListener("free", onFree);
				socket.removeListener("close", onCloseOrRemove);
				socket.removeListener("agentRemove", onCloseOrRemove);
			}
		});
	};
	TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
		var self$1 = this;
		var placeholder = {};
		self$1.sockets.push(placeholder);
		var connectOptions = mergeOptions$1({}, self$1.proxyOptions, {
			method: "CONNECT",
			path: options.host + ":" + options.port,
			agent: false,
			headers: { host: options.host + ":" + options.port }
		});
		if (options.localAddress) connectOptions.localAddress = options.localAddress;
		if (connectOptions.proxyAuth) {
			connectOptions.headers = connectOptions.headers || {};
			connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
		}
		debug$1("making CONNECT request");
		var connectReq = self$1.request(connectOptions);
		connectReq.useChunkedEncodingByDefault = false;
		connectReq.once("response", onResponse);
		connectReq.once("upgrade", onUpgrade);
		connectReq.once("connect", onConnect);
		connectReq.once("error", onError$2);
		connectReq.end();
		function onResponse(res) {
			res.upgrade = true;
		}
		function onUpgrade(res, socket, head) {
			process.nextTick(function() {
				onConnect(res, socket, head);
			});
		}
		function onConnect(res, socket, head) {
			connectReq.removeAllListeners();
			socket.removeAllListeners();
			if (res.statusCode !== 200) {
				debug$1("tunneling socket could not be established, statusCode=%d", res.statusCode);
				socket.destroy();
				var error$1 = /* @__PURE__ */ new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
				error$1.code = "ECONNRESET";
				options.request.emit("error", error$1);
				self$1.removeSocket(placeholder);
				return;
			}
			if (head.length > 0) {
				debug$1("got illegal response body from proxy");
				socket.destroy();
				var error$1 = /* @__PURE__ */ new Error("got illegal response body from proxy");
				error$1.code = "ECONNRESET";
				options.request.emit("error", error$1);
				self$1.removeSocket(placeholder);
				return;
			}
			debug$1("tunneling connection has established");
			self$1.sockets[self$1.sockets.indexOf(placeholder)] = socket;
			return cb(socket);
		}
		function onError$2(cause) {
			connectReq.removeAllListeners();
			debug$1("tunneling socket could not be established, cause=%s\n", cause.message, cause.stack);
			var error$1 = /* @__PURE__ */ new Error("tunneling socket could not be established, cause=" + cause.message);
			error$1.code = "ECONNRESET";
			options.request.emit("error", error$1);
			self$1.removeSocket(placeholder);
		}
	};
	TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
		var pos = this.sockets.indexOf(socket);
		if (pos === -1) return;
		this.sockets.splice(pos, 1);
		var pending = this.requests.shift();
		if (pending) this.createSocket(pending, function(socket$1) {
			pending.request.onSocket(socket$1);
		});
	};
	function createSecureSocket(options, cb) {
		var self$1 = this;
		TunnelingAgent.prototype.createSocket.call(self$1, options, function(socket) {
			var hostHeader = options.request.getHeader("host");
			var tlsOptions = mergeOptions$1({}, self$1.options, {
				socket,
				servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
			});
			var secureSocket = tls$2.connect(0, tlsOptions);
			self$1.sockets[self$1.sockets.indexOf(socket)] = secureSocket;
			cb(secureSocket);
		});
	}
	function toOptions(host, port, localAddress) {
		if (typeof host === "string") return {
			host,
			port,
			localAddress
		};
		return host;
	}
	function mergeOptions$1(target) {
		for (var i$1 = 1, len = arguments.length; i$1 < len; ++i$1) {
			var overrides = arguments[i$1];
			if (typeof overrides === "object") {
				var keys$1 = Object.keys(overrides);
				for (var j = 0, keyLen = keys$1.length; j < keyLen; ++j) {
					var k = keys$1[j];
					if (overrides[k] !== void 0) target[k] = overrides[k];
				}
			}
		}
		return target;
	}
	var debug$1;
	if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) debug$1 = function() {
		var args = Array.prototype.slice.call(arguments);
		if (typeof args[0] === "string") args[0] = "TUNNEL: " + args[0];
		else args.unshift("TUNNEL:");
		console.error.apply(console, args);
	};
	else debug$1 = function() {};
	exports.debug = debug$1;
} });

//#endregion
//#region node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/index.js
var require_tunnel = __commonJS({ "node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/index.js"(exports, module) {
	module.exports = require_tunnel$1();
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/symbols.js
var require_symbols$5 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/symbols.js"(exports, module) {
	module.exports = {
		kClose: Symbol("close"),
		kDestroy: Symbol("destroy"),
		kDispatch: Symbol("dispatch"),
		kUrl: Symbol("url"),
		kWriting: Symbol("writing"),
		kResuming: Symbol("resuming"),
		kQueue: Symbol("queue"),
		kConnect: Symbol("connect"),
		kConnecting: Symbol("connecting"),
		kHeadersList: Symbol("headers list"),
		kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
		kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
		kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
		kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
		kKeepAlive: Symbol("keep alive"),
		kHeadersTimeout: Symbol("headers timeout"),
		kBodyTimeout: Symbol("body timeout"),
		kServerName: Symbol("server name"),
		kLocalAddress: Symbol("local address"),
		kHost: Symbol("host"),
		kNoRef: Symbol("no ref"),
		kBodyUsed: Symbol("used"),
		kRunning: Symbol("running"),
		kBlocking: Symbol("blocking"),
		kPending: Symbol("pending"),
		kSize: Symbol("size"),
		kBusy: Symbol("busy"),
		kQueued: Symbol("queued"),
		kFree: Symbol("free"),
		kConnected: Symbol("connected"),
		kClosed: Symbol("closed"),
		kNeedDrain: Symbol("need drain"),
		kReset: Symbol("reset"),
		kDestroyed: Symbol.for("nodejs.stream.destroyed"),
		kMaxHeadersSize: Symbol("max headers size"),
		kRunningIdx: Symbol("running index"),
		kPendingIdx: Symbol("pending index"),
		kError: Symbol("error"),
		kClients: Symbol("clients"),
		kClient: Symbol("client"),
		kParser: Symbol("parser"),
		kOnDestroyed: Symbol("destroy callbacks"),
		kPipelining: Symbol("pipelining"),
		kSocket: Symbol("socket"),
		kHostHeader: Symbol("host header"),
		kConnector: Symbol("connector"),
		kStrictContentLength: Symbol("strict content length"),
		kMaxRedirections: Symbol("maxRedirections"),
		kMaxRequests: Symbol("maxRequestsPerClient"),
		kProxy: Symbol("proxy agent options"),
		kCounter: Symbol("socket request counter"),
		kInterceptors: Symbol("dispatch interceptors"),
		kMaxResponseSize: Symbol("max response size"),
		kHTTP2Session: Symbol("http2Session"),
		kHTTP2SessionState: Symbol("http2Session state"),
		kHTTP2BuildRequest: Symbol("http2 build request"),
		kHTTP1BuildRequest: Symbol("http1 build request"),
		kHTTP2CopyHeaders: Symbol("http2 copy headers"),
		kHTTPConnVersion: Symbol("http connection version"),
		kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
		kConstruct: Symbol("constructable")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/errors.js
var require_errors$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/errors.js"(exports, module) {
	var UndiciError$5 = class extends Error {
		constructor(message) {
			super(message);
			this.name = "UndiciError";
			this.code = "UND_ERR";
		}
	};
	var ConnectTimeoutError$3 = class ConnectTimeoutError$3 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ConnectTimeoutError$3);
			this.name = "ConnectTimeoutError";
			this.message = message || "Connect Timeout Error";
			this.code = "UND_ERR_CONNECT_TIMEOUT";
		}
	};
	var HeadersTimeoutError$3 = class HeadersTimeoutError$3 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, HeadersTimeoutError$3);
			this.name = "HeadersTimeoutError";
			this.message = message || "Headers Timeout Error";
			this.code = "UND_ERR_HEADERS_TIMEOUT";
		}
	};
	var HeadersOverflowError$3 = class HeadersOverflowError$3 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, HeadersOverflowError$3);
			this.name = "HeadersOverflowError";
			this.message = message || "Headers Overflow Error";
			this.code = "UND_ERR_HEADERS_OVERFLOW";
		}
	};
	var BodyTimeoutError$3 = class BodyTimeoutError$3 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, BodyTimeoutError$3);
			this.name = "BodyTimeoutError";
			this.message = message || "Body Timeout Error";
			this.code = "UND_ERR_BODY_TIMEOUT";
		}
	};
	var ResponseStatusCodeError$2 = class ResponseStatusCodeError$2 extends UndiciError$5 {
		constructor(message, statusCode, headers, body) {
			super(message);
			Error.captureStackTrace(this, ResponseStatusCodeError$2);
			this.name = "ResponseStatusCodeError";
			this.message = message || "Response Status Code Error";
			this.code = "UND_ERR_RESPONSE_STATUS_CODE";
			this.body = body;
			this.status = statusCode;
			this.statusCode = statusCode;
			this.headers = headers;
		}
	};
	var InvalidArgumentError$54 = class InvalidArgumentError$54 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, InvalidArgumentError$54);
			this.name = "InvalidArgumentError";
			this.message = message || "Invalid Argument Error";
			this.code = "UND_ERR_INVALID_ARG";
		}
	};
	var InvalidReturnValueError$5 = class InvalidReturnValueError$5 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, InvalidReturnValueError$5);
			this.name = "InvalidReturnValueError";
			this.message = message || "Invalid Return Value Error";
			this.code = "UND_ERR_INVALID_RETURN_VALUE";
		}
	};
	var RequestAbortedError$18 = class RequestAbortedError$18 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, RequestAbortedError$18);
			this.name = "AbortError";
			this.message = message || "Request aborted";
			this.code = "UND_ERR_ABORTED";
		}
	};
	var InformationalError$6 = class InformationalError$6 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, InformationalError$6);
			this.name = "InformationalError";
			this.message = message || "Request information";
			this.code = "UND_ERR_INFO";
		}
	};
	var RequestContentLengthMismatchError$4 = class RequestContentLengthMismatchError$4 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, RequestContentLengthMismatchError$4);
			this.name = "RequestContentLengthMismatchError";
			this.message = message || "Request body length does not match content-length header";
			this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
		}
	};
	var ResponseContentLengthMismatchError$3 = class ResponseContentLengthMismatchError$3 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ResponseContentLengthMismatchError$3);
			this.name = "ResponseContentLengthMismatchError";
			this.message = message || "Response body length does not match content-length header";
			this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
		}
	};
	var ClientDestroyedError$5 = class ClientDestroyedError$5 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ClientDestroyedError$5);
			this.name = "ClientDestroyedError";
			this.message = message || "The client is destroyed";
			this.code = "UND_ERR_DESTROYED";
		}
	};
	var ClientClosedError$3 = class ClientClosedError$3 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ClientClosedError$3);
			this.name = "ClientClosedError";
			this.message = message || "The client is closed";
			this.code = "UND_ERR_CLOSED";
		}
	};
	var SocketError$8 = class SocketError$8 extends UndiciError$5 {
		constructor(message, socket) {
			super(message);
			Error.captureStackTrace(this, SocketError$8);
			this.name = "SocketError";
			this.message = message || "Socket error";
			this.code = "UND_ERR_SOCKET";
			this.socket = socket;
		}
	};
	var NotSupportedError$5 = class NotSupportedError$5 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, NotSupportedError$5);
			this.name = "NotSupportedError";
			this.message = message || "Not supported error";
			this.code = "UND_ERR_NOT_SUPPORTED";
		}
	};
	var BalancedPoolMissingUpstreamError$3 = class extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, NotSupportedError$5);
			this.name = "MissingUpstreamError";
			this.message = message || "No upstream has been added to the BalancedPool";
			this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
		}
	};
	var HTTPParserError$3 = class HTTPParserError$3 extends Error {
		constructor(message, code, data$1) {
			super(message);
			Error.captureStackTrace(this, HTTPParserError$3);
			this.name = "HTTPParserError";
			this.code = code ? `HPE_${code}` : void 0;
			this.data = data$1 ? data$1.toString() : void 0;
		}
	};
	var ResponseExceededMaxSizeError$3 = class ResponseExceededMaxSizeError$3 extends UndiciError$5 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ResponseExceededMaxSizeError$3);
			this.name = "ResponseExceededMaxSizeError";
			this.message = message || "Response content exceeded max size";
			this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
		}
	};
	var RequestRetryError$3 = class RequestRetryError$3 extends UndiciError$5 {
		constructor(message, code, { headers, data: data$1 }) {
			super(message);
			Error.captureStackTrace(this, RequestRetryError$3);
			this.name = "RequestRetryError";
			this.message = message || "Request retry error";
			this.code = "UND_ERR_REQ_RETRY";
			this.statusCode = code;
			this.data = data$1;
			this.headers = headers;
		}
	};
	module.exports = {
		HTTPParserError: HTTPParserError$3,
		UndiciError: UndiciError$5,
		HeadersTimeoutError: HeadersTimeoutError$3,
		HeadersOverflowError: HeadersOverflowError$3,
		BodyTimeoutError: BodyTimeoutError$3,
		RequestContentLengthMismatchError: RequestContentLengthMismatchError$4,
		ConnectTimeoutError: ConnectTimeoutError$3,
		ResponseStatusCodeError: ResponseStatusCodeError$2,
		InvalidArgumentError: InvalidArgumentError$54,
		InvalidReturnValueError: InvalidReturnValueError$5,
		RequestAbortedError: RequestAbortedError$18,
		ClientDestroyedError: ClientDestroyedError$5,
		ClientClosedError: ClientClosedError$3,
		InformationalError: InformationalError$6,
		SocketError: SocketError$8,
		NotSupportedError: NotSupportedError$5,
		ResponseContentLengthMismatchError: ResponseContentLengthMismatchError$3,
		BalancedPoolMissingUpstreamError: BalancedPoolMissingUpstreamError$3,
		ResponseExceededMaxSizeError: ResponseExceededMaxSizeError$3,
		RequestRetryError: RequestRetryError$3
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/constants.js
var require_constants$9 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/constants.js"(exports, module) {
	/** @type {Record<string, string | undefined>} */
	const headerNameLowerCasedRecord$5 = {};
	const wellknownHeaderNames$2 = [
		"Accept",
		"Accept-Encoding",
		"Accept-Language",
		"Accept-Ranges",
		"Access-Control-Allow-Credentials",
		"Access-Control-Allow-Headers",
		"Access-Control-Allow-Methods",
		"Access-Control-Allow-Origin",
		"Access-Control-Expose-Headers",
		"Access-Control-Max-Age",
		"Access-Control-Request-Headers",
		"Access-Control-Request-Method",
		"Age",
		"Allow",
		"Alt-Svc",
		"Alt-Used",
		"Authorization",
		"Cache-Control",
		"Clear-Site-Data",
		"Connection",
		"Content-Disposition",
		"Content-Encoding",
		"Content-Language",
		"Content-Length",
		"Content-Location",
		"Content-Range",
		"Content-Security-Policy",
		"Content-Security-Policy-Report-Only",
		"Content-Type",
		"Cookie",
		"Cross-Origin-Embedder-Policy",
		"Cross-Origin-Opener-Policy",
		"Cross-Origin-Resource-Policy",
		"Date",
		"Device-Memory",
		"Downlink",
		"ECT",
		"ETag",
		"Expect",
		"Expect-CT",
		"Expires",
		"Forwarded",
		"From",
		"Host",
		"If-Match",
		"If-Modified-Since",
		"If-None-Match",
		"If-Range",
		"If-Unmodified-Since",
		"Keep-Alive",
		"Last-Modified",
		"Link",
		"Location",
		"Max-Forwards",
		"Origin",
		"Permissions-Policy",
		"Pragma",
		"Proxy-Authenticate",
		"Proxy-Authorization",
		"RTT",
		"Range",
		"Referer",
		"Referrer-Policy",
		"Refresh",
		"Retry-After",
		"Sec-WebSocket-Accept",
		"Sec-WebSocket-Extensions",
		"Sec-WebSocket-Key",
		"Sec-WebSocket-Protocol",
		"Sec-WebSocket-Version",
		"Server",
		"Server-Timing",
		"Service-Worker-Allowed",
		"Service-Worker-Navigation-Preload",
		"Set-Cookie",
		"SourceMap",
		"Strict-Transport-Security",
		"Supports-Loading-Mode",
		"TE",
		"Timing-Allow-Origin",
		"Trailer",
		"Transfer-Encoding",
		"Upgrade",
		"Upgrade-Insecure-Requests",
		"User-Agent",
		"Vary",
		"Via",
		"WWW-Authenticate",
		"X-Content-Type-Options",
		"X-DNS-Prefetch-Control",
		"X-Frame-Options",
		"X-Permitted-Cross-Domain-Policies",
		"X-Powered-By",
		"X-Requested-With",
		"X-XSS-Protection"
	];
	for (let i$1 = 0; i$1 < wellknownHeaderNames$2.length; ++i$1) {
		const key = wellknownHeaderNames$2[i$1];
		const lowerCasedKey = key.toLowerCase();
		headerNameLowerCasedRecord$5[key] = headerNameLowerCasedRecord$5[lowerCasedKey] = lowerCasedKey;
	}
	Object.setPrototypeOf(headerNameLowerCasedRecord$5, null);
	module.exports = {
		wellknownHeaderNames: wellknownHeaderNames$2,
		headerNameLowerCasedRecord: headerNameLowerCasedRecord$5
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/util.js
var require_util$12 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/util.js"(exports, module) {
	const assert$50 = __require("assert");
	const { kDestroyed: kDestroyed$4, kBodyUsed: kBodyUsed$4 } = require_symbols$5();
	const { IncomingMessage: IncomingMessage$1 } = __require("http");
	const stream$3 = __require("stream");
	const net$5 = __require("net");
	const { InvalidArgumentError: InvalidArgumentError$53 } = require_errors$1();
	const { Blob: Blob$7 } = __require("buffer");
	const nodeUtil$3 = __require("util");
	const { stringify: stringify$5 } = __require("querystring");
	const { headerNameLowerCasedRecord: headerNameLowerCasedRecord$4 } = require_constants$9();
	const [nodeMajor$2, nodeMinor$2] = process.versions.node.split(".").map((v) => Number(v));
	function nop$1() {}
	function isStream$3(obj) {
		return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
	}
	function isBlobLike$9(object$1) {
		return Blob$7 && object$1 instanceof Blob$7 || object$1 && typeof object$1 === "object" && (typeof object$1.stream === "function" || typeof object$1.arrayBuffer === "function") && /^(Blob|File)$/.test(object$1[Symbol.toStringTag]);
	}
	function buildURL$2(url, queryParams) {
		if (url.includes("?") || url.includes("#")) throw new Error("Query params cannot be passed when url already contains \"?\" or \"#\".");
		const stringified = stringify$5(queryParams);
		if (stringified) url += "?" + stringified;
		return url;
	}
	function parseURL$1(url) {
		if (typeof url === "string") {
			url = new URL(url);
			if (!/^https?:/.test(url.origin || url.protocol)) throw new InvalidArgumentError$53("Invalid URL protocol: the URL must start with `http:` or `https:`.");
			return url;
		}
		if (!url || typeof url !== "object") throw new InvalidArgumentError$53("Invalid URL: The URL argument must be a non-null object.");
		if (!/^https?:/.test(url.origin || url.protocol)) throw new InvalidArgumentError$53("Invalid URL protocol: the URL must start with `http:` or `https:`.");
		if (!(url instanceof URL)) {
			if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) throw new InvalidArgumentError$53("Invalid URL: port must be a valid integer or a string representation of an integer.");
			if (url.path != null && typeof url.path !== "string") throw new InvalidArgumentError$53("Invalid URL path: the path must be a string or null/undefined.");
			if (url.pathname != null && typeof url.pathname !== "string") throw new InvalidArgumentError$53("Invalid URL pathname: the pathname must be a string or null/undefined.");
			if (url.hostname != null && typeof url.hostname !== "string") throw new InvalidArgumentError$53("Invalid URL hostname: the hostname must be a string or null/undefined.");
			if (url.origin != null && typeof url.origin !== "string") throw new InvalidArgumentError$53("Invalid URL origin: the origin must be a string or null/undefined.");
			const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
			let origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;
			let path$9 = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;
			if (origin.endsWith("/")) origin = origin.substring(0, origin.length - 1);
			if (path$9 && !path$9.startsWith("/")) path$9 = `/${path$9}`;
			url = new URL(origin + path$9);
		}
		return url;
	}
	function parseOrigin$3(url) {
		url = parseURL$1(url);
		if (url.pathname !== "/" || url.search || url.hash) throw new InvalidArgumentError$53("invalid url");
		return url;
	}
	function getHostname$1(host) {
		if (host[0] === "[") {
			const idx$1 = host.indexOf("]");
			assert$50(idx$1 !== -1);
			return host.substring(1, idx$1);
		}
		const idx = host.indexOf(":");
		if (idx === -1) return host;
		return host.substring(0, idx);
	}
	function getServerName$2(host) {
		if (!host) return null;
		assert$50.strictEqual(typeof host, "string");
		const servername = getHostname$1(host);
		if (net$5.isIP(servername)) return "";
		return servername;
	}
	function deepClone$1(obj) {
		return JSON.parse(JSON.stringify(obj));
	}
	function isAsyncIterable$1(obj) {
		return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
	}
	function isIterable$2(obj) {
		return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
	}
	function bodyLength$1(body) {
		if (body == null) return 0;
		else if (isStream$3(body)) {
			const state = body._readableState;
			return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;
		} else if (isBlobLike$9(body)) return body.size != null ? body.size : null;
		else if (isBuffer$2(body)) return body.byteLength;
		return null;
	}
	function isDestroyed$1(stream$4) {
		return !stream$4 || !!(stream$4.destroyed || stream$4[kDestroyed$4]);
	}
	function isReadableAborted(stream$4) {
		const state = stream$4 && stream$4._readableState;
		return isDestroyed$1(stream$4) && state && !state.endEmitted;
	}
	function destroy$2(stream$4, err) {
		if (stream$4 == null || !isStream$3(stream$4) || isDestroyed$1(stream$4)) return;
		if (typeof stream$4.destroy === "function") {
			if (Object.getPrototypeOf(stream$4).constructor === IncomingMessage$1) stream$4.socket = null;
			stream$4.destroy(err);
		} else if (err) process.nextTick((stream$5, err$1) => {
			stream$5.emit("error", err$1);
		}, stream$4, err);
		if (stream$4.destroyed !== true) stream$4[kDestroyed$4] = true;
	}
	const KEEPALIVE_TIMEOUT_EXPR$1 = /timeout=(\d+)/;
	function parseKeepAliveTimeout$1(val) {
		const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR$1);
		return m ? parseInt(m[1], 10) * 1e3 : null;
	}
	/**
	* Retrieves a header name and returns its lowercase value.
	* @param {string | Buffer} value Header name
	* @returns {string}
	*/
	function headerNameToString$1(value) {
		return headerNameLowerCasedRecord$4[value] || value.toLowerCase();
	}
	function parseHeaders$3(headers, obj = {}) {
		if (!Array.isArray(headers)) return headers;
		for (let i$1 = 0; i$1 < headers.length; i$1 += 2) {
			const key = headers[i$1].toString().toLowerCase();
			let val = obj[key];
			if (!val) if (Array.isArray(headers[i$1 + 1])) obj[key] = headers[i$1 + 1].map((x) => x.toString("utf8"));
			else obj[key] = headers[i$1 + 1].toString("utf8");
			else {
				if (!Array.isArray(val)) {
					val = [val];
					obj[key] = val;
				}
				val.push(headers[i$1 + 1].toString("utf8"));
			}
		}
		if ("content-length" in obj && "content-disposition" in obj) obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
		return obj;
	}
	function parseRawHeaders$1(headers) {
		const ret = [];
		let hasContentLength = false;
		let contentDispositionIdx = -1;
		for (let n$1 = 0; n$1 < headers.length; n$1 += 2) {
			const key = headers[n$1 + 0].toString();
			const val = headers[n$1 + 1].toString("utf8");
			if (key.length === 14 && (key === "content-length" || key.toLowerCase() === "content-length")) {
				ret.push(key, val);
				hasContentLength = true;
			} else if (key.length === 19 && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) contentDispositionIdx = ret.push(key, val) - 1;
			else ret.push(key, val);
		}
		if (hasContentLength && contentDispositionIdx !== -1) ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
		return ret;
	}
	function isBuffer$2(buffer$1) {
		return buffer$1 instanceof Uint8Array || Buffer.isBuffer(buffer$1);
	}
	function validateHandler(handler$1, method, upgrade$2) {
		if (!handler$1 || typeof handler$1 !== "object") throw new InvalidArgumentError$53("handler must be an object");
		if (typeof handler$1.onConnect !== "function") throw new InvalidArgumentError$53("invalid onConnect method");
		if (typeof handler$1.onError !== "function") throw new InvalidArgumentError$53("invalid onError method");
		if (typeof handler$1.onBodySent !== "function" && handler$1.onBodySent !== void 0) throw new InvalidArgumentError$53("invalid onBodySent method");
		if (upgrade$2 || method === "CONNECT") {
			if (typeof handler$1.onUpgrade !== "function") throw new InvalidArgumentError$53("invalid onUpgrade method");
		} else {
			if (typeof handler$1.onHeaders !== "function") throw new InvalidArgumentError$53("invalid onHeaders method");
			if (typeof handler$1.onData !== "function") throw new InvalidArgumentError$53("invalid onData method");
			if (typeof handler$1.onComplete !== "function") throw new InvalidArgumentError$53("invalid onComplete method");
		}
	}
	function isDisturbed$6(body) {
		return !!(body && (stream$3.isDisturbed ? stream$3.isDisturbed(body) || body[kBodyUsed$4] : body[kBodyUsed$4] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));
	}
	function isErrored$4(body) {
		return !!(body && (stream$3.isErrored ? stream$3.isErrored(body) : /state: 'errored'/.test(nodeUtil$3.inspect(body))));
	}
	function isReadable$2(body) {
		return !!(body && (stream$3.isReadable ? stream$3.isReadable(body) : /state: 'readable'/.test(nodeUtil$3.inspect(body))));
	}
	function getSocketInfo$1(socket) {
		return {
			localAddress: socket.localAddress,
			localPort: socket.localPort,
			remoteAddress: socket.remoteAddress,
			remotePort: socket.remotePort,
			remoteFamily: socket.remoteFamily,
			timeout: socket.timeout,
			bytesWritten: socket.bytesWritten,
			bytesRead: socket.bytesRead
		};
	}
	async function* convertIterableToBuffer(iterable) {
		for await (const chunk of iterable) yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
	}
	let ReadableStream$6;
	function ReadableStreamFrom$7(iterable) {
		if (!ReadableStream$6) ReadableStream$6 = __require("stream/web").ReadableStream;
		if (ReadableStream$6.from) return ReadableStream$6.from(convertIterableToBuffer(iterable));
		let iterator$1;
		return new ReadableStream$6({
			async start() {
				iterator$1 = iterable[Symbol.asyncIterator]();
			},
			async pull(controller) {
				const { done, value } = await iterator$1.next();
				if (done) queueMicrotask(() => {
					controller.close();
				});
				else {
					const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
					controller.enqueue(new Uint8Array(buf));
				}
				return controller.desiredSize > 0;
			},
			async cancel(reason) {
				await iterator$1.return();
			}
		}, 0);
	}
	function isFormDataLike$2(object$1) {
		return object$1 && typeof object$1 === "object" && typeof object$1.append === "function" && typeof object$1.delete === "function" && typeof object$1.get === "function" && typeof object$1.getAll === "function" && typeof object$1.has === "function" && typeof object$1.set === "function" && object$1[Symbol.toStringTag] === "FormData";
	}
	function throwIfAborted$2(signal) {
		if (!signal) return;
		if (typeof signal.throwIfAborted === "function") signal.throwIfAborted();
		else if (signal.aborted) {
			const err = /* @__PURE__ */ new Error("The operation was aborted");
			err.name = "AbortError";
			throw err;
		}
	}
	function addAbortListener$6(signal, listener) {
		if ("addEventListener" in signal) {
			signal.addEventListener("abort", listener, { once: true });
			return () => signal.removeEventListener("abort", listener);
		}
		signal.addListener("abort", listener);
		return () => signal.removeListener("abort", listener);
	}
	const hasToWellFormed = !!String.prototype.toWellFormed;
	/**
	* @param {string} val
	*/
	function toUSVString$5(val) {
		if (hasToWellFormed) return `${val}`.toWellFormed();
		else if (nodeUtil$3.toUSVString) return nodeUtil$3.toUSVString(val);
		return `${val}`;
	}
	function parseRangeHeader$3(range) {
		if (range == null || range === "") return {
			start: 0,
			end: null,
			size: null
		};
		const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
		return m ? {
			start: parseInt(m[1]),
			end: m[2] ? parseInt(m[2]) : null,
			size: m[3] ? parseInt(m[3]) : null
		} : null;
	}
	const kEnumerableProperty$21 = Object.create(null);
	kEnumerableProperty$21.enumerable = true;
	module.exports = {
		kEnumerableProperty: kEnumerableProperty$21,
		nop: nop$1,
		isDisturbed: isDisturbed$6,
		isErrored: isErrored$4,
		isReadable: isReadable$2,
		toUSVString: toUSVString$5,
		isReadableAborted,
		isBlobLike: isBlobLike$9,
		parseOrigin: parseOrigin$3,
		parseURL: parseURL$1,
		getServerName: getServerName$2,
		isStream: isStream$3,
		isIterable: isIterable$2,
		isAsyncIterable: isAsyncIterable$1,
		isDestroyed: isDestroyed$1,
		headerNameToString: headerNameToString$1,
		parseRawHeaders: parseRawHeaders$1,
		parseHeaders: parseHeaders$3,
		parseKeepAliveTimeout: parseKeepAliveTimeout$1,
		destroy: destroy$2,
		bodyLength: bodyLength$1,
		deepClone: deepClone$1,
		ReadableStreamFrom: ReadableStreamFrom$7,
		isBuffer: isBuffer$2,
		validateHandler,
		getSocketInfo: getSocketInfo$1,
		isFormDataLike: isFormDataLike$2,
		buildURL: buildURL$2,
		throwIfAborted: throwIfAborted$2,
		addAbortListener: addAbortListener$6,
		parseRangeHeader: parseRangeHeader$3,
		nodeMajor: nodeMajor$2,
		nodeMinor: nodeMinor$2,
		nodeHasAutoSelectFamily: nodeMajor$2 > 18 || nodeMajor$2 === 18 && nodeMinor$2 >= 13,
		safeHTTPMethods: [
			"GET",
			"HEAD",
			"OPTIONS",
			"TRACE"
		]
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/timers.js
var require_timers$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/timers.js"(exports, module) {
	let fastNow$1 = Date.now();
	let fastNowTimeout$1;
	const fastTimers$1 = [];
	function onTimeout() {
		fastNow$1 = Date.now();
		let len = fastTimers$1.length;
		let idx = 0;
		while (idx < len) {
			const timer = fastTimers$1[idx];
			if (timer.state === 0) timer.state = fastNow$1 + timer.delay;
			else if (timer.state > 0 && fastNow$1 >= timer.state) {
				timer.state = -1;
				timer.callback(timer.opaque);
			}
			if (timer.state === -1) {
				timer.state = -2;
				if (idx !== len - 1) fastTimers$1[idx] = fastTimers$1.pop();
				else fastTimers$1.pop();
				len -= 1;
			} else idx += 1;
		}
		if (fastTimers$1.length > 0) refreshTimeout$1();
	}
	function refreshTimeout$1() {
		if (fastNowTimeout$1 && fastNowTimeout$1.refresh) fastNowTimeout$1.refresh();
		else {
			clearTimeout(fastNowTimeout$1);
			fastNowTimeout$1 = setTimeout(onTimeout, 1e3);
			if (fastNowTimeout$1.unref) fastNowTimeout$1.unref();
		}
	}
	var Timeout = class {
		constructor(callback, delay$3, opaque) {
			this.callback = callback;
			this.delay = delay$3;
			this.opaque = opaque;
			this.state = -2;
			this.refresh();
		}
		refresh() {
			if (this.state === -2) {
				fastTimers$1.push(this);
				if (!fastNowTimeout$1 || fastTimers$1.length === 1) refreshTimeout$1();
			}
			this.state = 0;
		}
		clear() {
			this.state = -1;
		}
	};
	module.exports = {
		setTimeout(callback, delay$3, opaque) {
			return delay$3 < 1e3 ? setTimeout(callback, delay$3, opaque) : new Timeout(callback, delay$3, opaque);
		},
		clearTimeout(timeout) {
			if (timeout instanceof Timeout) timeout.clear();
			else clearTimeout(timeout);
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/streamsearch/sbmh.js
var require_sbmh = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/streamsearch/sbmh.js"(exports, module) {
	/**
	* Copyright Brian White. All rights reserved.
	*
	* @see https://github.com/mscdex/streamsearch
	*
	* Permission is hereby granted, free of charge, to any person obtaining a copy
	* of this software and associated documentation files (the "Software"), to
	* deal in the Software without restriction, including without limitation the
	* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	* sell copies of the Software, and to permit persons to whom the Software is
	* furnished to do so, subject to the following conditions:
	*
	* The above copyright notice and this permission notice shall be included in
	* all copies or substantial portions of the Software.
	*
	* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	* IN THE SOFTWARE.
	*
	* Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation
	* by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool
	*/
	const EventEmitter$5 = __require("node:events").EventEmitter;
	const inherits$5 = __require("node:util").inherits;
	function SBMH(needle) {
		if (typeof needle === "string") needle = Buffer.from(needle);
		if (!Buffer.isBuffer(needle)) throw new TypeError("The needle has to be a String or a Buffer.");
		const needleLength = needle.length;
		if (needleLength === 0) throw new Error("The needle cannot be an empty String/Buffer.");
		if (needleLength > 256) throw new Error("The needle cannot have a length bigger than 256.");
		this.maxMatches = Infinity;
		this.matches = 0;
		this._occ = new Array(256).fill(needleLength);
		this._lookbehind_size = 0;
		this._needle = needle;
		this._bufpos = 0;
		this._lookbehind = Buffer.alloc(needleLength);
		for (var i$1 = 0; i$1 < needleLength - 1; ++i$1) this._occ[needle[i$1]] = needleLength - 1 - i$1;
	}
	inherits$5(SBMH, EventEmitter$5);
	SBMH.prototype.reset = function() {
		this._lookbehind_size = 0;
		this.matches = 0;
		this._bufpos = 0;
	};
	SBMH.prototype.push = function(chunk, pos) {
		if (!Buffer.isBuffer(chunk)) chunk = Buffer.from(chunk, "binary");
		const chlen = chunk.length;
		this._bufpos = pos || 0;
		let r;
		while (r !== chlen && this.matches < this.maxMatches) r = this._sbmh_feed(chunk);
		return r;
	};
	SBMH.prototype._sbmh_feed = function(data$1) {
		const len = data$1.length;
		const needle = this._needle;
		const needleLength = needle.length;
		const lastNeedleChar = needle[needleLength - 1];
		let pos = -this._lookbehind_size;
		let ch;
		if (pos < 0) {
			while (pos < 0 && pos <= len - needleLength) {
				ch = this._sbmh_lookup_char(data$1, pos + needleLength - 1);
				if (ch === lastNeedleChar && this._sbmh_memcmp(data$1, pos, needleLength - 1)) {
					this._lookbehind_size = 0;
					++this.matches;
					this.emit("info", true);
					return this._bufpos = pos + needleLength;
				}
				pos += this._occ[ch];
			}
			if (pos < 0) while (pos < 0 && !this._sbmh_memcmp(data$1, pos, len - pos)) ++pos;
			if (pos >= 0) {
				this.emit("info", false, this._lookbehind, 0, this._lookbehind_size);
				this._lookbehind_size = 0;
			} else {
				const bytesToCutOff = this._lookbehind_size + pos;
				if (bytesToCutOff > 0) this.emit("info", false, this._lookbehind, 0, bytesToCutOff);
				this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff, this._lookbehind_size - bytesToCutOff);
				this._lookbehind_size -= bytesToCutOff;
				data$1.copy(this._lookbehind, this._lookbehind_size);
				this._lookbehind_size += len;
				this._bufpos = len;
				return len;
			}
		}
		pos += (pos >= 0) * this._bufpos;
		if (data$1.indexOf(needle, pos) !== -1) {
			pos = data$1.indexOf(needle, pos);
			++this.matches;
			if (pos > 0) this.emit("info", true, data$1, this._bufpos, pos);
			else this.emit("info", true);
			return this._bufpos = pos + needleLength;
		} else pos = len - needleLength;
		while (pos < len && (data$1[pos] !== needle[0] || Buffer.compare(data$1.subarray(pos, pos + len - pos), needle.subarray(0, len - pos)) !== 0)) ++pos;
		if (pos < len) {
			data$1.copy(this._lookbehind, 0, pos, pos + (len - pos));
			this._lookbehind_size = len - pos;
		}
		if (pos > 0) this.emit("info", false, data$1, this._bufpos, pos < len ? pos : len);
		this._bufpos = len;
		return len;
	};
	SBMH.prototype._sbmh_lookup_char = function(data$1, pos) {
		return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data$1[pos];
	};
	SBMH.prototype._sbmh_memcmp = function(data$1, pos, len) {
		for (var i$1 = 0; i$1 < len; ++i$1) if (this._sbmh_lookup_char(data$1, pos + i$1) !== this._needle[i$1]) return false;
		return true;
	};
	module.exports = SBMH;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js
var require_PartStream = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js"(exports, module) {
	const inherits$4 = __require("node:util").inherits;
	const ReadableStream$5 = __require("node:stream").Readable;
	function PartStream$1(opts) {
		ReadableStream$5.call(this, opts);
	}
	inherits$4(PartStream$1, ReadableStream$5);
	PartStream$1.prototype._read = function(n$1) {};
	module.exports = PartStream$1;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/getLimit.js
var require_getLimit = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/getLimit.js"(exports, module) {
	module.exports = function getLimit$3(limits, name$2, defaultLimit) {
		if (!limits || limits[name$2] === void 0 || limits[name$2] === null) return defaultLimit;
		if (typeof limits[name$2] !== "number" || isNaN(limits[name$2])) throw new TypeError("Limit " + name$2 + " is not a valid number");
		return limits[name$2];
	};
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js
var require_HeaderParser = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js"(exports, module) {
	const EventEmitter$4 = __require("node:events").EventEmitter;
	const inherits$3 = __require("node:util").inherits;
	const getLimit$2 = require_getLimit();
	const StreamSearch$1 = require_sbmh();
	const B_DCRLF = Buffer.from("\r\n\r\n");
	const RE_CRLF = /\r\n/g;
	const RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
	function HeaderParser$1(cfg) {
		EventEmitter$4.call(this);
		cfg = cfg || {};
		const self$1 = this;
		this.nread = 0;
		this.maxed = false;
		this.npairs = 0;
		this.maxHeaderPairs = getLimit$2(cfg, "maxHeaderPairs", 2e3);
		this.maxHeaderSize = getLimit$2(cfg, "maxHeaderSize", 80 * 1024);
		this.buffer = "";
		this.header = {};
		this.finished = false;
		this.ss = new StreamSearch$1(B_DCRLF);
		this.ss.on("info", function(isMatch, data$1, start, end) {
			if (data$1 && !self$1.maxed) {
				if (self$1.nread + end - start >= self$1.maxHeaderSize) {
					end = self$1.maxHeaderSize - self$1.nread + start;
					self$1.nread = self$1.maxHeaderSize;
					self$1.maxed = true;
				} else self$1.nread += end - start;
				self$1.buffer += data$1.toString("binary", start, end);
			}
			if (isMatch) self$1._finish();
		});
	}
	inherits$3(HeaderParser$1, EventEmitter$4);
	HeaderParser$1.prototype.push = function(data$1) {
		const r = this.ss.push(data$1);
		if (this.finished) return r;
	};
	HeaderParser$1.prototype.reset = function() {
		this.finished = false;
		this.buffer = "";
		this.header = {};
		this.ss.reset();
	};
	HeaderParser$1.prototype._finish = function() {
		if (this.buffer) this._parseHeader();
		this.ss.matches = this.ss.maxMatches;
		const header = this.header;
		this.header = {};
		this.buffer = "";
		this.finished = true;
		this.nread = this.npairs = 0;
		this.maxed = false;
		this.emit("header", header);
	};
	HeaderParser$1.prototype._parseHeader = function() {
		if (this.npairs === this.maxHeaderPairs) return;
		const lines = this.buffer.split(RE_CRLF);
		const len = lines.length;
		let m, h$1;
		for (var i$1 = 0; i$1 < len; ++i$1) {
			if (lines[i$1].length === 0) continue;
			if (lines[i$1][0] === "	" || lines[i$1][0] === " ") {
				if (h$1) {
					this.header[h$1][this.header[h$1].length - 1] += lines[i$1];
					continue;
				}
			}
			const posColon = lines[i$1].indexOf(":");
			if (posColon === -1 || posColon === 0) return;
			m = RE_HDR.exec(lines[i$1]);
			h$1 = m[1].toLowerCase();
			this.header[h$1] = this.header[h$1] || [];
			this.header[h$1].push(m[2] || "");
			if (++this.npairs === this.maxHeaderPairs) break;
		}
	};
	module.exports = HeaderParser$1;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js
var require_Dicer = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js"(exports, module) {
	const WritableStream$2 = __require("node:stream").Writable;
	const inherits$2 = __require("node:util").inherits;
	const StreamSearch = require_sbmh();
	const PartStream = require_PartStream();
	const HeaderParser = require_HeaderParser();
	const DASH = 45;
	const B_ONEDASH = Buffer.from("-");
	const B_CRLF = Buffer.from("\r\n");
	const EMPTY_FN = function() {};
	function Dicer$2(cfg) {
		if (!(this instanceof Dicer$2)) return new Dicer$2(cfg);
		WritableStream$2.call(this, cfg);
		if (!cfg || !cfg.headerFirst && typeof cfg.boundary !== "string") throw new TypeError("Boundary required");
		if (typeof cfg.boundary === "string") this.setBoundary(cfg.boundary);
		else this._bparser = void 0;
		this._headerFirst = cfg.headerFirst;
		this._dashes = 0;
		this._parts = 0;
		this._finished = false;
		this._realFinish = false;
		this._isPreamble = true;
		this._justMatched = false;
		this._firstWrite = true;
		this._inHeader = true;
		this._part = void 0;
		this._cb = void 0;
		this._ignoreData = false;
		this._partOpts = { highWaterMark: cfg.partHwm };
		this._pause = false;
		const self$1 = this;
		this._hparser = new HeaderParser(cfg);
		this._hparser.on("header", function(header) {
			self$1._inHeader = false;
			self$1._part.emit("header", header);
		});
	}
	inherits$2(Dicer$2, WritableStream$2);
	Dicer$2.prototype.emit = function(ev) {
		if (ev === "finish" && !this._realFinish) {
			if (!this._finished) {
				const self$1 = this;
				process.nextTick(function() {
					self$1.emit("error", /* @__PURE__ */ new Error("Unexpected end of multipart data"));
					if (self$1._part && !self$1._ignoreData) {
						const type = self$1._isPreamble ? "Preamble" : "Part";
						self$1._part.emit("error", /* @__PURE__ */ new Error(type + " terminated early due to unexpected end of multipart data"));
						self$1._part.push(null);
						process.nextTick(function() {
							self$1._realFinish = true;
							self$1.emit("finish");
							self$1._realFinish = false;
						});
						return;
					}
					self$1._realFinish = true;
					self$1.emit("finish");
					self$1._realFinish = false;
				});
			}
		} else WritableStream$2.prototype.emit.apply(this, arguments);
	};
	Dicer$2.prototype._write = function(data$1, encoding, cb) {
		if (!this._hparser && !this._bparser) return cb();
		if (this._headerFirst && this._isPreamble) {
			if (!this._part) {
				this._part = new PartStream(this._partOpts);
				if (this.listenerCount("preamble") !== 0) this.emit("preamble", this._part);
				else this._ignore();
			}
			const r = this._hparser.push(data$1);
			if (!this._inHeader && r !== void 0 && r < data$1.length) data$1 = data$1.slice(r);
			else return cb();
		}
		if (this._firstWrite) {
			this._bparser.push(B_CRLF);
			this._firstWrite = false;
		}
		this._bparser.push(data$1);
		if (this._pause) this._cb = cb;
		else cb();
	};
	Dicer$2.prototype.reset = function() {
		this._part = void 0;
		this._bparser = void 0;
		this._hparser = void 0;
	};
	Dicer$2.prototype.setBoundary = function(boundary) {
		const self$1 = this;
		this._bparser = new StreamSearch("\r\n--" + boundary);
		this._bparser.on("info", function(isMatch, data$1, start, end) {
			self$1._oninfo(isMatch, data$1, start, end);
		});
	};
	Dicer$2.prototype._ignore = function() {
		if (this._part && !this._ignoreData) {
			this._ignoreData = true;
			this._part.on("error", EMPTY_FN);
			this._part.resume();
		}
	};
	Dicer$2.prototype._oninfo = function(isMatch, data$1, start, end) {
		let buf;
		const self$1 = this;
		let i$1 = 0;
		let r;
		let shouldWriteMore = true;
		if (!this._part && this._justMatched && data$1) {
			while (this._dashes < 2 && start + i$1 < end) if (data$1[start + i$1] === DASH) {
				++i$1;
				++this._dashes;
			} else {
				if (this._dashes) buf = B_ONEDASH;
				this._dashes = 0;
				break;
			}
			if (this._dashes === 2) {
				if (start + i$1 < end && this.listenerCount("trailer") !== 0) this.emit("trailer", data$1.slice(start + i$1, end));
				this.reset();
				this._finished = true;
				if (self$1._parts === 0) {
					self$1._realFinish = true;
					self$1.emit("finish");
					self$1._realFinish = false;
				}
			}
			if (this._dashes) return;
		}
		if (this._justMatched) this._justMatched = false;
		if (!this._part) {
			this._part = new PartStream(this._partOpts);
			this._part._read = function(n$1) {
				self$1._unpause();
			};
			if (this._isPreamble && this.listenerCount("preamble") !== 0) this.emit("preamble", this._part);
			else if (this._isPreamble !== true && this.listenerCount("part") !== 0) this.emit("part", this._part);
			else this._ignore();
			if (!this._isPreamble) this._inHeader = true;
		}
		if (data$1 && start < end && !this._ignoreData) {
			if (this._isPreamble || !this._inHeader) {
				if (buf) shouldWriteMore = this._part.push(buf);
				shouldWriteMore = this._part.push(data$1.slice(start, end));
				if (!shouldWriteMore) this._pause = true;
			} else if (!this._isPreamble && this._inHeader) {
				if (buf) this._hparser.push(buf);
				r = this._hparser.push(data$1.slice(start, end));
				if (!this._inHeader && r !== void 0 && r < end) this._oninfo(false, data$1, start + r, end);
			}
		}
		if (isMatch) {
			this._hparser.reset();
			if (this._isPreamble) this._isPreamble = false;
			else if (start !== end) {
				++this._parts;
				this._part.on("end", function() {
					if (--self$1._parts === 0) if (self$1._finished) {
						self$1._realFinish = true;
						self$1.emit("finish");
						self$1._realFinish = false;
					} else self$1._unpause();
				});
			}
			this._part.push(null);
			this._part = void 0;
			this._ignoreData = false;
			this._justMatched = true;
			this._dashes = 0;
		}
	};
	Dicer$2.prototype._unpause = function() {
		if (!this._pause) return;
		this._pause = false;
		if (this._cb) {
			const cb = this._cb;
			this._cb = void 0;
			cb();
		}
	};
	module.exports = Dicer$2;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/decodeText.js
var require_decodeText = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/decodeText.js"(exports, module) {
	const utf8Decoder = new TextDecoder("utf-8");
	const textDecoders = new Map([["utf-8", utf8Decoder], ["utf8", utf8Decoder]]);
	function getDecoder(charset) {
		let lc;
		while (true) switch (charset) {
			case "utf-8":
			case "utf8": return decoders.utf8;
			case "latin1":
			case "ascii":
			case "us-ascii":
			case "iso-8859-1":
			case "iso8859-1":
			case "iso88591":
			case "iso_8859-1":
			case "windows-1252":
			case "iso_8859-1:1987":
			case "cp1252":
			case "x-cp1252": return decoders.latin1;
			case "utf16le":
			case "utf-16le":
			case "ucs2":
			case "ucs-2": return decoders.utf16le;
			case "base64": return decoders.base64;
			default:
				if (lc === void 0) {
					lc = true;
					charset = charset.toLowerCase();
					continue;
				}
				return decoders.other.bind(charset);
		}
	}
	const decoders = {
		utf8: (data$1, sourceEncoding) => {
			if (data$1.length === 0) return "";
			if (typeof data$1 === "string") data$1 = Buffer.from(data$1, sourceEncoding);
			return data$1.utf8Slice(0, data$1.length);
		},
		latin1: (data$1, sourceEncoding) => {
			if (data$1.length === 0) return "";
			if (typeof data$1 === "string") return data$1;
			return data$1.latin1Slice(0, data$1.length);
		},
		utf16le: (data$1, sourceEncoding) => {
			if (data$1.length === 0) return "";
			if (typeof data$1 === "string") data$1 = Buffer.from(data$1, sourceEncoding);
			return data$1.ucs2Slice(0, data$1.length);
		},
		base64: (data$1, sourceEncoding) => {
			if (data$1.length === 0) return "";
			if (typeof data$1 === "string") data$1 = Buffer.from(data$1, sourceEncoding);
			return data$1.base64Slice(0, data$1.length);
		},
		other: (data$1, sourceEncoding) => {
			if (data$1.length === 0) return "";
			if (typeof data$1 === "string") data$1 = Buffer.from(data$1, sourceEncoding);
			if (textDecoders.has(exports.toString())) try {
				return textDecoders.get(exports).decode(data$1);
			} catch {}
			return typeof data$1 === "string" ? data$1 : data$1.toString();
		}
	};
	function decodeText$3(text$1, sourceEncoding, destEncoding) {
		if (text$1) return getDecoder(destEncoding)(text$1, sourceEncoding);
		return text$1;
	}
	module.exports = decodeText$3;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/parseParams.js
var require_parseParams = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/parseParams.js"(exports, module) {
	const decodeText$2 = require_decodeText();
	const RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g;
	const EncodedLookup = {
		"%00": "\0",
		"%01": "",
		"%02": "",
		"%03": "",
		"%04": "",
		"%05": "",
		"%06": "",
		"%07": "\x07",
		"%08": "\b",
		"%09": "	",
		"%0a": "\n",
		"%0A": "\n",
		"%0b": "\v",
		"%0B": "\v",
		"%0c": "\f",
		"%0C": "\f",
		"%0d": "\r",
		"%0D": "\r",
		"%0e": "",
		"%0E": "",
		"%0f": "",
		"%0F": "",
		"%10": "",
		"%11": "",
		"%12": "",
		"%13": "",
		"%14": "",
		"%15": "",
		"%16": "",
		"%17": "",
		"%18": "",
		"%19": "",
		"%1a": "",
		"%1A": "",
		"%1b": "\x1B",
		"%1B": "\x1B",
		"%1c": "",
		"%1C": "",
		"%1d": "",
		"%1D": "",
		"%1e": "",
		"%1E": "",
		"%1f": "",
		"%1F": "",
		"%20": " ",
		"%21": "!",
		"%22": "\"",
		"%23": "#",
		"%24": "$",
		"%25": "%",
		"%26": "&",
		"%27": "'",
		"%28": "(",
		"%29": ")",
		"%2a": "*",
		"%2A": "*",
		"%2b": "+",
		"%2B": "+",
		"%2c": ",",
		"%2C": ",",
		"%2d": "-",
		"%2D": "-",
		"%2e": ".",
		"%2E": ".",
		"%2f": "/",
		"%2F": "/",
		"%30": "0",
		"%31": "1",
		"%32": "2",
		"%33": "3",
		"%34": "4",
		"%35": "5",
		"%36": "6",
		"%37": "7",
		"%38": "8",
		"%39": "9",
		"%3a": ":",
		"%3A": ":",
		"%3b": ";",
		"%3B": ";",
		"%3c": "<",
		"%3C": "<",
		"%3d": "=",
		"%3D": "=",
		"%3e": ">",
		"%3E": ">",
		"%3f": "?",
		"%3F": "?",
		"%40": "@",
		"%41": "A",
		"%42": "B",
		"%43": "C",
		"%44": "D",
		"%45": "E",
		"%46": "F",
		"%47": "G",
		"%48": "H",
		"%49": "I",
		"%4a": "J",
		"%4A": "J",
		"%4b": "K",
		"%4B": "K",
		"%4c": "L",
		"%4C": "L",
		"%4d": "M",
		"%4D": "M",
		"%4e": "N",
		"%4E": "N",
		"%4f": "O",
		"%4F": "O",
		"%50": "P",
		"%51": "Q",
		"%52": "R",
		"%53": "S",
		"%54": "T",
		"%55": "U",
		"%56": "V",
		"%57": "W",
		"%58": "X",
		"%59": "Y",
		"%5a": "Z",
		"%5A": "Z",
		"%5b": "[",
		"%5B": "[",
		"%5c": "\\",
		"%5C": "\\",
		"%5d": "]",
		"%5D": "]",
		"%5e": "^",
		"%5E": "^",
		"%5f": "_",
		"%5F": "_",
		"%60": "`",
		"%61": "a",
		"%62": "b",
		"%63": "c",
		"%64": "d",
		"%65": "e",
		"%66": "f",
		"%67": "g",
		"%68": "h",
		"%69": "i",
		"%6a": "j",
		"%6A": "j",
		"%6b": "k",
		"%6B": "k",
		"%6c": "l",
		"%6C": "l",
		"%6d": "m",
		"%6D": "m",
		"%6e": "n",
		"%6E": "n",
		"%6f": "o",
		"%6F": "o",
		"%70": "p",
		"%71": "q",
		"%72": "r",
		"%73": "s",
		"%74": "t",
		"%75": "u",
		"%76": "v",
		"%77": "w",
		"%78": "x",
		"%79": "y",
		"%7a": "z",
		"%7A": "z",
		"%7b": "{",
		"%7B": "{",
		"%7c": "|",
		"%7C": "|",
		"%7d": "}",
		"%7D": "}",
		"%7e": "~",
		"%7E": "~",
		"%7f": "",
		"%7F": "",
		"%80": "",
		"%81": "",
		"%82": "",
		"%83": "",
		"%84": "",
		"%85": "",
		"%86": "",
		"%87": "",
		"%88": "",
		"%89": "",
		"%8a": "",
		"%8A": "",
		"%8b": "",
		"%8B": "",
		"%8c": "",
		"%8C": "",
		"%8d": "",
		"%8D": "",
		"%8e": "",
		"%8E": "",
		"%8f": "",
		"%8F": "",
		"%90": "",
		"%91": "",
		"%92": "",
		"%93": "",
		"%94": "",
		"%95": "",
		"%96": "",
		"%97": "",
		"%98": "",
		"%99": "",
		"%9a": "",
		"%9A": "",
		"%9b": "",
		"%9B": "",
		"%9c": "",
		"%9C": "",
		"%9d": "",
		"%9D": "",
		"%9e": "",
		"%9E": "",
		"%9f": "",
		"%9F": "",
		"%a0": "\xA0",
		"%A0": "\xA0",
		"%a1": "¡",
		"%A1": "¡",
		"%a2": "¢",
		"%A2": "¢",
		"%a3": "£",
		"%A3": "£",
		"%a4": "¤",
		"%A4": "¤",
		"%a5": "¥",
		"%A5": "¥",
		"%a6": "¦",
		"%A6": "¦",
		"%a7": "§",
		"%A7": "§",
		"%a8": "¨",
		"%A8": "¨",
		"%a9": "©",
		"%A9": "©",
		"%aa": "ª",
		"%Aa": "ª",
		"%aA": "ª",
		"%AA": "ª",
		"%ab": "«",
		"%Ab": "«",
		"%aB": "«",
		"%AB": "«",
		"%ac": "¬",
		"%Ac": "¬",
		"%aC": "¬",
		"%AC": "¬",
		"%ad": "­",
		"%Ad": "­",
		"%aD": "­",
		"%AD": "­",
		"%ae": "®",
		"%Ae": "®",
		"%aE": "®",
		"%AE": "®",
		"%af": "¯",
		"%Af": "¯",
		"%aF": "¯",
		"%AF": "¯",
		"%b0": "°",
		"%B0": "°",
		"%b1": "±",
		"%B1": "±",
		"%b2": "²",
		"%B2": "²",
		"%b3": "³",
		"%B3": "³",
		"%b4": "´",
		"%B4": "´",
		"%b5": "µ",
		"%B5": "µ",
		"%b6": "¶",
		"%B6": "¶",
		"%b7": "·",
		"%B7": "·",
		"%b8": "¸",
		"%B8": "¸",
		"%b9": "¹",
		"%B9": "¹",
		"%ba": "º",
		"%Ba": "º",
		"%bA": "º",
		"%BA": "º",
		"%bb": "»",
		"%Bb": "»",
		"%bB": "»",
		"%BB": "»",
		"%bc": "¼",
		"%Bc": "¼",
		"%bC": "¼",
		"%BC": "¼",
		"%bd": "½",
		"%Bd": "½",
		"%bD": "½",
		"%BD": "½",
		"%be": "¾",
		"%Be": "¾",
		"%bE": "¾",
		"%BE": "¾",
		"%bf": "¿",
		"%Bf": "¿",
		"%bF": "¿",
		"%BF": "¿",
		"%c0": "À",
		"%C0": "À",
		"%c1": "Á",
		"%C1": "Á",
		"%c2": "Â",
		"%C2": "Â",
		"%c3": "Ã",
		"%C3": "Ã",
		"%c4": "Ä",
		"%C4": "Ä",
		"%c5": "Å",
		"%C5": "Å",
		"%c6": "Æ",
		"%C6": "Æ",
		"%c7": "Ç",
		"%C7": "Ç",
		"%c8": "È",
		"%C8": "È",
		"%c9": "É",
		"%C9": "É",
		"%ca": "Ê",
		"%Ca": "Ê",
		"%cA": "Ê",
		"%CA": "Ê",
		"%cb": "Ë",
		"%Cb": "Ë",
		"%cB": "Ë",
		"%CB": "Ë",
		"%cc": "Ì",
		"%Cc": "Ì",
		"%cC": "Ì",
		"%CC": "Ì",
		"%cd": "Í",
		"%Cd": "Í",
		"%cD": "Í",
		"%CD": "Í",
		"%ce": "Î",
		"%Ce": "Î",
		"%cE": "Î",
		"%CE": "Î",
		"%cf": "Ï",
		"%Cf": "Ï",
		"%cF": "Ï",
		"%CF": "Ï",
		"%d0": "Ð",
		"%D0": "Ð",
		"%d1": "Ñ",
		"%D1": "Ñ",
		"%d2": "Ò",
		"%D2": "Ò",
		"%d3": "Ó",
		"%D3": "Ó",
		"%d4": "Ô",
		"%D4": "Ô",
		"%d5": "Õ",
		"%D5": "Õ",
		"%d6": "Ö",
		"%D6": "Ö",
		"%d7": "×",
		"%D7": "×",
		"%d8": "Ø",
		"%D8": "Ø",
		"%d9": "Ù",
		"%D9": "Ù",
		"%da": "Ú",
		"%Da": "Ú",
		"%dA": "Ú",
		"%DA": "Ú",
		"%db": "Û",
		"%Db": "Û",
		"%dB": "Û",
		"%DB": "Û",
		"%dc": "Ü",
		"%Dc": "Ü",
		"%dC": "Ü",
		"%DC": "Ü",
		"%dd": "Ý",
		"%Dd": "Ý",
		"%dD": "Ý",
		"%DD": "Ý",
		"%de": "Þ",
		"%De": "Þ",
		"%dE": "Þ",
		"%DE": "Þ",
		"%df": "ß",
		"%Df": "ß",
		"%dF": "ß",
		"%DF": "ß",
		"%e0": "à",
		"%E0": "à",
		"%e1": "á",
		"%E1": "á",
		"%e2": "â",
		"%E2": "â",
		"%e3": "ã",
		"%E3": "ã",
		"%e4": "ä",
		"%E4": "ä",
		"%e5": "å",
		"%E5": "å",
		"%e6": "æ",
		"%E6": "æ",
		"%e7": "ç",
		"%E7": "ç",
		"%e8": "è",
		"%E8": "è",
		"%e9": "é",
		"%E9": "é",
		"%ea": "ê",
		"%Ea": "ê",
		"%eA": "ê",
		"%EA": "ê",
		"%eb": "ë",
		"%Eb": "ë",
		"%eB": "ë",
		"%EB": "ë",
		"%ec": "ì",
		"%Ec": "ì",
		"%eC": "ì",
		"%EC": "ì",
		"%ed": "í",
		"%Ed": "í",
		"%eD": "í",
		"%ED": "í",
		"%ee": "î",
		"%Ee": "î",
		"%eE": "î",
		"%EE": "î",
		"%ef": "ï",
		"%Ef": "ï",
		"%eF": "ï",
		"%EF": "ï",
		"%f0": "ð",
		"%F0": "ð",
		"%f1": "ñ",
		"%F1": "ñ",
		"%f2": "ò",
		"%F2": "ò",
		"%f3": "ó",
		"%F3": "ó",
		"%f4": "ô",
		"%F4": "ô",
		"%f5": "õ",
		"%F5": "õ",
		"%f6": "ö",
		"%F6": "ö",
		"%f7": "÷",
		"%F7": "÷",
		"%f8": "ø",
		"%F8": "ø",
		"%f9": "ù",
		"%F9": "ù",
		"%fa": "ú",
		"%Fa": "ú",
		"%fA": "ú",
		"%FA": "ú",
		"%fb": "û",
		"%Fb": "û",
		"%fB": "û",
		"%FB": "û",
		"%fc": "ü",
		"%Fc": "ü",
		"%fC": "ü",
		"%FC": "ü",
		"%fd": "ý",
		"%Fd": "ý",
		"%fD": "ý",
		"%FD": "ý",
		"%fe": "þ",
		"%Fe": "þ",
		"%fE": "þ",
		"%FE": "þ",
		"%ff": "ÿ",
		"%Ff": "ÿ",
		"%fF": "ÿ",
		"%FF": "ÿ"
	};
	function encodedReplacer(match$1) {
		return EncodedLookup[match$1];
	}
	const STATE_KEY = 0;
	const STATE_VALUE = 1;
	const STATE_CHARSET = 2;
	const STATE_LANG = 3;
	function parseParams$2(str) {
		const res = [];
		let state = STATE_KEY;
		let charset = "";
		let inquote = false;
		let escaping = false;
		let p = 0;
		let tmp = "";
		const len = str.length;
		for (var i$1 = 0; i$1 < len; ++i$1) {
			const char = str[i$1];
			if (char === "\\" && inquote) if (escaping) escaping = false;
			else {
				escaping = true;
				continue;
			}
			else if (char === "\"") if (!escaping) {
				if (inquote) {
					inquote = false;
					state = STATE_KEY;
				} else inquote = true;
				continue;
			} else escaping = false;
			else {
				if (escaping && inquote) tmp += "\\";
				escaping = false;
				if ((state === STATE_CHARSET || state === STATE_LANG) && char === "'") {
					if (state === STATE_CHARSET) {
						state = STATE_LANG;
						charset = tmp.substring(1);
					} else state = STATE_VALUE;
					tmp = "";
					continue;
				} else if (state === STATE_KEY && (char === "*" || char === "=") && res.length) {
					state = char === "*" ? STATE_CHARSET : STATE_VALUE;
					res[p] = [tmp, void 0];
					tmp = "";
					continue;
				} else if (!inquote && char === ";") {
					state = STATE_KEY;
					if (charset) {
						if (tmp.length) tmp = decodeText$2(tmp.replace(RE_ENCODED, encodedReplacer), "binary", charset);
						charset = "";
					} else if (tmp.length) tmp = decodeText$2(tmp, "binary", "utf8");
					if (res[p] === void 0) res[p] = tmp;
					else res[p][1] = tmp;
					tmp = "";
					++p;
					continue;
				} else if (!inquote && (char === " " || char === "	")) continue;
			}
			tmp += char;
		}
		if (charset && tmp.length) tmp = decodeText$2(tmp.replace(RE_ENCODED, encodedReplacer), "binary", charset);
		else if (tmp) tmp = decodeText$2(tmp, "binary", "utf8");
		if (res[p] === void 0) {
			if (tmp) res[p] = tmp;
		} else res[p][1] = tmp;
		return res;
	}
	module.exports = parseParams$2;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/basename.js
var require_basename = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/basename.js"(exports, module) {
	module.exports = function basename$1(path$9) {
		if (typeof path$9 !== "string") return "";
		for (var i$1 = path$9.length - 1; i$1 >= 0; --i$1) switch (path$9.charCodeAt(i$1)) {
			case 47:
			case 92:
				path$9 = path$9.slice(i$1 + 1);
				return path$9 === ".." || path$9 === "." ? "" : path$9;
		}
		return path$9 === ".." || path$9 === "." ? "" : path$9;
	};
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/multipart.js
var require_multipart = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/multipart.js"(exports, module) {
	const { Readable: Readable$10 } = __require("node:stream");
	const { inherits: inherits$1 } = __require("node:util");
	const Dicer$1 = require_Dicer();
	const parseParams$1 = require_parseParams();
	const decodeText$1 = require_decodeText();
	const basename = require_basename();
	const getLimit$1 = require_getLimit();
	const RE_BOUNDARY = /^boundary$/i;
	const RE_FIELD = /^form-data$/i;
	const RE_CHARSET$1 = /^charset$/i;
	const RE_FILENAME = /^filename$/i;
	const RE_NAME = /^name$/i;
	Multipart.detect = /^multipart\/form-data/i;
	function Multipart(boy, cfg) {
		let i$1;
		let len;
		const self$1 = this;
		let boundary;
		const limits = cfg.limits;
		const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => contentType === "application/octet-stream" || fileName !== void 0);
		const parsedConType = cfg.parsedConType || [];
		const defCharset = cfg.defCharset || "utf8";
		const preservePath = cfg.preservePath;
		const fileOpts = { highWaterMark: cfg.fileHwm };
		for (i$1 = 0, len = parsedConType.length; i$1 < len; ++i$1) if (Array.isArray(parsedConType[i$1]) && RE_BOUNDARY.test(parsedConType[i$1][0])) {
			boundary = parsedConType[i$1][1];
			break;
		}
		function checkFinished() {
			if (nends === 0 && finished$4 && !boy._done) {
				finished$4 = false;
				self$1.end();
			}
		}
		if (typeof boundary !== "string") throw new Error("Multipart: Boundary not found");
		const fieldSizeLimit = getLimit$1(limits, "fieldSize", 1 * 1024 * 1024);
		const fileSizeLimit = getLimit$1(limits, "fileSize", Infinity);
		const filesLimit = getLimit$1(limits, "files", Infinity);
		const fieldsLimit = getLimit$1(limits, "fields", Infinity);
		const partsLimit = getLimit$1(limits, "parts", Infinity);
		const headerPairsLimit = getLimit$1(limits, "headerPairs", 2e3);
		const headerSizeLimit = getLimit$1(limits, "headerSize", 80 * 1024);
		let nfiles = 0;
		let nfields = 0;
		let nends = 0;
		let curFile;
		let curField;
		let finished$4 = false;
		this._needDrain = false;
		this._pause = false;
		this._cb = void 0;
		this._nparts = 0;
		this._boy = boy;
		const parserCfg = {
			boundary,
			maxHeaderPairs: headerPairsLimit,
			maxHeaderSize: headerSizeLimit,
			partHwm: fileOpts.highWaterMark,
			highWaterMark: cfg.highWaterMark
		};
		this.parser = new Dicer$1(parserCfg);
		this.parser.on("drain", function() {
			self$1._needDrain = false;
			if (self$1._cb && !self$1._pause) {
				const cb = self$1._cb;
				self$1._cb = void 0;
				cb();
			}
		}).on("part", function onPart(part) {
			if (++self$1._nparts > partsLimit) {
				self$1.parser.removeListener("part", onPart);
				self$1.parser.on("part", skipPart);
				boy.hitPartsLimit = true;
				boy.emit("partsLimit");
				return skipPart(part);
			}
			if (curField) {
				const field = curField;
				field.emit("end");
				field.removeAllListeners("end");
			}
			part.on("header", function(header) {
				let contype;
				let fieldname;
				let parsed;
				let charset;
				let encoding;
				let filename;
				let nsize = 0;
				if (header["content-type"]) {
					parsed = parseParams$1(header["content-type"][0]);
					if (parsed[0]) {
						contype = parsed[0].toLowerCase();
						for (i$1 = 0, len = parsed.length; i$1 < len; ++i$1) if (RE_CHARSET$1.test(parsed[i$1][0])) {
							charset = parsed[i$1][1].toLowerCase();
							break;
						}
					}
				}
				if (contype === void 0) contype = "text/plain";
				if (charset === void 0) charset = defCharset;
				if (header["content-disposition"]) {
					parsed = parseParams$1(header["content-disposition"][0]);
					if (!RE_FIELD.test(parsed[0])) return skipPart(part);
					for (i$1 = 0, len = parsed.length; i$1 < len; ++i$1) if (RE_NAME.test(parsed[i$1][0])) fieldname = parsed[i$1][1];
					else if (RE_FILENAME.test(parsed[i$1][0])) {
						filename = parsed[i$1][1];
						if (!preservePath) filename = basename(filename);
					}
				} else return skipPart(part);
				if (header["content-transfer-encoding"]) encoding = header["content-transfer-encoding"][0].toLowerCase();
				else encoding = "7bit";
				let onData, onEnd;
				if (isPartAFile(fieldname, contype, filename)) {
					if (nfiles === filesLimit) {
						if (!boy.hitFilesLimit) {
							boy.hitFilesLimit = true;
							boy.emit("filesLimit");
						}
						return skipPart(part);
					}
					++nfiles;
					if (boy.listenerCount("file") === 0) {
						self$1.parser._ignore();
						return;
					}
					++nends;
					const file = new FileStream(fileOpts);
					curFile = file;
					file.on("end", function() {
						--nends;
						self$1._pause = false;
						checkFinished();
						if (self$1._cb && !self$1._needDrain) {
							const cb = self$1._cb;
							self$1._cb = void 0;
							cb();
						}
					});
					file._read = function(n$1) {
						if (!self$1._pause) return;
						self$1._pause = false;
						if (self$1._cb && !self$1._needDrain) {
							const cb = self$1._cb;
							self$1._cb = void 0;
							cb();
						}
					};
					boy.emit("file", fieldname, file, filename, encoding, contype);
					onData = function(data$1) {
						if ((nsize += data$1.length) > fileSizeLimit) {
							const extralen = fileSizeLimit - nsize + data$1.length;
							if (extralen > 0) file.push(data$1.slice(0, extralen));
							file.truncated = true;
							file.bytesRead = fileSizeLimit;
							part.removeAllListeners("data");
							file.emit("limit");
							return;
						} else if (!file.push(data$1)) self$1._pause = true;
						file.bytesRead = nsize;
					};
					onEnd = function() {
						curFile = void 0;
						file.push(null);
					};
				} else {
					if (nfields === fieldsLimit) {
						if (!boy.hitFieldsLimit) {
							boy.hitFieldsLimit = true;
							boy.emit("fieldsLimit");
						}
						return skipPart(part);
					}
					++nfields;
					++nends;
					let buffer$1 = "";
					let truncated = false;
					curField = part;
					onData = function(data$1) {
						if ((nsize += data$1.length) > fieldSizeLimit) {
							const extralen = fieldSizeLimit - (nsize - data$1.length);
							buffer$1 += data$1.toString("binary", 0, extralen);
							truncated = true;
							part.removeAllListeners("data");
						} else buffer$1 += data$1.toString("binary");
					};
					onEnd = function() {
						curField = void 0;
						if (buffer$1.length) buffer$1 = decodeText$1(buffer$1, "binary", charset);
						boy.emit("field", fieldname, buffer$1, false, truncated, encoding, contype);
						--nends;
						checkFinished();
					};
				}
				part._readableState.sync = false;
				part.on("data", onData);
				part.on("end", onEnd);
			}).on("error", function(err) {
				if (curFile) curFile.emit("error", err);
			});
		}).on("error", function(err) {
			boy.emit("error", err);
		}).on("finish", function() {
			finished$4 = true;
			checkFinished();
		});
	}
	Multipart.prototype.write = function(chunk, cb) {
		const r = this.parser.write(chunk);
		if (r && !this._pause) cb();
		else {
			this._needDrain = !r;
			this._cb = cb;
		}
	};
	Multipart.prototype.end = function() {
		const self$1 = this;
		if (self$1.parser.writable) self$1.parser.end();
		else if (!self$1._boy._done) process.nextTick(function() {
			self$1._boy._done = true;
			self$1._boy.emit("finish");
		});
	};
	function skipPart(part) {
		part.resume();
	}
	function FileStream(opts) {
		Readable$10.call(this, opts);
		this.bytesRead = 0;
		this.truncated = false;
	}
	inherits$1(FileStream, Readable$10);
	FileStream.prototype._read = function(n$1) {};
	module.exports = Multipart;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/Decoder.js
var require_Decoder = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/Decoder.js"(exports, module) {
	const RE_PLUS = /\+/g;
	const HEX = [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	];
	function Decoder$1() {
		this.buffer = void 0;
	}
	Decoder$1.prototype.write = function(str) {
		str = str.replace(RE_PLUS, " ");
		let res = "";
		let i$1 = 0;
		let p = 0;
		const len = str.length;
		for (; i$1 < len; ++i$1) if (this.buffer !== void 0) if (!HEX[str.charCodeAt(i$1)]) {
			res += "%" + this.buffer;
			this.buffer = void 0;
			--i$1;
		} else {
			this.buffer += str[i$1];
			++p;
			if (this.buffer.length === 2) {
				res += String.fromCharCode(parseInt(this.buffer, 16));
				this.buffer = void 0;
			}
		}
		else if (str[i$1] === "%") {
			if (i$1 > p) {
				res += str.substring(p, i$1);
				p = i$1;
			}
			this.buffer = "";
			++p;
		}
		if (p < len && this.buffer === void 0) res += str.substring(p);
		return res;
	};
	Decoder$1.prototype.reset = function() {
		this.buffer = void 0;
	};
	module.exports = Decoder$1;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/urlencoded.js
var require_urlencoded = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/urlencoded.js"(exports, module) {
	const Decoder = require_Decoder();
	const decodeText = require_decodeText();
	const getLimit = require_getLimit();
	const RE_CHARSET = /^charset$/i;
	UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
	function UrlEncoded(boy, cfg) {
		const limits = cfg.limits;
		const parsedConType = cfg.parsedConType;
		this.boy = boy;
		this.fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
		this.fieldNameSizeLimit = getLimit(limits, "fieldNameSize", 100);
		this.fieldsLimit = getLimit(limits, "fields", Infinity);
		let charset;
		for (var i$1 = 0, len = parsedConType.length; i$1 < len; ++i$1) if (Array.isArray(parsedConType[i$1]) && RE_CHARSET.test(parsedConType[i$1][0])) {
			charset = parsedConType[i$1][1].toLowerCase();
			break;
		}
		if (charset === void 0) charset = cfg.defCharset || "utf8";
		this.decoder = new Decoder();
		this.charset = charset;
		this._fields = 0;
		this._state = "key";
		this._checkingBytes = true;
		this._bytesKey = 0;
		this._bytesVal = 0;
		this._key = "";
		this._val = "";
		this._keyTrunc = false;
		this._valTrunc = false;
		this._hitLimit = false;
	}
	UrlEncoded.prototype.write = function(data$1, cb) {
		if (this._fields === this.fieldsLimit) {
			if (!this.boy.hitFieldsLimit) {
				this.boy.hitFieldsLimit = true;
				this.boy.emit("fieldsLimit");
			}
			return cb();
		}
		let idxeq;
		let idxamp;
		let i$1;
		let p = 0;
		const len = data$1.length;
		while (p < len) if (this._state === "key") {
			idxeq = idxamp = void 0;
			for (i$1 = p; i$1 < len; ++i$1) {
				if (!this._checkingBytes) ++p;
				if (data$1[i$1] === 61) {
					idxeq = i$1;
					break;
				} else if (data$1[i$1] === 38) {
					idxamp = i$1;
					break;
				}
				if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
					this._hitLimit = true;
					break;
				} else if (this._checkingBytes) ++this._bytesKey;
			}
			if (idxeq !== void 0) {
				if (idxeq > p) this._key += this.decoder.write(data$1.toString("binary", p, idxeq));
				this._state = "val";
				this._hitLimit = false;
				this._checkingBytes = true;
				this._val = "";
				this._bytesVal = 0;
				this._valTrunc = false;
				this.decoder.reset();
				p = idxeq + 1;
			} else if (idxamp !== void 0) {
				++this._fields;
				let key;
				const keyTrunc = this._keyTrunc;
				if (idxamp > p) key = this._key += this.decoder.write(data$1.toString("binary", p, idxamp));
				else key = this._key;
				this._hitLimit = false;
				this._checkingBytes = true;
				this._key = "";
				this._bytesKey = 0;
				this._keyTrunc = false;
				this.decoder.reset();
				if (key.length) this.boy.emit("field", decodeText(key, "binary", this.charset), "", keyTrunc, false);
				p = idxamp + 1;
				if (this._fields === this.fieldsLimit) return cb();
			} else if (this._hitLimit) {
				if (i$1 > p) this._key += this.decoder.write(data$1.toString("binary", p, i$1));
				p = i$1;
				if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
					this._checkingBytes = false;
					this._keyTrunc = true;
				}
			} else {
				if (p < len) this._key += this.decoder.write(data$1.toString("binary", p));
				p = len;
			}
		} else {
			idxamp = void 0;
			for (i$1 = p; i$1 < len; ++i$1) {
				if (!this._checkingBytes) ++p;
				if (data$1[i$1] === 38) {
					idxamp = i$1;
					break;
				}
				if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
					this._hitLimit = true;
					break;
				} else if (this._checkingBytes) ++this._bytesVal;
			}
			if (idxamp !== void 0) {
				++this._fields;
				if (idxamp > p) this._val += this.decoder.write(data$1.toString("binary", p, idxamp));
				this.boy.emit("field", decodeText(this._key, "binary", this.charset), decodeText(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
				this._state = "key";
				this._hitLimit = false;
				this._checkingBytes = true;
				this._key = "";
				this._bytesKey = 0;
				this._keyTrunc = false;
				this.decoder.reset();
				p = idxamp + 1;
				if (this._fields === this.fieldsLimit) return cb();
			} else if (this._hitLimit) {
				if (i$1 > p) this._val += this.decoder.write(data$1.toString("binary", p, i$1));
				p = i$1;
				if (this._val === "" && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
					this._checkingBytes = false;
					this._valTrunc = true;
				}
			} else {
				if (p < len) this._val += this.decoder.write(data$1.toString("binary", p));
				p = len;
			}
		}
		cb();
	};
	UrlEncoded.prototype.end = function() {
		if (this.boy._done) return;
		if (this._state === "key" && this._key.length > 0) this.boy.emit("field", decodeText(this._key, "binary", this.charset), "", this._keyTrunc, false);
		else if (this._state === "val") this.boy.emit("field", decodeText(this._key, "binary", this.charset), decodeText(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
		this.boy._done = true;
		this.boy.emit("finish");
	};
	module.exports = UrlEncoded;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/main.js
var require_main = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/main.js"(exports, module) {
	const WritableStream$1 = __require("node:stream").Writable;
	const { inherits } = __require("node:util");
	const Dicer = require_Dicer();
	const MultipartParser = require_multipart();
	const UrlencodedParser = require_urlencoded();
	const parseParams = require_parseParams();
	function Busboy$1(opts) {
		if (!(this instanceof Busboy$1)) return new Busboy$1(opts);
		if (typeof opts !== "object") throw new TypeError("Busboy expected an options-Object.");
		if (typeof opts.headers !== "object") throw new TypeError("Busboy expected an options-Object with headers-attribute.");
		if (typeof opts.headers["content-type"] !== "string") throw new TypeError("Missing Content-Type-header.");
		const { headers,...streamOptions } = opts;
		this.opts = {
			autoDestroy: false,
			...streamOptions
		};
		WritableStream$1.call(this, this.opts);
		this._done = false;
		this._parser = this.getParserByHeaders(headers);
		this._finished = false;
	}
	inherits(Busboy$1, WritableStream$1);
	Busboy$1.prototype.emit = function(ev) {
		if (ev === "finish") {
			if (!this._done) {
				this._parser?.end();
				return;
			} else if (this._finished) return;
			this._finished = true;
		}
		WritableStream$1.prototype.emit.apply(this, arguments);
	};
	Busboy$1.prototype.getParserByHeaders = function(headers) {
		const parsed = parseParams(headers["content-type"]);
		const cfg = {
			defCharset: this.opts.defCharset,
			fileHwm: this.opts.fileHwm,
			headers,
			highWaterMark: this.opts.highWaterMark,
			isPartAFile: this.opts.isPartAFile,
			limits: this.opts.limits,
			parsedConType: parsed,
			preservePath: this.opts.preservePath
		};
		if (MultipartParser.detect.test(parsed[0])) return new MultipartParser(this, cfg);
		if (UrlencodedParser.detect.test(parsed[0])) return new UrlencodedParser(this, cfg);
		throw new Error("Unsupported Content-Type.");
	};
	Busboy$1.prototype._write = function(chunk, encoding, cb) {
		this._parser.write(chunk, cb);
	};
	module.exports = Busboy$1;
	module.exports.default = Busboy$1;
	module.exports.Busboy = Busboy$1;
	module.exports.Dicer = Dicer;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/constants.js
var require_constants$8 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/constants.js"(exports, module) {
	const { MessageChannel, receiveMessageOnPort } = __require("worker_threads");
	const corsSafeListedMethods$1 = [
		"GET",
		"HEAD",
		"POST"
	];
	const corsSafeListedMethodsSet$3 = new Set(corsSafeListedMethods$1);
	const nullBodyStatus$5 = [
		101,
		204,
		205,
		304
	];
	const redirectStatus$1 = [
		301,
		302,
		303,
		307,
		308
	];
	const redirectStatusSet$7 = new Set(redirectStatus$1);
	const badPorts$1 = [
		"1",
		"7",
		"9",
		"11",
		"13",
		"15",
		"17",
		"19",
		"20",
		"21",
		"22",
		"23",
		"25",
		"37",
		"42",
		"43",
		"53",
		"69",
		"77",
		"79",
		"87",
		"95",
		"101",
		"102",
		"103",
		"104",
		"109",
		"110",
		"111",
		"113",
		"115",
		"117",
		"119",
		"123",
		"135",
		"137",
		"139",
		"143",
		"161",
		"179",
		"389",
		"427",
		"465",
		"512",
		"513",
		"514",
		"515",
		"526",
		"530",
		"531",
		"532",
		"540",
		"548",
		"554",
		"556",
		"563",
		"587",
		"601",
		"636",
		"989",
		"990",
		"993",
		"995",
		"1719",
		"1720",
		"1723",
		"2049",
		"3659",
		"4045",
		"5060",
		"5061",
		"6000",
		"6566",
		"6665",
		"6666",
		"6667",
		"6668",
		"6669",
		"6697",
		"10080"
	];
	const badPortsSet$3 = new Set(badPorts$1);
	const referrerPolicy$3 = [
		"",
		"no-referrer",
		"no-referrer-when-downgrade",
		"same-origin",
		"origin",
		"strict-origin",
		"origin-when-cross-origin",
		"strict-origin-when-cross-origin",
		"unsafe-url"
	];
	const referrerPolicySet = new Set(referrerPolicy$3);
	const requestRedirect$3 = [
		"follow",
		"manual",
		"error"
	];
	const safeMethods$1 = [
		"GET",
		"HEAD",
		"OPTIONS",
		"TRACE"
	];
	const safeMethodsSet$3 = new Set(safeMethods$1);
	const requestMode$3 = [
		"navigate",
		"same-origin",
		"no-cors",
		"cors"
	];
	const requestCredentials$3 = [
		"omit",
		"same-origin",
		"include"
	];
	const requestCache$3 = [
		"default",
		"no-store",
		"reload",
		"no-cache",
		"force-cache",
		"only-if-cached"
	];
	const requestBodyHeader$3 = [
		"content-encoding",
		"content-language",
		"content-location",
		"content-type",
		"content-length"
	];
	const requestDuplex$3 = ["half"];
	const forbiddenMethods$1 = [
		"CONNECT",
		"TRACE",
		"TRACK"
	];
	const forbiddenMethodsSet$3 = new Set(forbiddenMethods$1);
	const subresource$1 = [
		"audio",
		"audioworklet",
		"font",
		"image",
		"manifest",
		"paintworklet",
		"script",
		"style",
		"track",
		"video",
		"xslt",
		""
	];
	const subresourceSet$3 = new Set(subresource$1);
	/** @type {globalThis['DOMException']} */
	const DOMException$6 = globalThis.DOMException ?? (() => {
		try {
			atob("~");
		} catch (err) {
			return Object.getPrototypeOf(err).constructor;
		}
	})();
	let channel;
	/** @type {globalThis['structuredClone']} */
	const structuredClone$2 = globalThis.structuredClone ?? function structuredClone$3(value, options = void 0) {
		if (arguments.length === 0) throw new TypeError("missing argument");
		if (!channel) channel = new MessageChannel();
		channel.port1.unref();
		channel.port2.unref();
		channel.port1.postMessage(value, options?.transfer);
		return receiveMessageOnPort(channel.port2).message;
	};
	module.exports = {
		DOMException: DOMException$6,
		structuredClone: structuredClone$2,
		subresource: subresource$1,
		forbiddenMethods: forbiddenMethods$1,
		requestBodyHeader: requestBodyHeader$3,
		referrerPolicy: referrerPolicy$3,
		requestRedirect: requestRedirect$3,
		requestMode: requestMode$3,
		requestCredentials: requestCredentials$3,
		requestCache: requestCache$3,
		redirectStatus: redirectStatus$1,
		corsSafeListedMethods: corsSafeListedMethods$1,
		nullBodyStatus: nullBodyStatus$5,
		safeMethods: safeMethods$1,
		badPorts: badPorts$1,
		requestDuplex: requestDuplex$3,
		subresourceSet: subresourceSet$3,
		badPortsSet: badPortsSet$3,
		redirectStatusSet: redirectStatusSet$7,
		corsSafeListedMethodsSet: corsSafeListedMethodsSet$3,
		safeMethodsSet: safeMethodsSet$3,
		forbiddenMethodsSet: forbiddenMethodsSet$3,
		referrerPolicySet
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/global.js
var require_global$3 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/global.js"(exports, module) {
	const globalOrigin$1 = Symbol.for("undici.globalOrigin.1");
	function getGlobalOrigin$7() {
		return globalThis[globalOrigin$1];
	}
	function setGlobalOrigin$2(newOrigin) {
		if (newOrigin === void 0) {
			Object.defineProperty(globalThis, globalOrigin$1, {
				value: void 0,
				writable: true,
				enumerable: false,
				configurable: false
			});
			return;
		}
		const parsedURL = new URL(newOrigin);
		if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
		Object.defineProperty(globalThis, globalOrigin$1, {
			value: parsedURL,
			writable: true,
			enumerable: false,
			configurable: false
		});
	}
	module.exports = {
		getGlobalOrigin: getGlobalOrigin$7,
		setGlobalOrigin: setGlobalOrigin$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/util.js
var require_util$11 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/util.js"(exports, module) {
	const { redirectStatusSet: redirectStatusSet$6, referrerPolicySet: referrerPolicyTokens$2, badPortsSet: badPortsSet$2 } = require_constants$8();
	const { getGlobalOrigin: getGlobalOrigin$6 } = require_global$3();
	const { performance: performance$2 } = __require("perf_hooks");
	const { isBlobLike: isBlobLike$8, toUSVString: toUSVString$4, ReadableStreamFrom: ReadableStreamFrom$6 } = require_util$12();
	const assert$49 = __require("assert");
	const { isUint8Array: isUint8Array$3 } = __require("util/types");
	let supportedHashes$1 = [];
	/** @type {import('crypto')|undefined} */
	let crypto$5;
	try {
		crypto$5 = __require("crypto");
		const possibleRelevantHashes = [
			"sha256",
			"sha384",
			"sha512"
		];
		supportedHashes$1 = crypto$5.getHashes().filter((hash) => possibleRelevantHashes.includes(hash));
	} catch {}
	function responseURL$1(response) {
		const urlList = response.urlList;
		const length = urlList.length;
		return length === 0 ? null : urlList[length - 1].toString();
	}
	function responseLocationURL$3(response, requestFragment) {
		if (!redirectStatusSet$6.has(response.status)) return null;
		let location = response.headersList.get("location");
		if (location !== null && isValidHeaderValue$5(location)) location = new URL(location, responseURL$1(response));
		if (location && !location.hash) location.hash = requestFragment;
		return location;
	}
	/** @returns {URL} */
	function requestCurrentURL$3(request$3) {
		return request$3.urlList[request$3.urlList.length - 1];
	}
	function requestBadPort$3(request$3) {
		const url = requestCurrentURL$3(request$3);
		if (urlIsHttpHttpsScheme$5(url) && badPortsSet$2.has(url.port)) return "blocked";
		return "allowed";
	}
	function isErrorLike$5(object$1) {
		return object$1 instanceof Error || object$1?.constructor?.name === "Error" || object$1?.constructor?.name === "DOMException";
	}
	function isValidReasonPhrase$3(statusText) {
		for (let i$1 = 0; i$1 < statusText.length; ++i$1) {
			const c$1 = statusText.charCodeAt(i$1);
			if (!(c$1 === 9 || c$1 >= 32 && c$1 <= 126 || c$1 >= 128 && c$1 <= 255)) return false;
		}
		return true;
	}
	/**
	* @see https://tools.ietf.org/html/rfc7230#section-3.2.6
	* @param {number} c
	*/
	function isTokenCharCode$1(c$1) {
		switch (c$1) {
			case 34:
			case 40:
			case 41:
			case 44:
			case 47:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 91:
			case 92:
			case 93:
			case 123:
			case 125: return false;
			default: return c$1 >= 33 && c$1 <= 126;
		}
	}
	/**
	* @param {string} characters
	*/
	function isValidHTTPToken$5(characters) {
		if (characters.length === 0) return false;
		for (let i$1 = 0; i$1 < characters.length; ++i$1) if (!isTokenCharCode$1(characters.charCodeAt(i$1))) return false;
		return true;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#header-name
	* @param {string} potentialValue
	*/
	function isValidHeaderName$5(potentialValue) {
		return isValidHTTPToken$5(potentialValue);
	}
	/**
	* @see https://fetch.spec.whatwg.org/#header-value
	* @param {string} potentialValue
	*/
	function isValidHeaderValue$5(potentialValue) {
		if (potentialValue.startsWith("	") || potentialValue.startsWith(" ") || potentialValue.endsWith("	") || potentialValue.endsWith(" ")) return false;
		if (potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n")) return false;
		return true;
	}
	function setRequestReferrerPolicyOnRedirect$3(request$3, actualResponse) {
		const { headersList } = actualResponse;
		const policyHeader = (headersList.get("referrer-policy") ?? "").split(",");
		let policy = "";
		if (policyHeader.length > 0) for (let i$1 = policyHeader.length; i$1 !== 0; i$1--) {
			const token = policyHeader[i$1 - 1].trim();
			if (referrerPolicyTokens$2.has(token)) {
				policy = token;
				break;
			}
		}
		if (policy !== "") request$3.referrerPolicy = policy;
	}
	function crossOriginResourcePolicyCheck$3() {
		return "allowed";
	}
	function corsCheck$3() {
		return "success";
	}
	function TAOCheck$3() {
		return "success";
	}
	function appendFetchMetadata$3(httpRequest) {
		let header = null;
		header = httpRequest.mode;
		httpRequest.headersList.set("sec-fetch-mode", header);
	}
	function appendRequestOriginHeader$3(request$3) {
		let serializedOrigin = request$3.origin;
		if (request$3.responseTainting === "cors" || request$3.mode === "websocket") {
			if (serializedOrigin) request$3.headersList.append("origin", serializedOrigin);
		} else if (request$3.method !== "GET" && request$3.method !== "HEAD") {
			switch (request$3.referrerPolicy) {
				case "no-referrer":
					serializedOrigin = null;
					break;
				case "no-referrer-when-downgrade":
				case "strict-origin":
				case "strict-origin-when-cross-origin":
					if (request$3.origin && urlHasHttpsScheme$3(request$3.origin) && !urlHasHttpsScheme$3(requestCurrentURL$3(request$3))) serializedOrigin = null;
					break;
				case "same-origin":
					if (!sameOrigin$5(request$3, requestCurrentURL$3(request$3))) serializedOrigin = null;
					break;
				default:
			}
			if (serializedOrigin) request$3.headersList.append("origin", serializedOrigin);
		}
	}
	function coarsenedSharedCurrentTime$3(crossOriginIsolatedCapability) {
		return performance$2.now();
	}
	function createOpaqueTimingInfo$3(timingInfo) {
		return {
			startTime: timingInfo.startTime ?? 0,
			redirectStartTime: 0,
			redirectEndTime: 0,
			postRedirectStartTime: timingInfo.startTime ?? 0,
			finalServiceWorkerStartTime: 0,
			finalNetworkResponseStartTime: 0,
			finalNetworkRequestStartTime: 0,
			endTime: 0,
			encodedBodySize: 0,
			decodedBodySize: 0,
			finalConnectionTimingInfo: null
		};
	}
	function makePolicyContainer$4() {
		return { referrerPolicy: "strict-origin-when-cross-origin" };
	}
	function clonePolicyContainer$3(policyContainer) {
		return { referrerPolicy: policyContainer.referrerPolicy };
	}
	function determineRequestsReferrer$3(request$3) {
		const policy = request$3.referrerPolicy;
		assert$49(policy);
		let referrerSource = null;
		if (request$3.referrer === "client") {
			const globalOrigin$2 = getGlobalOrigin$6();
			if (!globalOrigin$2 || globalOrigin$2.origin === "null") return "no-referrer";
			referrerSource = new URL(globalOrigin$2);
		} else if (request$3.referrer instanceof URL) referrerSource = request$3.referrer;
		let referrerURL = stripURLForReferrer$1(referrerSource);
		const referrerOrigin = stripURLForReferrer$1(referrerSource, true);
		if (referrerURL.toString().length > 4096) referrerURL = referrerOrigin;
		const areSameOrigin = sameOrigin$5(request$3, referrerURL);
		const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy$1(referrerURL) && !isURLPotentiallyTrustworthy$1(request$3.url);
		switch (policy) {
			case "origin": return referrerOrigin != null ? referrerOrigin : stripURLForReferrer$1(referrerSource, true);
			case "unsafe-url": return referrerURL;
			case "same-origin": return areSameOrigin ? referrerOrigin : "no-referrer";
			case "origin-when-cross-origin": return areSameOrigin ? referrerURL : referrerOrigin;
			case "strict-origin-when-cross-origin": {
				const currentURL = requestCurrentURL$3(request$3);
				if (sameOrigin$5(referrerURL, currentURL)) return referrerURL;
				if (isURLPotentiallyTrustworthy$1(referrerURL) && !isURLPotentiallyTrustworthy$1(currentURL)) return "no-referrer";
				return referrerOrigin;
			}
			case "strict-origin":
			case "no-referrer-when-downgrade":
			default: return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
		}
	}
	/**
	* @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
	* @param {URL} url
	* @param {boolean|undefined} originOnly
	*/
	function stripURLForReferrer$1(url, originOnly) {
		assert$49(url instanceof URL);
		if (url.protocol === "file:" || url.protocol === "about:" || url.protocol === "blank:") return "no-referrer";
		url.username = "";
		url.password = "";
		url.hash = "";
		if (originOnly) {
			url.pathname = "";
			url.search = "";
		}
		return url;
	}
	function isURLPotentiallyTrustworthy$1(url) {
		if (!(url instanceof URL)) return false;
		if (url.href === "about:blank" || url.href === "about:srcdoc") return true;
		if (url.protocol === "data:") return true;
		if (url.protocol === "file:") return true;
		return isOriginPotentiallyTrustworthy$1(url.origin);
		function isOriginPotentiallyTrustworthy$1(origin) {
			if (origin == null || origin === "null") return false;
			const originAsURL = new URL(origin);
			if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") return true;
			if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.") || originAsURL.hostname.endsWith(".localhost")) return true;
			return false;
		}
	}
	/**
	* @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
	* @param {Uint8Array} bytes
	* @param {string} metadataList
	*/
	function bytesMatch$3(bytes, metadataList) {
		/* istanbul ignore if: only if node is built with --without-ssl */
		if (crypto$5 === void 0) return true;
		const parsedMetadata = parseMetadata$1(metadataList);
		if (parsedMetadata === "no metadata") return true;
		if (parsedMetadata.length === 0) return true;
		const strongest = getStrongestMetadata$1(parsedMetadata);
		const metadata = filterMetadataListByAlgorithm$1(parsedMetadata, strongest);
		for (const item of metadata) {
			const algorithm = item.algo;
			const expectedValue = item.hash;
			let actualValue = crypto$5.createHash(algorithm).update(bytes).digest("base64");
			if (actualValue[actualValue.length - 1] === "=") if (actualValue[actualValue.length - 2] === "=") actualValue = actualValue.slice(0, -2);
			else actualValue = actualValue.slice(0, -1);
			if (compareBase64Mixed$1(actualValue, expectedValue)) return true;
		}
		return false;
	}
	const parseHashWithOptions$1 = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
	/**
	* @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
	* @param {string} metadata
	*/
	function parseMetadata$1(metadata) {
		/** @type {{ algo: string, hash: string }[]} */
		const result = [];
		let empty = true;
		for (const token of metadata.split(" ")) {
			empty = false;
			const parsedToken = parseHashWithOptions$1.exec(token);
			if (parsedToken === null || parsedToken.groups === void 0 || parsedToken.groups.algo === void 0) continue;
			const algorithm = parsedToken.groups.algo.toLowerCase();
			if (supportedHashes$1.includes(algorithm)) result.push(parsedToken.groups);
		}
		if (empty === true) return "no metadata";
		return result;
	}
	/**
	* @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList
	*/
	function getStrongestMetadata$1(metadataList) {
		let algorithm = metadataList[0].algo;
		if (algorithm[3] === "5") return algorithm;
		for (let i$1 = 1; i$1 < metadataList.length; ++i$1) {
			const metadata = metadataList[i$1];
			if (metadata.algo[3] === "5") {
				algorithm = "sha512";
				break;
			} else if (algorithm[3] === "3") continue;
			else if (metadata.algo[3] === "3") algorithm = "sha384";
		}
		return algorithm;
	}
	function filterMetadataListByAlgorithm$1(metadataList, algorithm) {
		if (metadataList.length === 1) return metadataList;
		let pos = 0;
		for (let i$1 = 0; i$1 < metadataList.length; ++i$1) if (metadataList[i$1].algo === algorithm) metadataList[pos++] = metadataList[i$1];
		metadataList.length = pos;
		return metadataList;
	}
	/**
	* Compares two base64 strings, allowing for base64url
	* in the second string.
	*
	* @param {string} actualValue always base64
	* @param {string} expectedValue base64 or base64url
	* @returns {boolean}
	*/
	function compareBase64Mixed$1(actualValue, expectedValue) {
		if (actualValue.length !== expectedValue.length) return false;
		for (let i$1 = 0; i$1 < actualValue.length; ++i$1) if (actualValue[i$1] !== expectedValue[i$1]) {
			if (actualValue[i$1] === "+" && expectedValue[i$1] === "-" || actualValue[i$1] === "/" && expectedValue[i$1] === "_") continue;
			return false;
		}
		return true;
	}
	function tryUpgradeRequestToAPotentiallyTrustworthyURL$3(request$3) {}
	/**
	* @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
	* @param {URL} A
	* @param {URL} B
	*/
	function sameOrigin$5(A, B) {
		if (A.origin === B.origin && A.origin === "null") return true;
		if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) return true;
		return false;
	}
	function createDeferredPromise$8() {
		let res;
		let rej;
		const promise = new Promise((resolve$1, reject) => {
			res = resolve$1;
			rej = reject;
		});
		return {
			promise,
			resolve: res,
			reject: rej
		};
	}
	function isAborted$6(fetchParams) {
		return fetchParams.controller.state === "aborted";
	}
	function isCancelled$5(fetchParams) {
		return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
	}
	const normalizeMethodRecord$1 = {
		delete: "DELETE",
		DELETE: "DELETE",
		get: "GET",
		GET: "GET",
		head: "HEAD",
		HEAD: "HEAD",
		options: "OPTIONS",
		OPTIONS: "OPTIONS",
		post: "POST",
		POST: "POST",
		put: "PUT",
		PUT: "PUT"
	};
	Object.setPrototypeOf(normalizeMethodRecord$1, null);
	/**
	* @see https://fetch.spec.whatwg.org/#concept-method-normalize
	* @param {string} method
	*/
	function normalizeMethod$2(method) {
		return normalizeMethodRecord$1[method.toLowerCase()] ?? method;
	}
	function serializeJavascriptValueToJSONString$3(value) {
		const result = JSON.stringify(value);
		if (result === void 0) throw new TypeError("Value is not JSON serializable");
		assert$49(typeof result === "string");
		return result;
	}
	const esIteratorPrototype$1 = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
	/**
	* @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
	* @param {() => unknown[]} iterator
	* @param {string} name name of the instance
	* @param {'key'|'value'|'key+value'} kind
	*/
	function makeIterator$2(iterator$1, name$2, kind) {
		const object$1 = {
			index: 0,
			kind,
			target: iterator$1
		};
		const i$1 = {
			next() {
				if (Object.getPrototypeOf(this) !== i$1) throw new TypeError(`'next' called on an object that does not implement interface ${name$2} Iterator.`);
				const { index, kind: kind$1, target } = object$1;
				const values = target();
				const len = values.length;
				if (index >= len) return {
					value: void 0,
					done: true
				};
				const pair = values[index];
				object$1.index = index + 1;
				return iteratorResult(pair, kind$1);
			},
			[Symbol.toStringTag]: `${name$2} Iterator`
		};
		Object.setPrototypeOf(i$1, esIteratorPrototype$1);
		return Object.setPrototypeOf({}, i$1);
	}
	function iteratorResult(pair, kind) {
		let result;
		switch (kind) {
			case "key": {
				result = pair[0];
				break;
			}
			case "value": {
				result = pair[1];
				break;
			}
			case "key+value": {
				result = pair;
				break;
			}
		}
		return {
			value: result,
			done: false
		};
	}
	/**
	* @see https://fetch.spec.whatwg.org/#body-fully-read
	*/
	async function fullyReadBody$5(body, processBody, processBodyError) {
		const successSteps = processBody;
		const errorSteps = processBodyError;
		let reader;
		try {
			reader = body.stream.getReader();
		} catch (e) {
			errorSteps(e);
			return;
		}
		try {
			const result = await readAllBytes$3(reader);
			successSteps(result);
		} catch (e) {
			errorSteps(e);
		}
	}
	/** @type {ReadableStream} */
	let ReadableStream$4 = globalThis.ReadableStream;
	function isReadableStreamLike$1(stream$4) {
		if (!ReadableStream$4) ReadableStream$4 = __require("stream/web").ReadableStream;
		return stream$4 instanceof ReadableStream$4 || stream$4[Symbol.toStringTag] === "ReadableStream" && typeof stream$4.tee === "function";
	}
	const MAXIMUM_ARGUMENT_LENGTH = 65535;
	/**
	* @see https://infra.spec.whatwg.org/#isomorphic-decode
	* @param {number[]|Uint8Array} input
	*/
	function isomorphicDecode$3(input) {
		if (input.length < MAXIMUM_ARGUMENT_LENGTH) return String.fromCharCode(...input);
		return input.reduce((previous, current) => previous + String.fromCharCode(current), "");
	}
	/**
	* @param {ReadableStreamController<Uint8Array>} controller
	*/
	function readableStreamClose$5(controller) {
		try {
			controller.close();
		} catch (err) {
			if (!err.message.includes("Controller is already closed")) throw err;
		}
	}
	/**
	* @see https://infra.spec.whatwg.org/#isomorphic-encode
	* @param {string} input
	*/
	function isomorphicEncode$5(input) {
		for (let i$1 = 0; i$1 < input.length; i$1++) assert$49(input.charCodeAt(i$1) <= 255);
		return input;
	}
	/**
	* @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
	* @see https://streams.spec.whatwg.org/#read-loop
	* @param {ReadableStreamDefaultReader} reader
	*/
	async function readAllBytes$3(reader) {
		const bytes = [];
		let byteLength = 0;
		while (true) {
			const { done, value: chunk } = await reader.read();
			if (done) return Buffer.concat(bytes, byteLength);
			if (!isUint8Array$3(chunk)) throw new TypeError("Received non-Uint8Array chunk");
			bytes.push(chunk);
			byteLength += chunk.length;
		}
	}
	/**
	* @see https://fetch.spec.whatwg.org/#is-local
	* @param {URL} url
	*/
	function urlIsLocal$3(url) {
		assert$49("protocol" in url);
		const protocol = url.protocol;
		return protocol === "about:" || protocol === "blob:" || protocol === "data:";
	}
	/**
	* @param {string|URL} url
	*/
	function urlHasHttpsScheme$3(url) {
		if (typeof url === "string") return url.startsWith("https:");
		return url.protocol === "https:";
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-scheme
	* @param {URL} url
	*/
	function urlIsHttpHttpsScheme$5(url) {
		assert$49("protocol" in url);
		const protocol = url.protocol;
		return protocol === "http:" || protocol === "https:";
	}
	/**
	* Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.
	*/
	const hasOwn$8 = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key));
	module.exports = {
		isAborted: isAborted$6,
		isCancelled: isCancelled$5,
		createDeferredPromise: createDeferredPromise$8,
		ReadableStreamFrom: ReadableStreamFrom$6,
		toUSVString: toUSVString$4,
		tryUpgradeRequestToAPotentiallyTrustworthyURL: tryUpgradeRequestToAPotentiallyTrustworthyURL$3,
		coarsenedSharedCurrentTime: coarsenedSharedCurrentTime$3,
		determineRequestsReferrer: determineRequestsReferrer$3,
		makePolicyContainer: makePolicyContainer$4,
		clonePolicyContainer: clonePolicyContainer$3,
		appendFetchMetadata: appendFetchMetadata$3,
		appendRequestOriginHeader: appendRequestOriginHeader$3,
		TAOCheck: TAOCheck$3,
		corsCheck: corsCheck$3,
		crossOriginResourcePolicyCheck: crossOriginResourcePolicyCheck$3,
		createOpaqueTimingInfo: createOpaqueTimingInfo$3,
		setRequestReferrerPolicyOnRedirect: setRequestReferrerPolicyOnRedirect$3,
		isValidHTTPToken: isValidHTTPToken$5,
		requestBadPort: requestBadPort$3,
		requestCurrentURL: requestCurrentURL$3,
		responseURL: responseURL$1,
		responseLocationURL: responseLocationURL$3,
		isBlobLike: isBlobLike$8,
		isURLPotentiallyTrustworthy: isURLPotentiallyTrustworthy$1,
		isValidReasonPhrase: isValidReasonPhrase$3,
		sameOrigin: sameOrigin$5,
		normalizeMethod: normalizeMethod$2,
		serializeJavascriptValueToJSONString: serializeJavascriptValueToJSONString$3,
		makeIterator: makeIterator$2,
		isValidHeaderName: isValidHeaderName$5,
		isValidHeaderValue: isValidHeaderValue$5,
		hasOwn: hasOwn$8,
		isErrorLike: isErrorLike$5,
		fullyReadBody: fullyReadBody$5,
		bytesMatch: bytesMatch$3,
		isReadableStreamLike: isReadableStreamLike$1,
		readableStreamClose: readableStreamClose$5,
		isomorphicEncode: isomorphicEncode$5,
		isomorphicDecode: isomorphicDecode$3,
		urlIsLocal: urlIsLocal$3,
		urlHasHttpsScheme: urlHasHttpsScheme$3,
		urlIsHttpHttpsScheme: urlIsHttpHttpsScheme$5,
		readAllBytes: readAllBytes$3,
		normalizeMethodRecord: normalizeMethodRecord$1,
		parseMetadata: parseMetadata$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/symbols.js
var require_symbols$4 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/symbols.js"(exports, module) {
	module.exports = {
		kUrl: Symbol("url"),
		kHeaders: Symbol("headers"),
		kSignal: Symbol("signal"),
		kState: Symbol("state"),
		kGuard: Symbol("guard"),
		kRealm: Symbol("realm")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/webidl.js
var require_webidl$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/webidl.js"(exports, module) {
	const { types: types$8 } = __require("util");
	const { hasOwn: hasOwn$7, toUSVString: toUSVString$3 } = require_util$11();
	/** @type {import('../../types/webidl').Webidl} */
	const webidl$31 = {};
	webidl$31.converters = {};
	webidl$31.util = {};
	webidl$31.errors = {};
	webidl$31.errors.exception = function(message) {
		return /* @__PURE__ */ new TypeError(`${message.header}: ${message.message}`);
	};
	webidl$31.errors.conversionFailed = function(context$1) {
		const plural = context$1.types.length === 1 ? "" : " one of";
		const message = `${context$1.argument} could not be converted to${plural}: ${context$1.types.join(", ")}.`;
		return webidl$31.errors.exception({
			header: context$1.prefix,
			message
		});
	};
	webidl$31.errors.invalidArgument = function(context$1) {
		return webidl$31.errors.exception({
			header: context$1.prefix,
			message: `"${context$1.value}" is an invalid ${context$1.type}.`
		});
	};
	webidl$31.brandCheck = function(V, I, opts = void 0) {
		if (opts?.strict !== false && !(V instanceof I)) throw new TypeError("Illegal invocation");
		else return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag];
	};
	webidl$31.argumentLengthCheck = function({ length }, min$2, ctx) {
		if (length < min$2) throw webidl$31.errors.exception({
			message: `${min$2} argument${min$2 !== 1 ? "s" : ""} required, but${length ? " only" : ""} ${length} found.`,
			...ctx
		});
	};
	webidl$31.illegalConstructor = function() {
		throw webidl$31.errors.exception({
			header: "TypeError",
			message: "Illegal constructor"
		});
	};
	webidl$31.util.Type = function(V) {
		switch (typeof V) {
			case "undefined": return "Undefined";
			case "boolean": return "Boolean";
			case "string": return "String";
			case "symbol": return "Symbol";
			case "number": return "Number";
			case "bigint": return "BigInt";
			case "function":
			case "object": {
				if (V === null) return "Null";
				return "Object";
			}
		}
	};
	webidl$31.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {
		let upperBound;
		let lowerBound;
		if (bitLength === 64) {
			upperBound = Math.pow(2, 53) - 1;
			if (signedness === "unsigned") lowerBound = 0;
			else lowerBound = Math.pow(-2, 53) + 1;
		} else if (signedness === "unsigned") {
			lowerBound = 0;
			upperBound = Math.pow(2, bitLength) - 1;
		} else {
			lowerBound = Math.pow(-2, bitLength) - 1;
			upperBound = Math.pow(2, bitLength - 1) - 1;
		}
		let x = Number(V);
		if (x === 0) x = 0;
		if (opts.enforceRange === true) {
			if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) throw webidl$31.errors.exception({
				header: "Integer conversion",
				message: `Could not convert ${V} to an integer.`
			});
			x = webidl$31.util.IntegerPart(x);
			if (x < lowerBound || x > upperBound) throw webidl$31.errors.exception({
				header: "Integer conversion",
				message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
			});
			return x;
		}
		if (!Number.isNaN(x) && opts.clamp === true) {
			x = Math.min(Math.max(x, lowerBound), upperBound);
			if (Math.floor(x) % 2 === 0) x = Math.floor(x);
			else x = Math.ceil(x);
			return x;
		}
		if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) return 0;
		x = webidl$31.util.IntegerPart(x);
		x = x % Math.pow(2, bitLength);
		if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) return x - Math.pow(2, bitLength);
		return x;
	};
	webidl$31.util.IntegerPart = function(n$1) {
		const r = Math.floor(Math.abs(n$1));
		if (n$1 < 0) return -1 * r;
		return r;
	};
	webidl$31.sequenceConverter = function(converter) {
		return (V) => {
			if (webidl$31.util.Type(V) !== "Object") throw webidl$31.errors.exception({
				header: "Sequence",
				message: `Value of type ${webidl$31.util.Type(V)} is not an Object.`
			});
			/** @type {Generator} */
			const method = V?.[Symbol.iterator]?.();
			const seq = [];
			if (method === void 0 || typeof method.next !== "function") throw webidl$31.errors.exception({
				header: "Sequence",
				message: "Object is not an iterator."
			});
			while (true) {
				const { done, value } = method.next();
				if (done) break;
				seq.push(converter(value));
			}
			return seq;
		};
	};
	webidl$31.recordConverter = function(keyConverter, valueConverter) {
		return (O) => {
			if (webidl$31.util.Type(O) !== "Object") throw webidl$31.errors.exception({
				header: "Record",
				message: `Value of type ${webidl$31.util.Type(O)} is not an Object.`
			});
			const result = {};
			if (!types$8.isProxy(O)) {
				const keys$2 = Object.keys(O);
				for (const key of keys$2) {
					const typedKey = keyConverter(key);
					const typedValue = valueConverter(O[key]);
					result[typedKey] = typedValue;
				}
				return result;
			}
			const keys$1 = Reflect.ownKeys(O);
			for (const key of keys$1) {
				const desc = Reflect.getOwnPropertyDescriptor(O, key);
				if (desc?.enumerable) {
					const typedKey = keyConverter(key);
					const typedValue = valueConverter(O[key]);
					result[typedKey] = typedValue;
				}
			}
			return result;
		};
	};
	webidl$31.interfaceConverter = function(i$1) {
		return (V, opts = {}) => {
			if (opts.strict !== false && !(V instanceof i$1)) throw webidl$31.errors.exception({
				header: i$1.name,
				message: `Expected ${V} to be an instance of ${i$1.name}.`
			});
			return V;
		};
	};
	webidl$31.dictionaryConverter = function(converters) {
		return (dictionary) => {
			const type = webidl$31.util.Type(dictionary);
			const dict = {};
			if (type === "Null" || type === "Undefined") return dict;
			else if (type !== "Object") throw webidl$31.errors.exception({
				header: "Dictionary",
				message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
			});
			for (const options of converters) {
				const { key, defaultValue, required, converter } = options;
				if (required === true) {
					if (!hasOwn$7(dictionary, key)) throw webidl$31.errors.exception({
						header: "Dictionary",
						message: `Missing required key "${key}".`
					});
				}
				let value = dictionary[key];
				const hasDefault = hasOwn$7(options, "defaultValue");
				if (hasDefault && value !== null) value = value ?? defaultValue;
				if (required || hasDefault || value !== void 0) {
					value = converter(value);
					if (options.allowedValues && !options.allowedValues.includes(value)) throw webidl$31.errors.exception({
						header: "Dictionary",
						message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
					});
					dict[key] = value;
				}
			}
			return dict;
		};
	};
	webidl$31.nullableConverter = function(converter) {
		return (V) => {
			if (V === null) return V;
			return converter(V);
		};
	};
	webidl$31.converters.DOMString = function(V, opts = {}) {
		if (V === null && opts.legacyNullToEmptyString) return "";
		if (typeof V === "symbol") throw new TypeError("Could not convert argument of type symbol to string.");
		return String(V);
	};
	webidl$31.converters.ByteString = function(V) {
		const x = webidl$31.converters.DOMString(V);
		for (let index = 0; index < x.length; index++) if (x.charCodeAt(index) > 255) throw new TypeError(`Cannot convert argument to a ByteString because the character at index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`);
		return x;
	};
	webidl$31.converters.USVString = toUSVString$3;
	webidl$31.converters.boolean = function(V) {
		const x = Boolean(V);
		return x;
	};
	webidl$31.converters.any = function(V) {
		return V;
	};
	webidl$31.converters["long long"] = function(V) {
		const x = webidl$31.util.ConvertToInt(V, 64, "signed");
		return x;
	};
	webidl$31.converters["unsigned long long"] = function(V) {
		const x = webidl$31.util.ConvertToInt(V, 64, "unsigned");
		return x;
	};
	webidl$31.converters["unsigned long"] = function(V) {
		const x = webidl$31.util.ConvertToInt(V, 32, "unsigned");
		return x;
	};
	webidl$31.converters["unsigned short"] = function(V, opts) {
		const x = webidl$31.util.ConvertToInt(V, 16, "unsigned", opts);
		return x;
	};
	webidl$31.converters.ArrayBuffer = function(V, opts = {}) {
		if (webidl$31.util.Type(V) !== "Object" || !types$8.isAnyArrayBuffer(V)) throw webidl$31.errors.conversionFailed({
			prefix: `${V}`,
			argument: `${V}`,
			types: ["ArrayBuffer"]
		});
		if (opts.allowShared === false && types$8.isSharedArrayBuffer(V)) throw webidl$31.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		return V;
	};
	webidl$31.converters.TypedArray = function(V, T, opts = {}) {
		if (webidl$31.util.Type(V) !== "Object" || !types$8.isTypedArray(V) || V.constructor.name !== T.name) throw webidl$31.errors.conversionFailed({
			prefix: `${T.name}`,
			argument: `${V}`,
			types: [T.name]
		});
		if (opts.allowShared === false && types$8.isSharedArrayBuffer(V.buffer)) throw webidl$31.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		return V;
	};
	webidl$31.converters.DataView = function(V, opts = {}) {
		if (webidl$31.util.Type(V) !== "Object" || !types$8.isDataView(V)) throw webidl$31.errors.exception({
			header: "DataView",
			message: "Object is not a DataView."
		});
		if (opts.allowShared === false && types$8.isSharedArrayBuffer(V.buffer)) throw webidl$31.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		return V;
	};
	webidl$31.converters.BufferSource = function(V, opts = {}) {
		if (types$8.isAnyArrayBuffer(V)) return webidl$31.converters.ArrayBuffer(V, opts);
		if (types$8.isTypedArray(V)) return webidl$31.converters.TypedArray(V, V.constructor);
		if (types$8.isDataView(V)) return webidl$31.converters.DataView(V, opts);
		throw new TypeError(`Could not convert ${V} to a BufferSource.`);
	};
	webidl$31.converters["sequence<ByteString>"] = webidl$31.sequenceConverter(webidl$31.converters.ByteString);
	webidl$31.converters["sequence<sequence<ByteString>>"] = webidl$31.sequenceConverter(webidl$31.converters["sequence<ByteString>"]);
	webidl$31.converters["record<ByteString, ByteString>"] = webidl$31.recordConverter(webidl$31.converters.ByteString, webidl$31.converters.ByteString);
	module.exports = { webidl: webidl$31 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/dataURL.js
var require_dataURL = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/dataURL.js"(exports, module) {
	const assert$48 = __require("assert");
	const { atob: atob$2 } = __require("buffer");
	const { isomorphicDecode: isomorphicDecode$2 } = require_util$11();
	const encoder$2 = new TextEncoder();
	/**
	* @see https://mimesniff.spec.whatwg.org/#http-token-code-point
	*/
	const HTTP_TOKEN_CODEPOINTS$2 = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
	const HTTP_WHITESPACE_REGEX$1 = /(\u000A|\u000D|\u0009|\u0020)/;
	/**
	* @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
	*/
	const HTTP_QUOTED_STRING_TOKENS$1 = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
	/** @param {URL} dataURL */
	function dataURLProcessor$3(dataURL) {
		assert$48(dataURL.protocol === "data:");
		let input = URLSerializer$9(dataURL, true);
		input = input.slice(5);
		const position = { position: 0 };
		let mimeType = collectASequenceOfCodePointsFast$4(",", input, position);
		const mimeTypeLength = mimeType.length;
		mimeType = removeASCIIWhitespace$1(mimeType, true, true);
		if (position.position >= input.length) return "failure";
		position.position++;
		const encodedBody = input.slice(mimeTypeLength + 1);
		let body = stringPercentDecode$1(encodedBody);
		if (/;(\u0020){0,}base64$/i.test(mimeType)) {
			const stringBody = isomorphicDecode$2(body);
			body = forgivingBase64$1(stringBody);
			if (body === "failure") return "failure";
			mimeType = mimeType.slice(0, -6);
			mimeType = mimeType.replace(/(\u0020)+$/, "");
			mimeType = mimeType.slice(0, -1);
		}
		if (mimeType.startsWith(";")) mimeType = "text/plain" + mimeType;
		let mimeTypeRecord = parseMIMEType$7(mimeType);
		if (mimeTypeRecord === "failure") mimeTypeRecord = parseMIMEType$7("text/plain;charset=US-ASCII");
		return {
			mimeType: mimeTypeRecord,
			body
		};
	}
	/**
	* @param {URL} url
	* @param {boolean} excludeFragment
	*/
	function URLSerializer$9(url, excludeFragment = false) {
		if (!excludeFragment) return url.href;
		const href = url.href;
		const hashLength = url.hash.length;
		return hashLength === 0 ? href : href.substring(0, href.length - hashLength);
	}
	/**
	* @param {(char: string) => boolean} condition
	* @param {string} input
	* @param {{ position: number }} position
	*/
	function collectASequenceOfCodePoints$2(condition, input, position) {
		let result = "";
		while (position.position < input.length && condition(input[position.position])) {
			result += input[position.position];
			position.position++;
		}
		return result;
	}
	/**
	* A faster collectASequenceOfCodePoints that only works when comparing a single character.
	* @param {string} char
	* @param {string} input
	* @param {{ position: number }} position
	*/
	function collectASequenceOfCodePointsFast$4(char, input, position) {
		const idx = input.indexOf(char, position.position);
		const start = position.position;
		if (idx === -1) {
			position.position = input.length;
			return input.slice(start);
		}
		position.position = idx;
		return input.slice(start, position.position);
	}
	/** @param {string} input */
	function stringPercentDecode$1(input) {
		const bytes = encoder$2.encode(input);
		return percentDecode$1(bytes);
	}
	/** @param {Uint8Array} input */
	function percentDecode$1(input) {
		/** @type {number[]} */
		const output = [];
		for (let i$1 = 0; i$1 < input.length; i$1++) {
			const byte = input[i$1];
			if (byte !== 37) output.push(byte);
			else if (byte === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i$1 + 1], input[i$1 + 2]))) output.push(37);
			else {
				const nextTwoBytes = String.fromCharCode(input[i$1 + 1], input[i$1 + 2]);
				const bytePoint = Number.parseInt(nextTwoBytes, 16);
				output.push(bytePoint);
				i$1 += 2;
			}
		}
		return Uint8Array.from(output);
	}
	/** @param {string} input */
	function parseMIMEType$7(input) {
		input = removeHTTPWhitespace$2(input, true, true);
		const position = { position: 0 };
		const type = collectASequenceOfCodePointsFast$4("/", input, position);
		if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS$2.test(type)) return "failure";
		if (position.position > input.length) return "failure";
		position.position++;
		let subtype = collectASequenceOfCodePointsFast$4(";", input, position);
		subtype = removeHTTPWhitespace$2(subtype, false, true);
		if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS$2.test(subtype)) return "failure";
		const typeLowercase = type.toLowerCase();
		const subtypeLowercase = subtype.toLowerCase();
		const mimeType = {
			type: typeLowercase,
			subtype: subtypeLowercase,
			parameters: /* @__PURE__ */ new Map(),
			essence: `${typeLowercase}/${subtypeLowercase}`
		};
		while (position.position < input.length) {
			position.position++;
			collectASequenceOfCodePoints$2((char) => HTTP_WHITESPACE_REGEX$1.test(char), input, position);
			let parameterName = collectASequenceOfCodePoints$2((char) => char !== ";" && char !== "=", input, position);
			parameterName = parameterName.toLowerCase();
			if (position.position < input.length) {
				if (input[position.position] === ";") continue;
				position.position++;
			}
			if (position.position > input.length) break;
			let parameterValue = null;
			if (input[position.position] === "\"") {
				parameterValue = collectAnHTTPQuotedString$2(input, position, true);
				collectASequenceOfCodePointsFast$4(";", input, position);
			} else {
				parameterValue = collectASequenceOfCodePointsFast$4(";", input, position);
				parameterValue = removeHTTPWhitespace$2(parameterValue, false, true);
				if (parameterValue.length === 0) continue;
			}
			if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS$2.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS$1.test(parameterValue)) && !mimeType.parameters.has(parameterName)) mimeType.parameters.set(parameterName, parameterValue);
		}
		return mimeType;
	}
	/** @param {string} data */
	function forgivingBase64$1(data$1) {
		data$1 = data$1.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "");
		if (data$1.length % 4 === 0) data$1 = data$1.replace(/=?=$/, "");
		if (data$1.length % 4 === 1) return "failure";
		if (/[^+/0-9A-Za-z]/.test(data$1)) return "failure";
		const binary = atob$2(data$1);
		const bytes = new Uint8Array(binary.length);
		for (let byte = 0; byte < binary.length; byte++) bytes[byte] = binary.charCodeAt(byte);
		return bytes;
	}
	/**
	* @param {string} input
	* @param {{ position: number }} position
	* @param {boolean?} extractValue
	*/
	function collectAnHTTPQuotedString$2(input, position, extractValue) {
		const positionStart = position.position;
		let value = "";
		assert$48(input[position.position] === "\"");
		position.position++;
		while (true) {
			value += collectASequenceOfCodePoints$2((char) => char !== "\"" && char !== "\\", input, position);
			if (position.position >= input.length) break;
			const quoteOrBackslash = input[position.position];
			position.position++;
			if (quoteOrBackslash === "\\") {
				if (position.position >= input.length) {
					value += "\\";
					break;
				}
				value += input[position.position];
				position.position++;
			} else {
				assert$48(quoteOrBackslash === "\"");
				break;
			}
		}
		if (extractValue) return value;
		return input.slice(positionStart, position.position);
	}
	/**
	* @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
	*/
	function serializeAMimeType$8(mimeType) {
		assert$48(mimeType !== "failure");
		const { parameters, essence } = mimeType;
		let serialization = essence;
		for (let [name$2, value] of parameters.entries()) {
			serialization += ";";
			serialization += name$2;
			serialization += "=";
			if (!HTTP_TOKEN_CODEPOINTS$2.test(value)) {
				value = value.replace(/(\\|")/g, "\\$1");
				value = "\"" + value;
				value += "\"";
			}
			serialization += value;
		}
		return serialization;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-whitespace
	* @param {string} char
	*/
	function isHTTPWhiteSpace$1(char) {
		return char === "\r" || char === "\n" || char === "	" || char === " ";
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-whitespace
	* @param {string} str
	*/
	function removeHTTPWhitespace$2(str, leading = true, trailing = true) {
		let lead = 0;
		let trail = str.length - 1;
		if (leading) for (; lead < str.length && isHTTPWhiteSpace$1(str[lead]); lead++);
		if (trailing) for (; trail > 0 && isHTTPWhiteSpace$1(str[trail]); trail--);
		return str.slice(lead, trail + 1);
	}
	/**
	* @see https://infra.spec.whatwg.org/#ascii-whitespace
	* @param {string} char
	*/
	function isASCIIWhitespace$1(char) {
		return char === "\r" || char === "\n" || char === "	" || char === "\f" || char === " ";
	}
	/**
	* @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
	*/
	function removeASCIIWhitespace$1(str, leading = true, trailing = true) {
		let lead = 0;
		let trail = str.length - 1;
		if (leading) for (; lead < str.length && isASCIIWhitespace$1(str[lead]); lead++);
		if (trailing) for (; trail > 0 && isASCIIWhitespace$1(str[trail]); trail--);
		return str.slice(lead, trail + 1);
	}
	module.exports = {
		dataURLProcessor: dataURLProcessor$3,
		URLSerializer: URLSerializer$9,
		collectASequenceOfCodePoints: collectASequenceOfCodePoints$2,
		collectASequenceOfCodePointsFast: collectASequenceOfCodePointsFast$4,
		stringPercentDecode: stringPercentDecode$1,
		parseMIMEType: parseMIMEType$7,
		collectAnHTTPQuotedString: collectAnHTTPQuotedString$2,
		serializeAMimeType: serializeAMimeType$8
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/file.js
var require_file = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/file.js"(exports, module) {
	const { Blob: Blob$6, File: NativeFile$3 } = __require("buffer");
	const { types: types$7 } = __require("util");
	const { kState: kState$9 } = require_symbols$4();
	const { isBlobLike: isBlobLike$7 } = require_util$11();
	const { webidl: webidl$30 } = require_webidl$1();
	const { parseMIMEType: parseMIMEType$6, serializeAMimeType: serializeAMimeType$7 } = require_dataURL();
	const { kEnumerableProperty: kEnumerableProperty$20 } = require_util$12();
	const encoder$1 = new TextEncoder();
	var File$5 = class File$5 extends Blob$6 {
		constructor(fileBits, fileName, options = {}) {
			webidl$30.argumentLengthCheck(arguments, 2, { header: "File constructor" });
			fileBits = webidl$30.converters["sequence<BlobPart>"](fileBits);
			fileName = webidl$30.converters.USVString(fileName);
			options = webidl$30.converters.FilePropertyBag(options);
			const n$1 = fileName;
			let t = options.type;
			let d;
			substep: {
				if (t) {
					t = parseMIMEType$6(t);
					if (t === "failure") {
						t = "";
						break substep;
					}
					t = serializeAMimeType$7(t).toLowerCase();
				}
				d = options.lastModified;
			}
			super(processBlobParts(fileBits, options), { type: t });
			this[kState$9] = {
				name: n$1,
				lastModified: d,
				type: t
			};
		}
		get name() {
			webidl$30.brandCheck(this, File$5);
			return this[kState$9].name;
		}
		get lastModified() {
			webidl$30.brandCheck(this, File$5);
			return this[kState$9].lastModified;
		}
		get type() {
			webidl$30.brandCheck(this, File$5);
			return this[kState$9].type;
		}
	};
	var FileLike$1 = class FileLike$1 {
		constructor(blobLike, fileName, options = {}) {
			const n$1 = fileName;
			const t = options.type;
			const d = options.lastModified ?? Date.now();
			this[kState$9] = {
				blobLike,
				name: n$1,
				type: t,
				lastModified: d
			};
		}
		stream(...args) {
			webidl$30.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.stream(...args);
		}
		arrayBuffer(...args) {
			webidl$30.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.arrayBuffer(...args);
		}
		slice(...args) {
			webidl$30.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.slice(...args);
		}
		text(...args) {
			webidl$30.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.text(...args);
		}
		get size() {
			webidl$30.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.size;
		}
		get type() {
			webidl$30.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.type;
		}
		get name() {
			webidl$30.brandCheck(this, FileLike$1);
			return this[kState$9].name;
		}
		get lastModified() {
			webidl$30.brandCheck(this, FileLike$1);
			return this[kState$9].lastModified;
		}
		get [Symbol.toStringTag]() {
			return "File";
		}
	};
	Object.defineProperties(File$5.prototype, {
		[Symbol.toStringTag]: {
			value: "File",
			configurable: true
		},
		name: kEnumerableProperty$20,
		lastModified: kEnumerableProperty$20
	});
	webidl$30.converters.Blob = webidl$30.interfaceConverter(Blob$6);
	webidl$30.converters.BlobPart = function(V, opts) {
		if (webidl$30.util.Type(V) === "Object") {
			if (isBlobLike$7(V)) return webidl$30.converters.Blob(V, { strict: false });
			if (ArrayBuffer.isView(V) || types$7.isAnyArrayBuffer(V)) return webidl$30.converters.BufferSource(V, opts);
		}
		return webidl$30.converters.USVString(V, opts);
	};
	webidl$30.converters["sequence<BlobPart>"] = webidl$30.sequenceConverter(webidl$30.converters.BlobPart);
	webidl$30.converters.FilePropertyBag = webidl$30.dictionaryConverter([
		{
			key: "lastModified",
			converter: webidl$30.converters["long long"],
			get defaultValue() {
				return Date.now();
			}
		},
		{
			key: "type",
			converter: webidl$30.converters.DOMString,
			defaultValue: ""
		},
		{
			key: "endings",
			converter: (value) => {
				value = webidl$30.converters.DOMString(value);
				value = value.toLowerCase();
				if (value !== "native") value = "transparent";
				return value;
			},
			defaultValue: "transparent"
		}
	]);
	/**
	* @see https://www.w3.org/TR/FileAPI/#process-blob-parts
	* @param {(NodeJS.TypedArray|Blob|string)[]} parts
	* @param {{ type: string, endings: string }} options
	*/
	function processBlobParts(parts, options) {
		/** @type {NodeJS.TypedArray[]} */
		const bytes = [];
		for (const element of parts) if (typeof element === "string") {
			let s = element;
			if (options.endings === "native") s = convertLineEndingsNative(s);
			bytes.push(encoder$1.encode(s));
		} else if (types$7.isAnyArrayBuffer(element) || types$7.isTypedArray(element)) if (!element.buffer) bytes.push(new Uint8Array(element));
		else bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength));
		else if (isBlobLike$7(element)) bytes.push(element);
		return bytes;
	}
	/**
	* @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native
	* @param {string} s
	*/
	function convertLineEndingsNative(s) {
		let nativeLineEnding = "\n";
		if (process.platform === "win32") nativeLineEnding = "\r\n";
		return s.replace(/\r?\n/g, nativeLineEnding);
	}
	function isFileLike$1(object$1) {
		return NativeFile$3 && object$1 instanceof NativeFile$3 || object$1 instanceof File$5 || object$1 && (typeof object$1.stream === "function" || typeof object$1.arrayBuffer === "function") && object$1[Symbol.toStringTag] === "File";
	}
	module.exports = {
		File: File$5,
		FileLike: FileLike$1,
		isFileLike: isFileLike$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/formdata.js
var require_formdata$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/formdata.js"(exports, module) {
	const { isBlobLike: isBlobLike$6, toUSVString: toUSVString$2, makeIterator: makeIterator$1 } = require_util$11();
	const { kState: kState$8 } = require_symbols$4();
	const { File: UndiciFile$1, FileLike, isFileLike } = require_file();
	const { webidl: webidl$29 } = require_webidl$1();
	const { Blob: Blob$5, File: NativeFile$2 } = __require("buffer");
	/** @type {globalThis['File']} */
	const File$4 = NativeFile$2 ?? UndiciFile$1;
	var FormData$5 = class FormData$5 {
		constructor(form) {
			if (form !== void 0) throw webidl$29.errors.conversionFailed({
				prefix: "FormData constructor",
				argument: "Argument 1",
				types: ["undefined"]
			});
			this[kState$8] = [];
		}
		append(name$2, value, filename = void 0) {
			webidl$29.brandCheck(this, FormData$5);
			webidl$29.argumentLengthCheck(arguments, 2, { header: "FormData.append" });
			if (arguments.length === 3 && !isBlobLike$6(value)) throw new TypeError("Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'");
			name$2 = webidl$29.converters.USVString(name$2);
			value = isBlobLike$6(value) ? webidl$29.converters.Blob(value, { strict: false }) : webidl$29.converters.USVString(value);
			filename = arguments.length === 3 ? webidl$29.converters.USVString(filename) : void 0;
			const entry = makeEntry$2(name$2, value, filename);
			this[kState$8].push(entry);
		}
		delete(name$2) {
			webidl$29.brandCheck(this, FormData$5);
			webidl$29.argumentLengthCheck(arguments, 1, { header: "FormData.delete" });
			name$2 = webidl$29.converters.USVString(name$2);
			this[kState$8] = this[kState$8].filter((entry) => entry.name !== name$2);
		}
		get(name$2) {
			webidl$29.brandCheck(this, FormData$5);
			webidl$29.argumentLengthCheck(arguments, 1, { header: "FormData.get" });
			name$2 = webidl$29.converters.USVString(name$2);
			const idx = this[kState$8].findIndex((entry) => entry.name === name$2);
			if (idx === -1) return null;
			return this[kState$8][idx].value;
		}
		getAll(name$2) {
			webidl$29.brandCheck(this, FormData$5);
			webidl$29.argumentLengthCheck(arguments, 1, { header: "FormData.getAll" });
			name$2 = webidl$29.converters.USVString(name$2);
			return this[kState$8].filter((entry) => entry.name === name$2).map((entry) => entry.value);
		}
		has(name$2) {
			webidl$29.brandCheck(this, FormData$5);
			webidl$29.argumentLengthCheck(arguments, 1, { header: "FormData.has" });
			name$2 = webidl$29.converters.USVString(name$2);
			return this[kState$8].findIndex((entry) => entry.name === name$2) !== -1;
		}
		set(name$2, value, filename = void 0) {
			webidl$29.brandCheck(this, FormData$5);
			webidl$29.argumentLengthCheck(arguments, 2, { header: "FormData.set" });
			if (arguments.length === 3 && !isBlobLike$6(value)) throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");
			name$2 = webidl$29.converters.USVString(name$2);
			value = isBlobLike$6(value) ? webidl$29.converters.Blob(value, { strict: false }) : webidl$29.converters.USVString(value);
			filename = arguments.length === 3 ? toUSVString$2(filename) : void 0;
			const entry = makeEntry$2(name$2, value, filename);
			const idx = this[kState$8].findIndex((entry$1) => entry$1.name === name$2);
			if (idx !== -1) this[kState$8] = [
				...this[kState$8].slice(0, idx),
				entry,
				...this[kState$8].slice(idx + 1).filter((entry$1) => entry$1.name !== name$2)
			];
			else this[kState$8].push(entry);
		}
		entries() {
			webidl$29.brandCheck(this, FormData$5);
			return makeIterator$1(() => this[kState$8].map((pair) => [pair.name, pair.value]), "FormData", "key+value");
		}
		keys() {
			webidl$29.brandCheck(this, FormData$5);
			return makeIterator$1(() => this[kState$8].map((pair) => [pair.name, pair.value]), "FormData", "key");
		}
		values() {
			webidl$29.brandCheck(this, FormData$5);
			return makeIterator$1(() => this[kState$8].map((pair) => [pair.name, pair.value]), "FormData", "value");
		}
		/**
		* @param {(value: string, key: string, self: FormData) => void} callbackFn
		* @param {unknown} thisArg
		*/
		forEach(callbackFn, thisArg = globalThis) {
			webidl$29.brandCheck(this, FormData$5);
			webidl$29.argumentLengthCheck(arguments, 1, { header: "FormData.forEach" });
			if (typeof callbackFn !== "function") throw new TypeError("Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.");
			for (const [key, value] of this) callbackFn.apply(thisArg, [
				value,
				key,
				this
			]);
		}
	};
	FormData$5.prototype[Symbol.iterator] = FormData$5.prototype.entries;
	Object.defineProperties(FormData$5.prototype, { [Symbol.toStringTag]: {
		value: "FormData",
		configurable: true
	} });
	/**
	* @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
	* @param {string} name
	* @param {string|Blob} value
	* @param {?string} filename
	* @returns
	*/
	function makeEntry$2(name$2, value, filename) {
		name$2 = Buffer.from(name$2).toString("utf8");
		if (typeof value === "string") value = Buffer.from(value).toString("utf8");
		else {
			if (!isFileLike(value)) value = value instanceof Blob$5 ? new File$4([value], "blob", { type: value.type }) : new FileLike(value, "blob", { type: value.type });
			if (filename !== void 0) {
				/** @type {FilePropertyBag} */
				const options = {
					type: value.type,
					lastModified: value.lastModified
				};
				value = NativeFile$2 && value instanceof NativeFile$2 || value instanceof UndiciFile$1 ? new File$4([value], filename, options) : new FileLike(value, filename, options);
			}
		}
		return {
			name: name$2,
			value
		};
	}
	module.exports = { FormData: FormData$5 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/body.js
var require_body$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/body.js"(exports, module) {
	const Busboy = require_main();
	const util$38 = require_util$12();
	const { ReadableStreamFrom: ReadableStreamFrom$5, isBlobLike: isBlobLike$5, isReadableStreamLike, readableStreamClose: readableStreamClose$4, createDeferredPromise: createDeferredPromise$7, fullyReadBody: fullyReadBody$4 } = require_util$11();
	const { FormData: FormData$4 } = require_formdata$1();
	const { kState: kState$7 } = require_symbols$4();
	const { webidl: webidl$28 } = require_webidl$1();
	const { DOMException: DOMException$5, structuredClone: structuredClone$1 } = require_constants$8();
	const { Blob: Blob$4, File: NativeFile$1 } = __require("buffer");
	const { kBodyUsed: kBodyUsed$3 } = require_symbols$5();
	const assert$47 = __require("assert");
	const { isErrored: isErrored$3 } = require_util$12();
	const { isUint8Array: isUint8Array$2, isArrayBuffer: isArrayBuffer$2 } = __require("util/types");
	const { File: UndiciFile } = require_file();
	const { parseMIMEType: parseMIMEType$5, serializeAMimeType: serializeAMimeType$6 } = require_dataURL();
	let random$1;
	try {
		const crypto$7 = __require("node:crypto");
		random$1 = (max$1) => crypto$7.randomInt(0, max$1);
	} catch {
		random$1 = (max$1) => Math.floor(Math.random(max$1));
	}
	let ReadableStream$3 = globalThis.ReadableStream;
	/** @type {globalThis['File']} */
	const File$3 = NativeFile$1 ?? UndiciFile;
	const textEncoder$5 = new TextEncoder();
	const textDecoder$2 = new TextDecoder();
	function extractBody$9(object$1, keepalive = false) {
		if (!ReadableStream$3) ReadableStream$3 = __require("stream/web").ReadableStream;
		let stream$4 = null;
		if (object$1 instanceof ReadableStream$3) stream$4 = object$1;
		else if (isBlobLike$5(object$1)) stream$4 = object$1.stream();
		else stream$4 = new ReadableStream$3({
			async pull(controller) {
				controller.enqueue(typeof source === "string" ? textEncoder$5.encode(source) : source);
				queueMicrotask(() => readableStreamClose$4(controller));
			},
			start() {},
			type: void 0
		});
		assert$47(isReadableStreamLike(stream$4));
		let action = null;
		let source = null;
		let length = null;
		let type = null;
		if (typeof object$1 === "string") {
			source = object$1;
			type = "text/plain;charset=UTF-8";
		} else if (object$1 instanceof URLSearchParams) {
			source = object$1.toString();
			type = "application/x-www-form-urlencoded;charset=UTF-8";
		} else if (isArrayBuffer$2(object$1)) source = new Uint8Array(object$1.slice());
		else if (ArrayBuffer.isView(object$1)) source = new Uint8Array(object$1.buffer.slice(object$1.byteOffset, object$1.byteOffset + object$1.byteLength));
		else if (util$38.isFormDataLike(object$1)) {
			const boundary = `----formdata-undici-0${`${random$1(1e11)}`.padStart(11, "0")}`;
			const prefix = `--${boundary}\r\nContent-Disposition: form-data`;
			/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
			const escape$1 = (str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
			const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, "\r\n");
			const blobParts = [];
			const rn = new Uint8Array([13, 10]);
			length = 0;
			let hasUnknownSizeValue = false;
			for (const [name$2, value] of object$1) if (typeof value === "string") {
				const chunk$1 = textEncoder$5.encode(prefix + `; name="${escape$1(normalizeLinefeeds(name$2))}"\r\n\r\n${normalizeLinefeeds(value)}\r\n`);
				blobParts.push(chunk$1);
				length += chunk$1.byteLength;
			} else {
				const chunk$1 = textEncoder$5.encode(`${prefix}; name="${escape$1(normalizeLinefeeds(name$2))}"` + (value.name ? `; filename="${escape$1(value.name)}"` : "") + `\r
Content-Type: ${value.type || "application/octet-stream"}\r\n\r\n`);
				blobParts.push(chunk$1, value, rn);
				if (typeof value.size === "number") length += chunk$1.byteLength + value.size + rn.byteLength;
				else hasUnknownSizeValue = true;
			}
			const chunk = textEncoder$5.encode(`--${boundary}--`);
			blobParts.push(chunk);
			length += chunk.byteLength;
			if (hasUnknownSizeValue) length = null;
			source = object$1;
			action = async function* () {
				for (const part of blobParts) if (part.stream) yield* part.stream();
				else yield part;
			};
			type = "multipart/form-data; boundary=" + boundary;
		} else if (isBlobLike$5(object$1)) {
			source = object$1;
			length = object$1.size;
			if (object$1.type) type = object$1.type;
		} else if (typeof object$1[Symbol.asyncIterator] === "function") {
			if (keepalive) throw new TypeError("keepalive");
			if (util$38.isDisturbed(object$1) || object$1.locked) throw new TypeError("Response body object should not be disturbed or locked");
			stream$4 = object$1 instanceof ReadableStream$3 ? object$1 : ReadableStreamFrom$5(object$1);
		}
		if (typeof source === "string" || util$38.isBuffer(source)) length = Buffer.byteLength(source);
		if (action != null) {
			let iterator$1;
			stream$4 = new ReadableStream$3({
				async start() {
					iterator$1 = action(object$1)[Symbol.asyncIterator]();
				},
				async pull(controller) {
					const { value, done } = await iterator$1.next();
					if (done) queueMicrotask(() => {
						controller.close();
					});
					else if (!isErrored$3(stream$4)) controller.enqueue(new Uint8Array(value));
					return controller.desiredSize > 0;
				},
				async cancel(reason) {
					await iterator$1.return();
				},
				type: void 0
			});
		}
		const body = {
			stream: stream$4,
			source,
			length
		};
		return [body, type];
	}
	function safelyExtractBody$3(object$1, keepalive = false) {
		if (!ReadableStream$3)
 // istanbul ignore next
		ReadableStream$3 = __require("stream/web").ReadableStream;
		if (object$1 instanceof ReadableStream$3) {
			// istanbul ignore next
			assert$47(!util$38.isDisturbed(object$1), "The body has already been consumed.");
			// istanbul ignore next
			assert$47(!object$1.locked, "The stream is locked.");
		}
		return extractBody$9(object$1, keepalive);
	}
	function cloneBody$5(body) {
		const [out1, out2] = body.stream.tee();
		const out2Clone = structuredClone$1(out2, { transfer: [out2] });
		const [, finalClone] = out2Clone.tee();
		body.stream = out1;
		return {
			stream: finalClone,
			length: body.length,
			source: body.source
		};
	}
	async function* consumeBody$1(body) {
		if (body) if (isUint8Array$2(body)) yield body;
		else {
			const stream$4 = body.stream;
			if (util$38.isDisturbed(stream$4)) throw new TypeError("The body has already been consumed.");
			if (stream$4.locked) throw new TypeError("The stream is locked.");
			stream$4[kBodyUsed$3] = true;
			yield* stream$4;
		}
	}
	function throwIfAborted$1(state) {
		if (state.aborted) throw new DOMException$5("The operation was aborted.", "AbortError");
	}
	function bodyMixinMethods$1(instance) {
		const methods = {
			blob() {
				return specConsumeBody(this, (bytes) => {
					let mimeType = bodyMimeType$1(this);
					if (mimeType === "failure") mimeType = "";
					else if (mimeType) mimeType = serializeAMimeType$6(mimeType);
					return new Blob$4([bytes], { type: mimeType });
				}, instance);
			},
			arrayBuffer() {
				return specConsumeBody(this, (bytes) => {
					return new Uint8Array(bytes).buffer;
				}, instance);
			},
			text() {
				return specConsumeBody(this, utf8DecodeBytes$4, instance);
			},
			json() {
				return specConsumeBody(this, parseJSONFromBytes$1, instance);
			},
			async formData() {
				webidl$28.brandCheck(this, instance);
				throwIfAborted$1(this[kState$7]);
				const contentType = this.headers.get("Content-Type");
				if (/multipart\/form-data/.test(contentType)) {
					const headers = {};
					for (const [key, value] of this.headers) headers[key.toLowerCase()] = value;
					const responseFormData = new FormData$4();
					let busboy;
					try {
						busboy = new Busboy({
							headers,
							preservePath: true
						});
					} catch (err) {
						throw new DOMException$5(`${err}`, "AbortError");
					}
					busboy.on("field", (name$2, value) => {
						responseFormData.append(name$2, value);
					});
					busboy.on("file", (name$2, value, filename, encoding, mimeType) => {
						const chunks = [];
						if (encoding === "base64" || encoding.toLowerCase() === "base64") {
							let base64chunk = "";
							value.on("data", (chunk) => {
								base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
								const end = base64chunk.length - base64chunk.length % 4;
								chunks.push(Buffer.from(base64chunk.slice(0, end), "base64"));
								base64chunk = base64chunk.slice(end);
							});
							value.on("end", () => {
								chunks.push(Buffer.from(base64chunk, "base64"));
								responseFormData.append(name$2, new File$3(chunks, filename, { type: mimeType }));
							});
						} else {
							value.on("data", (chunk) => {
								chunks.push(chunk);
							});
							value.on("end", () => {
								responseFormData.append(name$2, new File$3(chunks, filename, { type: mimeType }));
							});
						}
					});
					const busboyResolve = new Promise((resolve$1, reject) => {
						busboy.on("finish", resolve$1);
						busboy.on("error", (err) => reject(new TypeError(err)));
					});
					if (this.body !== null) for await (const chunk of consumeBody$1(this[kState$7].body)) busboy.write(chunk);
					busboy.end();
					await busboyResolve;
					return responseFormData;
				} else if (/application\/x-www-form-urlencoded/.test(contentType)) {
					let entries;
					try {
						let text$1 = "";
						const streamingDecoder = new TextDecoder("utf-8", { ignoreBOM: true });
						for await (const chunk of consumeBody$1(this[kState$7].body)) {
							if (!isUint8Array$2(chunk)) throw new TypeError("Expected Uint8Array chunk");
							text$1 += streamingDecoder.decode(chunk, { stream: true });
						}
						text$1 += streamingDecoder.decode();
						entries = new URLSearchParams(text$1);
					} catch (err) {
						// istanbul ignore next: Unclear when new URLSearchParams can fail on a string.
						throw Object.assign(/* @__PURE__ */ new TypeError(), { cause: err });
					}
					const formData = new FormData$4();
					for (const [name$2, value] of entries) formData.append(name$2, value);
					return formData;
				} else {
					await Promise.resolve();
					throwIfAborted$1(this[kState$7]);
					throw webidl$28.errors.exception({
						header: `${instance.name}.formData`,
						message: "Could not parse content as FormData."
					});
				}
			}
		};
		return methods;
	}
	function mixinBody$5(prototype) {
		Object.assign(prototype.prototype, bodyMixinMethods$1(prototype));
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-body-consume-body
	* @param {Response|Request} object
	* @param {(value: unknown) => unknown} convertBytesToJSValue
	* @param {Response|Request} instance
	*/
	async function specConsumeBody(object$1, convertBytesToJSValue, instance) {
		webidl$28.brandCheck(object$1, instance);
		throwIfAborted$1(object$1[kState$7]);
		if (bodyUnusable$3(object$1[kState$7].body)) throw new TypeError("Body is unusable");
		const promise = createDeferredPromise$7();
		const errorSteps = (error$1) => promise.reject(error$1);
		const successSteps = (data$1) => {
			try {
				promise.resolve(convertBytesToJSValue(data$1));
			} catch (e) {
				errorSteps(e);
			}
		};
		if (object$1[kState$7].body == null) {
			successSteps(new Uint8Array());
			return promise.promise;
		}
		await fullyReadBody$4(object$1[kState$7].body, successSteps, errorSteps);
		return promise.promise;
	}
	function bodyUnusable$3(body) {
		return body != null && (body.stream.locked || util$38.isDisturbed(body.stream));
	}
	/**
	* @see https://encoding.spec.whatwg.org/#utf-8-decode
	* @param {Buffer} buffer
	*/
	function utf8DecodeBytes$4(buffer$1) {
		if (buffer$1.length === 0) return "";
		if (buffer$1[0] === 239 && buffer$1[1] === 187 && buffer$1[2] === 191) buffer$1 = buffer$1.subarray(3);
		const output = textDecoder$2.decode(buffer$1);
		return output;
	}
	/**
	* @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
	* @param {Uint8Array} bytes
	*/
	function parseJSONFromBytes$1(bytes) {
		return JSON.parse(utf8DecodeBytes$4(bytes));
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-body-mime-type
	* @param {import('./response').Response|import('./request').Request} object
	*/
	function bodyMimeType$1(object$1) {
		const { headersList } = object$1[kState$7];
		const contentType = headersList.get("content-type");
		if (contentType === null) return "failure";
		return parseMIMEType$5(contentType);
	}
	module.exports = {
		extractBody: extractBody$9,
		safelyExtractBody: safelyExtractBody$3,
		cloneBody: cloneBody$5,
		mixinBody: mixinBody$5
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/request.js
var require_request$3 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/request.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$52, NotSupportedError: NotSupportedError$4 } = require_errors$1();
	const assert$46 = __require("assert");
	const { kHTTP2BuildRequest: kHTTP2BuildRequest$1, kHTTP2CopyHeaders: kHTTP2CopyHeaders$1, kHTTP1BuildRequest: kHTTP1BuildRequest$1 } = require_symbols$5();
	const util$37 = require_util$12();
	/**
	* Verifies that the given val is a valid HTTP token
	* per the rules defined in RFC 7230
	* See https://tools.ietf.org/html/rfc7230#section-3.2.6
	*/
	const tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
	/**
	* Matches if val contains an invalid field-vchar
	*  field-value    = *( field-content / obs-fold )
	*  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
	*  field-vchar    = VCHAR / obs-text
	*/
	const headerCharRegex$1 = /[^\t\x20-\x7e\x80-\xff]/;
	const invalidPathRegex$1 = /[^\u0021-\u00ff]/;
	const kHandler$1 = Symbol("handler");
	const channels$10 = {};
	let extractBody$8;
	try {
		const diagnosticsChannel$3 = __require("diagnostics_channel");
		channels$10.create = diagnosticsChannel$3.channel("undici:request:create");
		channels$10.bodySent = diagnosticsChannel$3.channel("undici:request:bodySent");
		channels$10.headers = diagnosticsChannel$3.channel("undici:request:headers");
		channels$10.trailers = diagnosticsChannel$3.channel("undici:request:trailers");
		channels$10.error = diagnosticsChannel$3.channel("undici:request:error");
	} catch {
		channels$10.create = { hasSubscribers: false };
		channels$10.bodySent = { hasSubscribers: false };
		channels$10.headers = { hasSubscribers: false };
		channels$10.trailers = { hasSubscribers: false };
		channels$10.error = { hasSubscribers: false };
	}
	var Request$9 = class Request$9 {
		constructor(origin, { path: path$9, method, body, headers, query, idempotent, blocking, upgrade: upgrade$2, headersTimeout, bodyTimeout, reset: reset$1, throwOnError, expectContinue }, handler$1) {
			if (typeof path$9 !== "string") throw new InvalidArgumentError$52("path must be a string");
			else if (path$9[0] !== "/" && !(path$9.startsWith("http://") || path$9.startsWith("https://")) && method !== "CONNECT") throw new InvalidArgumentError$52("path must be an absolute URL or start with a slash");
			else if (invalidPathRegex$1.exec(path$9) !== null) throw new InvalidArgumentError$52("invalid request path");
			if (typeof method !== "string") throw new InvalidArgumentError$52("method must be a string");
			else if (tokenRegExp.exec(method) === null) throw new InvalidArgumentError$52("invalid request method");
			if (upgrade$2 && typeof upgrade$2 !== "string") throw new InvalidArgumentError$52("upgrade must be a string");
			if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) throw new InvalidArgumentError$52("invalid headersTimeout");
			if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) throw new InvalidArgumentError$52("invalid bodyTimeout");
			if (reset$1 != null && typeof reset$1 !== "boolean") throw new InvalidArgumentError$52("invalid reset");
			if (expectContinue != null && typeof expectContinue !== "boolean") throw new InvalidArgumentError$52("invalid expectContinue");
			this.headersTimeout = headersTimeout;
			this.bodyTimeout = bodyTimeout;
			this.throwOnError = throwOnError === true;
			this.method = method;
			this.abort = null;
			if (body == null) this.body = null;
			else if (util$37.isStream(body)) {
				this.body = body;
				const rState = this.body._readableState;
				if (!rState || !rState.autoDestroy) {
					this.endHandler = function autoDestroy() {
						util$37.destroy(this);
					};
					this.body.on("end", this.endHandler);
				}
				this.errorHandler = (err) => {
					if (this.abort) this.abort(err);
					else this.error = err;
				};
				this.body.on("error", this.errorHandler);
			} else if (util$37.isBuffer(body)) this.body = body.byteLength ? body : null;
			else if (ArrayBuffer.isView(body)) this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
			else if (body instanceof ArrayBuffer) this.body = body.byteLength ? Buffer.from(body) : null;
			else if (typeof body === "string") this.body = body.length ? Buffer.from(body) : null;
			else if (util$37.isFormDataLike(body) || util$37.isIterable(body) || util$37.isBlobLike(body)) this.body = body;
			else throw new InvalidArgumentError$52("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
			this.completed = false;
			this.aborted = false;
			this.upgrade = upgrade$2 || null;
			this.path = query ? util$37.buildURL(path$9, query) : path$9;
			this.origin = origin;
			this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
			this.blocking = blocking == null ? false : blocking;
			this.reset = reset$1 == null ? null : reset$1;
			this.host = null;
			this.contentLength = null;
			this.contentType = null;
			this.headers = "";
			this.expectContinue = expectContinue != null ? expectContinue : false;
			if (Array.isArray(headers)) {
				if (headers.length % 2 !== 0) throw new InvalidArgumentError$52("headers array must be even");
				for (let i$1 = 0; i$1 < headers.length; i$1 += 2) processHeader$1(this, headers[i$1], headers[i$1 + 1]);
			} else if (headers && typeof headers === "object") {
				const keys$1 = Object.keys(headers);
				for (let i$1 = 0; i$1 < keys$1.length; i$1++) {
					const key = keys$1[i$1];
					processHeader$1(this, key, headers[key]);
				}
			} else if (headers != null) throw new InvalidArgumentError$52("headers must be an object or an array");
			if (util$37.isFormDataLike(this.body)) {
				if (util$37.nodeMajor < 16 || util$37.nodeMajor === 16 && util$37.nodeMinor < 8) throw new InvalidArgumentError$52("Form-Data bodies are only supported in node v16.8 and newer.");
				if (!extractBody$8) extractBody$8 = require_body$1().extractBody;
				const [bodyStream, contentType] = extractBody$8(body);
				if (this.contentType == null) {
					this.contentType = contentType;
					this.headers += `content-type: ${contentType}\r\n`;
				}
				this.body = bodyStream.stream;
				this.contentLength = bodyStream.length;
			} else if (util$37.isBlobLike(body) && this.contentType == null && body.type) {
				this.contentType = body.type;
				this.headers += `content-type: ${body.type}\r\n`;
			}
			util$37.validateHandler(handler$1, method, upgrade$2);
			this.servername = util$37.getServerName(this.host);
			this[kHandler$1] = handler$1;
			if (channels$10.create.hasSubscribers) channels$10.create.publish({ request: this });
		}
		onBodySent(chunk) {
			if (this[kHandler$1].onBodySent) try {
				return this[kHandler$1].onBodySent(chunk);
			} catch (err) {
				this.abort(err);
			}
		}
		onRequestSent() {
			if (channels$10.bodySent.hasSubscribers) channels$10.bodySent.publish({ request: this });
			if (this[kHandler$1].onRequestSent) try {
				return this[kHandler$1].onRequestSent();
			} catch (err) {
				this.abort(err);
			}
		}
		onConnect(abort$2) {
			assert$46(!this.aborted);
			assert$46(!this.completed);
			if (this.error) abort$2(this.error);
			else {
				this.abort = abort$2;
				return this[kHandler$1].onConnect(abort$2);
			}
		}
		onHeaders(statusCode, headers, resume$2, statusText) {
			assert$46(!this.aborted);
			assert$46(!this.completed);
			if (channels$10.headers.hasSubscribers) channels$10.headers.publish({
				request: this,
				response: {
					statusCode,
					headers,
					statusText
				}
			});
			try {
				return this[kHandler$1].onHeaders(statusCode, headers, resume$2, statusText);
			} catch (err) {
				this.abort(err);
			}
		}
		onData(chunk) {
			assert$46(!this.aborted);
			assert$46(!this.completed);
			try {
				return this[kHandler$1].onData(chunk);
			} catch (err) {
				this.abort(err);
				return false;
			}
		}
		onUpgrade(statusCode, headers, socket) {
			assert$46(!this.aborted);
			assert$46(!this.completed);
			return this[kHandler$1].onUpgrade(statusCode, headers, socket);
		}
		onComplete(trailers) {
			this.onFinally();
			assert$46(!this.aborted);
			this.completed = true;
			if (channels$10.trailers.hasSubscribers) channels$10.trailers.publish({
				request: this,
				trailers
			});
			try {
				return this[kHandler$1].onComplete(trailers);
			} catch (err) {
				this.onError(err);
			}
		}
		onError(error$1) {
			this.onFinally();
			if (channels$10.error.hasSubscribers) channels$10.error.publish({
				request: this,
				error: error$1
			});
			if (this.aborted) return;
			this.aborted = true;
			return this[kHandler$1].onError(error$1);
		}
		onFinally() {
			if (this.errorHandler) {
				this.body.off("error", this.errorHandler);
				this.errorHandler = null;
			}
			if (this.endHandler) {
				this.body.off("end", this.endHandler);
				this.endHandler = null;
			}
		}
		addHeader(key, value) {
			processHeader$1(this, key, value);
			return this;
		}
		static [kHTTP1BuildRequest$1](origin, opts, handler$1) {
			return new Request$9(origin, opts, handler$1);
		}
		static [kHTTP2BuildRequest$1](origin, opts, handler$1) {
			const headers = opts.headers;
			opts = {
				...opts,
				headers: null
			};
			const request$3 = new Request$9(origin, opts, handler$1);
			request$3.headers = {};
			if (Array.isArray(headers)) {
				if (headers.length % 2 !== 0) throw new InvalidArgumentError$52("headers array must be even");
				for (let i$1 = 0; i$1 < headers.length; i$1 += 2) processHeader$1(request$3, headers[i$1], headers[i$1 + 1], true);
			} else if (headers && typeof headers === "object") {
				const keys$1 = Object.keys(headers);
				for (let i$1 = 0; i$1 < keys$1.length; i$1++) {
					const key = keys$1[i$1];
					processHeader$1(request$3, key, headers[key], true);
				}
			} else if (headers != null) throw new InvalidArgumentError$52("headers must be an object or an array");
			return request$3;
		}
		static [kHTTP2CopyHeaders$1](raw) {
			const rawHeaders = raw.split("\r\n");
			const headers = {};
			for (const header of rawHeaders) {
				const [key, value] = header.split(": ");
				if (value == null || value.length === 0) continue;
				if (headers[key]) headers[key] += `,${value}`;
				else headers[key] = value;
			}
			return headers;
		}
	};
	function processHeaderValue(key, val, skipAppend) {
		if (val && typeof val === "object") throw new InvalidArgumentError$52(`invalid ${key} header`);
		val = val != null ? `${val}` : "";
		if (headerCharRegex$1.exec(val) !== null) throw new InvalidArgumentError$52(`invalid ${key} header`);
		return skipAppend ? val : `${key}: ${val}\r\n`;
	}
	function processHeader$1(request$3, key, val, skipAppend = false) {
		if (val && typeof val === "object" && !Array.isArray(val)) throw new InvalidArgumentError$52(`invalid ${key} header`);
		else if (val === void 0) return;
		if (request$3.host === null && key.length === 4 && key.toLowerCase() === "host") {
			if (headerCharRegex$1.exec(val) !== null) throw new InvalidArgumentError$52(`invalid ${key} header`);
			request$3.host = val;
		} else if (request$3.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
			request$3.contentLength = parseInt(val, 10);
			if (!Number.isFinite(request$3.contentLength)) throw new InvalidArgumentError$52("invalid content-length header");
		} else if (request$3.contentType === null && key.length === 12 && key.toLowerCase() === "content-type") {
			request$3.contentType = val;
			if (skipAppend) request$3.headers[key] = processHeaderValue(key, val, skipAppend);
			else request$3.headers += processHeaderValue(key, val);
		} else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") throw new InvalidArgumentError$52("invalid transfer-encoding header");
		else if (key.length === 10 && key.toLowerCase() === "connection") {
			const value = typeof val === "string" ? val.toLowerCase() : null;
			if (value !== "close" && value !== "keep-alive") throw new InvalidArgumentError$52("invalid connection header");
			else if (value === "close") request$3.reset = true;
		} else if (key.length === 10 && key.toLowerCase() === "keep-alive") throw new InvalidArgumentError$52("invalid keep-alive header");
		else if (key.length === 7 && key.toLowerCase() === "upgrade") throw new InvalidArgumentError$52("invalid upgrade header");
		else if (key.length === 6 && key.toLowerCase() === "expect") throw new NotSupportedError$4("expect header not supported");
		else if (tokenRegExp.exec(key) === null) throw new InvalidArgumentError$52("invalid header key");
		else if (Array.isArray(val)) for (let i$1 = 0; i$1 < val.length; i$1++) if (skipAppend) if (request$3.headers[key]) request$3.headers[key] += `,${processHeaderValue(key, val[i$1], skipAppend)}`;
		else request$3.headers[key] = processHeaderValue(key, val[i$1], skipAppend);
		else request$3.headers += processHeaderValue(key, val[i$1]);
		else if (skipAppend) request$3.headers[key] = processHeaderValue(key, val, skipAppend);
		else request$3.headers += processHeaderValue(key, val);
	}
	module.exports = Request$9;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/dispatcher.js
var require_dispatcher$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/dispatcher.js"(exports, module) {
	const EventEmitter$3 = __require("events");
	var Dispatcher$8 = class extends EventEmitter$3 {
		dispatch() {
			throw new Error("not implemented");
		}
		close() {
			throw new Error("not implemented");
		}
		destroy() {
			throw new Error("not implemented");
		}
	};
	module.exports = Dispatcher$8;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/dispatcher-base.js
var require_dispatcher_base$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/dispatcher-base.js"(exports, module) {
	const Dispatcher$7 = require_dispatcher$1();
	const { ClientDestroyedError: ClientDestroyedError$4, ClientClosedError: ClientClosedError$2, InvalidArgumentError: InvalidArgumentError$51 } = require_errors$1();
	const { kDestroy: kDestroy$11, kClose: kClose$15, kDispatch: kDispatch$9, kInterceptors: kInterceptors$5 } = require_symbols$5();
	const kDestroyed$3 = Symbol("destroyed");
	const kClosed$4 = Symbol("closed");
	const kOnDestroyed$1 = Symbol("onDestroyed");
	const kOnClosed$1 = Symbol("onClosed");
	const kInterceptedDispatch = Symbol("Intercepted Dispatch");
	var DispatcherBase$11 = class extends Dispatcher$7 {
		constructor() {
			super();
			this[kDestroyed$3] = false;
			this[kOnDestroyed$1] = null;
			this[kClosed$4] = false;
			this[kOnClosed$1] = [];
		}
		get destroyed() {
			return this[kDestroyed$3];
		}
		get closed() {
			return this[kClosed$4];
		}
		get interceptors() {
			return this[kInterceptors$5];
		}
		set interceptors(newInterceptors) {
			if (newInterceptors) for (let i$1 = newInterceptors.length - 1; i$1 >= 0; i$1--) {
				const interceptor = this[kInterceptors$5][i$1];
				if (typeof interceptor !== "function") throw new InvalidArgumentError$51("interceptor must be an function");
			}
			this[kInterceptors$5] = newInterceptors;
		}
		close(callback) {
			if (callback === void 0) return new Promise((resolve$1, reject) => {
				this.close((err, data$1) => {
					return err ? reject(err) : resolve$1(data$1);
				});
			});
			if (typeof callback !== "function") throw new InvalidArgumentError$51("invalid callback");
			if (this[kDestroyed$3]) {
				queueMicrotask(() => callback(new ClientDestroyedError$4(), null));
				return;
			}
			if (this[kClosed$4]) {
				if (this[kOnClosed$1]) this[kOnClosed$1].push(callback);
				else queueMicrotask(() => callback(null, null));
				return;
			}
			this[kClosed$4] = true;
			this[kOnClosed$1].push(callback);
			const onClosed = () => {
				const callbacks = this[kOnClosed$1];
				this[kOnClosed$1] = null;
				for (let i$1 = 0; i$1 < callbacks.length; i$1++) callbacks[i$1](null, null);
			};
			this[kClose$15]().then(() => this.destroy()).then(() => {
				queueMicrotask(onClosed);
			});
		}
		destroy(err, callback) {
			if (typeof err === "function") {
				callback = err;
				err = null;
			}
			if (callback === void 0) return new Promise((resolve$1, reject) => {
				this.destroy(err, (err$1, data$1) => {
					return err$1 ? reject(err$1) : resolve$1(data$1);
				});
			});
			if (typeof callback !== "function") throw new InvalidArgumentError$51("invalid callback");
			if (this[kDestroyed$3]) {
				if (this[kOnDestroyed$1]) this[kOnDestroyed$1].push(callback);
				else queueMicrotask(() => callback(null, null));
				return;
			}
			if (!err) err = new ClientDestroyedError$4();
			this[kDestroyed$3] = true;
			this[kOnDestroyed$1] = this[kOnDestroyed$1] || [];
			this[kOnDestroyed$1].push(callback);
			const onDestroyed = () => {
				const callbacks = this[kOnDestroyed$1];
				this[kOnDestroyed$1] = null;
				for (let i$1 = 0; i$1 < callbacks.length; i$1++) callbacks[i$1](null, null);
			};
			this[kDestroy$11](err).then(() => {
				queueMicrotask(onDestroyed);
			});
		}
		[kInterceptedDispatch](opts, handler$1) {
			if (!this[kInterceptors$5] || this[kInterceptors$5].length === 0) {
				this[kInterceptedDispatch] = this[kDispatch$9];
				return this[kDispatch$9](opts, handler$1);
			}
			let dispatch = this[kDispatch$9].bind(this);
			for (let i$1 = this[kInterceptors$5].length - 1; i$1 >= 0; i$1--) dispatch = this[kInterceptors$5][i$1](dispatch);
			this[kInterceptedDispatch] = dispatch;
			return dispatch(opts, handler$1);
		}
		dispatch(opts, handler$1) {
			if (!handler$1 || typeof handler$1 !== "object") throw new InvalidArgumentError$51("handler must be an object");
			try {
				if (!opts || typeof opts !== "object") throw new InvalidArgumentError$51("opts must be an object.");
				if (this[kDestroyed$3] || this[kOnDestroyed$1]) throw new ClientDestroyedError$4();
				if (this[kClosed$4]) throw new ClientClosedError$2();
				return this[kInterceptedDispatch](opts, handler$1);
			} catch (err) {
				if (typeof handler$1.onError !== "function") throw new InvalidArgumentError$51("invalid onError method");
				handler$1.onError(err);
				return false;
			}
		}
	};
	module.exports = DispatcherBase$11;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/connect.js
var require_connect$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/connect.js"(exports, module) {
	const net$4 = __require("net");
	const assert$45 = __require("assert");
	const util$36 = require_util$12();
	const { InvalidArgumentError: InvalidArgumentError$50, ConnectTimeoutError: ConnectTimeoutError$2 } = require_errors$1();
	let tls$1;
	let SessionCache$1;
	if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) SessionCache$1 = class WeakSessionCache {
		constructor(maxCachedSessions) {
			this._maxCachedSessions = maxCachedSessions;
			this._sessionCache = /* @__PURE__ */ new Map();
			this._sessionRegistry = new global.FinalizationRegistry((key) => {
				if (this._sessionCache.size < this._maxCachedSessions) return;
				const ref = this._sessionCache.get(key);
				if (ref !== void 0 && ref.deref() === void 0) this._sessionCache.delete(key);
			});
		}
		get(sessionKey) {
			const ref = this._sessionCache.get(sessionKey);
			return ref ? ref.deref() : null;
		}
		set(sessionKey, session) {
			if (this._maxCachedSessions === 0) return;
			this._sessionCache.set(sessionKey, new WeakRef(session));
			this._sessionRegistry.register(session, sessionKey);
		}
	};
	else SessionCache$1 = class SimpleSessionCache {
		constructor(maxCachedSessions) {
			this._maxCachedSessions = maxCachedSessions;
			this._sessionCache = /* @__PURE__ */ new Map();
		}
		get(sessionKey) {
			return this._sessionCache.get(sessionKey);
		}
		set(sessionKey, session) {
			if (this._maxCachedSessions === 0) return;
			if (this._sessionCache.size >= this._maxCachedSessions) {
				const { value: oldestKey } = this._sessionCache.keys().next();
				this._sessionCache.delete(oldestKey);
			}
			this._sessionCache.set(sessionKey, session);
		}
	};
	function buildConnector$9({ allowH2, maxCachedSessions, socketPath, timeout,...opts }) {
		if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) throw new InvalidArgumentError$50("maxCachedSessions must be a positive integer or zero");
		const options = {
			path: socketPath,
			...opts
		};
		const sessionCache = new SessionCache$1(maxCachedSessions == null ? 100 : maxCachedSessions);
		timeout = timeout == null ? 1e4 : timeout;
		allowH2 = allowH2 != null ? allowH2 : false;
		return function connect$5({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
			let socket;
			if (protocol === "https:") {
				if (!tls$1) tls$1 = __require("tls");
				servername = servername || options.servername || util$36.getServerName(host) || null;
				const sessionKey = servername || hostname;
				const session = sessionCache.get(sessionKey) || null;
				assert$45(sessionKey);
				socket = tls$1.connect({
					highWaterMark: 16384,
					...options,
					servername,
					session,
					localAddress,
					ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
					socket: httpSocket,
					port: port || 443,
					host: hostname
				});
				socket.on("session", function(session$1) {
					sessionCache.set(sessionKey, session$1);
				});
			} else {
				assert$45(!httpSocket, "httpSocket can only be sent on TLS update");
				socket = net$4.connect({
					highWaterMark: 64 * 1024,
					...options,
					localAddress,
					port: port || 80,
					host: hostname
				});
			}
			if (options.keepAlive == null || options.keepAlive) {
				const keepAliveInitialDelay = options.keepAliveInitialDelay === void 0 ? 6e4 : options.keepAliveInitialDelay;
				socket.setKeepAlive(true, keepAliveInitialDelay);
			}
			const cancelTimeout = setupTimeout(() => onConnectTimeout$1(socket), timeout);
			socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
				cancelTimeout();
				if (callback) {
					const cb = callback;
					callback = null;
					cb(null, this);
				}
			}).on("error", function(err) {
				cancelTimeout();
				if (callback) {
					const cb = callback;
					callback = null;
					cb(err);
				}
			});
			return socket;
		};
	}
	function setupTimeout(onConnectTimeout$2, timeout) {
		if (!timeout) return () => {};
		let s1 = null;
		let s2 = null;
		const timeoutId = setTimeout(() => {
			s1 = setImmediate(() => {
				if (process.platform === "win32") s2 = setImmediate(() => onConnectTimeout$2());
				else onConnectTimeout$2();
			});
		}, timeout);
		return () => {
			clearTimeout(timeoutId);
			clearImmediate(s1);
			clearImmediate(s2);
		};
	}
	function onConnectTimeout$1(socket) {
		util$36.destroy(socket, new ConnectTimeoutError$2());
	}
	module.exports = buildConnector$9;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/llhttp/utils.js
var require_utils$3 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/llhttp/utils.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.enumToMap = void 0;
	function enumToMap$1(obj) {
		const res = {};
		Object.keys(obj).forEach((key) => {
			const value = obj[key];
			if (typeof value === "number") res[key] = value;
		});
		return res;
	}
	exports.enumToMap = enumToMap$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/llhttp/constants.js
var require_constants$7 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/llhttp/constants.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
	const utils_1$3 = require_utils$3();
	var ERROR;
	(function(ERROR$1) {
		ERROR$1[ERROR$1["OK"] = 0] = "OK";
		ERROR$1[ERROR$1["INTERNAL"] = 1] = "INTERNAL";
		ERROR$1[ERROR$1["STRICT"] = 2] = "STRICT";
		ERROR$1[ERROR$1["LF_EXPECTED"] = 3] = "LF_EXPECTED";
		ERROR$1[ERROR$1["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
		ERROR$1[ERROR$1["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
		ERROR$1[ERROR$1["INVALID_METHOD"] = 6] = "INVALID_METHOD";
		ERROR$1[ERROR$1["INVALID_URL"] = 7] = "INVALID_URL";
		ERROR$1[ERROR$1["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
		ERROR$1[ERROR$1["INVALID_VERSION"] = 9] = "INVALID_VERSION";
		ERROR$1[ERROR$1["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
		ERROR$1[ERROR$1["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
		ERROR$1[ERROR$1["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
		ERROR$1[ERROR$1["INVALID_STATUS"] = 13] = "INVALID_STATUS";
		ERROR$1[ERROR$1["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
		ERROR$1[ERROR$1["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
		ERROR$1[ERROR$1["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
		ERROR$1[ERROR$1["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
		ERROR$1[ERROR$1["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
		ERROR$1[ERROR$1["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
		ERROR$1[ERROR$1["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
		ERROR$1[ERROR$1["PAUSED"] = 21] = "PAUSED";
		ERROR$1[ERROR$1["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
		ERROR$1[ERROR$1["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
		ERROR$1[ERROR$1["USER"] = 24] = "USER";
	})(ERROR = exports.ERROR || (exports.ERROR = {}));
	var TYPE;
	(function(TYPE$1) {
		TYPE$1[TYPE$1["BOTH"] = 0] = "BOTH";
		TYPE$1[TYPE$1["REQUEST"] = 1] = "REQUEST";
		TYPE$1[TYPE$1["RESPONSE"] = 2] = "RESPONSE";
	})(TYPE = exports.TYPE || (exports.TYPE = {}));
	var FLAGS;
	(function(FLAGS$1) {
		FLAGS$1[FLAGS$1["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
		FLAGS$1[FLAGS$1["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
		FLAGS$1[FLAGS$1["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
		FLAGS$1[FLAGS$1["CHUNKED"] = 8] = "CHUNKED";
		FLAGS$1[FLAGS$1["UPGRADE"] = 16] = "UPGRADE";
		FLAGS$1[FLAGS$1["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
		FLAGS$1[FLAGS$1["SKIPBODY"] = 64] = "SKIPBODY";
		FLAGS$1[FLAGS$1["TRAILING"] = 128] = "TRAILING";
		FLAGS$1[FLAGS$1["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
	})(FLAGS = exports.FLAGS || (exports.FLAGS = {}));
	var LENIENT_FLAGS;
	(function(LENIENT_FLAGS$1) {
		LENIENT_FLAGS$1[LENIENT_FLAGS$1["HEADERS"] = 1] = "HEADERS";
		LENIENT_FLAGS$1[LENIENT_FLAGS$1["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
		LENIENT_FLAGS$1[LENIENT_FLAGS$1["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
	})(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
	var METHODS;
	(function(METHODS$1) {
		METHODS$1[METHODS$1["DELETE"] = 0] = "DELETE";
		METHODS$1[METHODS$1["GET"] = 1] = "GET";
		METHODS$1[METHODS$1["HEAD"] = 2] = "HEAD";
		METHODS$1[METHODS$1["POST"] = 3] = "POST";
		METHODS$1[METHODS$1["PUT"] = 4] = "PUT";
		METHODS$1[METHODS$1["CONNECT"] = 5] = "CONNECT";
		METHODS$1[METHODS$1["OPTIONS"] = 6] = "OPTIONS";
		METHODS$1[METHODS$1["TRACE"] = 7] = "TRACE";
		METHODS$1[METHODS$1["COPY"] = 8] = "COPY";
		METHODS$1[METHODS$1["LOCK"] = 9] = "LOCK";
		METHODS$1[METHODS$1["MKCOL"] = 10] = "MKCOL";
		METHODS$1[METHODS$1["MOVE"] = 11] = "MOVE";
		METHODS$1[METHODS$1["PROPFIND"] = 12] = "PROPFIND";
		METHODS$1[METHODS$1["PROPPATCH"] = 13] = "PROPPATCH";
		METHODS$1[METHODS$1["SEARCH"] = 14] = "SEARCH";
		METHODS$1[METHODS$1["UNLOCK"] = 15] = "UNLOCK";
		METHODS$1[METHODS$1["BIND"] = 16] = "BIND";
		METHODS$1[METHODS$1["REBIND"] = 17] = "REBIND";
		METHODS$1[METHODS$1["UNBIND"] = 18] = "UNBIND";
		METHODS$1[METHODS$1["ACL"] = 19] = "ACL";
		METHODS$1[METHODS$1["REPORT"] = 20] = "REPORT";
		METHODS$1[METHODS$1["MKACTIVITY"] = 21] = "MKACTIVITY";
		METHODS$1[METHODS$1["CHECKOUT"] = 22] = "CHECKOUT";
		METHODS$1[METHODS$1["MERGE"] = 23] = "MERGE";
		METHODS$1[METHODS$1["M-SEARCH"] = 24] = "M-SEARCH";
		METHODS$1[METHODS$1["NOTIFY"] = 25] = "NOTIFY";
		METHODS$1[METHODS$1["SUBSCRIBE"] = 26] = "SUBSCRIBE";
		METHODS$1[METHODS$1["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
		METHODS$1[METHODS$1["PATCH"] = 28] = "PATCH";
		METHODS$1[METHODS$1["PURGE"] = 29] = "PURGE";
		METHODS$1[METHODS$1["MKCALENDAR"] = 30] = "MKCALENDAR";
		METHODS$1[METHODS$1["LINK"] = 31] = "LINK";
		METHODS$1[METHODS$1["UNLINK"] = 32] = "UNLINK";
		METHODS$1[METHODS$1["SOURCE"] = 33] = "SOURCE";
		METHODS$1[METHODS$1["PRI"] = 34] = "PRI";
		METHODS$1[METHODS$1["DESCRIBE"] = 35] = "DESCRIBE";
		METHODS$1[METHODS$1["ANNOUNCE"] = 36] = "ANNOUNCE";
		METHODS$1[METHODS$1["SETUP"] = 37] = "SETUP";
		METHODS$1[METHODS$1["PLAY"] = 38] = "PLAY";
		METHODS$1[METHODS$1["PAUSE"] = 39] = "PAUSE";
		METHODS$1[METHODS$1["TEARDOWN"] = 40] = "TEARDOWN";
		METHODS$1[METHODS$1["GET_PARAMETER"] = 41] = "GET_PARAMETER";
		METHODS$1[METHODS$1["SET_PARAMETER"] = 42] = "SET_PARAMETER";
		METHODS$1[METHODS$1["REDIRECT"] = 43] = "REDIRECT";
		METHODS$1[METHODS$1["RECORD"] = 44] = "RECORD";
		METHODS$1[METHODS$1["FLUSH"] = 45] = "FLUSH";
	})(METHODS = exports.METHODS || (exports.METHODS = {}));
	exports.METHODS_HTTP = [
		METHODS.DELETE,
		METHODS.GET,
		METHODS.HEAD,
		METHODS.POST,
		METHODS.PUT,
		METHODS.CONNECT,
		METHODS.OPTIONS,
		METHODS.TRACE,
		METHODS.COPY,
		METHODS.LOCK,
		METHODS.MKCOL,
		METHODS.MOVE,
		METHODS.PROPFIND,
		METHODS.PROPPATCH,
		METHODS.SEARCH,
		METHODS.UNLOCK,
		METHODS.BIND,
		METHODS.REBIND,
		METHODS.UNBIND,
		METHODS.ACL,
		METHODS.REPORT,
		METHODS.MKACTIVITY,
		METHODS.CHECKOUT,
		METHODS.MERGE,
		METHODS["M-SEARCH"],
		METHODS.NOTIFY,
		METHODS.SUBSCRIBE,
		METHODS.UNSUBSCRIBE,
		METHODS.PATCH,
		METHODS.PURGE,
		METHODS.MKCALENDAR,
		METHODS.LINK,
		METHODS.UNLINK,
		METHODS.PRI,
		METHODS.SOURCE
	];
	exports.METHODS_ICE = [METHODS.SOURCE];
	exports.METHODS_RTSP = [
		METHODS.OPTIONS,
		METHODS.DESCRIBE,
		METHODS.ANNOUNCE,
		METHODS.SETUP,
		METHODS.PLAY,
		METHODS.PAUSE,
		METHODS.TEARDOWN,
		METHODS.GET_PARAMETER,
		METHODS.SET_PARAMETER,
		METHODS.REDIRECT,
		METHODS.RECORD,
		METHODS.FLUSH,
		METHODS.GET,
		METHODS.POST
	];
	exports.METHOD_MAP = utils_1$3.enumToMap(METHODS);
	exports.H_METHOD_MAP = {};
	Object.keys(exports.METHOD_MAP).forEach((key) => {
		if (/^H/.test(key)) exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];
	});
	var FINISH;
	(function(FINISH$1) {
		FINISH$1[FINISH$1["SAFE"] = 0] = "SAFE";
		FINISH$1[FINISH$1["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
		FINISH$1[FINISH$1["UNSAFE"] = 2] = "UNSAFE";
	})(FINISH = exports.FINISH || (exports.FINISH = {}));
	exports.ALPHA = [];
	for (let i$1 = "A".charCodeAt(0); i$1 <= "Z".charCodeAt(0); i$1++) {
		exports.ALPHA.push(String.fromCharCode(i$1));
		exports.ALPHA.push(String.fromCharCode(i$1 + 32));
	}
	exports.NUM_MAP = {
		0: 0,
		1: 1,
		2: 2,
		3: 3,
		4: 4,
		5: 5,
		6: 6,
		7: 7,
		8: 8,
		9: 9
	};
	exports.HEX_MAP = {
		0: 0,
		1: 1,
		2: 2,
		3: 3,
		4: 4,
		5: 5,
		6: 6,
		7: 7,
		8: 8,
		9: 9,
		A: 10,
		B: 11,
		C: 12,
		D: 13,
		E: 14,
		F: 15,
		a: 10,
		b: 11,
		c: 12,
		d: 13,
		e: 14,
		f: 15
	};
	exports.NUM = [
		"0",
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9"
	];
	exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
	exports.MARK = [
		"-",
		"_",
		".",
		"!",
		"~",
		"*",
		"'",
		"(",
		")"
	];
	exports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat([
		"%",
		";",
		":",
		"&",
		"=",
		"+",
		"$",
		","
	]);
	exports.STRICT_URL_CHAR = [
		"!",
		"\"",
		"$",
		"%",
		"&",
		"'",
		"(",
		")",
		"*",
		"+",
		",",
		"-",
		".",
		"/",
		":",
		";",
		"<",
		"=",
		">",
		"@",
		"[",
		"\\",
		"]",
		"^",
		"_",
		"`",
		"{",
		"|",
		"}",
		"~"
	].concat(exports.ALPHANUM);
	exports.URL_CHAR = exports.STRICT_URL_CHAR.concat(["	", "\f"]);
	for (let i$1 = 128; i$1 <= 255; i$1++) exports.URL_CHAR.push(i$1);
	exports.HEX = exports.NUM.concat([
		"a",
		"b",
		"c",
		"d",
		"e",
		"f",
		"A",
		"B",
		"C",
		"D",
		"E",
		"F"
	]);
	exports.STRICT_TOKEN = [
		"!",
		"#",
		"$",
		"%",
		"&",
		"'",
		"*",
		"+",
		"-",
		".",
		"^",
		"_",
		"`",
		"|",
		"~"
	].concat(exports.ALPHANUM);
	exports.TOKEN = exports.STRICT_TOKEN.concat([" "]);
	exports.HEADER_CHARS = ["	"];
	for (let i$1 = 32; i$1 <= 255; i$1++) if (i$1 !== 127) exports.HEADER_CHARS.push(i$1);
	exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c$1) => c$1 !== 44);
	exports.MAJOR = exports.NUM_MAP;
	exports.MINOR = exports.MAJOR;
	var HEADER_STATE;
	(function(HEADER_STATE$1) {
		HEADER_STATE$1[HEADER_STATE$1["GENERAL"] = 0] = "GENERAL";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION"] = 1] = "CONNECTION";
		HEADER_STATE$1[HEADER_STATE$1["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
		HEADER_STATE$1[HEADER_STATE$1["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
		HEADER_STATE$1[HEADER_STATE$1["UPGRADE"] = 4] = "UPGRADE";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
		HEADER_STATE$1[HEADER_STATE$1["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
	})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
	exports.SPECIAL_HEADERS = {
		"connection": HEADER_STATE.CONNECTION,
		"content-length": HEADER_STATE.CONTENT_LENGTH,
		"proxy-connection": HEADER_STATE.CONNECTION,
		"transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
		"upgrade": HEADER_STATE.UPGRADE
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/handler/RedirectHandler.js
var require_RedirectHandler = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/handler/RedirectHandler.js"(exports, module) {
	const util$35 = require_util$12();
	const { kBodyUsed: kBodyUsed$2 } = require_symbols$5();
	const assert$44 = __require("assert");
	const { InvalidArgumentError: InvalidArgumentError$49 } = require_errors$1();
	const EE$4 = __require("events");
	const redirectableStatusCodes$1 = [
		300,
		301,
		302,
		303,
		307,
		308
	];
	const kBody$4 = Symbol("body");
	var BodyAsyncIterable$2 = class {
		constructor(body) {
			this[kBody$4] = body;
			this[kBodyUsed$2] = false;
		}
		async *[Symbol.asyncIterator]() {
			assert$44(!this[kBodyUsed$2], "disturbed");
			this[kBodyUsed$2] = true;
			yield* this[kBody$4];
		}
	};
	var RedirectHandler$5 = class {
		constructor(dispatch, maxRedirections, opts, handler$1) {
			if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new InvalidArgumentError$49("maxRedirections must be a positive number");
			util$35.validateHandler(handler$1, opts.method, opts.upgrade);
			this.dispatch = dispatch;
			this.location = null;
			this.abort = null;
			this.opts = {
				...opts,
				maxRedirections: 0
			};
			this.maxRedirections = maxRedirections;
			this.handler = handler$1;
			this.history = [];
			if (util$35.isStream(this.opts.body)) {
				if (util$35.bodyLength(this.opts.body) === 0) this.opts.body.on("data", function() {
					assert$44(false);
				});
				if (typeof this.opts.body.readableDidRead !== "boolean") {
					this.opts.body[kBodyUsed$2] = false;
					EE$4.prototype.on.call(this.opts.body, "data", function() {
						this[kBodyUsed$2] = true;
					});
				}
			} else if (this.opts.body && typeof this.opts.body.pipeTo === "function") this.opts.body = new BodyAsyncIterable$2(this.opts.body);
			else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util$35.isIterable(this.opts.body)) this.opts.body = new BodyAsyncIterable$2(this.opts.body);
		}
		onConnect(abort$2) {
			this.abort = abort$2;
			this.handler.onConnect(abort$2, { history: this.history });
		}
		onUpgrade(statusCode, headers, socket) {
			this.handler.onUpgrade(statusCode, headers, socket);
		}
		onError(error$1) {
			this.handler.onError(error$1);
		}
		onHeaders(statusCode, headers, resume$2, statusText) {
			this.location = this.history.length >= this.maxRedirections || util$35.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);
			if (this.opts.origin) this.history.push(new URL(this.opts.path, this.opts.origin));
			if (!this.location) return this.handler.onHeaders(statusCode, headers, resume$2, statusText);
			const { origin, pathname, search } = util$35.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
			const path$9 = search ? `${pathname}${search}` : pathname;
			this.opts.headers = cleanRequestHeaders$1(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
			this.opts.path = path$9;
			this.opts.origin = origin;
			this.opts.maxRedirections = 0;
			this.opts.query = null;
			if (statusCode === 303 && this.opts.method !== "HEAD") {
				this.opts.method = "GET";
				this.opts.body = null;
			}
		}
		onData(chunk) {
			if (this.location) {} else return this.handler.onData(chunk);
		}
		onComplete(trailers) {
			if (this.location) {
				this.location = null;
				this.abort = null;
				this.dispatch(this.opts, this);
			} else this.handler.onComplete(trailers);
		}
		onBodySent(chunk) {
			if (this.handler.onBodySent) this.handler.onBodySent(chunk);
		}
	};
	function parseLocation(statusCode, headers) {
		if (redirectableStatusCodes$1.indexOf(statusCode) === -1) return null;
		for (let i$1 = 0; i$1 < headers.length; i$1 += 2) if (headers[i$1].toString().toLowerCase() === "location") return headers[i$1 + 1];
	}
	function shouldRemoveHeader$1(header, removeContent, unknownOrigin) {
		if (header.length === 4) return util$35.headerNameToString(header) === "host";
		if (removeContent && util$35.headerNameToString(header).startsWith("content-")) return true;
		if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
			const name$2 = util$35.headerNameToString(header);
			return name$2 === "authorization" || name$2 === "cookie" || name$2 === "proxy-authorization";
		}
		return false;
	}
	function cleanRequestHeaders$1(headers, removeContent, unknownOrigin) {
		const ret = [];
		if (Array.isArray(headers)) {
			for (let i$1 = 0; i$1 < headers.length; i$1 += 2) if (!shouldRemoveHeader$1(headers[i$1], removeContent, unknownOrigin)) ret.push(headers[i$1], headers[i$1 + 1]);
		} else if (headers && typeof headers === "object") {
			for (const key of Object.keys(headers)) if (!shouldRemoveHeader$1(key, removeContent, unknownOrigin)) ret.push(key, headers[key]);
		} else assert$44(headers == null, "headers must be an object or an array");
		return ret;
	}
	module.exports = RedirectHandler$5;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/interceptor/redirectInterceptor.js
var require_redirectInterceptor = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/interceptor/redirectInterceptor.js"(exports, module) {
	const RedirectHandler$4 = require_RedirectHandler();
	function createRedirectInterceptor$4({ maxRedirections: defaultMaxRedirections }) {
		return (dispatch) => {
			return function Intercept(opts, handler$1) {
				const { maxRedirections = defaultMaxRedirections } = opts;
				if (!maxRedirections) return dispatch(opts, handler$1);
				const redirectHandler = new RedirectHandler$4(dispatch, maxRedirections, opts, handler$1);
				opts = {
					...opts,
					maxRedirections: 0
				};
				return dispatch(opts, redirectHandler);
			};
		};
	}
	module.exports = createRedirectInterceptor$4;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/llhttp/llhttp-wasm.js
var require_llhttp_wasm$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/llhttp/llhttp-wasm.js"(exports, module) {
	module.exports = "AGFzbQEAAAABMAhgAX8Bf2ADf39/AX9gBH9/f38Bf2AAAGADf39/AGABfwBgAn9/AGAGf39/f39/AALLAQgDZW52GHdhc21fb25faGVhZGVyc19jb21wbGV0ZQACA2VudhV3YXNtX29uX21lc3NhZ2VfYmVnaW4AAANlbnYLd2FzbV9vbl91cmwAAQNlbnYOd2FzbV9vbl9zdGF0dXMAAQNlbnYUd2FzbV9vbl9oZWFkZXJfZmllbGQAAQNlbnYUd2FzbV9vbl9oZWFkZXJfdmFsdWUAAQNlbnYMd2FzbV9vbl9ib2R5AAEDZW52GHdhc21fb25fbWVzc2FnZV9jb21wbGV0ZQAAA0ZFAwMEAAAFAAAAAAAABQEFAAUFBQAABgAAAAAGBgYGAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAAABAQcAAAUFAwABBAUBcAESEgUDAQACBggBfwFBgNQECwfRBSIGbWVtb3J5AgALX2luaXRpYWxpemUACRlfX2luZGlyZWN0X2Z1bmN0aW9uX3RhYmxlAQALbGxodHRwX2luaXQAChhsbGh0dHBfc2hvdWxkX2tlZXBfYWxpdmUAQQxsbGh0dHBfYWxsb2MADAZtYWxsb2MARgtsbGh0dHBfZnJlZQANBGZyZWUASA9sbGh0dHBfZ2V0X3R5cGUADhVsbGh0dHBfZ2V0X2h0dHBfbWFqb3IADxVsbGh0dHBfZ2V0X2h0dHBfbWlub3IAEBFsbGh0dHBfZ2V0X21ldGhvZAARFmxsaHR0cF9nZXRfc3RhdHVzX2NvZGUAEhJsbGh0dHBfZ2V0X3VwZ3JhZGUAEwxsbGh0dHBfcmVzZXQAFA5sbGh0dHBfZXhlY3V0ZQAVFGxsaHR0cF9zZXR0aW5nc19pbml0ABYNbGxodHRwX2ZpbmlzaAAXDGxsaHR0cF9wYXVzZQAYDWxsaHR0cF9yZXN1bWUAGRtsbGh0dHBfcmVzdW1lX2FmdGVyX3VwZ3JhZGUAGhBsbGh0dHBfZ2V0X2Vycm5vABsXbGxodHRwX2dldF9lcnJvcl9yZWFzb24AHBdsbGh0dHBfc2V0X2Vycm9yX3JlYXNvbgAdFGxsaHR0cF9nZXRfZXJyb3JfcG9zAB4RbGxodHRwX2Vycm5vX25hbWUAHxJsbGh0dHBfbWV0aG9kX25hbWUAIBJsbGh0dHBfc3RhdHVzX25hbWUAIRpsbGh0dHBfc2V0X2xlbmllbnRfaGVhZGVycwAiIWxsaHR0cF9zZXRfbGVuaWVudF9jaHVua2VkX2xlbmd0aAAjHWxsaHR0cF9zZXRfbGVuaWVudF9rZWVwX2FsaXZlACQkbGxodHRwX3NldF9sZW5pZW50X3RyYW5zZmVyX2VuY29kaW5nACUYbGxodHRwX21lc3NhZ2VfbmVlZHNfZW9mAD8JFwEAQQELEQECAwQFCwYHNTk3MS8tJyspCsLgAkUCAAsIABCIgICAAAsZACAAEMKAgIAAGiAAIAI2AjggACABOgAoCxwAIAAgAC8BMiAALQAuIAAQwYCAgAAQgICAgAALKgEBf0HAABDGgICAACIBEMKAgIAAGiABQYCIgIAANgI4IAEgADoAKCABCwoAIAAQyICAgAALBwAgAC0AKAsHACAALQAqCwcAIAAtACsLBwAgAC0AKQsHACAALwEyCwcAIAAtAC4LRQEEfyAAKAIYIQEgAC0ALSECIAAtACghAyAAKAI4IQQgABDCgICAABogACAENgI4IAAgAzoAKCAAIAI6AC0gACABNgIYCxEAIAAgASABIAJqEMOAgIAACxAAIABBAEHcABDMgICAABoLZwEBf0EAIQECQCAAKAIMDQACQAJAAkACQCAALQAvDgMBAAMCCyAAKAI4IgFFDQAgASgCLCIBRQ0AIAAgARGAgICAAAAiAQ0DC0EADwsQyoCAgAAACyAAQcOWgIAANgIQQQ4hAQsgAQseAAJAIAAoAgwNACAAQdGbgIAANgIQIABBFTYCDAsLFgACQCAAKAIMQRVHDQAgAEEANgIMCwsWAAJAIAAoAgxBFkcNACAAQQA2AgwLCwcAIAAoAgwLBwAgACgCEAsJACAAIAE2AhALBwAgACgCFAsiAAJAIABBJEkNABDKgICAAAALIABBAnRBoLOAgABqKAIACyIAAkAgAEEuSQ0AEMqAgIAAAAsgAEECdEGwtICAAGooAgAL7gsBAX9B66iAgAAhAQJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIABBnH9qDvQDY2IAAWFhYWFhYQIDBAVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhBgcICQoLDA0OD2FhYWFhEGFhYWFhYWFhYWFhEWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYRITFBUWFxgZGhthYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2YTc4OTphYWFhYWFhYTthYWE8YWFhYT0+P2FhYWFhYWFhQGFhQWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYUJDREVGR0hJSktMTU5PUFFSU2FhYWFhYWFhVFVWV1hZWlthXF1hYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFeYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhX2BhC0Hhp4CAAA8LQaShgIAADwtBy6yAgAAPC0H+sYCAAA8LQcCkgIAADwtBq6SAgAAPC0GNqICAAA8LQeKmgIAADwtBgLCAgAAPC0G5r4CAAA8LQdekgIAADwtB75+AgAAPC0Hhn4CAAA8LQfqfgIAADwtB8qCAgAAPC0Gor4CAAA8LQa6ygIAADwtBiLCAgAAPC0Hsp4CAAA8LQYKigIAADwtBjp2AgAAPC0HQroCAAA8LQcqjgIAADwtBxbKAgAAPC0HfnICAAA8LQdKcgIAADwtBxKCAgAAPC0HXoICAAA8LQaKfgIAADwtB7a6AgAAPC0GrsICAAA8LQdSlgIAADwtBzK6AgAAPC0H6roCAAA8LQfyrgIAADwtB0rCAgAAPC0HxnYCAAA8LQbuggIAADwtB96uAgAAPC0GQsYCAAA8LQdexgIAADwtBoq2AgAAPC0HUp4CAAA8LQeCrgIAADwtBn6yAgAAPC0HrsYCAAA8LQdWfgIAADwtByrGAgAAPC0HepYCAAA8LQdSegIAADwtB9JyAgAAPC0GnsoCAAA8LQbGdgIAADwtBoJ2AgAAPC0G5sYCAAA8LQbywgIAADwtBkqGAgAAPC0GzpoCAAA8LQemsgIAADwtBrJ6AgAAPC0HUq4CAAA8LQfemgIAADwtBgKaAgAAPC0GwoYCAAA8LQf6egIAADwtBjaOAgAAPC0GJrYCAAA8LQfeigIAADwtBoLGAgAAPC0Gun4CAAA8LQcalgIAADwtB6J6AgAAPC0GTooCAAA8LQcKvgIAADwtBw52AgAAPC0GLrICAAA8LQeGdgIAADwtBja+AgAAPC0HqoYCAAA8LQbStgIAADwtB0q+AgAAPC0HfsoCAAA8LQdKygIAADwtB8LCAgAAPC0GpooCAAA8LQfmjgIAADwtBmZ6AgAAPC0G1rICAAA8LQZuwgIAADwtBkrKAgAAPC0G2q4CAAA8LQcKigIAADwtB+LKAgAAPC0GepYCAAA8LQdCigIAADwtBup6AgAAPC0GBnoCAAA8LEMqAgIAAAAtB1qGAgAAhAQsgAQsWACAAIAAtAC1B/gFxIAFBAEdyOgAtCxkAIAAgAC0ALUH9AXEgAUEAR0EBdHI6AC0LGQAgACAALQAtQfsBcSABQQBHQQJ0cjoALQsZACAAIAAtAC1B9wFxIAFBAEdBA3RyOgAtCy4BAn9BACEDAkAgACgCOCIERQ0AIAQoAgAiBEUNACAAIAQRgICAgAAAIQMLIAMLSQECf0EAIQMCQCAAKAI4IgRFDQAgBCgCBCIERQ0AIAAgASACIAFrIAQRgYCAgAAAIgNBf0cNACAAQcaRgIAANgIQQRghAwsgAwsuAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAIwIgRFDQAgACAEEYCAgIAAACEDCyADC0kBAn9BACEDAkAgACgCOCIERQ0AIAQoAggiBEUNACAAIAEgAiABayAEEYGAgIAAACIDQX9HDQAgAEH2ioCAADYCEEEYIQMLIAMLLgECf0EAIQMCQCAAKAI4IgRFDQAgBCgCNCIERQ0AIAAgBBGAgICAAAAhAwsgAwtJAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAIMIgRFDQAgACABIAIgAWsgBBGBgICAAAAiA0F/Rw0AIABB7ZqAgAA2AhBBGCEDCyADCy4BAn9BACEDAkAgACgCOCIERQ0AIAQoAjgiBEUNACAAIAQRgICAgAAAIQMLIAMLSQECf0EAIQMCQCAAKAI4IgRFDQAgBCgCECIERQ0AIAAgASACIAFrIAQRgYCAgAAAIgNBf0cNACAAQZWQgIAANgIQQRghAwsgAwsuAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAI8IgRFDQAgACAEEYCAgIAAACEDCyADC0kBAn9BACEDAkAgACgCOCIERQ0AIAQoAhQiBEUNACAAIAEgAiABayAEEYGAgIAAACIDQX9HDQAgAEGqm4CAADYCEEEYIQMLIAMLLgECf0EAIQMCQCAAKAI4IgRFDQAgBCgCQCIERQ0AIAAgBBGAgICAAAAhAwsgAwtJAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAIYIgRFDQAgACABIAIgAWsgBBGBgICAAAAiA0F/Rw0AIABB7ZOAgAA2AhBBGCEDCyADCy4BAn9BACEDAkAgACgCOCIERQ0AIAQoAkQiBEUNACAAIAQRgICAgAAAIQMLIAMLLgECf0EAIQMCQCAAKAI4IgRFDQAgBCgCJCIERQ0AIAAgBBGAgICAAAAhAwsgAwsuAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAIsIgRFDQAgACAEEYCAgIAAACEDCyADC0kBAn9BACEDAkAgACgCOCIERQ0AIAQoAigiBEUNACAAIAEgAiABayAEEYGAgIAAACIDQX9HDQAgAEH2iICAADYCEEEYIQMLIAMLLgECf0EAIQMCQCAAKAI4IgRFDQAgBCgCUCIERQ0AIAAgBBGAgICAAAAhAwsgAwtJAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAIcIgRFDQAgACABIAIgAWsgBBGBgICAAAAiA0F/Rw0AIABBwpmAgAA2AhBBGCEDCyADCy4BAn9BACEDAkAgACgCOCIERQ0AIAQoAkgiBEUNACAAIAQRgICAgAAAIQMLIAMLSQECf0EAIQMCQCAAKAI4IgRFDQAgBCgCICIERQ0AIAAgASACIAFrIAQRgYCAgAAAIgNBf0cNACAAQZSUgIAANgIQQRghAwsgAwsuAQJ/QQAhAwJAIAAoAjgiBEUNACAEKAJMIgRFDQAgACAEEYCAgIAAACEDCyADCy4BAn9BACEDAkAgACgCOCIERQ0AIAQoAlQiBEUNACAAIAQRgICAgAAAIQMLIAMLLgECf0EAIQMCQCAAKAI4IgRFDQAgBCgCWCIERQ0AIAAgBBGAgICAAAAhAwsgAwtFAQF/AkACQCAALwEwQRRxQRRHDQBBASEDIAAtAChBAUYNASAALwEyQeUARiEDDAELIAAtAClBBUYhAwsgACADOgAuQQAL/gEBA39BASEDAkAgAC8BMCIEQQhxDQAgACkDIEIAUiEDCwJAAkAgAC0ALkUNAEEBIQUgAC0AKUEFRg0BQQEhBSAEQcAAcUUgA3FBAUcNAQtBACEFIARBwABxDQBBAiEFIARB//8DcSIDQQhxDQACQCADQYAEcUUNAAJAIAAtAChBAUcNACAALQAtQQpxDQBBBQ8LQQQPCwJAIANBIHENAAJAIAAtAChBAUYNACAALwEyQf//A3EiAEGcf2pB5ABJDQAgAEHMAUYNACAAQbACRg0AQQQhBSAEQShxRQ0CIANBiARxQYAERg0CC0EADwtBAEEDIAApAyBQGyEFCyAFC2IBAn9BACEBAkAgAC0AKEEBRg0AIAAvATJB//8DcSICQZx/akHkAEkNACACQcwBRg0AIAJBsAJGDQAgAC8BMCIAQcAAcQ0AQQEhASAAQYgEcUGABEYNACAAQShxRSEBCyABC6cBAQN/AkACQAJAIAAtACpFDQAgAC0AK0UNAEEAIQMgAC8BMCIEQQJxRQ0BDAILQQAhAyAALwEwIgRBAXFFDQELQQEhAyAALQAoQQFGDQAgAC8BMkH//wNxIgVBnH9qQeQASQ0AIAVBzAFGDQAgBUGwAkYNACAEQcAAcQ0AQQAhAyAEQYgEcUGABEYNACAEQShxQQBHIQMLIABBADsBMCAAQQA6AC8gAwuZAQECfwJAAkACQCAALQAqRQ0AIAAtACtFDQBBACEBIAAvATAiAkECcUUNAQwCC0EAIQEgAC8BMCICQQFxRQ0BC0EBIQEgAC0AKEEBRg0AIAAvATJB//8DcSIAQZx/akHkAEkNACAAQcwBRg0AIABBsAJGDQAgAkHAAHENAEEAIQEgAkGIBHFBgARGDQAgAkEocUEARyEBCyABC1kAIABBGGpCADcDACAAQgA3AwAgAEE4akIANwMAIABBMGpCADcDACAAQShqQgA3AwAgAEEgakIANwMAIABBEGpCADcDACAAQQhqQgA3AwAgAEHdATYCHEEAC3sBAX8CQCAAKAIMIgMNAAJAIAAoAgRFDQAgACABNgIECwJAIAAgASACEMSAgIAAIgMNACAAKAIMDwsgACADNgIcQQAhAyAAKAIEIgFFDQAgACABIAIgACgCCBGBgICAAAAiAUUNACAAIAI2AhQgACABNgIMIAEhAwsgAwvk8wEDDn8DfgR/I4CAgIAAQRBrIgMkgICAgAAgASEEIAEhBSABIQYgASEHIAEhCCABIQkgASEKIAEhCyABIQwgASENIAEhDiABIQ8CQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgACgCHCIQQX9qDt0B2gEB2QECAwQFBgcICQoLDA0O2AEPENcBERLWARMUFRYXGBkaG+AB3wEcHR7VAR8gISIjJCXUASYnKCkqKyzTAdIBLS7RAdABLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVG2wFHSElKzwHOAUvNAUzMAU1OT1BRUlNUVVZXWFlaW1xdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f4ABgQGCAYMBhAGFAYYBhwGIAYkBigGLAYwBjQGOAY8BkAGRAZIBkwGUAZUBlgGXAZgBmQGaAZsBnAGdAZ4BnwGgAaEBogGjAaQBpQGmAacBqAGpAaoBqwGsAa0BrgGvAbABsQGyAbMBtAG1AbYBtwHLAcoBuAHJAbkByAG6AbsBvAG9Ab4BvwHAAcEBwgHDAcQBxQHGAQDcAQtBACEQDMYBC0EOIRAMxQELQQ0hEAzEAQtBDyEQDMMBC0EQIRAMwgELQRMhEAzBAQtBFCEQDMABC0EVIRAMvwELQRYhEAy+AQtBFyEQDL0BC0EYIRAMvAELQRkhEAy7AQtBGiEQDLoBC0EbIRAMuQELQRwhEAy4AQtBCCEQDLcBC0EdIRAMtgELQSAhEAy1AQtBHyEQDLQBC0EHIRAMswELQSEhEAyyAQtBIiEQDLEBC0EeIRAMsAELQSMhEAyvAQtBEiEQDK4BC0ERIRAMrQELQSQhEAysAQtBJSEQDKsBC0EmIRAMqgELQSchEAypAQtBwwEhEAyoAQtBKSEQDKcBC0ErIRAMpgELQSwhEAylAQtBLSEQDKQBC0EuIRAMowELQS8hEAyiAQtBxAEhEAyhAQtBMCEQDKABC0E0IRAMnwELQQwhEAyeAQtBMSEQDJ0BC0EyIRAMnAELQTMhEAybAQtBOSEQDJoBC0E1IRAMmQELQcUBIRAMmAELQQshEAyXAQtBOiEQDJYBC0E2IRAMlQELQQohEAyUAQtBNyEQDJMBC0E4IRAMkgELQTwhEAyRAQtBOyEQDJABC0E9IRAMjwELQQkhEAyOAQtBKCEQDI0BC0E+IRAMjAELQT8hEAyLAQtBwAAhEAyKAQtBwQAhEAyJAQtBwgAhEAyIAQtBwwAhEAyHAQtBxAAhEAyGAQtBxQAhEAyFAQtBxgAhEAyEAQtBKiEQDIMBC0HHACEQDIIBC0HIACEQDIEBC0HJACEQDIABC0HKACEQDH8LQcsAIRAMfgtBzQAhEAx9C0HMACEQDHwLQc4AIRAMewtBzwAhEAx6C0HQACEQDHkLQdEAIRAMeAtB0gAhEAx3C0HTACEQDHYLQdQAIRAMdQtB1gAhEAx0C0HVACEQDHMLQQYhEAxyC0HXACEQDHELQQUhEAxwC0HYACEQDG8LQQQhEAxuC0HZACEQDG0LQdoAIRAMbAtB2wAhEAxrC0HcACEQDGoLQQMhEAxpC0HdACEQDGgLQd4AIRAMZwtB3wAhEAxmC0HhACEQDGULQeAAIRAMZAtB4gAhEAxjC0HjACEQDGILQQIhEAxhC0HkACEQDGALQeUAIRAMXwtB5gAhEAxeC0HnACEQDF0LQegAIRAMXAtB6QAhEAxbC0HqACEQDFoLQesAIRAMWQtB7AAhEAxYC0HtACEQDFcLQe4AIRAMVgtB7wAhEAxVC0HwACEQDFQLQfEAIRAMUwtB8gAhEAxSC0HzACEQDFELQfQAIRAMUAtB9QAhEAxPC0H2ACEQDE4LQfcAIRAMTQtB+AAhEAxMC0H5ACEQDEsLQfoAIRAMSgtB+wAhEAxJC0H8ACEQDEgLQf0AIRAMRwtB/gAhEAxGC0H/ACEQDEULQYABIRAMRAtBgQEhEAxDC0GCASEQDEILQYMBIRAMQQtBhAEhEAxAC0GFASEQDD8LQYYBIRAMPgtBhwEhEAw9C0GIASEQDDwLQYkBIRAMOwtBigEhEAw6C0GLASEQDDkLQYwBIRAMOAtBjQEhEAw3C0GOASEQDDYLQY8BIRAMNQtBkAEhEAw0C0GRASEQDDMLQZIBIRAMMgtBkwEhEAwxC0GUASEQDDALQZUBIRAMLwtBlgEhEAwuC0GXASEQDC0LQZgBIRAMLAtBmQEhEAwrC0GaASEQDCoLQZsBIRAMKQtBnAEhEAwoC0GdASEQDCcLQZ4BIRAMJgtBnwEhEAwlC0GgASEQDCQLQaEBIRAMIwtBogEhEAwiC0GjASEQDCELQaQBIRAMIAtBpQEhEAwfC0GmASEQDB4LQacBIRAMHQtBqAEhEAwcC0GpASEQDBsLQaoBIRAMGgtBqwEhEAwZC0GsASEQDBgLQa0BIRAMFwtBrgEhEAwWC0EBIRAMFQtBrwEhEAwUC0GwASEQDBMLQbEBIRAMEgtBswEhEAwRC0GyASEQDBALQbQBIRAMDwtBtQEhEAwOC0G2ASEQDA0LQbcBIRAMDAtBuAEhEAwLC0G5ASEQDAoLQboBIRAMCQtBuwEhEAwIC0HGASEQDAcLQbwBIRAMBgtBvQEhEAwFC0G+ASEQDAQLQb8BIRAMAwtBwAEhEAwCC0HCASEQDAELQcEBIRALA0ACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCAQDscBAAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxweHyAhIyUoP0BBREVGR0hJSktMTU9QUVJT3gNXWVtcXWBiZWZnaGlqa2xtb3BxcnN0dXZ3eHl6e3x9foABggGFAYYBhwGJAYsBjAGNAY4BjwGQAZEBlAGVAZYBlwGYAZkBmgGbAZwBnQGeAZ8BoAGhAaIBowGkAaUBpgGnAagBqQGqAasBrAGtAa4BrwGwAbEBsgGzAbQBtQG2AbcBuAG5AboBuwG8Ab0BvgG/AcABwQHCAcMBxAHFAcYBxwHIAckBygHLAcwBzQHOAc8B0AHRAdIB0wHUAdUB1gHXAdgB2QHaAdsB3AHdAd4B4AHhAeIB4wHkAeUB5gHnAegB6QHqAesB7AHtAe4B7wHwAfEB8gHzAZkCpAKwAv4C/gILIAEiBCACRw3zAUHdASEQDP8DCyABIhAgAkcN3QFBwwEhEAz+AwsgASIBIAJHDZABQfcAIRAM/QMLIAEiASACRw2GAUHvACEQDPwDCyABIgEgAkcNf0HqACEQDPsDCyABIgEgAkcNe0HoACEQDPoDCyABIgEgAkcNeEHmACEQDPkDCyABIgEgAkcNGkEYIRAM+AMLIAEiASACRw0UQRIhEAz3AwsgASIBIAJHDVlBxQAhEAz2AwsgASIBIAJHDUpBPyEQDPUDCyABIgEgAkcNSEE8IRAM9AMLIAEiASACRw1BQTEhEAzzAwsgAC0ALkEBRg3rAwyHAgsgACABIgEgAhDAgICAAEEBRw3mASAAQgA3AyAM5wELIAAgASIBIAIQtICAgAAiEA3nASABIQEM9QILAkAgASIBIAJHDQBBBiEQDPADCyAAIAFBAWoiASACELuAgIAAIhAN6AEgASEBDDELIABCADcDIEESIRAM1QMLIAEiECACRw0rQR0hEAztAwsCQCABIgEgAkYNACABQQFqIQFBECEQDNQDC0EHIRAM7AMLIABCACAAKQMgIhEgAiABIhBrrSISfSITIBMgEVYbNwMgIBEgElYiFEUN5QFBCCEQDOsDCwJAIAEiASACRg0AIABBiYCAgAA2AgggACABNgIEIAEhAUEUIRAM0gMLQQkhEAzqAwsgASEBIAApAyBQDeQBIAEhAQzyAgsCQCABIgEgAkcNAEELIRAM6QMLIAAgAUEBaiIBIAIQtoCAgAAiEA3lASABIQEM8gILIAAgASIBIAIQuICAgAAiEA3lASABIQEM8gILIAAgASIBIAIQuICAgAAiEA3mASABIQEMDQsgACABIgEgAhC6gICAACIQDecBIAEhAQzwAgsCQCABIgEgAkcNAEEPIRAM5QMLIAEtAAAiEEE7Rg0IIBBBDUcN6AEgAUEBaiEBDO8CCyAAIAEiASACELqAgIAAIhAN6AEgASEBDPICCwNAAkAgAS0AAEHwtYCAAGotAAAiEEEBRg0AIBBBAkcN6wEgACgCBCEQIABBADYCBCAAIBAgAUEBaiIBELmAgIAAIhAN6gEgASEBDPQCCyABQQFqIgEgAkcNAAtBEiEQDOIDCyAAIAEiASACELqAgIAAIhAN6QEgASEBDAoLIAEiASACRw0GQRshEAzgAwsCQCABIgEgAkcNAEEWIRAM4AMLIABBioCAgAA2AgggACABNgIEIAAgASACELiAgIAAIhAN6gEgASEBQSAhEAzGAwsCQCABIgEgAkYNAANAAkAgAS0AAEHwt4CAAGotAAAiEEECRg0AAkAgEEF/ag4E5QHsAQDrAewBCyABQQFqIQFBCCEQDMgDCyABQQFqIgEgAkcNAAtBFSEQDN8DC0EVIRAM3gMLA0ACQCABLQAAQfC5gIAAai0AACIQQQJGDQAgEEF/ag4E3gHsAeAB6wHsAQsgAUEBaiIBIAJHDQALQRghEAzdAwsCQCABIgEgAkYNACAAQYuAgIAANgIIIAAgATYCBCABIQFBByEQDMQDC0EZIRAM3AMLIAFBAWohAQwCCwJAIAEiFCACRw0AQRohEAzbAwsgFCEBAkAgFC0AAEFzag4U3QLuAu4C7gLuAu4C7gLuAu4C7gLuAu4C7gLuAu4C7gLuAu4C7gIA7gILQQAhECAAQQA2AhwgAEGvi4CAADYCECAAQQI2AgwgACAUQQFqNgIUDNoDCwJAIAEtAAAiEEE7Rg0AIBBBDUcN6AEgAUEBaiEBDOUCCyABQQFqIQELQSIhEAy/AwsCQCABIhAgAkcNAEEcIRAM2AMLQgAhESAQIQEgEC0AAEFQag435wHmAQECAwQFBgcIAAAAAAAAAAkKCwwNDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADxAREhMUAAtBHiEQDL0DC0ICIREM5QELQgMhEQzkAQtCBCERDOMBC0IFIREM4gELQgYhEQzhAQtCByERDOABC0IIIREM3wELQgkhEQzeAQtCCiERDN0BC0ILIREM3AELQgwhEQzbAQtCDSERDNoBC0IOIREM2QELQg8hEQzYAQtCCiERDNcBC0ILIREM1gELQgwhEQzVAQtCDSERDNQBC0IOIREM0wELQg8hEQzSAQtCACERAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCAQLQAAQVBqDjflAeQBAAECAwQFBgfmAeYB5gHmAeYB5gHmAQgJCgsMDeYB5gHmAeYB5gHmAeYB5gHmAeYB5gHmAeYB5gHmAeYB5gHmAeYB5gHmAeYB5gHmAeYB5gEODxAREhPmAQtCAiERDOQBC0IDIREM4wELQgQhEQziAQtCBSERDOEBC0IGIREM4AELQgchEQzfAQtCCCERDN4BC0IJIREM3QELQgohEQzcAQtCCyERDNsBC0IMIREM2gELQg0hEQzZAQtCDiERDNgBC0IPIREM1wELQgohEQzWAQtCCyERDNUBC0IMIREM1AELQg0hEQzTAQtCDiERDNIBC0IPIREM0QELIABCACAAKQMgIhEgAiABIhBrrSISfSITIBMgEVYbNwMgIBEgElYiFEUN0gFBHyEQDMADCwJAIAEiASACRg0AIABBiYCAgAA2AgggACABNgIEIAEhAUEkIRAMpwMLQSAhEAy/AwsgACABIhAgAhC+gICAAEF/ag4FtgEAxQIB0QHSAQtBESEQDKQDCyAAQQE6AC8gECEBDLsDCyABIgEgAkcN0gFBJCEQDLsDCyABIg0gAkcNHkHGACEQDLoDCyAAIAEiASACELKAgIAAIhAN1AEgASEBDLUBCyABIhAgAkcNJkHQACEQDLgDCwJAIAEiASACRw0AQSghEAy4AwsgAEEANgIEIABBjICAgAA2AgggACABIAEQsYCAgAAiEA3TASABIQEM2AELAkAgASIQIAJHDQBBKSEQDLcDCyAQLQAAIgFBIEYNFCABQQlHDdMBIBBBAWohAQwVCwJAIAEiASACRg0AIAFBAWohAQwXC0EqIRAMtQMLAkAgASIQIAJHDQBBKyEQDLUDCwJAIBAtAAAiAUEJRg0AIAFBIEcN1QELIAAtACxBCEYN0wEgECEBDJEDCwJAIAEiASACRw0AQSwhEAy0AwsgAS0AAEEKRw3VASABQQFqIQEMyQILIAEiDiACRw3VAUEvIRAMsgMLA0ACQCABLQAAIhBBIEYNAAJAIBBBdmoOBADcAdwBANoBCyABIQEM4AELIAFBAWoiASACRw0AC0ExIRAMsQMLQTIhECABIhQgAkYNsAMgAiAUayAAKAIAIgFqIRUgFCABa0EDaiEWAkADQCAULQAAIhdBIHIgFyAXQb9/akH/AXFBGkkbQf8BcSABQfC7gIAAai0AAEcNAQJAIAFBA0cNAEEGIQEMlgMLIAFBAWohASAUQQFqIhQgAkcNAAsgACAVNgIADLEDCyAAQQA2AgAgFCEBDNkBC0EzIRAgASIUIAJGDa8DIAIgFGsgACgCACIBaiEVIBQgAWtBCGohFgJAA0AgFC0AACIXQSByIBcgF0G/f2pB/wFxQRpJG0H/AXEgAUH0u4CAAGotAABHDQECQCABQQhHDQBBBSEBDJUDCyABQQFqIQEgFEEBaiIUIAJHDQALIAAgFTYCAAywAwsgAEEANgIAIBQhAQzYAQtBNCEQIAEiFCACRg2uAyACIBRrIAAoAgAiAWohFSAUIAFrQQVqIRYCQANAIBQtAAAiF0EgciAXIBdBv39qQf8BcUEaSRtB/wFxIAFB0MKAgABqLQAARw0BAkAgAUEFRw0AQQchAQyUAwsgAUEBaiEBIBRBAWoiFCACRw0ACyAAIBU2AgAMrwMLIABBADYCACAUIQEM1wELAkAgASIBIAJGDQADQAJAIAEtAABBgL6AgABqLQAAIhBBAUYNACAQQQJGDQogASEBDN0BCyABQQFqIgEgAkcNAAtBMCEQDK4DC0EwIRAMrQMLAkAgASIBIAJGDQADQAJAIAEtAAAiEEEgRg0AIBBBdmoOBNkB2gHaAdkB2gELIAFBAWoiASACRw0AC0E4IRAMrQMLQTghEAysAwsDQAJAIAEtAAAiEEEgRg0AIBBBCUcNAwsgAUEBaiIBIAJHDQALQTwhEAyrAwsDQAJAIAEtAAAiEEEgRg0AAkACQCAQQXZqDgTaAQEB2gEACyAQQSxGDdsBCyABIQEMBAsgAUEBaiIBIAJHDQALQT8hEAyqAwsgASEBDNsBC0HAACEQIAEiFCACRg2oAyACIBRrIAAoAgAiAWohFiAUIAFrQQZqIRcCQANAIBQtAABBIHIgAUGAwICAAGotAABHDQEgAUEGRg2OAyABQQFqIQEgFEEBaiIUIAJHDQALIAAgFjYCAAypAwsgAEEANgIAIBQhAQtBNiEQDI4DCwJAIAEiDyACRw0AQcEAIRAMpwMLIABBjICAgAA2AgggACAPNgIEIA8hASAALQAsQX9qDgTNAdUB1wHZAYcDCyABQQFqIQEMzAELAkAgASIBIAJGDQADQAJAIAEtAAAiEEEgciAQIBBBv39qQf8BcUEaSRtB/wFxIhBBCUYNACAQQSBGDQACQAJAAkACQCAQQZ1/ag4TAAMDAwMDAwMBAwMDAwMDAwMDAgMLIAFBAWohAUExIRAMkQMLIAFBAWohAUEyIRAMkAMLIAFBAWohAUEzIRAMjwMLIAEhAQzQAQsgAUEBaiIBIAJHDQALQTUhEAylAwtBNSEQDKQDCwJAIAEiASACRg0AA0ACQCABLQAAQYC8gIAAai0AAEEBRg0AIAEhAQzTAQsgAUEBaiIBIAJHDQALQT0hEAykAwtBPSEQDKMDCyAAIAEiASACELCAgIAAIhAN1gEgASEBDAELIBBBAWohAQtBPCEQDIcDCwJAIAEiASACRw0AQcIAIRAMoAMLAkADQAJAIAEtAABBd2oOGAAC/gL+AoQD/gL+Av4C/gL+Av4C/gL+Av4C/gL+Av4C/gL+Av4C/gL+Av4CAP4CCyABQQFqIgEgAkcNAAtBwgAhEAygAwsgAUEBaiEBIAAtAC1BAXFFDb0BIAEhAQtBLCEQDIUDCyABIgEgAkcN0wFBxAAhEAydAwsDQAJAIAEtAABBkMCAgABqLQAAQQFGDQAgASEBDLcCCyABQQFqIgEgAkcNAAtBxQAhEAycAwsgDS0AACIQQSBGDbMBIBBBOkcNgQMgACgCBCEBIABBADYCBCAAIAEgDRCvgICAACIBDdABIA1BAWohAQyzAgtBxwAhECABIg0gAkYNmgMgAiANayAAKAIAIgFqIRYgDSABa0EFaiEXA0AgDS0AACIUQSByIBQgFEG/f2pB/wFxQRpJG0H/AXEgAUGQwoCAAGotAABHDYADIAFBBUYN9AIgAUEBaiEBIA1BAWoiDSACRw0ACyAAIBY2AgAMmgMLQcgAIRAgASINIAJGDZkDIAIgDWsgACgCACIBaiEWIA0gAWtBCWohFwNAIA0tAAAiFEEgciAUIBRBv39qQf8BcUEaSRtB/wFxIAFBlsKAgABqLQAARw3/AgJAIAFBCUcNAEECIQEM9QILIAFBAWohASANQQFqIg0gAkcNAAsgACAWNgIADJkDCwJAIAEiDSACRw0AQckAIRAMmQMLAkACQCANLQAAIgFBIHIgASABQb9/akH/AXFBGkkbQf8BcUGSf2oOBwCAA4ADgAOAA4ADAYADCyANQQFqIQFBPiEQDIADCyANQQFqIQFBPyEQDP8CC0HKACEQIAEiDSACRg2XAyACIA1rIAAoAgAiAWohFiANIAFrQQFqIRcDQCANLQAAIhRBIHIgFCAUQb9/akH/AXFBGkkbQf8BcSABQaDCgIAAai0AAEcN/QIgAUEBRg3wAiABQQFqIQEgDUEBaiINIAJHDQALIAAgFjYCAAyXAwtBywAhECABIg0gAkYNlgMgAiANayAAKAIAIgFqIRYgDSABa0EOaiEXA0AgDS0AACIUQSByIBQgFEG/f2pB/wFxQRpJG0H/AXEgAUGiwoCAAGotAABHDfwCIAFBDkYN8AIgAUEBaiEBIA1BAWoiDSACRw0ACyAAIBY2AgAMlgMLQcwAIRAgASINIAJGDZUDIAIgDWsgACgCACIBaiEWIA0gAWtBD2ohFwNAIA0tAAAiFEEgciAUIBRBv39qQf8BcUEaSRtB/wFxIAFBwMKAgABqLQAARw37AgJAIAFBD0cNAEEDIQEM8QILIAFBAWohASANQQFqIg0gAkcNAAsgACAWNgIADJUDC0HNACEQIAEiDSACRg2UAyACIA1rIAAoAgAiAWohFiANIAFrQQVqIRcDQCANLQAAIhRBIHIgFCAUQb9/akH/AXFBGkkbQf8BcSABQdDCgIAAai0AAEcN+gICQCABQQVHDQBBBCEBDPACCyABQQFqIQEgDUEBaiINIAJHDQALIAAgFjYCAAyUAwsCQCABIg0gAkcNAEHOACEQDJQDCwJAAkACQAJAIA0tAAAiAUEgciABIAFBv39qQf8BcUEaSRtB/wFxQZ1/ag4TAP0C/QL9Av0C/QL9Av0C/QL9Av0C/QL9AgH9Av0C/QICA/0CCyANQQFqIQFBwQAhEAz9AgsgDUEBaiEBQcIAIRAM/AILIA1BAWohAUHDACEQDPsCCyANQQFqIQFBxAAhEAz6AgsCQCABIgEgAkYNACAAQY2AgIAANgIIIAAgATYCBCABIQFBxQAhEAz6AgtBzwAhEAySAwsgECEBAkACQCAQLQAAQXZqDgQBqAKoAgCoAgsgEEEBaiEBC0EnIRAM+AILAkAgASIBIAJHDQBB0QAhEAyRAwsCQCABLQAAQSBGDQAgASEBDI0BCyABQQFqIQEgAC0ALUEBcUUNxwEgASEBDIwBCyABIhcgAkcNyAFB0gAhEAyPAwtB0wAhECABIhQgAkYNjgMgAiAUayAAKAIAIgFqIRYgFCABa0EBaiEXA0AgFC0AACABQdbCgIAAai0AAEcNzAEgAUEBRg3HASABQQFqIQEgFEEBaiIUIAJHDQALIAAgFjYCAAyOAwsCQCABIgEgAkcNAEHVACEQDI4DCyABLQAAQQpHDcwBIAFBAWohAQzHAQsCQCABIgEgAkcNAEHWACEQDI0DCwJAAkAgAS0AAEF2ag4EAM0BzQEBzQELIAFBAWohAQzHAQsgAUEBaiEBQcoAIRAM8wILIAAgASIBIAIQroCAgAAiEA3LASABIQFBzQAhEAzyAgsgAC0AKUEiRg2FAwymAgsCQCABIgEgAkcNAEHbACEQDIoDC0EAIRRBASEXQQEhFkEAIRACQAJAAkACQAJAAkACQAJAAkAgAS0AAEFQag4K1AHTAQABAgMEBQYI1QELQQIhEAwGC0EDIRAMBQtBBCEQDAQLQQUhEAwDC0EGIRAMAgtBByEQDAELQQghEAtBACEXQQAhFkEAIRQMzAELQQkhEEEBIRRBACEXQQAhFgzLAQsCQCABIgEgAkcNAEHdACEQDIkDCyABLQAAQS5HDcwBIAFBAWohAQymAgsgASIBIAJHDcwBQd8AIRAMhwMLAkAgASIBIAJGDQAgAEGOgICAADYCCCAAIAE2AgQgASEBQdAAIRAM7gILQeAAIRAMhgMLQeEAIRAgASIBIAJGDYUDIAIgAWsgACgCACIUaiEWIAEgFGtBA2ohFwNAIAEtAAAgFEHiwoCAAGotAABHDc0BIBRBA0YNzAEgFEEBaiEUIAFBAWoiASACRw0ACyAAIBY2AgAMhQMLQeIAIRAgASIBIAJGDYQDIAIgAWsgACgCACIUaiEWIAEgFGtBAmohFwNAIAEtAAAgFEHmwoCAAGotAABHDcwBIBRBAkYNzgEgFEEBaiEUIAFBAWoiASACRw0ACyAAIBY2AgAMhAMLQeMAIRAgASIBIAJGDYMDIAIgAWsgACgCACIUaiEWIAEgFGtBA2ohFwNAIAEtAAAgFEHpwoCAAGotAABHDcsBIBRBA0YNzgEgFEEBaiEUIAFBAWoiASACRw0ACyAAIBY2AgAMgwMLAkAgASIBIAJHDQBB5QAhEAyDAwsgACABQQFqIgEgAhCogICAACIQDc0BIAEhAUHWACEQDOkCCwJAIAEiASACRg0AA0ACQCABLQAAIhBBIEYNAAJAAkACQCAQQbh/ag4LAAHPAc8BzwHPAc8BzwHPAc8BAs8BCyABQQFqIQFB0gAhEAztAgsgAUEBaiEBQdMAIRAM7AILIAFBAWohAUHUACEQDOsCCyABQQFqIgEgAkcNAAtB5AAhEAyCAwtB5AAhEAyBAwsDQAJAIAEtAABB8MKAgABqLQAAIhBBAUYNACAQQX5qDgPPAdAB0QHSAQsgAUEBaiIBIAJHDQALQeYAIRAMgAMLAkAgASIBIAJGDQAgAUEBaiEBDAMLQecAIRAM/wILA0ACQCABLQAAQfDEgIAAai0AACIQQQFGDQACQCAQQX5qDgTSAdMB1AEA1QELIAEhAUHXACEQDOcCCyABQQFqIgEgAkcNAAtB6AAhEAz+AgsCQCABIgEgAkcNAEHpACEQDP4CCwJAIAEtAAAiEEF2ag4augHVAdUBvAHVAdUB1QHVAdUB1QHVAdUB1QHVAdUB1QHVAdUB1QHVAdUB1QHKAdUB1QEA0wELIAFBAWohAQtBBiEQDOMCCwNAAkAgAS0AAEHwxoCAAGotAABBAUYNACABIQEMngILIAFBAWoiASACRw0AC0HqACEQDPsCCwJAIAEiASACRg0AIAFBAWohAQwDC0HrACEQDPoCCwJAIAEiASACRw0AQewAIRAM+gILIAFBAWohAQwBCwJAIAEiASACRw0AQe0AIRAM+QILIAFBAWohAQtBBCEQDN4CCwJAIAEiFCACRw0AQe4AIRAM9wILIBQhAQJAAkACQCAULQAAQfDIgIAAai0AAEF/ag4H1AHVAdYBAJwCAQLXAQsgFEEBaiEBDAoLIBRBAWohAQzNAQtBACEQIABBADYCHCAAQZuSgIAANgIQIABBBzYCDCAAIBRBAWo2AhQM9gILAkADQAJAIAEtAABB8MiAgABqLQAAIhBBBEYNAAJAAkAgEEF/ag4H0gHTAdQB2QEABAHZAQsgASEBQdoAIRAM4AILIAFBAWohAUHcACEQDN8CCyABQQFqIgEgAkcNAAtB7wAhEAz2AgsgAUEBaiEBDMsBCwJAIAEiFCACRw0AQfAAIRAM9QILIBQtAABBL0cN1AEgFEEBaiEBDAYLAkAgASIUIAJHDQBB8QAhEAz0AgsCQCAULQAAIgFBL0cNACAUQQFqIQFB3QAhEAzbAgsgAUF2aiIEQRZLDdMBQQEgBHRBiYCAAnFFDdMBDMoCCwJAIAEiASACRg0AIAFBAWohAUHeACEQDNoCC0HyACEQDPICCwJAIAEiFCACRw0AQfQAIRAM8gILIBQhAQJAIBQtAABB8MyAgABqLQAAQX9qDgPJApQCANQBC0HhACEQDNgCCwJAIAEiFCACRg0AA0ACQCAULQAAQfDKgIAAai0AACIBQQNGDQACQCABQX9qDgLLAgDVAQsgFCEBQd8AIRAM2gILIBRBAWoiFCACRw0AC0HzACEQDPECC0HzACEQDPACCwJAIAEiASACRg0AIABBj4CAgAA2AgggACABNgIEIAEhAUHgACEQDNcCC0H1ACEQDO8CCwJAIAEiASACRw0AQfYAIRAM7wILIABBj4CAgAA2AgggACABNgIEIAEhAQtBAyEQDNQCCwNAIAEtAABBIEcNwwIgAUEBaiIBIAJHDQALQfcAIRAM7AILAkAgASIBIAJHDQBB+AAhEAzsAgsgAS0AAEEgRw3OASABQQFqIQEM7wELIAAgASIBIAIQrICAgAAiEA3OASABIQEMjgILAkAgASIEIAJHDQBB+gAhEAzqAgsgBC0AAEHMAEcN0QEgBEEBaiEBQRMhEAzPAQsCQCABIgQgAkcNAEH7ACEQDOkCCyACIARrIAAoAgAiAWohFCAEIAFrQQVqIRADQCAELQAAIAFB8M6AgABqLQAARw3QASABQQVGDc4BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQfsAIRAM6AILAkAgASIEIAJHDQBB/AAhEAzoAgsCQAJAIAQtAABBvX9qDgwA0QHRAdEB0QHRAdEB0QHRAdEB0QEB0QELIARBAWohAUHmACEQDM8CCyAEQQFqIQFB5wAhEAzOAgsCQCABIgQgAkcNAEH9ACEQDOcCCyACIARrIAAoAgAiAWohFCAEIAFrQQJqIRACQANAIAQtAAAgAUHtz4CAAGotAABHDc8BIAFBAkYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEH9ACEQDOcCCyAAQQA2AgAgEEEBaiEBQRAhEAzMAQsCQCABIgQgAkcNAEH+ACEQDOYCCyACIARrIAAoAgAiAWohFCAEIAFrQQVqIRACQANAIAQtAAAgAUH2zoCAAGotAABHDc4BIAFBBUYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEH+ACEQDOYCCyAAQQA2AgAgEEEBaiEBQRYhEAzLAQsCQCABIgQgAkcNAEH/ACEQDOUCCyACIARrIAAoAgAiAWohFCAEIAFrQQNqIRACQANAIAQtAAAgAUH8zoCAAGotAABHDc0BIAFBA0YNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEH/ACEQDOUCCyAAQQA2AgAgEEEBaiEBQQUhEAzKAQsCQCABIgQgAkcNAEGAASEQDOQCCyAELQAAQdkARw3LASAEQQFqIQFBCCEQDMkBCwJAIAEiBCACRw0AQYEBIRAM4wILAkACQCAELQAAQbJ/ag4DAMwBAcwBCyAEQQFqIQFB6wAhEAzKAgsgBEEBaiEBQewAIRAMyQILAkAgASIEIAJHDQBBggEhEAziAgsCQAJAIAQtAABBuH9qDggAywHLAcsBywHLAcsBAcsBCyAEQQFqIQFB6gAhEAzJAgsgBEEBaiEBQe0AIRAMyAILAkAgASIEIAJHDQBBgwEhEAzhAgsgAiAEayAAKAIAIgFqIRAgBCABa0ECaiEUAkADQCAELQAAIAFBgM+AgABqLQAARw3JASABQQJGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBA2AgBBgwEhEAzhAgtBACEQIABBADYCACAUQQFqIQEMxgELAkAgASIEIAJHDQBBhAEhEAzgAgsgAiAEayAAKAIAIgFqIRQgBCABa0EEaiEQAkADQCAELQAAIAFBg8+AgABqLQAARw3IASABQQRGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBhAEhEAzgAgsgAEEANgIAIBBBAWohAUEjIRAMxQELAkAgASIEIAJHDQBBhQEhEAzfAgsCQAJAIAQtAABBtH9qDggAyAHIAcgByAHIAcgBAcgBCyAEQQFqIQFB7wAhEAzGAgsgBEEBaiEBQfAAIRAMxQILAkAgASIEIAJHDQBBhgEhEAzeAgsgBC0AAEHFAEcNxQEgBEEBaiEBDIMCCwJAIAEiBCACRw0AQYcBIRAM3QILIAIgBGsgACgCACIBaiEUIAQgAWtBA2ohEAJAA0AgBC0AACABQYjPgIAAai0AAEcNxQEgAUEDRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQYcBIRAM3QILIABBADYCACAQQQFqIQFBLSEQDMIBCwJAIAEiBCACRw0AQYgBIRAM3AILIAIgBGsgACgCACIBaiEUIAQgAWtBCGohEAJAA0AgBC0AACABQdDPgIAAai0AAEcNxAEgAUEIRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQYgBIRAM3AILIABBADYCACAQQQFqIQFBKSEQDMEBCwJAIAEiASACRw0AQYkBIRAM2wILQQEhECABLQAAQd8ARw3AASABQQFqIQEMgQILAkAgASIEIAJHDQBBigEhEAzaAgsgAiAEayAAKAIAIgFqIRQgBCABa0EBaiEQA0AgBC0AACABQYzPgIAAai0AAEcNwQEgAUEBRg2vAiABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGKASEQDNkCCwJAIAEiBCACRw0AQYsBIRAM2QILIAIgBGsgACgCACIBaiEUIAQgAWtBAmohEAJAA0AgBC0AACABQY7PgIAAai0AAEcNwQEgAUECRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQYsBIRAM2QILIABBADYCACAQQQFqIQFBAiEQDL4BCwJAIAEiBCACRw0AQYwBIRAM2AILIAIgBGsgACgCACIBaiEUIAQgAWtBAWohEAJAA0AgBC0AACABQfDPgIAAai0AAEcNwAEgAUEBRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQYwBIRAM2AILIABBADYCACAQQQFqIQFBHyEQDL0BCwJAIAEiBCACRw0AQY0BIRAM1wILIAIgBGsgACgCACIBaiEUIAQgAWtBAWohEAJAA0AgBC0AACABQfLPgIAAai0AAEcNvwEgAUEBRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQY0BIRAM1wILIABBADYCACAQQQFqIQFBCSEQDLwBCwJAIAEiBCACRw0AQY4BIRAM1gILAkACQCAELQAAQbd/ag4HAL8BvwG/Ab8BvwEBvwELIARBAWohAUH4ACEQDL0CCyAEQQFqIQFB+QAhEAy8AgsCQCABIgQgAkcNAEGPASEQDNUCCyACIARrIAAoAgAiAWohFCAEIAFrQQVqIRACQANAIAQtAAAgAUGRz4CAAGotAABHDb0BIAFBBUYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGPASEQDNUCCyAAQQA2AgAgEEEBaiEBQRghEAy6AQsCQCABIgQgAkcNAEGQASEQDNQCCyACIARrIAAoAgAiAWohFCAEIAFrQQJqIRACQANAIAQtAAAgAUGXz4CAAGotAABHDbwBIAFBAkYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGQASEQDNQCCyAAQQA2AgAgEEEBaiEBQRchEAy5AQsCQCABIgQgAkcNAEGRASEQDNMCCyACIARrIAAoAgAiAWohFCAEIAFrQQZqIRACQANAIAQtAAAgAUGaz4CAAGotAABHDbsBIAFBBkYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGRASEQDNMCCyAAQQA2AgAgEEEBaiEBQRUhEAy4AQsCQCABIgQgAkcNAEGSASEQDNICCyACIARrIAAoAgAiAWohFCAEIAFrQQVqIRACQANAIAQtAAAgAUGhz4CAAGotAABHDboBIAFBBUYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGSASEQDNICCyAAQQA2AgAgEEEBaiEBQR4hEAy3AQsCQCABIgQgAkcNAEGTASEQDNECCyAELQAAQcwARw24ASAEQQFqIQFBCiEQDLYBCwJAIAQgAkcNAEGUASEQDNACCwJAAkAgBC0AAEG/f2oODwC5AbkBuQG5AbkBuQG5AbkBuQG5AbkBuQG5AQG5AQsgBEEBaiEBQf4AIRAMtwILIARBAWohAUH/ACEQDLYCCwJAIAQgAkcNAEGVASEQDM8CCwJAAkAgBC0AAEG/f2oOAwC4AQG4AQsgBEEBaiEBQf0AIRAMtgILIARBAWohBEGAASEQDLUCCwJAIAQgAkcNAEGWASEQDM4CCyACIARrIAAoAgAiAWohFCAEIAFrQQFqIRACQANAIAQtAAAgAUGnz4CAAGotAABHDbYBIAFBAUYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGWASEQDM4CCyAAQQA2AgAgEEEBaiEBQQshEAyzAQsCQCAEIAJHDQBBlwEhEAzNAgsCQAJAAkACQCAELQAAQVNqDiMAuAG4AbgBuAG4AbgBuAG4AbgBuAG4AbgBuAG4AbgBuAG4AbgBuAG4AbgBuAG4AQG4AbgBuAG4AbgBArgBuAG4AQO4AQsgBEEBaiEBQfsAIRAMtgILIARBAWohAUH8ACEQDLUCCyAEQQFqIQRBgQEhEAy0AgsgBEEBaiEEQYIBIRAMswILAkAgBCACRw0AQZgBIRAMzAILIAIgBGsgACgCACIBaiEUIAQgAWtBBGohEAJAA0AgBC0AACABQanPgIAAai0AAEcNtAEgAUEERg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQZgBIRAMzAILIABBADYCACAQQQFqIQFBGSEQDLEBCwJAIAQgAkcNAEGZASEQDMsCCyACIARrIAAoAgAiAWohFCAEIAFrQQVqIRACQANAIAQtAAAgAUGuz4CAAGotAABHDbMBIAFBBUYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGZASEQDMsCCyAAQQA2AgAgEEEBaiEBQQYhEAywAQsCQCAEIAJHDQBBmgEhEAzKAgsgAiAEayAAKAIAIgFqIRQgBCABa0EBaiEQAkADQCAELQAAIAFBtM+AgABqLQAARw2yASABQQFGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBmgEhEAzKAgsgAEEANgIAIBBBAWohAUEcIRAMrwELAkAgBCACRw0AQZsBIRAMyQILIAIgBGsgACgCACIBaiEUIAQgAWtBAWohEAJAA0AgBC0AACABQbbPgIAAai0AAEcNsQEgAUEBRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQZsBIRAMyQILIABBADYCACAQQQFqIQFBJyEQDK4BCwJAIAQgAkcNAEGcASEQDMgCCwJAAkAgBC0AAEGsf2oOAgABsQELIARBAWohBEGGASEQDK8CCyAEQQFqIQRBhwEhEAyuAgsCQCAEIAJHDQBBnQEhEAzHAgsgAiAEayAAKAIAIgFqIRQgBCABa0EBaiEQAkADQCAELQAAIAFBuM+AgABqLQAARw2vASABQQFGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBnQEhEAzHAgsgAEEANgIAIBBBAWohAUEmIRAMrAELAkAgBCACRw0AQZ4BIRAMxgILIAIgBGsgACgCACIBaiEUIAQgAWtBAWohEAJAA0AgBC0AACABQbrPgIAAai0AAEcNrgEgAUEBRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQZ4BIRAMxgILIABBADYCACAQQQFqIQFBAyEQDKsBCwJAIAQgAkcNAEGfASEQDMUCCyACIARrIAAoAgAiAWohFCAEIAFrQQJqIRACQANAIAQtAAAgAUHtz4CAAGotAABHDa0BIAFBAkYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGfASEQDMUCCyAAQQA2AgAgEEEBaiEBQQwhEAyqAQsCQCAEIAJHDQBBoAEhEAzEAgsgAiAEayAAKAIAIgFqIRQgBCABa0EDaiEQAkADQCAELQAAIAFBvM+AgABqLQAARw2sASABQQNGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBoAEhEAzEAgsgAEEANgIAIBBBAWohAUENIRAMqQELAkAgBCACRw0AQaEBIRAMwwILAkACQCAELQAAQbp/ag4LAKwBrAGsAawBrAGsAawBrAGsAQGsAQsgBEEBaiEEQYsBIRAMqgILIARBAWohBEGMASEQDKkCCwJAIAQgAkcNAEGiASEQDMICCyAELQAAQdAARw2pASAEQQFqIQQM6QELAkAgBCACRw0AQaMBIRAMwQILAkACQCAELQAAQbd/ag4HAaoBqgGqAaoBqgEAqgELIARBAWohBEGOASEQDKgCCyAEQQFqIQFBIiEQDKYBCwJAIAQgAkcNAEGkASEQDMACCyACIARrIAAoAgAiAWohFCAEIAFrQQFqIRACQANAIAQtAAAgAUHAz4CAAGotAABHDagBIAFBAUYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGkASEQDMACCyAAQQA2AgAgEEEBaiEBQR0hEAylAQsCQCAEIAJHDQBBpQEhEAy/AgsCQAJAIAQtAABBrn9qDgMAqAEBqAELIARBAWohBEGQASEQDKYCCyAEQQFqIQFBBCEQDKQBCwJAIAQgAkcNAEGmASEQDL4CCwJAAkACQAJAAkAgBC0AAEG/f2oOFQCqAaoBqgGqAaoBqgGqAaoBqgGqAQGqAaoBAqoBqgEDqgGqAQSqAQsgBEEBaiEEQYgBIRAMqAILIARBAWohBEGJASEQDKcCCyAEQQFqIQRBigEhEAymAgsgBEEBaiEEQY8BIRAMpQILIARBAWohBEGRASEQDKQCCwJAIAQgAkcNAEGnASEQDL0CCyACIARrIAAoAgAiAWohFCAEIAFrQQJqIRACQANAIAQtAAAgAUHtz4CAAGotAABHDaUBIAFBAkYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGnASEQDL0CCyAAQQA2AgAgEEEBaiEBQREhEAyiAQsCQCAEIAJHDQBBqAEhEAy8AgsgAiAEayAAKAIAIgFqIRQgBCABa0ECaiEQAkADQCAELQAAIAFBws+AgABqLQAARw2kASABQQJGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBqAEhEAy8AgsgAEEANgIAIBBBAWohAUEsIRAMoQELAkAgBCACRw0AQakBIRAMuwILIAIgBGsgACgCACIBaiEUIAQgAWtBBGohEAJAA0AgBC0AACABQcXPgIAAai0AAEcNowEgAUEERg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQakBIRAMuwILIABBADYCACAQQQFqIQFBKyEQDKABCwJAIAQgAkcNAEGqASEQDLoCCyACIARrIAAoAgAiAWohFCAEIAFrQQJqIRACQANAIAQtAAAgAUHKz4CAAGotAABHDaIBIAFBAkYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGqASEQDLoCCyAAQQA2AgAgEEEBaiEBQRQhEAyfAQsCQCAEIAJHDQBBqwEhEAy5AgsCQAJAAkACQCAELQAAQb5/ag4PAAECpAGkAaQBpAGkAaQBpAGkAaQBpAGkAQOkAQsgBEEBaiEEQZMBIRAMogILIARBAWohBEGUASEQDKECCyAEQQFqIQRBlQEhEAygAgsgBEEBaiEEQZYBIRAMnwILAkAgBCACRw0AQawBIRAMuAILIAQtAABBxQBHDZ8BIARBAWohBAzgAQsCQCAEIAJHDQBBrQEhEAy3AgsgAiAEayAAKAIAIgFqIRQgBCABa0ECaiEQAkADQCAELQAAIAFBzc+AgABqLQAARw2fASABQQJGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBrQEhEAy3AgsgAEEANgIAIBBBAWohAUEOIRAMnAELAkAgBCACRw0AQa4BIRAMtgILIAQtAABB0ABHDZ0BIARBAWohAUElIRAMmwELAkAgBCACRw0AQa8BIRAMtQILIAIgBGsgACgCACIBaiEUIAQgAWtBCGohEAJAA0AgBC0AACABQdDPgIAAai0AAEcNnQEgAUEIRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQa8BIRAMtQILIABBADYCACAQQQFqIQFBKiEQDJoBCwJAIAQgAkcNAEGwASEQDLQCCwJAAkAgBC0AAEGrf2oOCwCdAZ0BnQGdAZ0BnQGdAZ0BnQEBnQELIARBAWohBEGaASEQDJsCCyAEQQFqIQRBmwEhEAyaAgsCQCAEIAJHDQBBsQEhEAyzAgsCQAJAIAQtAABBv39qDhQAnAGcAZwBnAGcAZwBnAGcAZwBnAGcAZwBnAGcAZwBnAGcAZwBAZwBCyAEQQFqIQRBmQEhEAyaAgsgBEEBaiEEQZwBIRAMmQILAkAgBCACRw0AQbIBIRAMsgILIAIgBGsgACgCACIBaiEUIAQgAWtBA2ohEAJAA0AgBC0AACABQdnPgIAAai0AAEcNmgEgAUEDRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQbIBIRAMsgILIABBADYCACAQQQFqIQFBISEQDJcBCwJAIAQgAkcNAEGzASEQDLECCyACIARrIAAoAgAiAWohFCAEIAFrQQZqIRACQANAIAQtAAAgAUHdz4CAAGotAABHDZkBIAFBBkYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEGzASEQDLECCyAAQQA2AgAgEEEBaiEBQRohEAyWAQsCQCAEIAJHDQBBtAEhEAywAgsCQAJAAkAgBC0AAEG7f2oOEQCaAZoBmgGaAZoBmgGaAZoBmgEBmgGaAZoBmgGaAQKaAQsgBEEBaiEEQZ0BIRAMmAILIARBAWohBEGeASEQDJcCCyAEQQFqIQRBnwEhEAyWAgsCQCAEIAJHDQBBtQEhEAyvAgsgAiAEayAAKAIAIgFqIRQgBCABa0EFaiEQAkADQCAELQAAIAFB5M+AgABqLQAARw2XASABQQVGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBtQEhEAyvAgsgAEEANgIAIBBBAWohAUEoIRAMlAELAkAgBCACRw0AQbYBIRAMrgILIAIgBGsgACgCACIBaiEUIAQgAWtBAmohEAJAA0AgBC0AACABQerPgIAAai0AAEcNlgEgAUECRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQbYBIRAMrgILIABBADYCACAQQQFqIQFBByEQDJMBCwJAIAQgAkcNAEG3ASEQDK0CCwJAAkAgBC0AAEG7f2oODgCWAZYBlgGWAZYBlgGWAZYBlgGWAZYBlgEBlgELIARBAWohBEGhASEQDJQCCyAEQQFqIQRBogEhEAyTAgsCQCAEIAJHDQBBuAEhEAysAgsgAiAEayAAKAIAIgFqIRQgBCABa0ECaiEQAkADQCAELQAAIAFB7c+AgABqLQAARw2UASABQQJGDQEgAUEBaiEBIARBAWoiBCACRw0ACyAAIBQ2AgBBuAEhEAysAgsgAEEANgIAIBBBAWohAUESIRAMkQELAkAgBCACRw0AQbkBIRAMqwILIAIgBGsgACgCACIBaiEUIAQgAWtBAWohEAJAA0AgBC0AACABQfDPgIAAai0AAEcNkwEgAUEBRg0BIAFBAWohASAEQQFqIgQgAkcNAAsgACAUNgIAQbkBIRAMqwILIABBADYCACAQQQFqIQFBICEQDJABCwJAIAQgAkcNAEG6ASEQDKoCCyACIARrIAAoAgAiAWohFCAEIAFrQQFqIRACQANAIAQtAAAgAUHyz4CAAGotAABHDZIBIAFBAUYNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEG6ASEQDKoCCyAAQQA2AgAgEEEBaiEBQQ8hEAyPAQsCQCAEIAJHDQBBuwEhEAypAgsCQAJAIAQtAABBt39qDgcAkgGSAZIBkgGSAQGSAQsgBEEBaiEEQaUBIRAMkAILIARBAWohBEGmASEQDI8CCwJAIAQgAkcNAEG8ASEQDKgCCyACIARrIAAoAgAiAWohFCAEIAFrQQdqIRACQANAIAQtAAAgAUH0z4CAAGotAABHDZABIAFBB0YNASABQQFqIQEgBEEBaiIEIAJHDQALIAAgFDYCAEG8ASEQDKgCCyAAQQA2AgAgEEEBaiEBQRshEAyNAQsCQCAEIAJHDQBBvQEhEAynAgsCQAJAAkAgBC0AAEG+f2oOEgCRAZEBkQGRAZEBkQGRAZEBkQEBkQGRAZEBkQGRAZEBApEBCyAEQQFqIQRBpAEhEAyPAgsgBEEBaiEEQacBIRAMjgILIARBAWohBEGoASEQDI0CCwJAIAQgAkcNAEG+ASEQDKYCCyAELQAAQc4ARw2NASAEQQFqIQQMzwELAkAgBCACRw0AQb8BIRAMpQILAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgBC0AAEG/f2oOFQABAgOcAQQFBpwBnAGcAQcICQoLnAEMDQ4PnAELIARBAWohAUHoACEQDJoCCyAEQQFqIQFB6QAhEAyZAgsgBEEBaiEBQe4AIRAMmAILIARBAWohAUHyACEQDJcCCyAEQQFqIQFB8wAhEAyWAgsgBEEBaiEBQfYAIRAMlQILIARBAWohAUH3ACEQDJQCCyAEQQFqIQFB+gAhEAyTAgsgBEEBaiEEQYMBIRAMkgILIARBAWohBEGEASEQDJECCyAEQQFqIQRBhQEhEAyQAgsgBEEBaiEEQZIBIRAMjwILIARBAWohBEGYASEQDI4CCyAEQQFqIQRBoAEhEAyNAgsgBEEBaiEEQaMBIRAMjAILIARBAWohBEGqASEQDIsCCwJAIAQgAkYNACAAQZCAgIAANgIIIAAgBDYCBEGrASEQDIsCC0HAASEQDKMCCyAAIAUgAhCqgICAACIBDYsBIAUhAQxcCwJAIAYgAkYNACAGQQFqIQUMjQELQcIBIRAMoQILA0ACQCAQLQAAQXZqDgSMAQAAjwEACyAQQQFqIhAgAkcNAAtBwwEhEAygAgsCQCAHIAJGDQAgAEGRgICAADYCCCAAIAc2AgQgByEBQQEhEAyHAgtBxAEhEAyfAgsCQCAHIAJHDQBBxQEhEAyfAgsCQAJAIActAABBdmoOBAHOAc4BAM4BCyAHQQFqIQYMjQELIAdBAWohBQyJAQsCQCAHIAJHDQBBxgEhEAyeAgsCQAJAIActAABBdmoOFwGPAY8BAY8BjwGPAY8BjwGPAY8BjwGPAY8BjwGPAY8BjwGPAY8BjwGPAQCPAQsgB0EBaiEHC0GwASEQDIQCCwJAIAggAkcNAEHIASEQDJ0CCyAILQAAQSBHDY0BIABBADsBMiAIQQFqIQFBswEhEAyDAgsgASEXAkADQCAXIgcgAkYNASAHLQAAQVBqQf8BcSIQQQpPDcwBAkAgAC8BMiIUQZkzSw0AIAAgFEEKbCIUOwEyIBBB//8DcyAUQf7/A3FJDQAgB0EBaiEXIAAgFCAQaiIQOwEyIBBB//8DcUHoB0kNAQsLQQAhECAAQQA2AhwgAEHBiYCAADYCECAAQQ02AgwgACAHQQFqNgIUDJwCC0HHASEQDJsCCyAAIAggAhCugICAACIQRQ3KASAQQRVHDYwBIABByAE2AhwgACAINgIUIABByZeAgAA2AhAgAEEVNgIMQQAhEAyaAgsCQCAJIAJHDQBBzAEhEAyaAgtBACEUQQEhF0EBIRZBACEQAkACQAJAAkACQAJAAkACQAJAIAktAABBUGoOCpYBlQEAAQIDBAUGCJcBC0ECIRAMBgtBAyEQDAULQQQhEAwEC0EFIRAMAwtBBiEQDAILQQchEAwBC0EIIRALQQAhF0EAIRZBACEUDI4BC0EJIRBBASEUQQAhF0EAIRYMjQELAkAgCiACRw0AQc4BIRAMmQILIAotAABBLkcNjgEgCkEBaiEJDMoBCyALIAJHDY4BQdABIRAMlwILAkAgCyACRg0AIABBjoCAgAA2AgggACALNgIEQbcBIRAM/gELQdEBIRAMlgILAkAgBCACRw0AQdIBIRAMlgILIAIgBGsgACgCACIQaiEUIAQgEGtBBGohCwNAIAQtAAAgEEH8z4CAAGotAABHDY4BIBBBBEYN6QEgEEEBaiEQIARBAWoiBCACRw0ACyAAIBQ2AgBB0gEhEAyVAgsgACAMIAIQrICAgAAiAQ2NASAMIQEMuAELAkAgBCACRw0AQdQBIRAMlAILIAIgBGsgACgCACIQaiEUIAQgEGtBAWohDANAIAQtAAAgEEGB0ICAAGotAABHDY8BIBBBAUYNjgEgEEEBaiEQIARBAWoiBCACRw0ACyAAIBQ2AgBB1AEhEAyTAgsCQCAEIAJHDQBB1gEhEAyTAgsgAiAEayAAKAIAIhBqIRQgBCAQa0ECaiELA0AgBC0AACAQQYPQgIAAai0AAEcNjgEgEEECRg2QASAQQQFqIRAgBEEBaiIEIAJHDQALIAAgFDYCAEHWASEQDJICCwJAIAQgAkcNAEHXASEQDJICCwJAAkAgBC0AAEG7f2oOEACPAY8BjwGPAY8BjwGPAY8BjwGPAY8BjwGPAY8BAY8BCyAEQQFqIQRBuwEhEAz5AQsgBEEBaiEEQbwBIRAM+AELAkAgBCACRw0AQdgBIRAMkQILIAQtAABByABHDYwBIARBAWohBAzEAQsCQCAEIAJGDQAgAEGQgICAADYCCCAAIAQ2AgRBvgEhEAz3AQtB2QEhEAyPAgsCQCAEIAJHDQBB2gEhEAyPAgsgBC0AAEHIAEYNwwEgAEEBOgAoDLkBCyAAQQI6AC8gACAEIAIQpoCAgAAiEA2NAUHCASEQDPQBCyAALQAoQX9qDgK3AbkBuAELA0ACQCAELQAAQXZqDgQAjgGOAQCOAQsgBEEBaiIEIAJHDQALQd0BIRAMiwILIABBADoALyAALQAtQQRxRQ2EAgsgAEEAOgAvIABBAToANCABIQEMjAELIBBBFUYN2gEgAEEANgIcIAAgATYCFCAAQaeOgIAANgIQIABBEjYCDEEAIRAMiAILAkAgACAQIAIQtICAgAAiBA0AIBAhAQyBAgsCQCAEQRVHDQAgAEEDNgIcIAAgEDYCFCAAQbCYgIAANgIQIABBFTYCDEEAIRAMiAILIABBADYCHCAAIBA2AhQgAEGnjoCAADYCECAAQRI2AgxBACEQDIcCCyAQQRVGDdYBIABBADYCHCAAIAE2AhQgAEHajYCAADYCECAAQRQ2AgxBACEQDIYCCyAAKAIEIRcgAEEANgIEIBAgEadqIhYhASAAIBcgECAWIBQbIhAQtYCAgAAiFEUNjQEgAEEHNgIcIAAgEDYCFCAAIBQ2AgxBACEQDIUCCyAAIAAvATBBgAFyOwEwIAEhAQtBKiEQDOoBCyAQQRVGDdEBIABBADYCHCAAIAE2AhQgAEGDjICAADYCECAAQRM2AgxBACEQDIICCyAQQRVGDc8BIABBADYCHCAAIAE2AhQgAEGaj4CAADYCECAAQSI2AgxBACEQDIECCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQt4CAgAAiEA0AIAFBAWohAQyNAQsgAEEMNgIcIAAgEDYCDCAAIAFBAWo2AhRBACEQDIACCyAQQRVGDcwBIABBADYCHCAAIAE2AhQgAEGaj4CAADYCECAAQSI2AgxBACEQDP8BCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQt4CAgAAiEA0AIAFBAWohAQyMAQsgAEENNgIcIAAgEDYCDCAAIAFBAWo2AhRBACEQDP4BCyAQQRVGDckBIABBADYCHCAAIAE2AhQgAEHGjICAADYCECAAQSM2AgxBACEQDP0BCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQuYCAgAAiEA0AIAFBAWohAQyLAQsgAEEONgIcIAAgEDYCDCAAIAFBAWo2AhRBACEQDPwBCyAAQQA2AhwgACABNgIUIABBwJWAgAA2AhAgAEECNgIMQQAhEAz7AQsgEEEVRg3FASAAQQA2AhwgACABNgIUIABBxoyAgAA2AhAgAEEjNgIMQQAhEAz6AQsgAEEQNgIcIAAgATYCFCAAIBA2AgxBACEQDPkBCyAAKAIEIQQgAEEANgIEAkAgACAEIAEQuYCAgAAiBA0AIAFBAWohAQzxAQsgAEERNgIcIAAgBDYCDCAAIAFBAWo2AhRBACEQDPgBCyAQQRVGDcEBIABBADYCHCAAIAE2AhQgAEHGjICAADYCECAAQSM2AgxBACEQDPcBCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQuYCAgAAiEA0AIAFBAWohAQyIAQsgAEETNgIcIAAgEDYCDCAAIAFBAWo2AhRBACEQDPYBCyAAKAIEIQQgAEEANgIEAkAgACAEIAEQuYCAgAAiBA0AIAFBAWohAQztAQsgAEEUNgIcIAAgBDYCDCAAIAFBAWo2AhRBACEQDPUBCyAQQRVGDb0BIABBADYCHCAAIAE2AhQgAEGaj4CAADYCECAAQSI2AgxBACEQDPQBCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQt4CAgAAiEA0AIAFBAWohAQyGAQsgAEEWNgIcIAAgEDYCDCAAIAFBAWo2AhRBACEQDPMBCyAAKAIEIQQgAEEANgIEAkAgACAEIAEQt4CAgAAiBA0AIAFBAWohAQzpAQsgAEEXNgIcIAAgBDYCDCAAIAFBAWo2AhRBACEQDPIBCyAAQQA2AhwgACABNgIUIABBzZOAgAA2AhAgAEEMNgIMQQAhEAzxAQtCASERCyAQQQFqIQECQCAAKQMgIhJC//////////8PVg0AIAAgEkIEhiARhDcDICABIQEMhAELIABBADYCHCAAIAE2AhQgAEGtiYCAADYCECAAQQw2AgxBACEQDO8BCyAAQQA2AhwgACAQNgIUIABBzZOAgAA2AhAgAEEMNgIMQQAhEAzuAQsgACgCBCEXIABBADYCBCAQIBGnaiIWIQEgACAXIBAgFiAUGyIQELWAgIAAIhRFDXMgAEEFNgIcIAAgEDYCFCAAIBQ2AgxBACEQDO0BCyAAQQA2AhwgACAQNgIUIABBqpyAgAA2AhAgAEEPNgIMQQAhEAzsAQsgACAQIAIQtICAgAAiAQ0BIBAhAQtBDiEQDNEBCwJAIAFBFUcNACAAQQI2AhwgACAQNgIUIABBsJiAgAA2AhAgAEEVNgIMQQAhEAzqAQsgAEEANgIcIAAgEDYCFCAAQaeOgIAANgIQIABBEjYCDEEAIRAM6QELIAFBAWohEAJAIAAvATAiAUGAAXFFDQACQCAAIBAgAhC7gICAACIBDQAgECEBDHALIAFBFUcNugEgAEEFNgIcIAAgEDYCFCAAQfmXgIAANgIQIABBFTYCDEEAIRAM6QELAkAgAUGgBHFBoARHDQAgAC0ALUECcQ0AIABBADYCHCAAIBA2AhQgAEGWk4CAADYCECAAQQQ2AgxBACEQDOkBCyAAIBAgAhC9gICAABogECEBAkACQAJAAkACQCAAIBAgAhCzgICAAA4WAgEABAQEBAQEBAQEBAQEBAQEBAQEAwQLIABBAToALgsgACAALwEwQcAAcjsBMCAQIQELQSYhEAzRAQsgAEEjNgIcIAAgEDYCFCAAQaWWgIAANgIQIABBFTYCDEEAIRAM6QELIABBADYCHCAAIBA2AhQgAEHVi4CAADYCECAAQRE2AgxBACEQDOgBCyAALQAtQQFxRQ0BQcMBIRAMzgELAkAgDSACRg0AA0ACQCANLQAAQSBGDQAgDSEBDMQBCyANQQFqIg0gAkcNAAtBJSEQDOcBC0ElIRAM5gELIAAoAgQhBCAAQQA2AgQgACAEIA0Qr4CAgAAiBEUNrQEgAEEmNgIcIAAgBDYCDCAAIA1BAWo2AhRBACEQDOUBCyAQQRVGDasBIABBADYCHCAAIAE2AhQgAEH9jYCAADYCECAAQR02AgxBACEQDOQBCyAAQSc2AhwgACABNgIUIAAgEDYCDEEAIRAM4wELIBAhAUEBIRQCQAJAAkACQAJAAkACQCAALQAsQX5qDgcGBQUDAQIABQsgACAALwEwQQhyOwEwDAMLQQIhFAwBC0EEIRQLIABBAToALCAAIAAvATAgFHI7ATALIBAhAQtBKyEQDMoBCyAAQQA2AhwgACAQNgIUIABBq5KAgAA2AhAgAEELNgIMQQAhEAziAQsgAEEANgIcIAAgATYCFCAAQeGPgIAANgIQIABBCjYCDEEAIRAM4QELIABBADoALCAQIQEMvQELIBAhAUEBIRQCQAJAAkACQAJAIAAtACxBe2oOBAMBAgAFCyAAIAAvATBBCHI7ATAMAwtBAiEUDAELQQQhFAsgAEEBOgAsIAAgAC8BMCAUcjsBMAsgECEBC0EpIRAMxQELIABBADYCHCAAIAE2AhQgAEHwlICAADYCECAAQQM2AgxBACEQDN0BCwJAIA4tAABBDUcNACAAKAIEIQEgAEEANgIEAkAgACABIA4QsYCAgAAiAQ0AIA5BAWohAQx1CyAAQSw2AhwgACABNgIMIAAgDkEBajYCFEEAIRAM3QELIAAtAC1BAXFFDQFBxAEhEAzDAQsCQCAOIAJHDQBBLSEQDNwBCwJAAkADQAJAIA4tAABBdmoOBAIAAAMACyAOQQFqIg4gAkcNAAtBLSEQDN0BCyAAKAIEIQEgAEEANgIEAkAgACABIA4QsYCAgAAiAQ0AIA4hAQx0CyAAQSw2AhwgACAONgIUIAAgATYCDEEAIRAM3AELIAAoAgQhASAAQQA2AgQCQCAAIAEgDhCxgICAACIBDQAgDkEBaiEBDHMLIABBLDYCHCAAIAE2AgwgACAOQQFqNgIUQQAhEAzbAQsgACgCBCEEIABBADYCBCAAIAQgDhCxgICAACIEDaABIA4hAQzOAQsgEEEsRw0BIAFBAWohEEEBIQECQAJAAkACQAJAIAAtACxBe2oOBAMBAgQACyAQIQEMBAtBAiEBDAELQQQhAQsgAEEBOgAsIAAgAC8BMCABcjsBMCAQIQEMAQsgACAALwEwQQhyOwEwIBAhAQtBOSEQDL8BCyAAQQA6ACwgASEBC0E0IRAMvQELIAAgAC8BMEEgcjsBMCABIQEMAgsgACgCBCEEIABBADYCBAJAIAAgBCABELGAgIAAIgQNACABIQEMxwELIABBNzYCHCAAIAE2AhQgACAENgIMQQAhEAzUAQsgAEEIOgAsIAEhAQtBMCEQDLkBCwJAIAAtAChBAUYNACABIQEMBAsgAC0ALUEIcUUNkwEgASEBDAMLIAAtADBBIHENlAFBxQEhEAy3AQsCQCAPIAJGDQACQANAAkAgDy0AAEFQaiIBQf8BcUEKSQ0AIA8hAUE1IRAMugELIAApAyAiEUKZs+bMmbPmzBlWDQEgACARQgp+IhE3AyAgESABrUL/AYMiEkJ/hVYNASAAIBEgEnw3AyAgD0EBaiIPIAJHDQALQTkhEAzRAQsgACgCBCECIABBADYCBCAAIAIgD0EBaiIEELGAgIAAIgINlQEgBCEBDMMBC0E5IRAMzwELAkAgAC8BMCIBQQhxRQ0AIAAtAChBAUcNACAALQAtQQhxRQ2QAQsgACABQff7A3FBgARyOwEwIA8hAQtBNyEQDLQBCyAAIAAvATBBEHI7ATAMqwELIBBBFUYNiwEgAEEANgIcIAAgATYCFCAAQfCOgIAANgIQIABBHDYCDEEAIRAMywELIABBwwA2AhwgACABNgIMIAAgDUEBajYCFEEAIRAMygELAkAgAS0AAEE6Rw0AIAAoAgQhECAAQQA2AgQCQCAAIBAgARCvgICAACIQDQAgAUEBaiEBDGMLIABBwwA2AhwgACAQNgIMIAAgAUEBajYCFEEAIRAMygELIABBADYCHCAAIAE2AhQgAEGxkYCAADYCECAAQQo2AgxBACEQDMkBCyAAQQA2AhwgACABNgIUIABBoJmAgAA2AhAgAEEeNgIMQQAhEAzIAQsgAEEANgIACyAAQYASOwEqIAAgF0EBaiIBIAIQqICAgAAiEA0BIAEhAQtBxwAhEAysAQsgEEEVRw2DASAAQdEANgIcIAAgATYCFCAAQeOXgIAANgIQIABBFTYCDEEAIRAMxAELIAAoAgQhECAAQQA2AgQCQCAAIBAgARCngICAACIQDQAgASEBDF4LIABB0gA2AhwgACABNgIUIAAgEDYCDEEAIRAMwwELIABBADYCHCAAIBQ2AhQgAEHBqICAADYCECAAQQc2AgwgAEEANgIAQQAhEAzCAQsgACgCBCEQIABBADYCBAJAIAAgECABEKeAgIAAIhANACABIQEMXQsgAEHTADYCHCAAIAE2AhQgACAQNgIMQQAhEAzBAQtBACEQIABBADYCHCAAIAE2AhQgAEGAkYCAADYCECAAQQk2AgwMwAELIBBBFUYNfSAAQQA2AhwgACABNgIUIABBlI2AgAA2AhAgAEEhNgIMQQAhEAy/AQtBASEWQQAhF0EAIRRBASEQCyAAIBA6ACsgAUEBaiEBAkACQCAALQAtQRBxDQACQAJAAkAgAC0AKg4DAQACBAsgFkUNAwwCCyAUDQEMAgsgF0UNAQsgACgCBCEQIABBADYCBAJAIAAgECABEK2AgIAAIhANACABIQEMXAsgAEHYADYCHCAAIAE2AhQgACAQNgIMQQAhEAy+AQsgACgCBCEEIABBADYCBAJAIAAgBCABEK2AgIAAIgQNACABIQEMrQELIABB2QA2AhwgACABNgIUIAAgBDYCDEEAIRAMvQELIAAoAgQhBCAAQQA2AgQCQCAAIAQgARCtgICAACIEDQAgASEBDKsBCyAAQdoANgIcIAAgATYCFCAAIAQ2AgxBACEQDLwBCyAAKAIEIQQgAEEANgIEAkAgACAEIAEQrYCAgAAiBA0AIAEhAQypAQsgAEHcADYCHCAAIAE2AhQgACAENgIMQQAhEAy7AQsCQCABLQAAQVBqIhBB/wFxQQpPDQAgACAQOgAqIAFBAWohAUHPACEQDKIBCyAAKAIEIQQgAEEANgIEAkAgACAEIAEQrYCAgAAiBA0AIAEhAQynAQsgAEHeADYCHCAAIAE2AhQgACAENgIMQQAhEAy6AQsgAEEANgIAIBdBAWohAQJAIAAtAClBI08NACABIQEMWQsgAEEANgIcIAAgATYCFCAAQdOJgIAANgIQIABBCDYCDEEAIRAMuQELIABBADYCAAtBACEQIABBADYCHCAAIAE2AhQgAEGQs4CAADYCECAAQQg2AgwMtwELIABBADYCACAXQQFqIQECQCAALQApQSFHDQAgASEBDFYLIABBADYCHCAAIAE2AhQgAEGbioCAADYCECAAQQg2AgxBACEQDLYBCyAAQQA2AgAgF0EBaiEBAkAgAC0AKSIQQV1qQQtPDQAgASEBDFULAkAgEEEGSw0AQQEgEHRBygBxRQ0AIAEhAQxVC0EAIRAgAEEANgIcIAAgATYCFCAAQfeJgIAANgIQIABBCDYCDAy1AQsgEEEVRg1xIABBADYCHCAAIAE2AhQgAEG5jYCAADYCECAAQRo2AgxBACEQDLQBCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQp4CAgAAiEA0AIAEhAQxUCyAAQeUANgIcIAAgATYCFCAAIBA2AgxBACEQDLMBCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQp4CAgAAiEA0AIAEhAQxNCyAAQdIANgIcIAAgATYCFCAAIBA2AgxBACEQDLIBCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQp4CAgAAiEA0AIAEhAQxNCyAAQdMANgIcIAAgATYCFCAAIBA2AgxBACEQDLEBCyAAKAIEIRAgAEEANgIEAkAgACAQIAEQp4CAgAAiEA0AIAEhAQxRCyAAQeUANgIcIAAgATYCFCAAIBA2AgxBACEQDLABCyAAQQA2AhwgACABNgIUIABBxoqAgAA2AhAgAEEHNgIMQQAhEAyvAQsgACgCBCEQIABBADYCBAJAIAAgECABEKeAgIAAIhANACABIQEMSQsgAEHSADYCHCAAIAE2AhQgACAQNgIMQQAhEAyuAQsgACgCBCEQIABBADYCBAJAIAAgECABEKeAgIAAIhANACABIQEMSQsgAEHTADYCHCAAIAE2AhQgACAQNgIMQQAhEAytAQsgACgCBCEQIABBADYCBAJAIAAgECABEKeAgIAAIhANACABIQEMTQsgAEHlADYCHCAAIAE2AhQgACAQNgIMQQAhEAysAQsgAEEANgIcIAAgATYCFCAAQdyIgIAANgIQIABBBzYCDEEAIRAMqwELIBBBP0cNASABQQFqIQELQQUhEAyQAQtBACEQIABBADYCHCAAIAE2AhQgAEH9koCAADYCECAAQQc2AgwMqAELIAAoAgQhECAAQQA2AgQCQCAAIBAgARCngICAACIQDQAgASEBDEILIABB0gA2AhwgACABNgIUIAAgEDYCDEEAIRAMpwELIAAoAgQhECAAQQA2AgQCQCAAIBAgARCngICAACIQDQAgASEBDEILIABB0wA2AhwgACABNgIUIAAgEDYCDEEAIRAMpgELIAAoAgQhECAAQQA2AgQCQCAAIBAgARCngICAACIQDQAgASEBDEYLIABB5QA2AhwgACABNgIUIAAgEDYCDEEAIRAMpQELIAAoAgQhASAAQQA2AgQCQCAAIAEgFBCngICAACIBDQAgFCEBDD8LIABB0gA2AhwgACAUNgIUIAAgATYCDEEAIRAMpAELIAAoAgQhASAAQQA2AgQCQCAAIAEgFBCngICAACIBDQAgFCEBDD8LIABB0wA2AhwgACAUNgIUIAAgATYCDEEAIRAMowELIAAoAgQhASAAQQA2AgQCQCAAIAEgFBCngICAACIBDQAgFCEBDEMLIABB5QA2AhwgACAUNgIUIAAgATYCDEEAIRAMogELIABBADYCHCAAIBQ2AhQgAEHDj4CAADYCECAAQQc2AgxBACEQDKEBCyAAQQA2AhwgACABNgIUIABBw4+AgAA2AhAgAEEHNgIMQQAhEAygAQtBACEQIABBADYCHCAAIBQ2AhQgAEGMnICAADYCECAAQQc2AgwMnwELIABBADYCHCAAIBQ2AhQgAEGMnICAADYCECAAQQc2AgxBACEQDJ4BCyAAQQA2AhwgACAUNgIUIABB/pGAgAA2AhAgAEEHNgIMQQAhEAydAQsgAEEANgIcIAAgATYCFCAAQY6bgIAANgIQIABBBjYCDEEAIRAMnAELIBBBFUYNVyAAQQA2AhwgACABNgIUIABBzI6AgAA2AhAgAEEgNgIMQQAhEAybAQsgAEEANgIAIBBBAWohAUEkIRALIAAgEDoAKSAAKAIEIRAgAEEANgIEIAAgECABEKuAgIAAIhANVCABIQEMPgsgAEEANgIAC0EAIRAgAEEANgIcIAAgBDYCFCAAQfGbgIAANgIQIABBBjYCDAyXAQsgAUEVRg1QIABBADYCHCAAIAU2AhQgAEHwjICAADYCECAAQRs2AgxBACEQDJYBCyAAKAIEIQUgAEEANgIEIAAgBSAQEKmAgIAAIgUNASAQQQFqIQULQa0BIRAMewsgAEHBATYCHCAAIAU2AgwgACAQQQFqNgIUQQAhEAyTAQsgACgCBCEGIABBADYCBCAAIAYgEBCpgICAACIGDQEgEEEBaiEGC0GuASEQDHgLIABBwgE2AhwgACAGNgIMIAAgEEEBajYCFEEAIRAMkAELIABBADYCHCAAIAc2AhQgAEGXi4CAADYCECAAQQ02AgxBACEQDI8BCyAAQQA2AhwgACAINgIUIABB45CAgAA2AhAgAEEJNgIMQQAhEAyOAQsgAEEANgIcIAAgCDYCFCAAQZSNgIAANgIQIABBITYCDEEAIRAMjQELQQEhFkEAIRdBACEUQQEhEAsgACAQOgArIAlBAWohCAJAAkAgAC0ALUEQcQ0AAkACQAJAIAAtACoOAwEAAgQLIBZFDQMMAgsgFA0BDAILIBdFDQELIAAoAgQhECAAQQA2AgQgACAQIAgQrYCAgAAiEEUNPSAAQckBNgIcIAAgCDYCFCAAIBA2AgxBACEQDIwBCyAAKAIEIQQgAEEANgIEIAAgBCAIEK2AgIAAIgRFDXYgAEHKATYCHCAAIAg2AhQgACAENgIMQQAhEAyLAQsgACgCBCEEIABBADYCBCAAIAQgCRCtgICAACIERQ10IABBywE2AhwgACAJNgIUIAAgBDYCDEEAIRAMigELIAAoAgQhBCAAQQA2AgQgACAEIAoQrYCAgAAiBEUNciAAQc0BNgIcIAAgCjYCFCAAIAQ2AgxBACEQDIkBCwJAIAstAABBUGoiEEH/AXFBCk8NACAAIBA6ACogC0EBaiEKQbYBIRAMcAsgACgCBCEEIABBADYCBCAAIAQgCxCtgICAACIERQ1wIABBzwE2AhwgACALNgIUIAAgBDYCDEEAIRAMiAELIABBADYCHCAAIAQ2AhQgAEGQs4CAADYCECAAQQg2AgwgAEEANgIAQQAhEAyHAQsgAUEVRg0/IABBADYCHCAAIAw2AhQgAEHMjoCAADYCECAAQSA2AgxBACEQDIYBCyAAQYEEOwEoIAAoAgQhECAAQgA3AwAgACAQIAxBAWoiDBCrgICAACIQRQ04IABB0wE2AhwgACAMNgIUIAAgEDYCDEEAIRAMhQELIABBADYCAAtBACEQIABBADYCHCAAIAQ2AhQgAEHYm4CAADYCECAAQQg2AgwMgwELIAAoAgQhECAAQgA3AwAgACAQIAtBAWoiCxCrgICAACIQDQFBxgEhEAxpCyAAQQI6ACgMVQsgAEHVATYCHCAAIAs2AhQgACAQNgIMQQAhEAyAAQsgEEEVRg03IABBADYCHCAAIAQ2AhQgAEGkjICAADYCECAAQRA2AgxBACEQDH8LIAAtADRBAUcNNCAAIAQgAhC8gICAACIQRQ00IBBBFUcNNSAAQdwBNgIcIAAgBDYCFCAAQdWWgIAANgIQIABBFTYCDEEAIRAMfgtBACEQIABBADYCHCAAQa+LgIAANgIQIABBAjYCDCAAIBRBAWo2AhQMfQtBACEQDGMLQQIhEAxiC0ENIRAMYQtBDyEQDGALQSUhEAxfC0ETIRAMXgtBFSEQDF0LQRYhEAxcC0EXIRAMWwtBGCEQDFoLQRkhEAxZC0EaIRAMWAtBGyEQDFcLQRwhEAxWC0EdIRAMVQtBHyEQDFQLQSEhEAxTC0EjIRAMUgtBxgAhEAxRC0EuIRAMUAtBLyEQDE8LQTshEAxOC0E9IRAMTQtByAAhEAxMC0HJACEQDEsLQcsAIRAMSgtBzAAhEAxJC0HOACEQDEgLQdEAIRAMRwtB1QAhEAxGC0HYACEQDEULQdkAIRAMRAtB2wAhEAxDC0HkACEQDEILQeUAIRAMQQtB8QAhEAxAC0H0ACEQDD8LQY0BIRAMPgtBlwEhEAw9C0GpASEQDDwLQawBIRAMOwtBwAEhEAw6C0G5ASEQDDkLQa8BIRAMOAtBsQEhEAw3C0GyASEQDDYLQbQBIRAMNQtBtQEhEAw0C0G6ASEQDDMLQb0BIRAMMgtBvwEhEAwxC0HBASEQDDALIABBADYCHCAAIAQ2AhQgAEHpi4CAADYCECAAQR82AgxBACEQDEgLIABB2wE2AhwgACAENgIUIABB+paAgAA2AhAgAEEVNgIMQQAhEAxHCyAAQfgANgIcIAAgDDYCFCAAQcqYgIAANgIQIABBFTYCDEEAIRAMRgsgAEHRADYCHCAAIAU2AhQgAEGwl4CAADYCECAAQRU2AgxBACEQDEULIABB+QA2AhwgACABNgIUIAAgEDYCDEEAIRAMRAsgAEH4ADYCHCAAIAE2AhQgAEHKmICAADYCECAAQRU2AgxBACEQDEMLIABB5AA2AhwgACABNgIUIABB45eAgAA2AhAgAEEVNgIMQQAhEAxCCyAAQdcANgIcIAAgATYCFCAAQcmXgIAANgIQIABBFTYCDEEAIRAMQQsgAEEANgIcIAAgATYCFCAAQbmNgIAANgIQIABBGjYCDEEAIRAMQAsgAEHCADYCHCAAIAE2AhQgAEHjmICAADYCECAAQRU2AgxBACEQDD8LIABBADYCBCAAIA8gDxCxgICAACIERQ0BIABBOjYCHCAAIAQ2AgwgACAPQQFqNgIUQQAhEAw+CyAAKAIEIQQgAEEANgIEAkAgACAEIAEQsYCAgAAiBEUNACAAQTs2AhwgACAENgIMIAAgAUEBajYCFEEAIRAMPgsgAUEBaiEBDC0LIA9BAWohAQwtCyAAQQA2AhwgACAPNgIUIABB5JKAgAA2AhAgAEEENgIMQQAhEAw7CyAAQTY2AhwgACAENgIUIAAgAjYCDEEAIRAMOgsgAEEuNgIcIAAgDjYCFCAAIAQ2AgxBACEQDDkLIABB0AA2AhwgACABNgIUIABBkZiAgAA2AhAgAEEVNgIMQQAhEAw4CyANQQFqIQEMLAsgAEEVNgIcIAAgATYCFCAAQYKZgIAANgIQIABBFTYCDEEAIRAMNgsgAEEbNgIcIAAgATYCFCAAQZGXgIAANgIQIABBFTYCDEEAIRAMNQsgAEEPNgIcIAAgATYCFCAAQZGXgIAANgIQIABBFTYCDEEAIRAMNAsgAEELNgIcIAAgATYCFCAAQZGXgIAANgIQIABBFTYCDEEAIRAMMwsgAEEaNgIcIAAgATYCFCAAQYKZgIAANgIQIABBFTYCDEEAIRAMMgsgAEELNgIcIAAgATYCFCAAQYKZgIAANgIQIABBFTYCDEEAIRAMMQsgAEEKNgIcIAAgATYCFCAAQeSWgIAANgIQIABBFTYCDEEAIRAMMAsgAEEeNgIcIAAgATYCFCAAQfmXgIAANgIQIABBFTYCDEEAIRAMLwsgAEEANgIcIAAgEDYCFCAAQdqNgIAANgIQIABBFDYCDEEAIRAMLgsgAEEENgIcIAAgATYCFCAAQbCYgIAANgIQIABBFTYCDEEAIRAMLQsgAEEANgIAIAtBAWohCwtBuAEhEAwSCyAAQQA2AgAgEEEBaiEBQfUAIRAMEQsgASEBAkAgAC0AKUEFRw0AQeMAIRAMEQtB4gAhEAwQC0EAIRAgAEEANgIcIABB5JGAgAA2AhAgAEEHNgIMIAAgFEEBajYCFAwoCyAAQQA2AgAgF0EBaiEBQcAAIRAMDgtBASEBCyAAIAE6ACwgAEEANgIAIBdBAWohAQtBKCEQDAsLIAEhAQtBOCEQDAkLAkAgASIPIAJGDQADQAJAIA8tAABBgL6AgABqLQAAIgFBAUYNACABQQJHDQMgD0EBaiEBDAQLIA9BAWoiDyACRw0AC0E+IRAMIgtBPiEQDCELIABBADoALCAPIQEMAQtBCyEQDAYLQTohEAwFCyABQQFqIQFBLSEQDAQLIAAgAToALCAAQQA2AgAgFkEBaiEBQQwhEAwDCyAAQQA2AgAgF0EBaiEBQQohEAwCCyAAQQA2AgALIABBADoALCANIQFBCSEQDAALC0EAIRAgAEEANgIcIAAgCzYCFCAAQc2QgIAANgIQIABBCTYCDAwXC0EAIRAgAEEANgIcIAAgCjYCFCAAQemKgIAANgIQIABBCTYCDAwWC0EAIRAgAEEANgIcIAAgCTYCFCAAQbeQgIAANgIQIABBCTYCDAwVC0EAIRAgAEEANgIcIAAgCDYCFCAAQZyRgIAANgIQIABBCTYCDAwUC0EAIRAgAEEANgIcIAAgATYCFCAAQc2QgIAANgIQIABBCTYCDAwTC0EAIRAgAEEANgIcIAAgATYCFCAAQemKgIAANgIQIABBCTYCDAwSC0EAIRAgAEEANgIcIAAgATYCFCAAQbeQgIAANgIQIABBCTYCDAwRC0EAIRAgAEEANgIcIAAgATYCFCAAQZyRgIAANgIQIABBCTYCDAwQC0EAIRAgAEEANgIcIAAgATYCFCAAQZeVgIAANgIQIABBDzYCDAwPC0EAIRAgAEEANgIcIAAgATYCFCAAQZeVgIAANgIQIABBDzYCDAwOC0EAIRAgAEEANgIcIAAgATYCFCAAQcCSgIAANgIQIABBCzYCDAwNC0EAIRAgAEEANgIcIAAgATYCFCAAQZWJgIAANgIQIABBCzYCDAwMC0EAIRAgAEEANgIcIAAgATYCFCAAQeGPgIAANgIQIABBCjYCDAwLC0EAIRAgAEEANgIcIAAgATYCFCAAQfuPgIAANgIQIABBCjYCDAwKC0EAIRAgAEEANgIcIAAgATYCFCAAQfGZgIAANgIQIABBAjYCDAwJC0EAIRAgAEEANgIcIAAgATYCFCAAQcSUgIAANgIQIABBAjYCDAwIC0EAIRAgAEEANgIcIAAgATYCFCAAQfKVgIAANgIQIABBAjYCDAwHCyAAQQI2AhwgACABNgIUIABBnJqAgAA2AhAgAEEWNgIMQQAhEAwGC0EBIRAMBQtB1AAhECABIgQgAkYNBCADQQhqIAAgBCACQdjCgIAAQQoQxYCAgAAgAygCDCEEIAMoAggOAwEEAgALEMqAgIAAAAsgAEEANgIcIABBtZqAgAA2AhAgAEEXNgIMIAAgBEEBajYCFEEAIRAMAgsgAEEANgIcIAAgBDYCFCAAQcqagIAANgIQIABBCTYCDEEAIRAMAQsCQCABIgQgAkcNAEEiIRAMAQsgAEGJgICAADYCCCAAIAQ2AgRBISEQCyADQRBqJICAgIAAIBALrwEBAn8gASgCACEGAkACQCACIANGDQAgBCAGaiEEIAYgA2ogAmshByACIAZBf3MgBWoiBmohBQNAAkAgAi0AACAELQAARg0AQQIhBAwDCwJAIAYNAEEAIQQgBSECDAMLIAZBf2ohBiAEQQFqIQQgAkEBaiICIANHDQALIAchBiADIQILIABBATYCACABIAY2AgAgACACNgIEDwsgAUEANgIAIAAgBDYCACAAIAI2AgQLCgAgABDHgICAAAvyNgELfyOAgICAAEEQayIBJICAgIAAAkBBACgCoNCAgAANAEEAEMuAgIAAQYDUhIAAayICQdkASQ0AQQAhAwJAQQAoAuDTgIAAIgQNAEEAQn83AuzTgIAAQQBCgICEgICAwAA3AuTTgIAAQQAgAUEIakFwcUHYqtWqBXMiBDYC4NOAgABBAEEANgL004CAAEEAQQA2AsTTgIAAC0EAIAI2AszTgIAAQQBBgNSEgAA2AsjTgIAAQQBBgNSEgAA2ApjQgIAAQQAgBDYCrNCAgABBAEF/NgKo0ICAAANAIANBxNCAgABqIANBuNCAgABqIgQ2AgAgBCADQbDQgIAAaiIFNgIAIANBvNCAgABqIAU2AgAgA0HM0ICAAGogA0HA0ICAAGoiBTYCACAFIAQ2AgAgA0HU0ICAAGogA0HI0ICAAGoiBDYCACAEIAU2AgAgA0HQ0ICAAGogBDYCACADQSBqIgNBgAJHDQALQYDUhIAAQXhBgNSEgABrQQ9xQQBBgNSEgABBCGpBD3EbIgNqIgRBBGogAkFIaiIFIANrIgNBAXI2AgBBAEEAKALw04CAADYCpNCAgABBACADNgKU0ICAAEEAIAQ2AqDQgIAAQYDUhIAAIAVqQTg2AgQLAkACQAJAAkACQAJAAkACQAJAAkACQAJAIABB7AFLDQACQEEAKAKI0ICAACIGQRAgAEETakFwcSAAQQtJGyICQQN2IgR2IgNBA3FFDQACQAJAIANBAXEgBHJBAXMiBUEDdCIEQbDQgIAAaiIDIARBuNCAgABqKAIAIgQoAggiAkcNAEEAIAZBfiAFd3E2AojQgIAADAELIAMgAjYCCCACIAM2AgwLIARBCGohAyAEIAVBA3QiBUEDcjYCBCAEIAVqIgQgBCgCBEEBcjYCBAwMCyACQQAoApDQgIAAIgdNDQECQCADRQ0AAkACQCADIAR0QQIgBHQiA0EAIANrcnEiA0EAIANrcUF/aiIDIANBDHZBEHEiA3YiBEEFdkEIcSIFIANyIAQgBXYiA0ECdkEEcSIEciADIAR2IgNBAXZBAnEiBHIgAyAEdiIDQQF2QQFxIgRyIAMgBHZqIgRBA3QiA0Gw0ICAAGoiBSADQbjQgIAAaigCACIDKAIIIgBHDQBBACAGQX4gBHdxIgY2AojQgIAADAELIAUgADYCCCAAIAU2AgwLIAMgAkEDcjYCBCADIARBA3QiBGogBCACayIFNgIAIAMgAmoiACAFQQFyNgIEAkAgB0UNACAHQXhxQbDQgIAAaiECQQAoApzQgIAAIQQCQAJAIAZBASAHQQN2dCIIcQ0AQQAgBiAIcjYCiNCAgAAgAiEIDAELIAIoAgghCAsgCCAENgIMIAIgBDYCCCAEIAI2AgwgBCAINgIICyADQQhqIQNBACAANgKc0ICAAEEAIAU2ApDQgIAADAwLQQAoAozQgIAAIglFDQEgCUEAIAlrcUF/aiIDIANBDHZBEHEiA3YiBEEFdkEIcSIFIANyIAQgBXYiA0ECdkEEcSIEciADIAR2IgNBAXZBAnEiBHIgAyAEdiIDQQF2QQFxIgRyIAMgBHZqQQJ0QbjSgIAAaigCACIAKAIEQXhxIAJrIQQgACEFAkADQAJAIAUoAhAiAw0AIAVBFGooAgAiA0UNAgsgAygCBEF4cSACayIFIAQgBSAESSIFGyEEIAMgACAFGyEAIAMhBQwACwsgACgCGCEKAkAgACgCDCIIIABGDQAgACgCCCIDQQAoApjQgIAASRogCCADNgIIIAMgCDYCDAwLCwJAIABBFGoiBSgCACIDDQAgACgCECIDRQ0DIABBEGohBQsDQCAFIQsgAyIIQRRqIgUoAgAiAw0AIAhBEGohBSAIKAIQIgMNAAsgC0EANgIADAoLQX8hAiAAQb9/Sw0AIABBE2oiA0FwcSECQQAoAozQgIAAIgdFDQBBACELAkAgAkGAAkkNAEEfIQsgAkH///8HSw0AIANBCHYiAyADQYD+P2pBEHZBCHEiA3QiBCAEQYDgH2pBEHZBBHEiBHQiBSAFQYCAD2pBEHZBAnEiBXRBD3YgAyAEciAFcmsiA0EBdCACIANBFWp2QQFxckEcaiELC0EAIAJrIQQCQAJAAkACQCALQQJ0QbjSgIAAaigCACIFDQBBACEDQQAhCAwBC0EAIQMgAkEAQRkgC0EBdmsgC0EfRht0IQBBACEIA0ACQCAFKAIEQXhxIAJrIgYgBE8NACAGIQQgBSEIIAYNAEEAIQQgBSEIIAUhAwwDCyADIAVBFGooAgAiBiAGIAUgAEEddkEEcWpBEGooAgAiBUYbIAMgBhshAyAAQQF0IQAgBQ0ACwsCQCADIAhyDQBBACEIQQIgC3QiA0EAIANrciAHcSIDRQ0DIANBACADa3FBf2oiAyADQQx2QRBxIgN2IgVBBXZBCHEiACADciAFIAB2IgNBAnZBBHEiBXIgAyAFdiIDQQF2QQJxIgVyIAMgBXYiA0EBdkEBcSIFciADIAV2akECdEG40oCAAGooAgAhAwsgA0UNAQsDQCADKAIEQXhxIAJrIgYgBEkhAAJAIAMoAhAiBQ0AIANBFGooAgAhBQsgBiAEIAAbIQQgAyAIIAAbIQggBSEDIAUNAAsLIAhFDQAgBEEAKAKQ0ICAACACa08NACAIKAIYIQsCQCAIKAIMIgAgCEYNACAIKAIIIgNBACgCmNCAgABJGiAAIAM2AgggAyAANgIMDAkLAkAgCEEUaiIFKAIAIgMNACAIKAIQIgNFDQMgCEEQaiEFCwNAIAUhBiADIgBBFGoiBSgCACIDDQAgAEEQaiEFIAAoAhAiAw0ACyAGQQA2AgAMCAsCQEEAKAKQ0ICAACIDIAJJDQBBACgCnNCAgAAhBAJAAkAgAyACayIFQRBJDQAgBCACaiIAIAVBAXI2AgRBACAFNgKQ0ICAAEEAIAA2ApzQgIAAIAQgA2ogBTYCACAEIAJBA3I2AgQMAQsgBCADQQNyNgIEIAQgA2oiAyADKAIEQQFyNgIEQQBBADYCnNCAgABBAEEANgKQ0ICAAAsgBEEIaiEDDAoLAkBBACgClNCAgAAiACACTQ0AQQAoAqDQgIAAIgMgAmoiBCAAIAJrIgVBAXI2AgRBACAFNgKU0ICAAEEAIAQ2AqDQgIAAIAMgAkEDcjYCBCADQQhqIQMMCgsCQAJAQQAoAuDTgIAARQ0AQQAoAujTgIAAIQQMAQtBAEJ/NwLs04CAAEEAQoCAhICAgMAANwLk04CAAEEAIAFBDGpBcHFB2KrVqgVzNgLg04CAAEEAQQA2AvTTgIAAQQBBADYCxNOAgABBgIAEIQQLQQAhAwJAIAQgAkHHAGoiB2oiBkEAIARrIgtxIgggAksNAEEAQTA2AvjTgIAADAoLAkBBACgCwNOAgAAiA0UNAAJAQQAoArjTgIAAIgQgCGoiBSAETQ0AIAUgA00NAQtBACEDQQBBMDYC+NOAgAAMCgtBAC0AxNOAgABBBHENBAJAAkACQEEAKAKg0ICAACIERQ0AQcjTgIAAIQMDQAJAIAMoAgAiBSAESw0AIAUgAygCBGogBEsNAwsgAygCCCIDDQALC0EAEMuAgIAAIgBBf0YNBSAIIQYCQEEAKALk04CAACIDQX9qIgQgAHFFDQAgCCAAayAEIABqQQAgA2txaiEGCyAGIAJNDQUgBkH+////B0sNBQJAQQAoAsDTgIAAIgNFDQBBACgCuNOAgAAiBCAGaiIFIARNDQYgBSADSw0GCyAGEMuAgIAAIgMgAEcNAQwHCyAGIABrIAtxIgZB/v///wdLDQQgBhDLgICAACIAIAMoAgAgAygCBGpGDQMgACEDCwJAIANBf0YNACACQcgAaiAGTQ0AAkAgByAGa0EAKALo04CAACIEakEAIARrcSIEQf7///8HTQ0AIAMhAAwHCwJAIAQQy4CAgABBf0YNACAEIAZqIQYgAyEADAcLQQAgBmsQy4CAgAAaDAQLIAMhACADQX9HDQUMAwtBACEIDAcLQQAhAAwFCyAAQX9HDQILQQBBACgCxNOAgABBBHI2AsTTgIAACyAIQf7///8HSw0BIAgQy4CAgAAhAEEAEMuAgIAAIQMgAEF/Rg0BIANBf0YNASAAIANPDQEgAyAAayIGIAJBOGpNDQELQQBBACgCuNOAgAAgBmoiAzYCuNOAgAACQCADQQAoArzTgIAATQ0AQQAgAzYCvNOAgAALAkACQAJAAkBBACgCoNCAgAAiBEUNAEHI04CAACEDA0AgACADKAIAIgUgAygCBCIIakYNAiADKAIIIgMNAAwDCwsCQAJAQQAoApjQgIAAIgNFDQAgACADTw0BC0EAIAA2ApjQgIAAC0EAIQNBACAGNgLM04CAAEEAIAA2AsjTgIAAQQBBfzYCqNCAgABBAEEAKALg04CAADYCrNCAgABBAEEANgLU04CAAANAIANBxNCAgABqIANBuNCAgABqIgQ2AgAgBCADQbDQgIAAaiIFNgIAIANBvNCAgABqIAU2AgAgA0HM0ICAAGogA0HA0ICAAGoiBTYCACAFIAQ2AgAgA0HU0ICAAGogA0HI0ICAAGoiBDYCACAEIAU2AgAgA0HQ0ICAAGogBDYCACADQSBqIgNBgAJHDQALIABBeCAAa0EPcUEAIABBCGpBD3EbIgNqIgQgBkFIaiIFIANrIgNBAXI2AgRBAEEAKALw04CAADYCpNCAgABBACADNgKU0ICAAEEAIAQ2AqDQgIAAIAAgBWpBODYCBAwCCyADLQAMQQhxDQAgBCAFSQ0AIAQgAE8NACAEQXggBGtBD3FBACAEQQhqQQ9xGyIFaiIAQQAoApTQgIAAIAZqIgsgBWsiBUEBcjYCBCADIAggBmo2AgRBAEEAKALw04CAADYCpNCAgABBACAFNgKU0ICAAEEAIAA2AqDQgIAAIAQgC2pBODYCBAwBCwJAIABBACgCmNCAgAAiCE8NAEEAIAA2ApjQgIAAIAAhCAsgACAGaiEFQcjTgIAAIQMCQAJAAkACQAJAAkACQANAIAMoAgAgBUYNASADKAIIIgMNAAwCCwsgAy0ADEEIcUUNAQtByNOAgAAhAwNAAkAgAygCACIFIARLDQAgBSADKAIEaiIFIARLDQMLIAMoAgghAwwACwsgAyAANgIAIAMgAygCBCAGajYCBCAAQXggAGtBD3FBACAAQQhqQQ9xG2oiCyACQQNyNgIEIAVBeCAFa0EPcUEAIAVBCGpBD3EbaiIGIAsgAmoiAmshAwJAIAYgBEcNAEEAIAI2AqDQgIAAQQBBACgClNCAgAAgA2oiAzYClNCAgAAgAiADQQFyNgIEDAMLAkAgBkEAKAKc0ICAAEcNAEEAIAI2ApzQgIAAQQBBACgCkNCAgAAgA2oiAzYCkNCAgAAgAiADQQFyNgIEIAIgA2ogAzYCAAwDCwJAIAYoAgQiBEEDcUEBRw0AIARBeHEhBwJAAkAgBEH/AUsNACAGKAIIIgUgBEEDdiIIQQN0QbDQgIAAaiIARhoCQCAGKAIMIgQgBUcNAEEAQQAoAojQgIAAQX4gCHdxNgKI0ICAAAwCCyAEIABGGiAEIAU2AgggBSAENgIMDAELIAYoAhghCQJAAkAgBigCDCIAIAZGDQAgBigCCCIEIAhJGiAAIAQ2AgggBCAANgIMDAELAkAgBkEUaiIEKAIAIgUNACAGQRBqIgQoAgAiBQ0AQQAhAAwBCwNAIAQhCCAFIgBBFGoiBCgCACIFDQAgAEEQaiEEIAAoAhAiBQ0ACyAIQQA2AgALIAlFDQACQAJAIAYgBigCHCIFQQJ0QbjSgIAAaiIEKAIARw0AIAQgADYCACAADQFBAEEAKAKM0ICAAEF+IAV3cTYCjNCAgAAMAgsgCUEQQRQgCSgCECAGRhtqIAA2AgAgAEUNAQsgACAJNgIYAkAgBigCECIERQ0AIAAgBDYCECAEIAA2AhgLIAYoAhQiBEUNACAAQRRqIAQ2AgAgBCAANgIYCyAHIANqIQMgBiAHaiIGKAIEIQQLIAYgBEF+cTYCBCACIANqIAM2AgAgAiADQQFyNgIEAkAgA0H/AUsNACADQXhxQbDQgIAAaiEEAkACQEEAKAKI0ICAACIFQQEgA0EDdnQiA3ENAEEAIAUgA3I2AojQgIAAIAQhAwwBCyAEKAIIIQMLIAMgAjYCDCAEIAI2AgggAiAENgIMIAIgAzYCCAwDC0EfIQQCQCADQf///wdLDQAgA0EIdiIEIARBgP4/akEQdkEIcSIEdCIFIAVBgOAfakEQdkEEcSIFdCIAIABBgIAPakEQdkECcSIAdEEPdiAEIAVyIAByayIEQQF0IAMgBEEVanZBAXFyQRxqIQQLIAIgBDYCHCACQgA3AhAgBEECdEG40oCAAGohBQJAQQAoAozQgIAAIgBBASAEdCIIcQ0AIAUgAjYCAEEAIAAgCHI2AozQgIAAIAIgBTYCGCACIAI2AgggAiACNgIMDAMLIANBAEEZIARBAXZrIARBH0YbdCEEIAUoAgAhAANAIAAiBSgCBEF4cSADRg0CIARBHXYhACAEQQF0IQQgBSAAQQRxakEQaiIIKAIAIgANAAsgCCACNgIAIAIgBTYCGCACIAI2AgwgAiACNgIIDAILIABBeCAAa0EPcUEAIABBCGpBD3EbIgNqIgsgBkFIaiIIIANrIgNBAXI2AgQgACAIakE4NgIEIAQgBUE3IAVrQQ9xQQAgBUFJakEPcRtqQUFqIgggCCAEQRBqSRsiCEEjNgIEQQBBACgC8NOAgAA2AqTQgIAAQQAgAzYClNCAgABBACALNgKg0ICAACAIQRBqQQApAtDTgIAANwIAIAhBACkCyNOAgAA3AghBACAIQQhqNgLQ04CAAEEAIAY2AszTgIAAQQAgADYCyNOAgABBAEEANgLU04CAACAIQSRqIQMDQCADQQc2AgAgA0EEaiIDIAVJDQALIAggBEYNAyAIIAgoAgRBfnE2AgQgCCAIIARrIgA2AgAgBCAAQQFyNgIEAkAgAEH/AUsNACAAQXhxQbDQgIAAaiEDAkACQEEAKAKI0ICAACIFQQEgAEEDdnQiAHENAEEAIAUgAHI2AojQgIAAIAMhBQwBCyADKAIIIQULIAUgBDYCDCADIAQ2AgggBCADNgIMIAQgBTYCCAwEC0EfIQMCQCAAQf///wdLDQAgAEEIdiIDIANBgP4/akEQdkEIcSIDdCIFIAVBgOAfakEQdkEEcSIFdCIIIAhBgIAPakEQdkECcSIIdEEPdiADIAVyIAhyayIDQQF0IAAgA0EVanZBAXFyQRxqIQMLIAQgAzYCHCAEQgA3AhAgA0ECdEG40oCAAGohBQJAQQAoAozQgIAAIghBASADdCIGcQ0AIAUgBDYCAEEAIAggBnI2AozQgIAAIAQgBTYCGCAEIAQ2AgggBCAENgIMDAQLIABBAEEZIANBAXZrIANBH0YbdCEDIAUoAgAhCANAIAgiBSgCBEF4cSAARg0DIANBHXYhCCADQQF0IQMgBSAIQQRxakEQaiIGKAIAIggNAAsgBiAENgIAIAQgBTYCGCAEIAQ2AgwgBCAENgIIDAMLIAUoAggiAyACNgIMIAUgAjYCCCACQQA2AhggAiAFNgIMIAIgAzYCCAsgC0EIaiEDDAULIAUoAggiAyAENgIMIAUgBDYCCCAEQQA2AhggBCAFNgIMIAQgAzYCCAtBACgClNCAgAAiAyACTQ0AQQAoAqDQgIAAIgQgAmoiBSADIAJrIgNBAXI2AgRBACADNgKU0ICAAEEAIAU2AqDQgIAAIAQgAkEDcjYCBCAEQQhqIQMMAwtBACEDQQBBMDYC+NOAgAAMAgsCQCALRQ0AAkACQCAIIAgoAhwiBUECdEG40oCAAGoiAygCAEcNACADIAA2AgAgAA0BQQAgB0F+IAV3cSIHNgKM0ICAAAwCCyALQRBBFCALKAIQIAhGG2ogADYCACAARQ0BCyAAIAs2AhgCQCAIKAIQIgNFDQAgACADNgIQIAMgADYCGAsgCEEUaigCACIDRQ0AIABBFGogAzYCACADIAA2AhgLAkACQCAEQQ9LDQAgCCAEIAJqIgNBA3I2AgQgCCADaiIDIAMoAgRBAXI2AgQMAQsgCCACaiIAIARBAXI2AgQgCCACQQNyNgIEIAAgBGogBDYCAAJAIARB/wFLDQAgBEF4cUGw0ICAAGohAwJAAkBBACgCiNCAgAAiBUEBIARBA3Z0IgRxDQBBACAFIARyNgKI0ICAACADIQQMAQsgAygCCCEECyAEIAA2AgwgAyAANgIIIAAgAzYCDCAAIAQ2AggMAQtBHyEDAkAgBEH///8HSw0AIARBCHYiAyADQYD+P2pBEHZBCHEiA3QiBSAFQYDgH2pBEHZBBHEiBXQiAiACQYCAD2pBEHZBAnEiAnRBD3YgAyAFciACcmsiA0EBdCAEIANBFWp2QQFxckEcaiEDCyAAIAM2AhwgAEIANwIQIANBAnRBuNKAgABqIQUCQCAHQQEgA3QiAnENACAFIAA2AgBBACAHIAJyNgKM0ICAACAAIAU2AhggACAANgIIIAAgADYCDAwBCyAEQQBBGSADQQF2ayADQR9GG3QhAyAFKAIAIQICQANAIAIiBSgCBEF4cSAERg0BIANBHXYhAiADQQF0IQMgBSACQQRxakEQaiIGKAIAIgINAAsgBiAANgIAIAAgBTYCGCAAIAA2AgwgACAANgIIDAELIAUoAggiAyAANgIMIAUgADYCCCAAQQA2AhggACAFNgIMIAAgAzYCCAsgCEEIaiEDDAELAkAgCkUNAAJAAkAgACAAKAIcIgVBAnRBuNKAgABqIgMoAgBHDQAgAyAINgIAIAgNAUEAIAlBfiAFd3E2AozQgIAADAILIApBEEEUIAooAhAgAEYbaiAINgIAIAhFDQELIAggCjYCGAJAIAAoAhAiA0UNACAIIAM2AhAgAyAINgIYCyAAQRRqKAIAIgNFDQAgCEEUaiADNgIAIAMgCDYCGAsCQAJAIARBD0sNACAAIAQgAmoiA0EDcjYCBCAAIANqIgMgAygCBEEBcjYCBAwBCyAAIAJqIgUgBEEBcjYCBCAAIAJBA3I2AgQgBSAEaiAENgIAAkAgB0UNACAHQXhxQbDQgIAAaiECQQAoApzQgIAAIQMCQAJAQQEgB0EDdnQiCCAGcQ0AQQAgCCAGcjYCiNCAgAAgAiEIDAELIAIoAgghCAsgCCADNgIMIAIgAzYCCCADIAI2AgwgAyAINgIIC0EAIAU2ApzQgIAAQQAgBDYCkNCAgAALIABBCGohAwsgAUEQaiSAgICAACADCwoAIAAQyYCAgAAL4g0BB38CQCAARQ0AIABBeGoiASAAQXxqKAIAIgJBeHEiAGohAwJAIAJBAXENACACQQNxRQ0BIAEgASgCACICayIBQQAoApjQgIAAIgRJDQEgAiAAaiEAAkAgAUEAKAKc0ICAAEYNAAJAIAJB/wFLDQAgASgCCCIEIAJBA3YiBUEDdEGw0ICAAGoiBkYaAkAgASgCDCICIARHDQBBAEEAKAKI0ICAAEF+IAV3cTYCiNCAgAAMAwsgAiAGRhogAiAENgIIIAQgAjYCDAwCCyABKAIYIQcCQAJAIAEoAgwiBiABRg0AIAEoAggiAiAESRogBiACNgIIIAIgBjYCDAwBCwJAIAFBFGoiAigCACIEDQAgAUEQaiICKAIAIgQNAEEAIQYMAQsDQCACIQUgBCIGQRRqIgIoAgAiBA0AIAZBEGohAiAGKAIQIgQNAAsgBUEANgIACyAHRQ0BAkACQCABIAEoAhwiBEECdEG40oCAAGoiAigCAEcNACACIAY2AgAgBg0BQQBBACgCjNCAgABBfiAEd3E2AozQgIAADAMLIAdBEEEUIAcoAhAgAUYbaiAGNgIAIAZFDQILIAYgBzYCGAJAIAEoAhAiAkUNACAGIAI2AhAgAiAGNgIYCyABKAIUIgJFDQEgBkEUaiACNgIAIAIgBjYCGAwBCyADKAIEIgJBA3FBA0cNACADIAJBfnE2AgRBACAANgKQ0ICAACABIABqIAA2AgAgASAAQQFyNgIEDwsgASADTw0AIAMoAgQiAkEBcUUNAAJAAkAgAkECcQ0AAkAgA0EAKAKg0ICAAEcNAEEAIAE2AqDQgIAAQQBBACgClNCAgAAgAGoiADYClNCAgAAgASAAQQFyNgIEIAFBACgCnNCAgABHDQNBAEEANgKQ0ICAAEEAQQA2ApzQgIAADwsCQCADQQAoApzQgIAARw0AQQAgATYCnNCAgABBAEEAKAKQ0ICAACAAaiIANgKQ0ICAACABIABBAXI2AgQgASAAaiAANgIADwsgAkF4cSAAaiEAAkACQCACQf8BSw0AIAMoAggiBCACQQN2IgVBA3RBsNCAgABqIgZGGgJAIAMoAgwiAiAERw0AQQBBACgCiNCAgABBfiAFd3E2AojQgIAADAILIAIgBkYaIAIgBDYCCCAEIAI2AgwMAQsgAygCGCEHAkACQCADKAIMIgYgA0YNACADKAIIIgJBACgCmNCAgABJGiAGIAI2AgggAiAGNgIMDAELAkAgA0EUaiICKAIAIgQNACADQRBqIgIoAgAiBA0AQQAhBgwBCwNAIAIhBSAEIgZBFGoiAigCACIEDQAgBkEQaiECIAYoAhAiBA0ACyAFQQA2AgALIAdFDQACQAJAIAMgAygCHCIEQQJ0QbjSgIAAaiICKAIARw0AIAIgBjYCACAGDQFBAEEAKAKM0ICAAEF+IAR3cTYCjNCAgAAMAgsgB0EQQRQgBygCECADRhtqIAY2AgAgBkUNAQsgBiAHNgIYAkAgAygCECICRQ0AIAYgAjYCECACIAY2AhgLIAMoAhQiAkUNACAGQRRqIAI2AgAgAiAGNgIYCyABIABqIAA2AgAgASAAQQFyNgIEIAFBACgCnNCAgABHDQFBACAANgKQ0ICAAA8LIAMgAkF+cTYCBCABIABqIAA2AgAgASAAQQFyNgIECwJAIABB/wFLDQAgAEF4cUGw0ICAAGohAgJAAkBBACgCiNCAgAAiBEEBIABBA3Z0IgBxDQBBACAEIAByNgKI0ICAACACIQAMAQsgAigCCCEACyAAIAE2AgwgAiABNgIIIAEgAjYCDCABIAA2AggPC0EfIQICQCAAQf///wdLDQAgAEEIdiICIAJBgP4/akEQdkEIcSICdCIEIARBgOAfakEQdkEEcSIEdCIGIAZBgIAPakEQdkECcSIGdEEPdiACIARyIAZyayICQQF0IAAgAkEVanZBAXFyQRxqIQILIAEgAjYCHCABQgA3AhAgAkECdEG40oCAAGohBAJAAkBBACgCjNCAgAAiBkEBIAJ0IgNxDQAgBCABNgIAQQAgBiADcjYCjNCAgAAgASAENgIYIAEgATYCCCABIAE2AgwMAQsgAEEAQRkgAkEBdmsgAkEfRht0IQIgBCgCACEGAkADQCAGIgQoAgRBeHEgAEYNASACQR12IQYgAkEBdCECIAQgBkEEcWpBEGoiAygCACIGDQALIAMgATYCACABIAQ2AhggASABNgIMIAEgATYCCAwBCyAEKAIIIgAgATYCDCAEIAE2AgggAUEANgIYIAEgBDYCDCABIAA2AggLQQBBACgCqNCAgABBf2oiAUF/IAEbNgKo0ICAAAsLBAAAAAtOAAJAIAANAD8AQRB0DwsCQCAAQf//A3ENACAAQX9MDQACQCAAQRB2QAAiAEF/Rw0AQQBBMDYC+NOAgABBfw8LIABBEHQPCxDKgICAAAAL8gICA38BfgJAIAJFDQAgACABOgAAIAIgAGoiA0F/aiABOgAAIAJBA0kNACAAIAE6AAIgACABOgABIANBfWogAToAACADQX5qIAE6AAAgAkEHSQ0AIAAgAToAAyADQXxqIAE6AAAgAkEJSQ0AIABBACAAa0EDcSIEaiIDIAFB/wFxQYGChAhsIgE2AgAgAyACIARrQXxxIgRqIgJBfGogATYCACAEQQlJDQAgAyABNgIIIAMgATYCBCACQXhqIAE2AgAgAkF0aiABNgIAIARBGUkNACADIAE2AhggAyABNgIUIAMgATYCECADIAE2AgwgAkFwaiABNgIAIAJBbGogATYCACACQWhqIAE2AgAgAkFkaiABNgIAIAQgA0EEcUEYciIFayICQSBJDQAgAa1CgYCAgBB+IQYgAyAFaiEBA0AgASAGNwMYIAEgBjcDECABIAY3AwggASAGNwMAIAFBIGohASACQWBqIgJBH0sNAAsLIAALC45IAQBBgAgLhkgBAAAAAgAAAAMAAAAAAAAAAAAAAAQAAAAFAAAAAAAAAAAAAAAGAAAABwAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEludmFsaWQgY2hhciBpbiB1cmwgcXVlcnkAU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl9ib2R5AENvbnRlbnQtTGVuZ3RoIG92ZXJmbG93AENodW5rIHNpemUgb3ZlcmZsb3cAUmVzcG9uc2Ugb3ZlcmZsb3cASW52YWxpZCBtZXRob2QgZm9yIEhUVFAveC54IHJlcXVlc3QASW52YWxpZCBtZXRob2QgZm9yIFJUU1AveC54IHJlcXVlc3QARXhwZWN0ZWQgU09VUkNFIG1ldGhvZCBmb3IgSUNFL3gueCByZXF1ZXN0AEludmFsaWQgY2hhciBpbiB1cmwgZnJhZ21lbnQgc3RhcnQARXhwZWN0ZWQgZG90AFNwYW4gY2FsbGJhY2sgZXJyb3IgaW4gb25fc3RhdHVzAEludmFsaWQgcmVzcG9uc2Ugc3RhdHVzAEludmFsaWQgY2hhcmFjdGVyIGluIGNodW5rIGV4dGVuc2lvbnMAVXNlciBjYWxsYmFjayBlcnJvcgBgb25fcmVzZXRgIGNhbGxiYWNrIGVycm9yAGBvbl9jaHVua19oZWFkZXJgIGNhbGxiYWNrIGVycm9yAGBvbl9tZXNzYWdlX2JlZ2luYCBjYWxsYmFjayBlcnJvcgBgb25fY2h1bmtfZXh0ZW5zaW9uX3ZhbHVlYCBjYWxsYmFjayBlcnJvcgBgb25fc3RhdHVzX2NvbXBsZXRlYCBjYWxsYmFjayBlcnJvcgBgb25fdmVyc2lvbl9jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX3VybF9jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX2NodW5rX2NvbXBsZXRlYCBjYWxsYmFjayBlcnJvcgBgb25faGVhZGVyX3ZhbHVlX2NvbXBsZXRlYCBjYWxsYmFjayBlcnJvcgBgb25fbWVzc2FnZV9jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX21ldGhvZF9jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX2hlYWRlcl9maWVsZF9jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAYG9uX2NodW5rX2V4dGVuc2lvbl9uYW1lYCBjYWxsYmFjayBlcnJvcgBVbmV4cGVjdGVkIGNoYXIgaW4gdXJsIHNlcnZlcgBJbnZhbGlkIGhlYWRlciB2YWx1ZSBjaGFyAEludmFsaWQgaGVhZGVyIGZpZWxkIGNoYXIAU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl92ZXJzaW9uAEludmFsaWQgbWlub3IgdmVyc2lvbgBJbnZhbGlkIG1ham9yIHZlcnNpb24ARXhwZWN0ZWQgc3BhY2UgYWZ0ZXIgdmVyc2lvbgBFeHBlY3RlZCBDUkxGIGFmdGVyIHZlcnNpb24ASW52YWxpZCBIVFRQIHZlcnNpb24ASW52YWxpZCBoZWFkZXIgdG9rZW4AU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl91cmwASW52YWxpZCBjaGFyYWN0ZXJzIGluIHVybABVbmV4cGVjdGVkIHN0YXJ0IGNoYXIgaW4gdXJsAERvdWJsZSBAIGluIHVybABFbXB0eSBDb250ZW50LUxlbmd0aABJbnZhbGlkIGNoYXJhY3RlciBpbiBDb250ZW50LUxlbmd0aABEdXBsaWNhdGUgQ29udGVudC1MZW5ndGgASW52YWxpZCBjaGFyIGluIHVybCBwYXRoAENvbnRlbnQtTGVuZ3RoIGNhbid0IGJlIHByZXNlbnQgd2l0aCBUcmFuc2Zlci1FbmNvZGluZwBJbnZhbGlkIGNoYXJhY3RlciBpbiBjaHVuayBzaXplAFNwYW4gY2FsbGJhY2sgZXJyb3IgaW4gb25faGVhZGVyX3ZhbHVlAFNwYW4gY2FsbGJhY2sgZXJyb3IgaW4gb25fY2h1bmtfZXh0ZW5zaW9uX3ZhbHVlAEludmFsaWQgY2hhcmFjdGVyIGluIGNodW5rIGV4dGVuc2lvbnMgdmFsdWUATWlzc2luZyBleHBlY3RlZCBMRiBhZnRlciBoZWFkZXIgdmFsdWUASW52YWxpZCBgVHJhbnNmZXItRW5jb2RpbmdgIGhlYWRlciB2YWx1ZQBJbnZhbGlkIGNoYXJhY3RlciBpbiBjaHVuayBleHRlbnNpb25zIHF1b3RlIHZhbHVlAEludmFsaWQgY2hhcmFjdGVyIGluIGNodW5rIGV4dGVuc2lvbnMgcXVvdGVkIHZhbHVlAFBhdXNlZCBieSBvbl9oZWFkZXJzX2NvbXBsZXRlAEludmFsaWQgRU9GIHN0YXRlAG9uX3Jlc2V0IHBhdXNlAG9uX2NodW5rX2hlYWRlciBwYXVzZQBvbl9tZXNzYWdlX2JlZ2luIHBhdXNlAG9uX2NodW5rX2V4dGVuc2lvbl92YWx1ZSBwYXVzZQBvbl9zdGF0dXNfY29tcGxldGUgcGF1c2UAb25fdmVyc2lvbl9jb21wbGV0ZSBwYXVzZQBvbl91cmxfY29tcGxldGUgcGF1c2UAb25fY2h1bmtfY29tcGxldGUgcGF1c2UAb25faGVhZGVyX3ZhbHVlX2NvbXBsZXRlIHBhdXNlAG9uX21lc3NhZ2VfY29tcGxldGUgcGF1c2UAb25fbWV0aG9kX2NvbXBsZXRlIHBhdXNlAG9uX2hlYWRlcl9maWVsZF9jb21wbGV0ZSBwYXVzZQBvbl9jaHVua19leHRlbnNpb25fbmFtZSBwYXVzZQBVbmV4cGVjdGVkIHNwYWNlIGFmdGVyIHN0YXJ0IGxpbmUAU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl9jaHVua19leHRlbnNpb25fbmFtZQBJbnZhbGlkIGNoYXJhY3RlciBpbiBjaHVuayBleHRlbnNpb25zIG5hbWUAUGF1c2Ugb24gQ09OTkVDVC9VcGdyYWRlAFBhdXNlIG9uIFBSSS9VcGdyYWRlAEV4cGVjdGVkIEhUVFAvMiBDb25uZWN0aW9uIFByZWZhY2UAU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl9tZXRob2QARXhwZWN0ZWQgc3BhY2UgYWZ0ZXIgbWV0aG9kAFNwYW4gY2FsbGJhY2sgZXJyb3IgaW4gb25faGVhZGVyX2ZpZWxkAFBhdXNlZABJbnZhbGlkIHdvcmQgZW5jb3VudGVyZWQASW52YWxpZCBtZXRob2QgZW5jb3VudGVyZWQAVW5leHBlY3RlZCBjaGFyIGluIHVybCBzY2hlbWEAUmVxdWVzdCBoYXMgaW52YWxpZCBgVHJhbnNmZXItRW5jb2RpbmdgAFNXSVRDSF9QUk9YWQBVU0VfUFJPWFkATUtBQ1RJVklUWQBVTlBST0NFU1NBQkxFX0VOVElUWQBDT1BZAE1PVkVEX1BFUk1BTkVOVExZAFRPT19FQVJMWQBOT1RJRlkARkFJTEVEX0RFUEVOREVOQ1kAQkFEX0dBVEVXQVkAUExBWQBQVVQAQ0hFQ0tPVVQAR0FURVdBWV9USU1FT1VUAFJFUVVFU1RfVElNRU9VVABORVRXT1JLX0NPTk5FQ1RfVElNRU9VVABDT05ORUNUSU9OX1RJTUVPVVQATE9HSU5fVElNRU9VVABORVRXT1JLX1JFQURfVElNRU9VVABQT1NUAE1JU0RJUkVDVEVEX1JFUVVFU1QAQ0xJRU5UX0NMT1NFRF9SRVFVRVNUAENMSUVOVF9DTE9TRURfTE9BRF9CQUxBTkNFRF9SRVFVRVNUAEJBRF9SRVFVRVNUAEhUVFBfUkVRVUVTVF9TRU5UX1RPX0hUVFBTX1BPUlQAUkVQT1JUAElNX0FfVEVBUE9UAFJFU0VUX0NPTlRFTlQATk9fQ09OVEVOVABQQVJUSUFMX0NPTlRFTlQASFBFX0lOVkFMSURfQ09OU1RBTlQASFBFX0NCX1JFU0VUAEdFVABIUEVfU1RSSUNUAENPTkZMSUNUAFRFTVBPUkFSWV9SRURJUkVDVABQRVJNQU5FTlRfUkVESVJFQ1QAQ09OTkVDVABNVUxUSV9TVEFUVVMASFBFX0lOVkFMSURfU1RBVFVTAFRPT19NQU5ZX1JFUVVFU1RTAEVBUkxZX0hJTlRTAFVOQVZBSUxBQkxFX0ZPUl9MRUdBTF9SRUFTT05TAE9QVElPTlMAU1dJVENISU5HX1BST1RPQ09MUwBWQVJJQU5UX0FMU09fTkVHT1RJQVRFUwBNVUxUSVBMRV9DSE9JQ0VTAElOVEVSTkFMX1NFUlZFUl9FUlJPUgBXRUJfU0VSVkVSX1VOS05PV05fRVJST1IAUkFJTEdVTl9FUlJPUgBJREVOVElUWV9QUk9WSURFUl9BVVRIRU5USUNBVElPTl9FUlJPUgBTU0xfQ0VSVElGSUNBVEVfRVJST1IASU5WQUxJRF9YX0ZPUldBUkRFRF9GT1IAU0VUX1BBUkFNRVRFUgBHRVRfUEFSQU1FVEVSAEhQRV9VU0VSAFNFRV9PVEhFUgBIUEVfQ0JfQ0hVTktfSEVBREVSAE1LQ0FMRU5EQVIAU0VUVVAAV0VCX1NFUlZFUl9JU19ET1dOAFRFQVJET1dOAEhQRV9DTE9TRURfQ09OTkVDVElPTgBIRVVSSVNUSUNfRVhQSVJBVElPTgBESVNDT05ORUNURURfT1BFUkFUSU9OAE5PTl9BVVRIT1JJVEFUSVZFX0lORk9STUFUSU9OAEhQRV9JTlZBTElEX1ZFUlNJT04ASFBFX0NCX01FU1NBR0VfQkVHSU4AU0lURV9JU19GUk9aRU4ASFBFX0lOVkFMSURfSEVBREVSX1RPS0VOAElOVkFMSURfVE9LRU4ARk9SQklEREVOAEVOSEFOQ0VfWU9VUl9DQUxNAEhQRV9JTlZBTElEX1VSTABCTE9DS0VEX0JZX1BBUkVOVEFMX0NPTlRST0wATUtDT0wAQUNMAEhQRV9JTlRFUk5BTABSRVFVRVNUX0hFQURFUl9GSUVMRFNfVE9PX0xBUkdFX1VOT0ZGSUNJQUwASFBFX09LAFVOTElOSwBVTkxPQ0sAUFJJAFJFVFJZX1dJVEgASFBFX0lOVkFMSURfQ09OVEVOVF9MRU5HVEgASFBFX1VORVhQRUNURURfQ09OVEVOVF9MRU5HVEgARkxVU0gAUFJPUFBBVENIAE0tU0VBUkNIAFVSSV9UT09fTE9ORwBQUk9DRVNTSU5HAE1JU0NFTExBTkVPVVNfUEVSU0lTVEVOVF9XQVJOSU5HAE1JU0NFTExBTkVPVVNfV0FSTklORwBIUEVfSU5WQUxJRF9UUkFOU0ZFUl9FTkNPRElORwBFeHBlY3RlZCBDUkxGAEhQRV9JTlZBTElEX0NIVU5LX1NJWkUATU9WRQBDT05USU5VRQBIUEVfQ0JfU1RBVFVTX0NPTVBMRVRFAEhQRV9DQl9IRUFERVJTX0NPTVBMRVRFAEhQRV9DQl9WRVJTSU9OX0NPTVBMRVRFAEhQRV9DQl9VUkxfQ09NUExFVEUASFBFX0NCX0NIVU5LX0NPTVBMRVRFAEhQRV9DQl9IRUFERVJfVkFMVUVfQ09NUExFVEUASFBFX0NCX0NIVU5LX0VYVEVOU0lPTl9WQUxVRV9DT01QTEVURQBIUEVfQ0JfQ0hVTktfRVhURU5TSU9OX05BTUVfQ09NUExFVEUASFBFX0NCX01FU1NBR0VfQ09NUExFVEUASFBFX0NCX01FVEhPRF9DT01QTEVURQBIUEVfQ0JfSEVBREVSX0ZJRUxEX0NPTVBMRVRFAERFTEVURQBIUEVfSU5WQUxJRF9FT0ZfU1RBVEUASU5WQUxJRF9TU0xfQ0VSVElGSUNBVEUAUEFVU0UATk9fUkVTUE9OU0UAVU5TVVBQT1JURURfTUVESUFfVFlQRQBHT05FAE5PVF9BQ0NFUFRBQkxFAFNFUlZJQ0VfVU5BVkFJTEFCTEUAUkFOR0VfTk9UX1NBVElTRklBQkxFAE9SSUdJTl9JU19VTlJFQUNIQUJMRQBSRVNQT05TRV9JU19TVEFMRQBQVVJHRQBNRVJHRQBSRVFVRVNUX0hFQURFUl9GSUVMRFNfVE9PX0xBUkdFAFJFUVVFU1RfSEVBREVSX1RPT19MQVJHRQBQQVlMT0FEX1RPT19MQVJHRQBJTlNVRkZJQ0lFTlRfU1RPUkFHRQBIUEVfUEFVU0VEX1VQR1JBREUASFBFX1BBVVNFRF9IMl9VUEdSQURFAFNPVVJDRQBBTk5PVU5DRQBUUkFDRQBIUEVfVU5FWFBFQ1RFRF9TUEFDRQBERVNDUklCRQBVTlNVQlNDUklCRQBSRUNPUkQASFBFX0lOVkFMSURfTUVUSE9EAE5PVF9GT1VORABQUk9QRklORABVTkJJTkQAUkVCSU5EAFVOQVVUSE9SSVpFRABNRVRIT0RfTk9UX0FMTE9XRUQASFRUUF9WRVJTSU9OX05PVF9TVVBQT1JURUQAQUxSRUFEWV9SRVBPUlRFRABBQ0NFUFRFRABOT1RfSU1QTEVNRU5URUQATE9PUF9ERVRFQ1RFRABIUEVfQ1JfRVhQRUNURUQASFBFX0xGX0VYUEVDVEVEAENSRUFURUQASU1fVVNFRABIUEVfUEFVU0VEAFRJTUVPVVRfT0NDVVJFRABQQVlNRU5UX1JFUVVJUkVEAFBSRUNPTkRJVElPTl9SRVFVSVJFRABQUk9YWV9BVVRIRU5USUNBVElPTl9SRVFVSVJFRABORVRXT1JLX0FVVEhFTlRJQ0FUSU9OX1JFUVVJUkVEAExFTkdUSF9SRVFVSVJFRABTU0xfQ0VSVElGSUNBVEVfUkVRVUlSRUQAVVBHUkFERV9SRVFVSVJFRABQQUdFX0VYUElSRUQAUFJFQ09ORElUSU9OX0ZBSUxFRABFWFBFQ1RBVElPTl9GQUlMRUQAUkVWQUxJREFUSU9OX0ZBSUxFRABTU0xfSEFORFNIQUtFX0ZBSUxFRABMT0NLRUQAVFJBTlNGT1JNQVRJT05fQVBQTElFRABOT1RfTU9ESUZJRUQATk9UX0VYVEVOREVEAEJBTkRXSURUSF9MSU1JVF9FWENFRURFRABTSVRFX0lTX09WRVJMT0FERUQASEVBRABFeHBlY3RlZCBIVFRQLwAAXhMAACYTAAAwEAAA8BcAAJ0TAAAVEgAAORcAAPASAAAKEAAAdRIAAK0SAACCEwAATxQAAH8QAACgFQAAIxQAAIkSAACLFAAATRUAANQRAADPFAAAEBgAAMkWAADcFgAAwREAAOAXAAC7FAAAdBQAAHwVAADlFAAACBcAAB8QAABlFQAAoxQAACgVAAACFQAAmRUAACwQAACLGQAATw8AANQOAABqEAAAzhAAAAIXAACJDgAAbhMAABwTAABmFAAAVhcAAMETAADNEwAAbBMAAGgXAABmFwAAXxcAACITAADODwAAaQ4AANgOAABjFgAAyxMAAKoOAAAoFwAAJhcAAMUTAABdFgAA6BEAAGcTAABlEwAA8hYAAHMTAAAdFwAA+RYAAPMRAADPDgAAzhUAAAwSAACzEQAApREAAGEQAAAyFwAAuxMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQIBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAIDAgICAgIAAAICAAICAAICAgICAgICAgIABAAAAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgIAAAACAgICAgICAgICAgICAgICAgICAgICAgICAgICAgACAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAACAAICAgICAAACAgACAgACAgICAgICAgICAAMABAAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAAAAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAAgACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbG9zZWVlcC1hbGl2ZQAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQEBAQEBAQEBAQIBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBY2h1bmtlZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEAAQEBAQEAAAEBAAEBAAEBAQEBAQEBAQEAAAAAAAAAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAAABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlY3Rpb25lbnQtbGVuZ3Rob25yb3h5LWNvbm5lY3Rpb24AAAAAAAAAAAAAAAAAAAByYW5zZmVyLWVuY29kaW5ncGdyYWRlDQoNCg0KU00NCg0KVFRQL0NFL1RTUC8AAAAAAAAAAAAAAAABAgABAwAAAAAAAAAAAAAAAAAAAAAAAAQBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAAAAAAAAAAAAQIAAQMAAAAAAAAAAAAAAAAAAAAAAAAEAQEFAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQAAAAAAAAAAAAEAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAAAAAAAAAAAAAQAAAgAAAAAAAAAAAAAAAAAAAAAAAAMEAAAEBAQEBAQEBAQEBAUEBAQEBAQEBAQEBAQABAAGBwQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAEAAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAEAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAABAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAIAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOT1VOQ0VFQ0tPVVRORUNURVRFQ1JJQkVMVVNIRVRFQURTRUFSQ0hSR0VDVElWSVRZTEVOREFSVkVPVElGWVBUSU9OU0NIU0VBWVNUQVRDSEdFT1JESVJFQ1RPUlRSQ0hQQVJBTUVURVJVUkNFQlNDUklCRUFSRE9XTkFDRUlORE5LQ0tVQlNDUklCRUhUVFAvQURUUC8=";
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
var require_llhttp_simd_wasm$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js"(exports, module) {
	module.exports = "";
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/client.js
var require_client$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/client.js"(exports, module) {
	const assert$43 = __require("assert");
	const net$3 = __require("net");
	const http$2 = __require("http");
	const { pipeline: pipeline$6 } = __require("stream");
	const util$34 = require_util$12();
	const timers$2 = require_timers$1();
	const Request$8 = require_request$3();
	const DispatcherBase$10 = require_dispatcher_base$1();
	const { RequestContentLengthMismatchError: RequestContentLengthMismatchError$3, ResponseContentLengthMismatchError: ResponseContentLengthMismatchError$2, InvalidArgumentError: InvalidArgumentError$48, RequestAbortedError: RequestAbortedError$17, HeadersTimeoutError: HeadersTimeoutError$2, HeadersOverflowError: HeadersOverflowError$2, SocketError: SocketError$7, InformationalError: InformationalError$5, BodyTimeoutError: BodyTimeoutError$2, HTTPParserError: HTTPParserError$2, ResponseExceededMaxSizeError: ResponseExceededMaxSizeError$2, ClientDestroyedError: ClientDestroyedError$3 } = require_errors$1();
	const buildConnector$8 = require_connect$1();
	const { kUrl: kUrl$10, kReset: kReset$2, kServerName: kServerName$1, kClient: kClient$5, kBusy: kBusy$3, kParser: kParser$1, kConnect: kConnect$1, kBlocking: kBlocking$1, kResuming: kResuming$1, kRunning: kRunning$9, kPending: kPending$7, kSize: kSize$10, kWriting: kWriting$1, kQueue: kQueue$5, kConnected: kConnected$10, kConnecting: kConnecting$1, kNeedDrain: kNeedDrain$7, kNoRef: kNoRef$1, kKeepAliveDefaultTimeout: kKeepAliveDefaultTimeout$2, kHostHeader: kHostHeader$2, kPendingIdx: kPendingIdx$3, kRunningIdx: kRunningIdx$3, kError: kError$5, kPipelining: kPipelining$2, kSocket: kSocket$2, kKeepAliveTimeoutValue: kKeepAliveTimeoutValue$2, kMaxHeadersSize: kMaxHeadersSize$2, kKeepAliveMaxTimeout: kKeepAliveMaxTimeout$2, kKeepAliveTimeoutThreshold: kKeepAliveTimeoutThreshold$2, kHeadersTimeout: kHeadersTimeout$2, kBodyTimeout: kBodyTimeout$3, kStrictContentLength: kStrictContentLength$3, kConnector: kConnector$2, kMaxRedirections: kMaxRedirections$1, kMaxRequests: kMaxRequests$2, kCounter: kCounter$2, kClose: kClose$14, kDestroy: kDestroy$10, kDispatch: kDispatch$8, kInterceptors: kInterceptors$4, kLocalAddress: kLocalAddress$1, kMaxResponseSize: kMaxResponseSize$2, kHTTPConnVersion, kHost, kHTTP2Session: kHTTP2Session$1, kHTTP2SessionState, kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require_symbols$5();
	/** @type {import('http2')} */
	let http2$1;
	try {
		http2$1 = __require("http2");
	} catch {
		http2$1 = { constants: {} };
	}
	const { constants: { HTTP2_HEADER_AUTHORITY: HTTP2_HEADER_AUTHORITY$1, HTTP2_HEADER_METHOD: HTTP2_HEADER_METHOD$1, HTTP2_HEADER_PATH: HTTP2_HEADER_PATH$1, HTTP2_HEADER_SCHEME: HTTP2_HEADER_SCHEME$1, HTTP2_HEADER_CONTENT_LENGTH: HTTP2_HEADER_CONTENT_LENGTH$1, HTTP2_HEADER_EXPECT: HTTP2_HEADER_EXPECT$1, HTTP2_HEADER_STATUS: HTTP2_HEADER_STATUS$1 } } = http2$1;
	let h2ExperimentalWarned = false;
	const FastBuffer$1 = Buffer[Symbol.species];
	const kClosedResolve$3 = Symbol("kClosedResolve");
	const channels$9 = {};
	try {
		const diagnosticsChannel$3 = __require("diagnostics_channel");
		channels$9.sendHeaders = diagnosticsChannel$3.channel("undici:client:sendHeaders");
		channels$9.beforeConnect = diagnosticsChannel$3.channel("undici:client:beforeConnect");
		channels$9.connectError = diagnosticsChannel$3.channel("undici:client:connectError");
		channels$9.connected = diagnosticsChannel$3.channel("undici:client:connected");
	} catch {
		channels$9.sendHeaders = { hasSubscribers: false };
		channels$9.beforeConnect = { hasSubscribers: false };
		channels$9.connectError = { hasSubscribers: false };
		channels$9.connected = { hasSubscribers: false };
	}
	/**
	* @type {import('../types/client').default}
	*/
	var Client$11 = class extends DispatcherBase$10 {
		/**
		*
		* @param {string|URL} url
		* @param {import('../types/client').Client.Options} options
		*/
		constructor(url, { interceptors, maxHeaderSize, headersTimeout, socketTimeout, requestTimeout, connectTimeout, bodyTimeout, idleTimeout, keepAlive, keepAliveTimeout, maxKeepAliveTimeout, keepAliveMaxTimeout, keepAliveTimeoutThreshold, socketPath, pipelining, tls: tls$3, strictContentLength, maxCachedSessions, maxRedirections, connect: connect$5, maxRequestsPerClient, localAddress, maxResponseSize, autoSelectFamily, autoSelectFamilyAttemptTimeout, allowH2, maxConcurrentStreams } = {}) {
			super();
			if (keepAlive !== void 0) throw new InvalidArgumentError$48("unsupported keepAlive, use pipelining=0 instead");
			if (socketTimeout !== void 0) throw new InvalidArgumentError$48("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
			if (requestTimeout !== void 0) throw new InvalidArgumentError$48("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
			if (idleTimeout !== void 0) throw new InvalidArgumentError$48("unsupported idleTimeout, use keepAliveTimeout instead");
			if (maxKeepAliveTimeout !== void 0) throw new InvalidArgumentError$48("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
			if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) throw new InvalidArgumentError$48("invalid maxHeaderSize");
			if (socketPath != null && typeof socketPath !== "string") throw new InvalidArgumentError$48("invalid socketPath");
			if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) throw new InvalidArgumentError$48("invalid connectTimeout");
			if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) throw new InvalidArgumentError$48("invalid keepAliveTimeout");
			if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) throw new InvalidArgumentError$48("invalid keepAliveMaxTimeout");
			if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) throw new InvalidArgumentError$48("invalid keepAliveTimeoutThreshold");
			if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) throw new InvalidArgumentError$48("headersTimeout must be a positive integer or zero");
			if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) throw new InvalidArgumentError$48("bodyTimeout must be a positive integer or zero");
			if (connect$5 != null && typeof connect$5 !== "function" && typeof connect$5 !== "object") throw new InvalidArgumentError$48("connect must be a function or an object");
			if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new InvalidArgumentError$48("maxRedirections must be a positive number");
			if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) throw new InvalidArgumentError$48("maxRequestsPerClient must be a positive number");
			if (localAddress != null && (typeof localAddress !== "string" || net$3.isIP(localAddress) === 0)) throw new InvalidArgumentError$48("localAddress must be valid string IP address");
			if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) throw new InvalidArgumentError$48("maxResponseSize must be a positive number");
			if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) throw new InvalidArgumentError$48("autoSelectFamilyAttemptTimeout must be a positive number");
			if (allowH2 != null && typeof allowH2 !== "boolean") throw new InvalidArgumentError$48("allowH2 must be a valid boolean value");
			if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) throw new InvalidArgumentError$48("maxConcurrentStreams must be a possitive integer, greater than 0");
			if (typeof connect$5 !== "function") connect$5 = buildConnector$8({
				...tls$3,
				maxCachedSessions,
				allowH2,
				socketPath,
				timeout: connectTimeout,
				...util$34.nodeHasAutoSelectFamily && autoSelectFamily ? {
					autoSelectFamily,
					autoSelectFamilyAttemptTimeout
				} : void 0,
				...connect$5
			});
			this[kInterceptors$4] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [createRedirectInterceptor$3({ maxRedirections })];
			this[kUrl$10] = util$34.parseOrigin(url);
			this[kConnector$2] = connect$5;
			this[kSocket$2] = null;
			this[kPipelining$2] = pipelining != null ? pipelining : 1;
			this[kMaxHeadersSize$2] = maxHeaderSize || http$2.maxHeaderSize;
			this[kKeepAliveDefaultTimeout$2] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
			this[kKeepAliveMaxTimeout$2] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
			this[kKeepAliveTimeoutThreshold$2] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
			this[kKeepAliveTimeoutValue$2] = this[kKeepAliveDefaultTimeout$2];
			this[kServerName$1] = null;
			this[kLocalAddress$1] = localAddress != null ? localAddress : null;
			this[kResuming$1] = 0;
			this[kNeedDrain$7] = 0;
			this[kHostHeader$2] = `host: ${this[kUrl$10].hostname}${this[kUrl$10].port ? `:${this[kUrl$10].port}` : ""}\r\n`;
			this[kBodyTimeout$3] = bodyTimeout != null ? bodyTimeout : 3e5;
			this[kHeadersTimeout$2] = headersTimeout != null ? headersTimeout : 3e5;
			this[kStrictContentLength$3] = strictContentLength == null ? true : strictContentLength;
			this[kMaxRedirections$1] = maxRedirections;
			this[kMaxRequests$2] = maxRequestsPerClient;
			this[kClosedResolve$3] = null;
			this[kMaxResponseSize$2] = maxResponseSize > -1 ? maxResponseSize : -1;
			this[kHTTPConnVersion] = "h1";
			this[kHTTP2Session$1] = null;
			this[kHTTP2SessionState] = !allowH2 ? null : {
				openStreams: 0,
				maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100
			};
			this[kHost] = `${this[kUrl$10].hostname}${this[kUrl$10].port ? `:${this[kUrl$10].port}` : ""}`;
			this[kQueue$5] = [];
			this[kRunningIdx$3] = 0;
			this[kPendingIdx$3] = 0;
		}
		get pipelining() {
			return this[kPipelining$2];
		}
		set pipelining(value) {
			this[kPipelining$2] = value;
			resume$1(this, true);
		}
		get [kPending$7]() {
			return this[kQueue$5].length - this[kPendingIdx$3];
		}
		get [kRunning$9]() {
			return this[kPendingIdx$3] - this[kRunningIdx$3];
		}
		get [kSize$10]() {
			return this[kQueue$5].length - this[kRunningIdx$3];
		}
		get [kConnected$10]() {
			return !!this[kSocket$2] && !this[kConnecting$1] && !this[kSocket$2].destroyed;
		}
		get [kBusy$3]() {
			const socket = this[kSocket$2];
			return socket && (socket[kReset$2] || socket[kWriting$1] || socket[kBlocking$1]) || this[kSize$10] >= (this[kPipelining$2] || 1) || this[kPending$7] > 0;
		}
		/* istanbul ignore: only used for test */
		[kConnect$1](cb) {
			connect$4(this);
			this.once("connect", cb);
		}
		[kDispatch$8](opts, handler$1) {
			const origin = opts.origin || this[kUrl$10].origin;
			const request$3 = this[kHTTPConnVersion] === "h2" ? Request$8[kHTTP2BuildRequest](origin, opts, handler$1) : Request$8[kHTTP1BuildRequest](origin, opts, handler$1);
			this[kQueue$5].push(request$3);
			if (this[kResuming$1]) {} else if (util$34.bodyLength(request$3.body) == null && util$34.isIterable(request$3.body)) {
				this[kResuming$1] = 1;
				process.nextTick(resume$1, this);
			} else resume$1(this, true);
			if (this[kResuming$1] && this[kNeedDrain$7] !== 2 && this[kBusy$3]) this[kNeedDrain$7] = 2;
			return this[kNeedDrain$7] < 2;
		}
		async [kClose$14]() {
			return new Promise((resolve$1) => {
				if (!this[kSize$10]) resolve$1(null);
				else this[kClosedResolve$3] = resolve$1;
			});
		}
		async [kDestroy$10](err) {
			return new Promise((resolve$1) => {
				const requests = this[kQueue$5].splice(this[kPendingIdx$3]);
				for (let i$1 = 0; i$1 < requests.length; i$1++) {
					const request$3 = requests[i$1];
					errorRequest$1(this, request$3, err);
				}
				const callback = () => {
					if (this[kClosedResolve$3]) {
						this[kClosedResolve$3]();
						this[kClosedResolve$3] = null;
					}
					resolve$1();
				};
				if (this[kHTTP2Session$1] != null) {
					util$34.destroy(this[kHTTP2Session$1], err);
					this[kHTTP2Session$1] = null;
					this[kHTTP2SessionState] = null;
				}
				if (!this[kSocket$2]) queueMicrotask(callback);
				else util$34.destroy(this[kSocket$2].on("close", callback), err);
				resume$1(this);
			});
		}
	};
	function onHttp2SessionError$1(err) {
		assert$43(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
		this[kSocket$2][kError$5] = err;
		onError$1(this[kClient$5], err);
	}
	function onHttp2FrameError$1(type, code, id$1) {
		const err = new InformationalError$5(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
		if (id$1 === 0) {
			this[kSocket$2][kError$5] = err;
			onError$1(this[kClient$5], err);
		}
	}
	function onHttp2SessionEnd$1() {
		util$34.destroy(this, new SocketError$7("other side closed"));
		util$34.destroy(this[kSocket$2], new SocketError$7("other side closed"));
	}
	function onHTTP2GoAway(code) {
		const client = this[kClient$5];
		const err = new InformationalError$5(`HTTP/2: "GOAWAY" frame received with code ${code}`);
		client[kSocket$2] = null;
		client[kHTTP2Session$1] = null;
		if (client.destroyed) {
			assert$43(this[kPending$7] === 0);
			const requests = client[kQueue$5].splice(client[kRunningIdx$3]);
			for (let i$1 = 0; i$1 < requests.length; i$1++) {
				const request$3 = requests[i$1];
				errorRequest$1(this, request$3, err);
			}
		} else if (client[kRunning$9] > 0) {
			const request$3 = client[kQueue$5][client[kRunningIdx$3]];
			client[kQueue$5][client[kRunningIdx$3]++] = null;
			errorRequest$1(client, request$3, err);
		}
		client[kPendingIdx$3] = client[kRunningIdx$3];
		assert$43(client[kRunning$9] === 0);
		client.emit("disconnect", client[kUrl$10], [client], err);
		resume$1(client);
	}
	const constants$2 = require_constants$7();
	const createRedirectInterceptor$3 = require_redirectInterceptor();
	const EMPTY_BUF$1 = Buffer.alloc(0);
	async function lazyllhttp$1() {
		const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm$1() : void 0;
		let mod;
		try {
			mod = await WebAssembly.compile(Buffer.from(require_llhttp_simd_wasm$1(), "base64"));
		} catch (e) {
			/* istanbul ignore next */
			mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require_llhttp_wasm$1(), "base64"));
		}
		return await WebAssembly.instantiate(mod, { env: {
			wasm_on_url: (p, at, len) => {
				/* istanbul ignore next */
				return 0;
			},
			wasm_on_status: (p, at, len) => {
				assert$43.strictEqual(currentParser$1.ptr, p);
				const start = at - currentBufferPtr$1 + currentBufferRef$1.byteOffset;
				return currentParser$1.onStatus(new FastBuffer$1(currentBufferRef$1.buffer, start, len)) || 0;
			},
			wasm_on_message_begin: (p) => {
				assert$43.strictEqual(currentParser$1.ptr, p);
				return currentParser$1.onMessageBegin() || 0;
			},
			wasm_on_header_field: (p, at, len) => {
				assert$43.strictEqual(currentParser$1.ptr, p);
				const start = at - currentBufferPtr$1 + currentBufferRef$1.byteOffset;
				return currentParser$1.onHeaderField(new FastBuffer$1(currentBufferRef$1.buffer, start, len)) || 0;
			},
			wasm_on_header_value: (p, at, len) => {
				assert$43.strictEqual(currentParser$1.ptr, p);
				const start = at - currentBufferPtr$1 + currentBufferRef$1.byteOffset;
				return currentParser$1.onHeaderValue(new FastBuffer$1(currentBufferRef$1.buffer, start, len)) || 0;
			},
			wasm_on_headers_complete: (p, statusCode, upgrade$2, shouldKeepAlive) => {
				assert$43.strictEqual(currentParser$1.ptr, p);
				return currentParser$1.onHeadersComplete(statusCode, Boolean(upgrade$2), Boolean(shouldKeepAlive)) || 0;
			},
			wasm_on_body: (p, at, len) => {
				assert$43.strictEqual(currentParser$1.ptr, p);
				const start = at - currentBufferPtr$1 + currentBufferRef$1.byteOffset;
				return currentParser$1.onBody(new FastBuffer$1(currentBufferRef$1.buffer, start, len)) || 0;
			},
			wasm_on_message_complete: (p) => {
				assert$43.strictEqual(currentParser$1.ptr, p);
				return currentParser$1.onMessageComplete() || 0;
			}
		} });
	}
	let llhttpInstance$1 = null;
	let llhttpPromise = lazyllhttp$1();
	llhttpPromise.catch();
	let currentParser$1 = null;
	let currentBufferRef$1 = null;
	let currentBufferSize$1 = 0;
	let currentBufferPtr$1 = null;
	const TIMEOUT_HEADERS$1 = 1;
	const TIMEOUT_BODY$1 = 2;
	const TIMEOUT_IDLE = 3;
	var Parser$1 = class {
		constructor(client, socket, { exports: exports$1 }) {
			assert$43(Number.isFinite(client[kMaxHeadersSize$2]) && client[kMaxHeadersSize$2] > 0);
			this.llhttp = exports$1;
			this.ptr = this.llhttp.llhttp_alloc(constants$2.TYPE.RESPONSE);
			this.client = client;
			this.socket = socket;
			this.timeout = null;
			this.timeoutValue = null;
			this.timeoutType = null;
			this.statusCode = null;
			this.statusText = "";
			this.upgrade = false;
			this.headers = [];
			this.headersSize = 0;
			this.headersMaxSize = client[kMaxHeadersSize$2];
			this.shouldKeepAlive = false;
			this.paused = false;
			this.resume = this.resume.bind(this);
			this.bytesRead = 0;
			this.keepAlive = "";
			this.contentLength = "";
			this.connection = "";
			this.maxResponseSize = client[kMaxResponseSize$2];
		}
		setTimeout(value, type) {
			this.timeoutType = type;
			if (value !== this.timeoutValue) {
				timers$2.clearTimeout(this.timeout);
				if (value) {
					this.timeout = timers$2.setTimeout(onParserTimeout$1, value, this);
					// istanbul ignore else: only for jest
					if (this.timeout.unref) this.timeout.unref();
				} else this.timeout = null;
				this.timeoutValue = value;
			} else if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
		}
		resume() {
			if (this.socket.destroyed || !this.paused) return;
			assert$43(this.ptr != null);
			assert$43(currentParser$1 == null);
			this.llhttp.llhttp_resume(this.ptr);
			assert$43(this.timeoutType === TIMEOUT_BODY$1);
			if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
			this.paused = false;
			this.execute(this.socket.read() || EMPTY_BUF$1);
			this.readMore();
		}
		readMore() {
			while (!this.paused && this.ptr) {
				const chunk = this.socket.read();
				if (chunk === null) break;
				this.execute(chunk);
			}
		}
		execute(data$1) {
			assert$43(this.ptr != null);
			assert$43(currentParser$1 == null);
			assert$43(!this.paused);
			const { socket, llhttp } = this;
			if (data$1.length > currentBufferSize$1) {
				if (currentBufferPtr$1) llhttp.free(currentBufferPtr$1);
				currentBufferSize$1 = Math.ceil(data$1.length / 4096) * 4096;
				currentBufferPtr$1 = llhttp.malloc(currentBufferSize$1);
			}
			new Uint8Array(llhttp.memory.buffer, currentBufferPtr$1, currentBufferSize$1).set(data$1);
			try {
				let ret;
				try {
					currentBufferRef$1 = data$1;
					currentParser$1 = this;
					ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr$1, data$1.length);
				} catch (err) {
					/* istanbul ignore next: difficult to make a test case for */
					throw err;
				} finally {
					currentParser$1 = null;
					currentBufferRef$1 = null;
				}
				const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr$1;
				if (ret === constants$2.ERROR.PAUSED_UPGRADE) this.onUpgrade(data$1.slice(offset));
				else if (ret === constants$2.ERROR.PAUSED) {
					this.paused = true;
					socket.unshift(data$1.slice(offset));
				} else if (ret !== constants$2.ERROR.OK) {
					const ptr = llhttp.llhttp_get_error_reason(this.ptr);
					let message = "";
					/* istanbul ignore else: difficult to make a test case for */
					if (ptr) {
						const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
						message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
					}
					throw new HTTPParserError$2(message, constants$2.ERROR[ret], data$1.slice(offset));
				}
			} catch (err) {
				util$34.destroy(socket, err);
			}
		}
		destroy() {
			assert$43(this.ptr != null);
			assert$43(currentParser$1 == null);
			this.llhttp.llhttp_free(this.ptr);
			this.ptr = null;
			timers$2.clearTimeout(this.timeout);
			this.timeout = null;
			this.timeoutValue = null;
			this.timeoutType = null;
			this.paused = false;
		}
		onStatus(buf) {
			this.statusText = buf.toString();
		}
		onMessageBegin() {
			const { socket, client } = this;
			/* istanbul ignore next: difficult to make a test case for */
			if (socket.destroyed) return -1;
			const request$3 = client[kQueue$5][client[kRunningIdx$3]];
			if (!request$3) return -1;
		}
		onHeaderField(buf) {
			const len = this.headers.length;
			if ((len & 1) === 0) this.headers.push(buf);
			else this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
			this.trackHeader(buf.length);
		}
		onHeaderValue(buf) {
			let len = this.headers.length;
			if ((len & 1) === 1) {
				this.headers.push(buf);
				len += 1;
			} else this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
			const key = this.headers[len - 2];
			if (key.length === 10 && key.toString().toLowerCase() === "keep-alive") this.keepAlive += buf.toString();
			else if (key.length === 10 && key.toString().toLowerCase() === "connection") this.connection += buf.toString();
			else if (key.length === 14 && key.toString().toLowerCase() === "content-length") this.contentLength += buf.toString();
			this.trackHeader(buf.length);
		}
		trackHeader(len) {
			this.headersSize += len;
			if (this.headersSize >= this.headersMaxSize) util$34.destroy(this.socket, new HeadersOverflowError$2());
		}
		onUpgrade(head) {
			const { upgrade: upgrade$2, client, socket, headers, statusCode } = this;
			assert$43(upgrade$2);
			const request$3 = client[kQueue$5][client[kRunningIdx$3]];
			assert$43(request$3);
			assert$43(!socket.destroyed);
			assert$43(socket === client[kSocket$2]);
			assert$43(!this.paused);
			assert$43(request$3.upgrade || request$3.method === "CONNECT");
			this.statusCode = null;
			this.statusText = "";
			this.shouldKeepAlive = null;
			assert$43(this.headers.length % 2 === 0);
			this.headers = [];
			this.headersSize = 0;
			socket.unshift(head);
			socket[kParser$1].destroy();
			socket[kParser$1] = null;
			socket[kClient$5] = null;
			socket[kError$5] = null;
			socket.removeListener("error", onSocketError$1).removeListener("readable", onSocketReadable).removeListener("end", onSocketEnd).removeListener("close", onSocketClose$3);
			client[kSocket$2] = null;
			client[kQueue$5][client[kRunningIdx$3]++] = null;
			client.emit("disconnect", client[kUrl$10], [client], new InformationalError$5("upgrade"));
			try {
				request$3.onUpgrade(statusCode, headers, socket);
			} catch (err) {
				util$34.destroy(socket, err);
			}
			resume$1(client);
		}
		onHeadersComplete(statusCode, upgrade$2, shouldKeepAlive) {
			const { client, socket, headers, statusText } = this;
			/* istanbul ignore next: difficult to make a test case for */
			if (socket.destroyed) return -1;
			const request$3 = client[kQueue$5][client[kRunningIdx$3]];
			/* istanbul ignore next: difficult to make a test case for */
			if (!request$3) return -1;
			assert$43(!this.upgrade);
			assert$43(this.statusCode < 200);
			if (statusCode === 100) {
				util$34.destroy(socket, new SocketError$7("bad response", util$34.getSocketInfo(socket)));
				return -1;
			}
			if (upgrade$2 && !request$3.upgrade) {
				util$34.destroy(socket, new SocketError$7("bad upgrade", util$34.getSocketInfo(socket)));
				return -1;
			}
			assert$43.strictEqual(this.timeoutType, TIMEOUT_HEADERS$1);
			this.statusCode = statusCode;
			this.shouldKeepAlive = shouldKeepAlive || request$3.method === "HEAD" && !socket[kReset$2] && this.connection.toLowerCase() === "keep-alive";
			if (this.statusCode >= 200) {
				const bodyTimeout = request$3.bodyTimeout != null ? request$3.bodyTimeout : client[kBodyTimeout$3];
				this.setTimeout(bodyTimeout, TIMEOUT_BODY$1);
			} else if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
			if (request$3.method === "CONNECT") {
				assert$43(client[kRunning$9] === 1);
				this.upgrade = true;
				return 2;
			}
			if (upgrade$2) {
				assert$43(client[kRunning$9] === 1);
				this.upgrade = true;
				return 2;
			}
			assert$43(this.headers.length % 2 === 0);
			this.headers = [];
			this.headersSize = 0;
			if (this.shouldKeepAlive && client[kPipelining$2]) {
				const keepAliveTimeout = this.keepAlive ? util$34.parseKeepAliveTimeout(this.keepAlive) : null;
				if (keepAliveTimeout != null) {
					const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold$2], client[kKeepAliveMaxTimeout$2]);
					if (timeout <= 0) socket[kReset$2] = true;
					else client[kKeepAliveTimeoutValue$2] = timeout;
				} else client[kKeepAliveTimeoutValue$2] = client[kKeepAliveDefaultTimeout$2];
			} else socket[kReset$2] = true;
			const pause = request$3.onHeaders(statusCode, headers, this.resume, statusText) === false;
			if (request$3.aborted) return -1;
			if (request$3.method === "HEAD") return 1;
			if (statusCode < 200) return 1;
			if (socket[kBlocking$1]) {
				socket[kBlocking$1] = false;
				resume$1(client);
			}
			return pause ? constants$2.ERROR.PAUSED : 0;
		}
		onBody(buf) {
			const { client, socket, statusCode, maxResponseSize } = this;
			if (socket.destroyed) return -1;
			const request$3 = client[kQueue$5][client[kRunningIdx$3]];
			assert$43(request$3);
			assert$43.strictEqual(this.timeoutType, TIMEOUT_BODY$1);
			if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
			assert$43(statusCode >= 200);
			if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
				util$34.destroy(socket, new ResponseExceededMaxSizeError$2());
				return -1;
			}
			this.bytesRead += buf.length;
			if (request$3.onData(buf) === false) return constants$2.ERROR.PAUSED;
		}
		onMessageComplete() {
			const { client, socket, statusCode, upgrade: upgrade$2, headers, contentLength, bytesRead, shouldKeepAlive } = this;
			if (socket.destroyed && (!statusCode || shouldKeepAlive)) return -1;
			if (upgrade$2) return;
			const request$3 = client[kQueue$5][client[kRunningIdx$3]];
			assert$43(request$3);
			assert$43(statusCode >= 100);
			this.statusCode = null;
			this.statusText = "";
			this.bytesRead = 0;
			this.contentLength = "";
			this.keepAlive = "";
			this.connection = "";
			assert$43(this.headers.length % 2 === 0);
			this.headers = [];
			this.headersSize = 0;
			if (statusCode < 200) return;
			/* istanbul ignore next: should be handled by llhttp? */
			if (request$3.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
				util$34.destroy(socket, new ResponseContentLengthMismatchError$2());
				return -1;
			}
			request$3.onComplete(headers);
			client[kQueue$5][client[kRunningIdx$3]++] = null;
			if (socket[kWriting$1]) {
				assert$43.strictEqual(client[kRunning$9], 0);
				util$34.destroy(socket, new InformationalError$5("reset"));
				return constants$2.ERROR.PAUSED;
			} else if (!shouldKeepAlive) {
				util$34.destroy(socket, new InformationalError$5("reset"));
				return constants$2.ERROR.PAUSED;
			} else if (socket[kReset$2] && client[kRunning$9] === 0) {
				util$34.destroy(socket, new InformationalError$5("reset"));
				return constants$2.ERROR.PAUSED;
			} else if (client[kPipelining$2] === 1) setImmediate(resume$1, client);
			else resume$1(client);
		}
	};
	function onParserTimeout$1(parser) {
		const { socket, timeoutType, client } = parser;
		/* istanbul ignore else */
		if (timeoutType === TIMEOUT_HEADERS$1) {
			if (!socket[kWriting$1] || socket.writableNeedDrain || client[kRunning$9] > 1) {
				assert$43(!parser.paused, "cannot be paused while waiting for headers");
				util$34.destroy(socket, new HeadersTimeoutError$2());
			}
		} else if (timeoutType === TIMEOUT_BODY$1) {
			if (!parser.paused) util$34.destroy(socket, new BodyTimeoutError$2());
		} else if (timeoutType === TIMEOUT_IDLE) {
			assert$43(client[kRunning$9] === 0 && client[kKeepAliveTimeoutValue$2]);
			util$34.destroy(socket, new InformationalError$5("socket idle timeout"));
		}
	}
	function onSocketReadable() {
		const { [kParser$1]: parser } = this;
		if (parser) parser.readMore();
	}
	function onSocketError$1(err) {
		const { [kClient$5]: client, [kParser$1]: parser } = this;
		assert$43(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
		if (client[kHTTPConnVersion] !== "h2") {
			if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
				parser.onMessageComplete();
				return;
			}
		}
		this[kError$5] = err;
		onError$1(this[kClient$5], err);
	}
	function onError$1(client, err) {
		if (client[kRunning$9] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
			assert$43(client[kPendingIdx$3] === client[kRunningIdx$3]);
			const requests = client[kQueue$5].splice(client[kRunningIdx$3]);
			for (let i$1 = 0; i$1 < requests.length; i$1++) {
				const request$3 = requests[i$1];
				errorRequest$1(client, request$3, err);
			}
			assert$43(client[kSize$10] === 0);
		}
	}
	function onSocketEnd() {
		const { [kParser$1]: parser, [kClient$5]: client } = this;
		if (client[kHTTPConnVersion] !== "h2") {
			if (parser.statusCode && !parser.shouldKeepAlive) {
				parser.onMessageComplete();
				return;
			}
		}
		util$34.destroy(this, new SocketError$7("other side closed", util$34.getSocketInfo(this)));
	}
	function onSocketClose$3() {
		const { [kClient$5]: client, [kParser$1]: parser } = this;
		if (client[kHTTPConnVersion] === "h1" && parser) {
			if (!this[kError$5] && parser.statusCode && !parser.shouldKeepAlive) parser.onMessageComplete();
			this[kParser$1].destroy();
			this[kParser$1] = null;
		}
		const err = this[kError$5] || new SocketError$7("closed", util$34.getSocketInfo(this));
		client[kSocket$2] = null;
		if (client.destroyed) {
			assert$43(client[kPending$7] === 0);
			const requests = client[kQueue$5].splice(client[kRunningIdx$3]);
			for (let i$1 = 0; i$1 < requests.length; i$1++) {
				const request$3 = requests[i$1];
				errorRequest$1(client, request$3, err);
			}
		} else if (client[kRunning$9] > 0 && err.code !== "UND_ERR_INFO") {
			const request$3 = client[kQueue$5][client[kRunningIdx$3]];
			client[kQueue$5][client[kRunningIdx$3]++] = null;
			errorRequest$1(client, request$3, err);
		}
		client[kPendingIdx$3] = client[kRunningIdx$3];
		assert$43(client[kRunning$9] === 0);
		client.emit("disconnect", client[kUrl$10], [client], err);
		resume$1(client);
	}
	async function connect$4(client) {
		assert$43(!client[kConnecting$1]);
		assert$43(!client[kSocket$2]);
		let { host, hostname, protocol, port } = client[kUrl$10];
		if (hostname[0] === "[") {
			const idx = hostname.indexOf("]");
			assert$43(idx !== -1);
			const ip = hostname.substring(1, idx);
			assert$43(net$3.isIP(ip));
			hostname = ip;
		}
		client[kConnecting$1] = true;
		if (channels$9.beforeConnect.hasSubscribers) channels$9.beforeConnect.publish({
			connectParams: {
				host,
				hostname,
				protocol,
				port,
				servername: client[kServerName$1],
				localAddress: client[kLocalAddress$1]
			},
			connector: client[kConnector$2]
		});
		try {
			const socket = await new Promise((resolve$1, reject) => {
				client[kConnector$2]({
					host,
					hostname,
					protocol,
					port,
					servername: client[kServerName$1],
					localAddress: client[kLocalAddress$1]
				}, (err, socket$1) => {
					if (err) reject(err);
					else resolve$1(socket$1);
				});
			});
			if (client.destroyed) {
				util$34.destroy(socket.on("error", () => {}), new ClientDestroyedError$3());
				return;
			}
			client[kConnecting$1] = false;
			assert$43(socket);
			const isH2 = socket.alpnProtocol === "h2";
			if (isH2) {
				if (!h2ExperimentalWarned) {
					h2ExperimentalWarned = true;
					process.emitWarning("H2 support is experimental, expect them to change at any time.", { code: "UNDICI-H2" });
				}
				const session = http2$1.connect(client[kUrl$10], {
					createConnection: () => socket,
					peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
				});
				client[kHTTPConnVersion] = "h2";
				session[kClient$5] = client;
				session[kSocket$2] = socket;
				session.on("error", onHttp2SessionError$1);
				session.on("frameError", onHttp2FrameError$1);
				session.on("end", onHttp2SessionEnd$1);
				session.on("goaway", onHTTP2GoAway);
				session.on("close", onSocketClose$3);
				session.unref();
				client[kHTTP2Session$1] = session;
				socket[kHTTP2Session$1] = session;
			} else {
				if (!llhttpInstance$1) {
					llhttpInstance$1 = await llhttpPromise;
					llhttpPromise = null;
				}
				socket[kNoRef$1] = false;
				socket[kWriting$1] = false;
				socket[kReset$2] = false;
				socket[kBlocking$1] = false;
				socket[kParser$1] = new Parser$1(client, socket, llhttpInstance$1);
			}
			socket[kCounter$2] = 0;
			socket[kMaxRequests$2] = client[kMaxRequests$2];
			socket[kClient$5] = client;
			socket[kError$5] = null;
			socket.on("error", onSocketError$1).on("readable", onSocketReadable).on("end", onSocketEnd).on("close", onSocketClose$3);
			client[kSocket$2] = socket;
			if (channels$9.connected.hasSubscribers) channels$9.connected.publish({
				connectParams: {
					host,
					hostname,
					protocol,
					port,
					servername: client[kServerName$1],
					localAddress: client[kLocalAddress$1]
				},
				connector: client[kConnector$2],
				socket
			});
			client.emit("connect", client[kUrl$10], [client]);
		} catch (err) {
			if (client.destroyed) return;
			client[kConnecting$1] = false;
			if (channels$9.connectError.hasSubscribers) channels$9.connectError.publish({
				connectParams: {
					host,
					hostname,
					protocol,
					port,
					servername: client[kServerName$1],
					localAddress: client[kLocalAddress$1]
				},
				connector: client[kConnector$2],
				error: err
			});
			if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
				assert$43(client[kRunning$9] === 0);
				while (client[kPending$7] > 0 && client[kQueue$5][client[kPendingIdx$3]].servername === client[kServerName$1]) {
					const request$3 = client[kQueue$5][client[kPendingIdx$3]++];
					errorRequest$1(client, request$3, err);
				}
			} else onError$1(client, err);
			client.emit("connectionError", client[kUrl$10], [client], err);
		}
		resume$1(client);
	}
	function emitDrain$1(client) {
		client[kNeedDrain$7] = 0;
		client.emit("drain", client[kUrl$10], [client]);
	}
	function resume$1(client, sync$3) {
		if (client[kResuming$1] === 2) return;
		client[kResuming$1] = 2;
		_resume$1(client, sync$3);
		client[kResuming$1] = 0;
		if (client[kRunningIdx$3] > 256) {
			client[kQueue$5].splice(0, client[kRunningIdx$3]);
			client[kPendingIdx$3] -= client[kRunningIdx$3];
			client[kRunningIdx$3] = 0;
		}
	}
	function _resume$1(client, sync$3) {
		while (true) {
			if (client.destroyed) {
				assert$43(client[kPending$7] === 0);
				return;
			}
			if (client[kClosedResolve$3] && !client[kSize$10]) {
				client[kClosedResolve$3]();
				client[kClosedResolve$3] = null;
				return;
			}
			const socket = client[kSocket$2];
			if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
				if (client[kSize$10] === 0) {
					if (!socket[kNoRef$1] && socket.unref) {
						socket.unref();
						socket[kNoRef$1] = true;
					}
				} else if (socket[kNoRef$1] && socket.ref) {
					socket.ref();
					socket[kNoRef$1] = false;
				}
				if (client[kSize$10] === 0) {
					if (socket[kParser$1].timeoutType !== TIMEOUT_IDLE) socket[kParser$1].setTimeout(client[kKeepAliveTimeoutValue$2], TIMEOUT_IDLE);
				} else if (client[kRunning$9] > 0 && socket[kParser$1].statusCode < 200) {
					if (socket[kParser$1].timeoutType !== TIMEOUT_HEADERS$1) {
						const request$4 = client[kQueue$5][client[kRunningIdx$3]];
						const headersTimeout = request$4.headersTimeout != null ? request$4.headersTimeout : client[kHeadersTimeout$2];
						socket[kParser$1].setTimeout(headersTimeout, TIMEOUT_HEADERS$1);
					}
				}
			}
			if (client[kBusy$3]) client[kNeedDrain$7] = 2;
			else if (client[kNeedDrain$7] === 2) {
				if (sync$3) {
					client[kNeedDrain$7] = 1;
					process.nextTick(emitDrain$1, client);
				} else emitDrain$1(client);
				continue;
			}
			if (client[kPending$7] === 0) return;
			if (client[kRunning$9] >= (client[kPipelining$2] || 1)) return;
			const request$3 = client[kQueue$5][client[kPendingIdx$3]];
			if (client[kUrl$10].protocol === "https:" && client[kServerName$1] !== request$3.servername) {
				if (client[kRunning$9] > 0) return;
				client[kServerName$1] = request$3.servername;
				if (socket && socket.servername !== request$3.servername) {
					util$34.destroy(socket, new InformationalError$5("servername changed"));
					return;
				}
			}
			if (client[kConnecting$1]) return;
			if (!socket && !client[kHTTP2Session$1]) {
				connect$4(client);
				return;
			}
			if (socket.destroyed || socket[kWriting$1] || socket[kReset$2] || socket[kBlocking$1]) return;
			if (client[kRunning$9] > 0 && !request$3.idempotent) return;
			if (client[kRunning$9] > 0 && (request$3.upgrade || request$3.method === "CONNECT")) return;
			if (client[kRunning$9] > 0 && util$34.bodyLength(request$3.body) !== 0 && (util$34.isStream(request$3.body) || util$34.isAsyncIterable(request$3.body))) return;
			if (!request$3.aborted && write(client, request$3)) client[kPendingIdx$3]++;
			else client[kQueue$5].splice(client[kPendingIdx$3], 1);
		}
	}
	function shouldSendContentLength$2(method) {
		return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
	}
	function write(client, request$3) {
		if (client[kHTTPConnVersion] === "h2") {
			writeH2$1(client, client[kHTTP2Session$1], request$3);
			return;
		}
		const { body, method, path: path$9, host, upgrade: upgrade$2, headers, blocking, reset: reset$1 } = request$3;
		const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
		if (body && typeof body.read === "function") body.read(0);
		const bodyLength$2 = util$34.bodyLength(body);
		let contentLength = bodyLength$2;
		if (contentLength === null) contentLength = request$3.contentLength;
		if (contentLength === 0 && !expectsPayload) contentLength = null;
		if (shouldSendContentLength$2(method) && contentLength > 0 && request$3.contentLength !== null && request$3.contentLength !== contentLength) {
			if (client[kStrictContentLength$3]) {
				errorRequest$1(client, request$3, new RequestContentLengthMismatchError$3());
				return false;
			}
			process.emitWarning(new RequestContentLengthMismatchError$3());
		}
		const socket = client[kSocket$2];
		try {
			request$3.onConnect((err) => {
				if (request$3.aborted || request$3.completed) return;
				errorRequest$1(client, request$3, err || new RequestAbortedError$17());
				util$34.destroy(socket, new InformationalError$5("aborted"));
			});
		} catch (err) {
			errorRequest$1(client, request$3, err);
		}
		if (request$3.aborted) return false;
		if (method === "HEAD") socket[kReset$2] = true;
		if (upgrade$2 || method === "CONNECT") socket[kReset$2] = true;
		if (reset$1 != null) socket[kReset$2] = reset$1;
		if (client[kMaxRequests$2] && socket[kCounter$2]++ >= client[kMaxRequests$2]) socket[kReset$2] = true;
		if (blocking) socket[kBlocking$1] = true;
		let header = `${method} ${path$9} HTTP/1.1\r\n`;
		if (typeof host === "string") header += `host: ${host}\r\n`;
		else header += client[kHostHeader$2];
		if (upgrade$2) header += `connection: upgrade\r\nupgrade: ${upgrade$2}\r\n`;
		else if (client[kPipelining$2] && !socket[kReset$2]) header += "connection: keep-alive\r\n";
		else header += "connection: close\r\n";
		if (headers) header += headers;
		if (channels$9.sendHeaders.hasSubscribers) channels$9.sendHeaders.publish({
			request: request$3,
			headers: header,
			socket
		});
		/* istanbul ignore else: assertion */
		if (!body || bodyLength$2 === 0) {
			if (contentLength === 0) socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
			else {
				assert$43(contentLength === null, "no body must not have content length");
				socket.write(`${header}\r\n`, "latin1");
			}
			request$3.onRequestSent();
		} else if (util$34.isBuffer(body)) {
			assert$43(contentLength === body.byteLength, "buffer body must have content length");
			socket.cork();
			socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
			socket.write(body);
			socket.uncork();
			request$3.onBodySent(body);
			request$3.onRequestSent();
			if (!expectsPayload) socket[kReset$2] = true;
		} else if (util$34.isBlobLike(body)) if (typeof body.stream === "function") writeIterable$2({
			body: body.stream(),
			client,
			request: request$3,
			socket,
			contentLength,
			header,
			expectsPayload
		});
		else writeBlob$2({
			body,
			client,
			request: request$3,
			socket,
			contentLength,
			header,
			expectsPayload
		});
		else if (util$34.isStream(body)) writeStream$2({
			body,
			client,
			request: request$3,
			socket,
			contentLength,
			header,
			expectsPayload
		});
		else if (util$34.isIterable(body)) writeIterable$2({
			body,
			client,
			request: request$3,
			socket,
			contentLength,
			header,
			expectsPayload
		});
		else assert$43(false);
		return true;
	}
	function writeH2$1(client, session, request$3) {
		const { body, method, path: path$9, host, upgrade: upgrade$2, expectContinue, signal, headers: reqHeaders } = request$3;
		let headers;
		if (typeof reqHeaders === "string") headers = Request$8[kHTTP2CopyHeaders](reqHeaders.trim());
		else headers = reqHeaders;
		if (upgrade$2) {
			errorRequest$1(client, request$3, /* @__PURE__ */ new Error("Upgrade not supported for H2"));
			return false;
		}
		try {
			request$3.onConnect((err) => {
				if (request$3.aborted || request$3.completed) return;
				errorRequest$1(client, request$3, err || new RequestAbortedError$17());
			});
		} catch (err) {
			errorRequest$1(client, request$3, err);
		}
		if (request$3.aborted) return false;
		/** @type {import('node:http2').ClientHttp2Stream} */
		let stream$4;
		const h2State = client[kHTTP2SessionState];
		headers[HTTP2_HEADER_AUTHORITY$1] = host || client[kHost];
		headers[HTTP2_HEADER_METHOD$1] = method;
		if (method === "CONNECT") {
			session.ref();
			stream$4 = session.request(headers, {
				endStream: false,
				signal
			});
			if (stream$4.id && !stream$4.pending) {
				request$3.onUpgrade(null, null, stream$4);
				++h2State.openStreams;
			} else stream$4.once("ready", () => {
				request$3.onUpgrade(null, null, stream$4);
				++h2State.openStreams;
			});
			stream$4.once("close", () => {
				h2State.openStreams -= 1;
				if (h2State.openStreams === 0) session.unref();
			});
			return true;
		}
		headers[HTTP2_HEADER_PATH$1] = path$9;
		headers[HTTP2_HEADER_SCHEME$1] = "https";
		const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
		if (body && typeof body.read === "function") body.read(0);
		let contentLength = util$34.bodyLength(body);
		if (contentLength == null) contentLength = request$3.contentLength;
		if (contentLength === 0 || !expectsPayload) contentLength = null;
		if (shouldSendContentLength$2(method) && contentLength > 0 && request$3.contentLength != null && request$3.contentLength !== contentLength) {
			if (client[kStrictContentLength$3]) {
				errorRequest$1(client, request$3, new RequestContentLengthMismatchError$3());
				return false;
			}
			process.emitWarning(new RequestContentLengthMismatchError$3());
		}
		if (contentLength != null) {
			assert$43(body, "no body must not have content length");
			headers[HTTP2_HEADER_CONTENT_LENGTH$1] = `${contentLength}`;
		}
		session.ref();
		const shouldEndStream = method === "GET" || method === "HEAD";
		if (expectContinue) {
			headers[HTTP2_HEADER_EXPECT$1] = "100-continue";
			stream$4 = session.request(headers, {
				endStream: shouldEndStream,
				signal
			});
			stream$4.once("continue", writeBodyH2);
		} else {
			stream$4 = session.request(headers, {
				endStream: shouldEndStream,
				signal
			});
			writeBodyH2();
		}
		++h2State.openStreams;
		stream$4.once("response", (headers$1) => {
			const { [HTTP2_HEADER_STATUS$1]: statusCode,...realHeaders } = headers$1;
			if (request$3.onHeaders(Number(statusCode), realHeaders, stream$4.resume.bind(stream$4), "") === false) stream$4.pause();
		});
		stream$4.once("end", () => {
			request$3.onComplete([]);
		});
		stream$4.on("data", (chunk) => {
			if (request$3.onData(chunk) === false) stream$4.pause();
		});
		stream$4.once("close", () => {
			h2State.openStreams -= 1;
			if (h2State.openStreams === 0) session.unref();
		});
		stream$4.once("error", function(err) {
			if (client[kHTTP2Session$1] && !client[kHTTP2Session$1].destroyed && !this.closed && !this.destroyed) {
				h2State.streams -= 1;
				util$34.destroy(stream$4, err);
			}
		});
		stream$4.once("frameError", (type, code) => {
			const err = new InformationalError$5(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
			errorRequest$1(client, request$3, err);
			if (client[kHTTP2Session$1] && !client[kHTTP2Session$1].destroyed && !this.closed && !this.destroyed) {
				h2State.streams -= 1;
				util$34.destroy(stream$4, err);
			}
		});
		return true;
		function writeBodyH2() {
			/* istanbul ignore else: assertion */
			if (!body) request$3.onRequestSent();
			else if (util$34.isBuffer(body)) {
				assert$43(contentLength === body.byteLength, "buffer body must have content length");
				stream$4.cork();
				stream$4.write(body);
				stream$4.uncork();
				stream$4.end();
				request$3.onBodySent(body);
				request$3.onRequestSent();
			} else if (util$34.isBlobLike(body)) if (typeof body.stream === "function") writeIterable$2({
				client,
				request: request$3,
				contentLength,
				h2stream: stream$4,
				expectsPayload,
				body: body.stream(),
				socket: client[kSocket$2],
				header: ""
			});
			else writeBlob$2({
				body,
				client,
				request: request$3,
				contentLength,
				expectsPayload,
				h2stream: stream$4,
				header: "",
				socket: client[kSocket$2]
			});
			else if (util$34.isStream(body)) writeStream$2({
				body,
				client,
				request: request$3,
				contentLength,
				expectsPayload,
				socket: client[kSocket$2],
				h2stream: stream$4,
				header: ""
			});
			else if (util$34.isIterable(body)) writeIterable$2({
				body,
				client,
				request: request$3,
				contentLength,
				expectsPayload,
				header: "",
				h2stream: stream$4,
				socket: client[kSocket$2]
			});
			else assert$43(false);
		}
	}
	function writeStream$2({ h2stream, body, client, request: request$3, socket, contentLength, header, expectsPayload }) {
		assert$43(contentLength !== 0 || client[kRunning$9] === 0, "stream body cannot be pipelined");
		if (client[kHTTPConnVersion] === "h2") {
			const pipe = pipeline$6(body, h2stream, (err) => {
				if (err) {
					util$34.destroy(body, err);
					util$34.destroy(h2stream, err);
				} else request$3.onRequestSent();
			});
			pipe.on("data", onPipeData);
			pipe.once("end", () => {
				pipe.removeListener("data", onPipeData);
				util$34.destroy(pipe);
			});
			function onPipeData(chunk) {
				request$3.onBodySent(chunk);
			}
			return;
		}
		let finished$4 = false;
		const writer = new AsyncWriter$1({
			socket,
			request: request$3,
			contentLength,
			client,
			expectsPayload,
			header
		});
		const onData = function(chunk) {
			if (finished$4) return;
			try {
				if (!writer.write(chunk) && this.pause) this.pause();
			} catch (err) {
				util$34.destroy(this, err);
			}
		};
		const onDrain = function() {
			if (finished$4) return;
			if (body.resume) body.resume();
		};
		const onAbort = function() {
			if (finished$4) return;
			const err = new RequestAbortedError$17();
			queueMicrotask(() => onFinished(err));
		};
		const onFinished = function(err) {
			if (finished$4) return;
			finished$4 = true;
			assert$43(socket.destroyed || socket[kWriting$1] && client[kRunning$9] <= 1);
			socket.off("drain", onDrain).off("error", onFinished);
			body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
			if (!err) try {
				writer.end();
			} catch (er) {
				err = er;
			}
			writer.destroy(err);
			if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) util$34.destroy(body, err);
			else util$34.destroy(body);
		};
		body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
		if (body.resume) body.resume();
		socket.on("drain", onDrain).on("error", onFinished);
	}
	async function writeBlob$2({ h2stream, body, client, request: request$3, socket, contentLength, header, expectsPayload }) {
		assert$43(contentLength === body.size, "blob body must have content length");
		const isH2 = client[kHTTPConnVersion] === "h2";
		try {
			if (contentLength != null && contentLength !== body.size) throw new RequestContentLengthMismatchError$3();
			const buffer$1 = Buffer.from(await body.arrayBuffer());
			if (isH2) {
				h2stream.cork();
				h2stream.write(buffer$1);
				h2stream.uncork();
			} else {
				socket.cork();
				socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
				socket.write(buffer$1);
				socket.uncork();
			}
			request$3.onBodySent(buffer$1);
			request$3.onRequestSent();
			if (!expectsPayload) socket[kReset$2] = true;
			resume$1(client);
		} catch (err) {
			util$34.destroy(isH2 ? h2stream : socket, err);
		}
	}
	async function writeIterable$2({ h2stream, body, client, request: request$3, socket, contentLength, header, expectsPayload }) {
		assert$43(contentLength !== 0 || client[kRunning$9] === 0, "iterator body cannot be pipelined");
		let callback = null;
		function onDrain() {
			if (callback) {
				const cb = callback;
				callback = null;
				cb();
			}
		}
		const waitForDrain = () => new Promise((resolve$1, reject) => {
			assert$43(callback === null);
			if (socket[kError$5]) reject(socket[kError$5]);
			else callback = resolve$1;
		});
		if (client[kHTTPConnVersion] === "h2") {
			h2stream.on("close", onDrain).on("drain", onDrain);
			try {
				for await (const chunk of body) {
					if (socket[kError$5]) throw socket[kError$5];
					const res = h2stream.write(chunk);
					request$3.onBodySent(chunk);
					if (!res) await waitForDrain();
				}
			} catch (err) {
				h2stream.destroy(err);
			} finally {
				request$3.onRequestSent();
				h2stream.end();
				h2stream.off("close", onDrain).off("drain", onDrain);
			}
			return;
		}
		socket.on("close", onDrain).on("drain", onDrain);
		const writer = new AsyncWriter$1({
			socket,
			request: request$3,
			contentLength,
			client,
			expectsPayload,
			header
		});
		try {
			for await (const chunk of body) {
				if (socket[kError$5]) throw socket[kError$5];
				if (!writer.write(chunk)) await waitForDrain();
			}
			writer.end();
		} catch (err) {
			writer.destroy(err);
		} finally {
			socket.off("close", onDrain).off("drain", onDrain);
		}
	}
	var AsyncWriter$1 = class {
		constructor({ socket, request: request$3, contentLength, client, expectsPayload, header }) {
			this.socket = socket;
			this.request = request$3;
			this.contentLength = contentLength;
			this.client = client;
			this.bytesWritten = 0;
			this.expectsPayload = expectsPayload;
			this.header = header;
			socket[kWriting$1] = true;
		}
		write(chunk) {
			const { socket, request: request$3, contentLength, client, bytesWritten, expectsPayload, header } = this;
			if (socket[kError$5]) throw socket[kError$5];
			if (socket.destroyed) return false;
			const len = Buffer.byteLength(chunk);
			if (!len) return true;
			if (contentLength !== null && bytesWritten + len > contentLength) {
				if (client[kStrictContentLength$3]) throw new RequestContentLengthMismatchError$3();
				process.emitWarning(new RequestContentLengthMismatchError$3());
			}
			socket.cork();
			if (bytesWritten === 0) {
				if (!expectsPayload) socket[kReset$2] = true;
				if (contentLength === null) socket.write(`${header}transfer-encoding: chunked\r\n`, "latin1");
				else socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
			}
			if (contentLength === null) socket.write(`\r\n${len.toString(16)}\r\n`, "latin1");
			this.bytesWritten += len;
			const ret = socket.write(chunk);
			socket.uncork();
			request$3.onBodySent(chunk);
			if (!ret) {
				if (socket[kParser$1].timeout && socket[kParser$1].timeoutType === TIMEOUT_HEADERS$1) {
					// istanbul ignore else: only for jest
					if (socket[kParser$1].timeout.refresh) socket[kParser$1].timeout.refresh();
				}
			}
			return ret;
		}
		end() {
			const { socket, contentLength, client, bytesWritten, expectsPayload, header, request: request$3 } = this;
			request$3.onRequestSent();
			socket[kWriting$1] = false;
			if (socket[kError$5]) throw socket[kError$5];
			if (socket.destroyed) return;
			if (bytesWritten === 0) if (expectsPayload) socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
			else socket.write(`${header}\r\n`, "latin1");
			else if (contentLength === null) socket.write("\r\n0\r\n\r\n", "latin1");
			if (contentLength !== null && bytesWritten !== contentLength) if (client[kStrictContentLength$3]) throw new RequestContentLengthMismatchError$3();
			else process.emitWarning(new RequestContentLengthMismatchError$3());
			if (socket[kParser$1].timeout && socket[kParser$1].timeoutType === TIMEOUT_HEADERS$1) {
				// istanbul ignore else: only for jest
				if (socket[kParser$1].timeout.refresh) socket[kParser$1].timeout.refresh();
			}
			resume$1(client);
		}
		destroy(err) {
			const { socket, client } = this;
			socket[kWriting$1] = false;
			if (err) {
				assert$43(client[kRunning$9] <= 1, "pipeline should only contain this request");
				util$34.destroy(socket, err);
			}
		}
	};
	function errorRequest$1(client, request$3, err) {
		try {
			request$3.onError(err);
			assert$43(request$3.aborted);
		} catch (err$1) {
			client.emit("error", err$1);
		}
	}
	module.exports = Client$11;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/node/fixed-queue.js
var require_fixed_queue$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/node/fixed-queue.js"(exports, module) {
	const kSize$9 = 2048;
	const kMask$1 = kSize$9 - 1;
	var FixedCircularBuffer$1 = class {
		constructor() {
			this.bottom = 0;
			this.top = 0;
			this.list = new Array(kSize$9);
			this.next = null;
		}
		isEmpty() {
			return this.top === this.bottom;
		}
		isFull() {
			return (this.top + 1 & kMask$1) === this.bottom;
		}
		push(data$1) {
			this.list[this.top] = data$1;
			this.top = this.top + 1 & kMask$1;
		}
		shift() {
			const nextItem = this.list[this.bottom];
			if (nextItem === void 0) return null;
			this.list[this.bottom] = void 0;
			this.bottom = this.bottom + 1 & kMask$1;
			return nextItem;
		}
	};
	module.exports = class FixedQueue$3 {
		constructor() {
			this.head = this.tail = new FixedCircularBuffer$1();
		}
		isEmpty() {
			return this.head.isEmpty();
		}
		push(data$1) {
			if (this.head.isFull()) this.head = this.head.next = new FixedCircularBuffer$1();
			this.head.push(data$1);
		}
		shift() {
			const tail$1 = this.tail;
			const next = tail$1.shift();
			if (tail$1.isEmpty() && tail$1.next !== null) this.tail = tail$1.next;
			return next;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/pool-stats.js
var require_pool_stats = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/pool-stats.js"(exports, module) {
	const { kFree: kFree$3, kConnected: kConnected$9, kPending: kPending$6, kQueued: kQueued$3, kRunning: kRunning$8, kSize: kSize$8 } = require_symbols$5();
	const kPool = Symbol("pool");
	var PoolStats$3 = class {
		constructor(pool) {
			this[kPool] = pool;
		}
		get connected() {
			return this[kPool][kConnected$9];
		}
		get free() {
			return this[kPool][kFree$3];
		}
		get pending() {
			return this[kPool][kPending$6];
		}
		get queued() {
			return this[kPool][kQueued$3];
		}
		get running() {
			return this[kPool][kRunning$8];
		}
		get size() {
			return this[kPool][kSize$8];
		}
	};
	module.exports = PoolStats$3;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/pool-base.js
var require_pool_base$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/pool-base.js"(exports, module) {
	const DispatcherBase$9 = require_dispatcher_base$1();
	const FixedQueue$2 = require_fixed_queue$1();
	const { kConnected: kConnected$8, kSize: kSize$7, kRunning: kRunning$7, kPending: kPending$5, kQueued: kQueued$2, kBusy: kBusy$2, kFree: kFree$2, kUrl: kUrl$9, kClose: kClose$13, kDestroy: kDestroy$9, kDispatch: kDispatch$7 } = require_symbols$5();
	const PoolStats$2 = require_pool_stats();
	const kClients$9 = Symbol("clients");
	const kNeedDrain$6 = Symbol("needDrain");
	const kQueue$4 = Symbol("queue");
	const kClosedResolve$2 = Symbol("closed resolve");
	const kOnDrain$3 = Symbol("onDrain");
	const kOnConnect$3 = Symbol("onConnect");
	const kOnDisconnect$3 = Symbol("onDisconnect");
	const kOnConnectionError$3 = Symbol("onConnectionError");
	const kGetDispatcher$5 = Symbol("get dispatcher");
	const kAddClient$5 = Symbol("add client");
	const kRemoveClient$4 = Symbol("remove client");
	const kStats = Symbol("stats");
	var PoolBase$5 = class extends DispatcherBase$9 {
		constructor() {
			super();
			this[kQueue$4] = new FixedQueue$2();
			this[kClients$9] = [];
			this[kQueued$2] = 0;
			const pool = this;
			this[kOnDrain$3] = function onDrain(origin, targets) {
				const queue = pool[kQueue$4];
				let needDrain = false;
				while (!needDrain) {
					const item = queue.shift();
					if (!item) break;
					pool[kQueued$2]--;
					needDrain = !this.dispatch(item.opts, item.handler);
				}
				this[kNeedDrain$6] = needDrain;
				if (!this[kNeedDrain$6] && pool[kNeedDrain$6]) {
					pool[kNeedDrain$6] = false;
					pool.emit("drain", origin, [pool, ...targets]);
				}
				if (pool[kClosedResolve$2] && queue.isEmpty()) Promise.all(pool[kClients$9].map((c$1) => c$1.close())).then(pool[kClosedResolve$2]);
			};
			this[kOnConnect$3] = (origin, targets) => {
				pool.emit("connect", origin, [pool, ...targets]);
			};
			this[kOnDisconnect$3] = (origin, targets, err) => {
				pool.emit("disconnect", origin, [pool, ...targets], err);
			};
			this[kOnConnectionError$3] = (origin, targets, err) => {
				pool.emit("connectionError", origin, [pool, ...targets], err);
			};
			this[kStats] = new PoolStats$2(this);
		}
		get [kBusy$2]() {
			return this[kNeedDrain$6];
		}
		get [kConnected$8]() {
			return this[kClients$9].filter((client) => client[kConnected$8]).length;
		}
		get [kFree$2]() {
			return this[kClients$9].filter((client) => client[kConnected$8] && !client[kNeedDrain$6]).length;
		}
		get [kPending$5]() {
			let ret = this[kQueued$2];
			for (const { [kPending$5]: pending } of this[kClients$9]) ret += pending;
			return ret;
		}
		get [kRunning$7]() {
			let ret = 0;
			for (const { [kRunning$7]: running } of this[kClients$9]) ret += running;
			return ret;
		}
		get [kSize$7]() {
			let ret = this[kQueued$2];
			for (const { [kSize$7]: size } of this[kClients$9]) ret += size;
			return ret;
		}
		get stats() {
			return this[kStats];
		}
		async [kClose$13]() {
			if (this[kQueue$4].isEmpty()) return Promise.all(this[kClients$9].map((c$1) => c$1.close()));
			else return new Promise((resolve$1) => {
				this[kClosedResolve$2] = resolve$1;
			});
		}
		async [kDestroy$9](err) {
			while (true) {
				const item = this[kQueue$4].shift();
				if (!item) break;
				item.handler.onError(err);
			}
			return Promise.all(this[kClients$9].map((c$1) => c$1.destroy(err)));
		}
		[kDispatch$7](opts, handler$1) {
			const dispatcher = this[kGetDispatcher$5]();
			if (!dispatcher) {
				this[kNeedDrain$6] = true;
				this[kQueue$4].push({
					opts,
					handler: handler$1
				});
				this[kQueued$2]++;
			} else if (!dispatcher.dispatch(opts, handler$1)) {
				dispatcher[kNeedDrain$6] = true;
				this[kNeedDrain$6] = !this[kGetDispatcher$5]();
			}
			return !this[kNeedDrain$6];
		}
		[kAddClient$5](client) {
			client.on("drain", this[kOnDrain$3]).on("connect", this[kOnConnect$3]).on("disconnect", this[kOnDisconnect$3]).on("connectionError", this[kOnConnectionError$3]);
			this[kClients$9].push(client);
			if (this[kNeedDrain$6]) process.nextTick(() => {
				if (this[kNeedDrain$6]) this[kOnDrain$3](client[kUrl$9], [this, client]);
			});
			return this;
		}
		[kRemoveClient$4](client) {
			client.close(() => {
				const idx = this[kClients$9].indexOf(client);
				if (idx !== -1) this[kClients$9].splice(idx, 1);
			});
			this[kNeedDrain$6] = this[kClients$9].some((dispatcher) => !dispatcher[kNeedDrain$6] && dispatcher.closed !== true && dispatcher.destroyed !== true);
		}
	};
	module.exports = {
		PoolBase: PoolBase$5,
		kClients: kClients$9,
		kNeedDrain: kNeedDrain$6,
		kAddClient: kAddClient$5,
		kRemoveClient: kRemoveClient$4,
		kGetDispatcher: kGetDispatcher$5
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/pool.js
var require_pool$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/pool.js"(exports, module) {
	const { PoolBase: PoolBase$4, kClients: kClients$8, kNeedDrain: kNeedDrain$5, kAddClient: kAddClient$4, kGetDispatcher: kGetDispatcher$4 } = require_pool_base$1();
	const Client$10 = require_client$1();
	const { InvalidArgumentError: InvalidArgumentError$47 } = require_errors$1();
	const util$33 = require_util$12();
	const { kUrl: kUrl$8, kInterceptors: kInterceptors$3 } = require_symbols$5();
	const buildConnector$7 = require_connect$1();
	const kOptions$7 = Symbol("options");
	const kConnections$1 = Symbol("connections");
	const kFactory$7 = Symbol("factory");
	function defaultFactory$7(origin, opts) {
		return new Client$10(origin, opts);
	}
	var Pool$11 = class extends PoolBase$4 {
		constructor(origin, { connections, factory = defaultFactory$7, connect: connect$5, connectTimeout, tls: tls$3, maxCachedSessions, socketPath, autoSelectFamily, autoSelectFamilyAttemptTimeout, allowH2,...options } = {}) {
			super();
			if (connections != null && (!Number.isFinite(connections) || connections < 0)) throw new InvalidArgumentError$47("invalid connections");
			if (typeof factory !== "function") throw new InvalidArgumentError$47("factory must be a function.");
			if (connect$5 != null && typeof connect$5 !== "function" && typeof connect$5 !== "object") throw new InvalidArgumentError$47("connect must be a function or an object");
			if (typeof connect$5 !== "function") connect$5 = buildConnector$7({
				...tls$3,
				maxCachedSessions,
				allowH2,
				socketPath,
				timeout: connectTimeout,
				...util$33.nodeHasAutoSelectFamily && autoSelectFamily ? {
					autoSelectFamily,
					autoSelectFamilyAttemptTimeout
				} : void 0,
				...connect$5
			});
			this[kInterceptors$3] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];
			this[kConnections$1] = connections || null;
			this[kUrl$8] = util$33.parseOrigin(origin);
			this[kOptions$7] = {
				...util$33.deepClone(options),
				connect: connect$5,
				allowH2
			};
			this[kOptions$7].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
			this[kFactory$7] = factory;
		}
		[kGetDispatcher$4]() {
			let dispatcher = this[kClients$8].find((dispatcher$1) => !dispatcher$1[kNeedDrain$5]);
			if (dispatcher) return dispatcher;
			if (!this[kConnections$1] || this[kClients$8].length < this[kConnections$1]) {
				dispatcher = this[kFactory$7](this[kUrl$8], this[kOptions$7]);
				this[kAddClient$4](dispatcher);
			}
			return dispatcher;
		}
	};
	module.exports = Pool$11;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/balanced-pool.js
var require_balanced_pool$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/balanced-pool.js"(exports, module) {
	const { BalancedPoolMissingUpstreamError: BalancedPoolMissingUpstreamError$2, InvalidArgumentError: InvalidArgumentError$46 } = require_errors$1();
	const { PoolBase: PoolBase$3, kClients: kClients$7, kNeedDrain: kNeedDrain$4, kAddClient: kAddClient$3, kRemoveClient: kRemoveClient$3, kGetDispatcher: kGetDispatcher$3 } = require_pool_base$1();
	const Pool$10 = require_pool$1();
	const { kUrl: kUrl$7, kInterceptors: kInterceptors$2 } = require_symbols$5();
	const { parseOrigin: parseOrigin$2 } = require_util$12();
	const kFactory$6 = Symbol("factory");
	const kOptions$6 = Symbol("options");
	const kGreatestCommonDivisor$1 = Symbol("kGreatestCommonDivisor");
	const kCurrentWeight$1 = Symbol("kCurrentWeight");
	const kIndex$1 = Symbol("kIndex");
	const kWeight$1 = Symbol("kWeight");
	const kMaxWeightPerServer$1 = Symbol("kMaxWeightPerServer");
	const kErrorPenalty$1 = Symbol("kErrorPenalty");
	function getGreatestCommonDivisor$1(a$1, b) {
		if (b === 0) return a$1;
		return getGreatestCommonDivisor$1(b, a$1 % b);
	}
	function defaultFactory$6(origin, opts) {
		return new Pool$10(origin, opts);
	}
	var BalancedPool$3 = class extends PoolBase$3 {
		constructor(upstreams = [], { factory = defaultFactory$6,...opts } = {}) {
			super();
			this[kOptions$6] = opts;
			this[kIndex$1] = -1;
			this[kCurrentWeight$1] = 0;
			this[kMaxWeightPerServer$1] = this[kOptions$6].maxWeightPerServer || 100;
			this[kErrorPenalty$1] = this[kOptions$6].errorPenalty || 15;
			if (!Array.isArray(upstreams)) upstreams = [upstreams];
			if (typeof factory !== "function") throw new InvalidArgumentError$46("factory must be a function.");
			this[kInterceptors$2] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
			this[kFactory$6] = factory;
			for (const upstream of upstreams) this.addUpstream(upstream);
			this._updateBalancedPoolStats();
		}
		addUpstream(upstream) {
			const upstreamOrigin = parseOrigin$2(upstream).origin;
			if (this[kClients$7].find((pool$1) => pool$1[kUrl$7].origin === upstreamOrigin && pool$1.closed !== true && pool$1.destroyed !== true)) return this;
			const pool = this[kFactory$6](upstreamOrigin, Object.assign({}, this[kOptions$6]));
			this[kAddClient$3](pool);
			pool.on("connect", () => {
				pool[kWeight$1] = Math.min(this[kMaxWeightPerServer$1], pool[kWeight$1] + this[kErrorPenalty$1]);
			});
			pool.on("connectionError", () => {
				pool[kWeight$1] = Math.max(1, pool[kWeight$1] - this[kErrorPenalty$1]);
				this._updateBalancedPoolStats();
			});
			pool.on("disconnect", (...args) => {
				const err = args[2];
				if (err && err.code === "UND_ERR_SOCKET") {
					pool[kWeight$1] = Math.max(1, pool[kWeight$1] - this[kErrorPenalty$1]);
					this._updateBalancedPoolStats();
				}
			});
			for (const client of this[kClients$7]) client[kWeight$1] = this[kMaxWeightPerServer$1];
			this._updateBalancedPoolStats();
			return this;
		}
		_updateBalancedPoolStats() {
			this[kGreatestCommonDivisor$1] = this[kClients$7].map((p) => p[kWeight$1]).reduce(getGreatestCommonDivisor$1, 0);
		}
		removeUpstream(upstream) {
			const upstreamOrigin = parseOrigin$2(upstream).origin;
			const pool = this[kClients$7].find((pool$1) => pool$1[kUrl$7].origin === upstreamOrigin && pool$1.closed !== true && pool$1.destroyed !== true);
			if (pool) this[kRemoveClient$3](pool);
			return this;
		}
		get upstreams() {
			return this[kClients$7].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p) => p[kUrl$7].origin);
		}
		[kGetDispatcher$3]() {
			if (this[kClients$7].length === 0) throw new BalancedPoolMissingUpstreamError$2();
			const dispatcher = this[kClients$7].find((dispatcher$1) => !dispatcher$1[kNeedDrain$4] && dispatcher$1.closed !== true && dispatcher$1.destroyed !== true);
			if (!dispatcher) return;
			const allClientsBusy = this[kClients$7].map((pool) => pool[kNeedDrain$4]).reduce((a$1, b) => a$1 && b, true);
			if (allClientsBusy) return;
			let counter = 0;
			let maxWeightIndex = this[kClients$7].findIndex((pool) => !pool[kNeedDrain$4]);
			while (counter++ < this[kClients$7].length) {
				this[kIndex$1] = (this[kIndex$1] + 1) % this[kClients$7].length;
				const pool = this[kClients$7][this[kIndex$1]];
				if (pool[kWeight$1] > this[kClients$7][maxWeightIndex][kWeight$1] && !pool[kNeedDrain$4]) maxWeightIndex = this[kIndex$1];
				if (this[kIndex$1] === 0) {
					this[kCurrentWeight$1] = this[kCurrentWeight$1] - this[kGreatestCommonDivisor$1];
					if (this[kCurrentWeight$1] <= 0) this[kCurrentWeight$1] = this[kMaxWeightPerServer$1];
				}
				if (pool[kWeight$1] >= this[kCurrentWeight$1] && !pool[kNeedDrain$4]) return pool;
			}
			this[kCurrentWeight$1] = this[kClients$7][maxWeightIndex][kWeight$1];
			this[kIndex$1] = maxWeightIndex;
			return this[kClients$7][maxWeightIndex];
		}
	};
	module.exports = BalancedPool$3;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/compat/dispatcher-weakref.js
var require_dispatcher_weakref = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/compat/dispatcher-weakref.js"(exports, module) {
	/* istanbul ignore file: only for Node 12 */
	const { kConnected: kConnected$7, kSize: kSize$6 } = require_symbols$5();
	var CompatWeakRef = class {
		constructor(value) {
			this.value = value;
		}
		deref() {
			return this.value[kConnected$7] === 0 && this.value[kSize$6] === 0 ? void 0 : this.value;
		}
	};
	var CompatFinalizer = class {
		constructor(finalizer) {
			this.finalizer = finalizer;
		}
		register(dispatcher, key) {
			if (dispatcher.on) dispatcher.on("disconnect", () => {
				if (dispatcher[kConnected$7] === 0 && dispatcher[kSize$6] === 0) this.finalizer(key);
			});
		}
	};
	module.exports = function() {
		if (process.env.NODE_V8_COVERAGE) return {
			WeakRef: CompatWeakRef,
			FinalizationRegistry: CompatFinalizer
		};
		return {
			WeakRef: global.WeakRef || CompatWeakRef,
			FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/agent.js
var require_agent$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/agent.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$45 } = require_errors$1();
	const { kClients: kClients$6, kRunning: kRunning$6, kClose: kClose$12, kDestroy: kDestroy$8, kDispatch: kDispatch$6, kInterceptors: kInterceptors$1 } = require_symbols$5();
	const DispatcherBase$8 = require_dispatcher_base$1();
	const Pool$9 = require_pool$1();
	const Client$9 = require_client$1();
	const util$32 = require_util$12();
	const createRedirectInterceptor$2 = require_redirectInterceptor();
	const { WeakRef: WeakRef$1, FinalizationRegistry: FinalizationRegistry$2 } = require_dispatcher_weakref()();
	const kOnConnect$2 = Symbol("onConnect");
	const kOnDisconnect$2 = Symbol("onDisconnect");
	const kOnConnectionError$2 = Symbol("onConnectionError");
	const kMaxRedirections = Symbol("maxRedirections");
	const kOnDrain$2 = Symbol("onDrain");
	const kFactory$5 = Symbol("factory");
	const kFinalizer = Symbol("finalizer");
	const kOptions$5 = Symbol("options");
	function defaultFactory$5(origin, opts) {
		return opts && opts.connections === 1 ? new Client$9(origin, opts) : new Pool$9(origin, opts);
	}
	var Agent$10 = class extends DispatcherBase$8 {
		constructor({ factory = defaultFactory$5, maxRedirections = 0, connect: connect$5,...options } = {}) {
			super();
			if (typeof factory !== "function") throw new InvalidArgumentError$45("factory must be a function.");
			if (connect$5 != null && typeof connect$5 !== "function" && typeof connect$5 !== "object") throw new InvalidArgumentError$45("connect must be a function or an object");
			if (!Number.isInteger(maxRedirections) || maxRedirections < 0) throw new InvalidArgumentError$45("maxRedirections must be a positive number");
			if (connect$5 && typeof connect$5 !== "function") connect$5 = { ...connect$5 };
			this[kInterceptors$1] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [createRedirectInterceptor$2({ maxRedirections })];
			this[kOptions$5] = {
				...util$32.deepClone(options),
				connect: connect$5
			};
			this[kOptions$5].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
			this[kMaxRedirections] = maxRedirections;
			this[kFactory$5] = factory;
			this[kClients$6] = /* @__PURE__ */ new Map();
			this[kFinalizer] = new FinalizationRegistry$2(
				/* istanbul ignore next: gc is undeterministic */
				(key) => {
					const ref = this[kClients$6].get(key);
					if (ref !== void 0 && ref.deref() === void 0) this[kClients$6].delete(key);
				}
			);
			const agent = this;
			this[kOnDrain$2] = (origin, targets) => {
				agent.emit("drain", origin, [agent, ...targets]);
			};
			this[kOnConnect$2] = (origin, targets) => {
				agent.emit("connect", origin, [agent, ...targets]);
			};
			this[kOnDisconnect$2] = (origin, targets, err) => {
				agent.emit("disconnect", origin, [agent, ...targets], err);
			};
			this[kOnConnectionError$2] = (origin, targets, err) => {
				agent.emit("connectionError", origin, [agent, ...targets], err);
			};
		}
		get [kRunning$6]() {
			let ret = 0;
			for (const ref of this[kClients$6].values()) {
				const client = ref.deref();
				/* istanbul ignore next: gc is undeterministic */
				if (client) ret += client[kRunning$6];
			}
			return ret;
		}
		[kDispatch$6](opts, handler$1) {
			let key;
			if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) key = String(opts.origin);
			else throw new InvalidArgumentError$45("opts.origin must be a non-empty string or URL.");
			const ref = this[kClients$6].get(key);
			let dispatcher = ref ? ref.deref() : null;
			if (!dispatcher) {
				dispatcher = this[kFactory$5](opts.origin, this[kOptions$5]).on("drain", this[kOnDrain$2]).on("connect", this[kOnConnect$2]).on("disconnect", this[kOnDisconnect$2]).on("connectionError", this[kOnConnectionError$2]);
				this[kClients$6].set(key, new WeakRef$1(dispatcher));
				this[kFinalizer].register(dispatcher, key);
			}
			return dispatcher.dispatch(opts, handler$1);
		}
		async [kClose$12]() {
			const closePromises = [];
			for (const ref of this[kClients$6].values()) {
				const client = ref.deref();
				/* istanbul ignore else: gc is undeterministic */
				if (client) closePromises.push(client.close());
			}
			await Promise.all(closePromises);
		}
		async [kDestroy$8](err) {
			const destroyPromises = [];
			for (const ref of this[kClients$6].values()) {
				const client = ref.deref();
				/* istanbul ignore else: gc is undeterministic */
				if (client) destroyPromises.push(client.destroy(err));
			}
			await Promise.all(destroyPromises);
		}
	};
	module.exports = Agent$10;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/readable.js
var require_readable$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/readable.js"(exports, module) {
	const assert$42 = __require("assert");
	const { Readable: Readable$9 } = __require("stream");
	const { RequestAbortedError: RequestAbortedError$16, NotSupportedError: NotSupportedError$3, InvalidArgumentError: InvalidArgumentError$44 } = require_errors$1();
	const util$31 = require_util$12();
	const { ReadableStreamFrom: ReadableStreamFrom$4, toUSVString: toUSVString$1 } = require_util$12();
	let Blob$3;
	const kConsume$1 = Symbol("kConsume");
	const kReading$1 = Symbol("kReading");
	const kBody$3 = Symbol("kBody");
	const kAbort$1 = Symbol("abort");
	const kContentType$1 = Symbol("kContentType");
	const noop$13 = () => {};
	module.exports = class BodyReadable$1 extends Readable$9 {
		constructor({ resume: resume$2, abort: abort$2, contentType = "", highWaterMark = 64 * 1024 }) {
			super({
				autoDestroy: true,
				read: resume$2,
				highWaterMark
			});
			this._readableState.dataEmitted = false;
			this[kAbort$1] = abort$2;
			this[kConsume$1] = null;
			this[kBody$3] = null;
			this[kContentType$1] = contentType;
			this[kReading$1] = false;
		}
		destroy(err) {
			if (this.destroyed) return this;
			if (!err && !this._readableState.endEmitted) err = new RequestAbortedError$16();
			if (err) this[kAbort$1]();
			return super.destroy(err);
		}
		emit(ev, ...args) {
			if (ev === "data") this._readableState.dataEmitted = true;
			else if (ev === "error") this._readableState.errorEmitted = true;
			return super.emit(ev, ...args);
		}
		on(ev, ...args) {
			if (ev === "data" || ev === "readable") this[kReading$1] = true;
			return super.on(ev, ...args);
		}
		addListener(ev, ...args) {
			return this.on(ev, ...args);
		}
		off(ev, ...args) {
			const ret = super.off(ev, ...args);
			if (ev === "data" || ev === "readable") this[kReading$1] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
			return ret;
		}
		removeListener(ev, ...args) {
			return this.off(ev, ...args);
		}
		push(chunk) {
			if (this[kConsume$1] && chunk !== null && this.readableLength === 0) {
				consumePush$1(this[kConsume$1], chunk);
				return this[kReading$1] ? super.push(chunk) : true;
			}
			return super.push(chunk);
		}
		async text() {
			return consume$1(this, "text");
		}
		async json() {
			return consume$1(this, "json");
		}
		async blob() {
			return consume$1(this, "blob");
		}
		async arrayBuffer() {
			return consume$1(this, "arrayBuffer");
		}
		async formData() {
			throw new NotSupportedError$3();
		}
		get bodyUsed() {
			return util$31.isDisturbed(this);
		}
		get body() {
			if (!this[kBody$3]) {
				this[kBody$3] = ReadableStreamFrom$4(this);
				if (this[kConsume$1]) {
					this[kBody$3].getReader();
					assert$42(this[kBody$3].locked);
				}
			}
			return this[kBody$3];
		}
		dump(opts) {
			let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
			const signal = opts && opts.signal;
			if (signal) try {
				if (typeof signal !== "object" || !("aborted" in signal)) throw new InvalidArgumentError$44("signal must be an AbortSignal");
				util$31.throwIfAborted(signal);
			} catch (err) {
				return Promise.reject(err);
			}
			if (this.closed) return Promise.resolve(null);
			return new Promise((resolve$1, reject) => {
				const signalListenerCleanup = signal ? util$31.addAbortListener(signal, () => {
					this.destroy();
				}) : noop$13;
				this.on("close", function() {
					signalListenerCleanup();
					if (signal && signal.aborted) reject(signal.reason || Object.assign(/* @__PURE__ */ new Error("The operation was aborted"), { name: "AbortError" }));
					else resolve$1(null);
				}).on("error", noop$13).on("data", function(chunk) {
					limit -= chunk.length;
					if (limit <= 0) this.destroy();
				}).resume();
			});
		}
	};
	function isLocked$1(self$1) {
		return self$1[kBody$3] && self$1[kBody$3].locked === true || self$1[kConsume$1];
	}
	function isUnusable$1(self$1) {
		return util$31.isDisturbed(self$1) || isLocked$1(self$1);
	}
	async function consume$1(stream$4, type) {
		if (isUnusable$1(stream$4)) throw new TypeError("unusable");
		assert$42(!stream$4[kConsume$1]);
		return new Promise((resolve$1, reject) => {
			stream$4[kConsume$1] = {
				type,
				stream: stream$4,
				resolve: resolve$1,
				reject,
				length: 0,
				body: []
			};
			stream$4.on("error", function(err) {
				consumeFinish$1(this[kConsume$1], err);
			}).on("close", function() {
				if (this[kConsume$1].body !== null) consumeFinish$1(this[kConsume$1], new RequestAbortedError$16());
			});
			process.nextTick(consumeStart$1, stream$4[kConsume$1]);
		});
	}
	function consumeStart$1(consume$2) {
		if (consume$2.body === null) return;
		const { _readableState: state } = consume$2.stream;
		for (const chunk of state.buffer) consumePush$1(consume$2, chunk);
		if (state.endEmitted) consumeEnd$1(this[kConsume$1]);
		else consume$2.stream.on("end", function() {
			consumeEnd$1(this[kConsume$1]);
		});
		consume$2.stream.resume();
		while (consume$2.stream.read() != null);
	}
	function consumeEnd$1(consume$2) {
		const { type, body, resolve: resolve$1, stream: stream$4, length } = consume$2;
		try {
			if (type === "text") resolve$1(toUSVString$1(Buffer.concat(body)));
			else if (type === "json") resolve$1(JSON.parse(Buffer.concat(body)));
			else if (type === "arrayBuffer") {
				const dst = new Uint8Array(length);
				let pos = 0;
				for (const buf of body) {
					dst.set(buf, pos);
					pos += buf.byteLength;
				}
				resolve$1(dst.buffer);
			} else if (type === "blob") {
				if (!Blob$3) Blob$3 = __require("buffer").Blob;
				resolve$1(new Blob$3(body, { type: stream$4[kContentType$1] }));
			}
			consumeFinish$1(consume$2);
		} catch (err) {
			stream$4.destroy(err);
		}
	}
	function consumePush$1(consume$2, chunk) {
		consume$2.length += chunk.length;
		consume$2.body.push(chunk);
	}
	function consumeFinish$1(consume$2, err) {
		if (consume$2.body === null) return;
		if (err) consume$2.reject(err);
		else consume$2.resolve();
		consume$2.type = null;
		consume$2.stream = null;
		consume$2.resolve = null;
		consume$2.reject = null;
		consume$2.length = 0;
		consume$2.body = null;
	}
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/util.js
var require_util$10 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/util.js"(exports, module) {
	const assert$41 = __require("assert");
	const { ResponseStatusCodeError: ResponseStatusCodeError$1 } = require_errors$1();
	const { toUSVString } = require_util$12();
	async function getResolveErrorBodyCallback$2({ callback, body, contentType, statusCode, statusMessage, headers }) {
		assert$41(body);
		let chunks = [];
		let limit = 0;
		for await (const chunk of body) {
			chunks.push(chunk);
			limit += chunk.length;
			if (limit > 128 * 1024) {
				chunks = null;
				break;
			}
		}
		if (statusCode === 204 || !contentType || !chunks) {
			process.nextTick(callback, new ResponseStatusCodeError$1(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
			return;
		}
		try {
			if (contentType.startsWith("application/json")) {
				const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
				process.nextTick(callback, new ResponseStatusCodeError$1(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
				return;
			}
			if (contentType.startsWith("text/")) {
				const payload = toUSVString(Buffer.concat(chunks));
				process.nextTick(callback, new ResponseStatusCodeError$1(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
				return;
			}
		} catch (err) {}
		process.nextTick(callback, new ResponseStatusCodeError$1(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
	}
	module.exports = { getResolveErrorBodyCallback: getResolveErrorBodyCallback$2 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/abort-signal.js
var require_abort_signal$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/abort-signal.js"(exports, module) {
	const { addAbortListener: addAbortListener$5 } = require_util$12();
	const { RequestAbortedError: RequestAbortedError$15 } = require_errors$1();
	const kListener$1 = Symbol("kListener");
	const kSignal$2 = Symbol("kSignal");
	function abort$1(self$1) {
		if (self$1.abort) self$1.abort();
		else self$1.onError(new RequestAbortedError$15());
	}
	function addSignal$10(self$1, signal) {
		self$1[kSignal$2] = null;
		self$1[kListener$1] = null;
		if (!signal) return;
		if (signal.aborted) {
			abort$1(self$1);
			return;
		}
		self$1[kSignal$2] = signal;
		self$1[kListener$1] = () => {
			abort$1(self$1);
		};
		addAbortListener$5(self$1[kSignal$2], self$1[kListener$1]);
	}
	function removeSignal$10(self$1) {
		if (!self$1[kSignal$2]) return;
		if ("removeEventListener" in self$1[kSignal$2]) self$1[kSignal$2].removeEventListener("abort", self$1[kListener$1]);
		else self$1[kSignal$2].removeListener("abort", self$1[kListener$1]);
		self$1[kSignal$2] = null;
		self$1[kListener$1] = null;
	}
	module.exports = {
		addSignal: addSignal$10,
		removeSignal: removeSignal$10
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-request.js
var require_api_request$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-request.js"(exports, module) {
	const Readable$8 = require_readable$1();
	const { InvalidArgumentError: InvalidArgumentError$43, RequestAbortedError: RequestAbortedError$14 } = require_errors$1();
	const util$30 = require_util$12();
	const { getResolveErrorBodyCallback: getResolveErrorBodyCallback$1 } = require_util$10();
	const { AsyncResource: AsyncResource$9 } = __require("async_hooks");
	const { addSignal: addSignal$9, removeSignal: removeSignal$9 } = require_abort_signal$1();
	var RequestHandler$1 = class extends AsyncResource$9 {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$43("invalid opts");
			const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;
			try {
				if (typeof callback !== "function") throw new InvalidArgumentError$43("invalid callback");
				if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) throw new InvalidArgumentError$43("invalid highWaterMark");
				if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$43("signal must be an EventEmitter or EventTarget");
				if (method === "CONNECT") throw new InvalidArgumentError$43("invalid method");
				if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$43("invalid onInfo callback");
				super("UNDICI_REQUEST");
			} catch (err) {
				if (util$30.isStream(body)) util$30.destroy(body.on("error", util$30.nop), err);
				throw err;
			}
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.callback = callback;
			this.res = null;
			this.abort = null;
			this.body = body;
			this.trailers = {};
			this.context = null;
			this.onInfo = onInfo || null;
			this.throwOnError = throwOnError;
			this.highWaterMark = highWaterMark;
			if (util$30.isStream(body)) body.on("error", (err) => {
				this.onError(err);
			});
			addSignal$9(this, signal);
		}
		onConnect(abort$2, context$1) {
			if (!this.callback) throw new RequestAbortedError$14();
			this.abort = abort$2;
			this.context = context$1;
		}
		onHeaders(statusCode, rawHeaders, resume$2, statusMessage) {
			const { callback, opaque, abort: abort$2, context: context$1, responseHeaders, highWaterMark } = this;
			const headers = responseHeaders === "raw" ? util$30.parseRawHeaders(rawHeaders) : util$30.parseHeaders(rawHeaders);
			if (statusCode < 200) {
				if (this.onInfo) this.onInfo({
					statusCode,
					headers
				});
				return;
			}
			const parsedHeaders = responseHeaders === "raw" ? util$30.parseHeaders(rawHeaders) : headers;
			const contentType = parsedHeaders["content-type"];
			const body = new Readable$8({
				resume: resume$2,
				abort: abort$2,
				contentType,
				highWaterMark
			});
			this.callback = null;
			this.res = body;
			if (callback !== null) if (this.throwOnError && statusCode >= 400) this.runInAsyncScope(getResolveErrorBodyCallback$1, null, {
				callback,
				body,
				contentType,
				statusCode,
				statusMessage,
				headers
			});
			else this.runInAsyncScope(callback, null, null, {
				statusCode,
				headers,
				trailers: this.trailers,
				opaque,
				body,
				context: context$1
			});
		}
		onData(chunk) {
			const { res } = this;
			return res.push(chunk);
		}
		onComplete(trailers) {
			const { res } = this;
			removeSignal$9(this);
			util$30.parseHeaders(trailers, this.trailers);
			res.push(null);
		}
		onError(err) {
			const { res, callback, body, opaque } = this;
			removeSignal$9(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
			if (res) {
				this.res = null;
				queueMicrotask(() => {
					util$30.destroy(res, err);
				});
			}
			if (body) {
				this.body = null;
				util$30.destroy(body, err);
			}
		}
	};
	function request$2(opts, callback) {
		if (callback === void 0) return new Promise((resolve$1, reject) => {
			request$2.call(this, opts, (err, data$1) => {
				return err ? reject(err) : resolve$1(data$1);
			});
		});
		try {
			this.dispatch(opts, new RequestHandler$1(opts, callback));
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = request$2;
	module.exports.RequestHandler = RequestHandler$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-stream.js
var require_api_stream$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-stream.js"(exports, module) {
	const { finished: finished$3, PassThrough: PassThrough$3 } = __require("stream");
	const { InvalidArgumentError: InvalidArgumentError$42, InvalidReturnValueError: InvalidReturnValueError$4, RequestAbortedError: RequestAbortedError$13 } = require_errors$1();
	const util$29 = require_util$12();
	const { getResolveErrorBodyCallback } = require_util$10();
	const { AsyncResource: AsyncResource$8 } = __require("async_hooks");
	const { addSignal: addSignal$8, removeSignal: removeSignal$8 } = require_abort_signal$1();
	var StreamHandler$1 = class extends AsyncResource$8 {
		constructor(opts, factory, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$42("invalid opts");
			const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;
			try {
				if (typeof callback !== "function") throw new InvalidArgumentError$42("invalid callback");
				if (typeof factory !== "function") throw new InvalidArgumentError$42("invalid factory");
				if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$42("signal must be an EventEmitter or EventTarget");
				if (method === "CONNECT") throw new InvalidArgumentError$42("invalid method");
				if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$42("invalid onInfo callback");
				super("UNDICI_STREAM");
			} catch (err) {
				if (util$29.isStream(body)) util$29.destroy(body.on("error", util$29.nop), err);
				throw err;
			}
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.factory = factory;
			this.callback = callback;
			this.res = null;
			this.abort = null;
			this.context = null;
			this.trailers = null;
			this.body = body;
			this.onInfo = onInfo || null;
			this.throwOnError = throwOnError || false;
			if (util$29.isStream(body)) body.on("error", (err) => {
				this.onError(err);
			});
			addSignal$8(this, signal);
		}
		onConnect(abort$2, context$1) {
			if (!this.callback) throw new RequestAbortedError$13();
			this.abort = abort$2;
			this.context = context$1;
		}
		onHeaders(statusCode, rawHeaders, resume$2, statusMessage) {
			const { factory, opaque, context: context$1, callback, responseHeaders } = this;
			const headers = responseHeaders === "raw" ? util$29.parseRawHeaders(rawHeaders) : util$29.parseHeaders(rawHeaders);
			if (statusCode < 200) {
				if (this.onInfo) this.onInfo({
					statusCode,
					headers
				});
				return;
			}
			this.factory = null;
			let res;
			if (this.throwOnError && statusCode >= 400) {
				const parsedHeaders = responseHeaders === "raw" ? util$29.parseHeaders(rawHeaders) : headers;
				const contentType = parsedHeaders["content-type"];
				res = new PassThrough$3();
				this.callback = null;
				this.runInAsyncScope(getResolveErrorBodyCallback, null, {
					callback,
					body: res,
					contentType,
					statusCode,
					statusMessage,
					headers
				});
			} else {
				if (factory === null) return;
				res = this.runInAsyncScope(factory, null, {
					statusCode,
					headers,
					opaque,
					context: context$1
				});
				if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") throw new InvalidReturnValueError$4("expected Writable");
				finished$3(res, { readable: false }, (err) => {
					const { callback: callback$1, res: res$1, opaque: opaque$1, trailers, abort: abort$2 } = this;
					this.res = null;
					if (err || !res$1.readable) util$29.destroy(res$1, err);
					this.callback = null;
					this.runInAsyncScope(callback$1, null, err || null, {
						opaque: opaque$1,
						trailers
					});
					if (err) abort$2();
				});
			}
			res.on("drain", resume$2);
			this.res = res;
			const needDrain = res.writableNeedDrain !== void 0 ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
			return needDrain !== true;
		}
		onData(chunk) {
			const { res } = this;
			return res ? res.write(chunk) : true;
		}
		onComplete(trailers) {
			const { res } = this;
			removeSignal$8(this);
			if (!res) return;
			this.trailers = util$29.parseHeaders(trailers);
			res.end();
		}
		onError(err) {
			const { res, callback, opaque, body } = this;
			removeSignal$8(this);
			this.factory = null;
			if (res) {
				this.res = null;
				util$29.destroy(res, err);
			} else if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
			if (body) {
				this.body = null;
				util$29.destroy(body, err);
			}
		}
	};
	function stream$2(opts, factory, callback) {
		if (callback === void 0) return new Promise((resolve$1, reject) => {
			stream$2.call(this, opts, factory, (err, data$1) => {
				return err ? reject(err) : resolve$1(data$1);
			});
		});
		try {
			this.dispatch(opts, new StreamHandler$1(opts, factory, callback));
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = stream$2;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-pipeline.js
var require_api_pipeline$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-pipeline.js"(exports, module) {
	const { Readable: Readable$7, Duplex: Duplex$2, PassThrough: PassThrough$2 } = __require("stream");
	const { InvalidArgumentError: InvalidArgumentError$41, InvalidReturnValueError: InvalidReturnValueError$3, RequestAbortedError: RequestAbortedError$12 } = require_errors$1();
	const util$28 = require_util$12();
	const { AsyncResource: AsyncResource$7 } = __require("async_hooks");
	const { addSignal: addSignal$7, removeSignal: removeSignal$7 } = require_abort_signal$1();
	const assert$40 = __require("assert");
	const kResume$5 = Symbol("resume");
	var PipelineRequest$1 = class extends Readable$7 {
		constructor() {
			super({ autoDestroy: true });
			this[kResume$5] = null;
		}
		_read() {
			const { [kResume$5]: resume$2 } = this;
			if (resume$2) {
				this[kResume$5] = null;
				resume$2();
			}
		}
		_destroy(err, callback) {
			this._read();
			callback(err);
		}
	};
	var PipelineResponse$1 = class extends Readable$7 {
		constructor(resume$2) {
			super({ autoDestroy: true });
			this[kResume$5] = resume$2;
		}
		_read() {
			this[kResume$5]();
		}
		_destroy(err, callback) {
			if (!err && !this._readableState.endEmitted) err = new RequestAbortedError$12();
			callback(err);
		}
	};
	var PipelineHandler$1 = class extends AsyncResource$7 {
		constructor(opts, handler$1) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$41("invalid opts");
			if (typeof handler$1 !== "function") throw new InvalidArgumentError$41("invalid handler");
			const { signal, method, opaque, onInfo, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$41("signal must be an EventEmitter or EventTarget");
			if (method === "CONNECT") throw new InvalidArgumentError$41("invalid method");
			if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$41("invalid onInfo callback");
			super("UNDICI_PIPELINE");
			this.opaque = opaque || null;
			this.responseHeaders = responseHeaders || null;
			this.handler = handler$1;
			this.abort = null;
			this.context = null;
			this.onInfo = onInfo || null;
			this.req = new PipelineRequest$1().on("error", util$28.nop);
			this.ret = new Duplex$2({
				readableObjectMode: opts.objectMode,
				autoDestroy: true,
				read: () => {
					const { body } = this;
					if (body && body.resume) body.resume();
				},
				write: (chunk, encoding, callback) => {
					const { req } = this;
					if (req.push(chunk, encoding) || req._readableState.destroyed) callback();
					else req[kResume$5] = callback;
				},
				destroy: (err, callback) => {
					const { body, req, res, ret, abort: abort$2 } = this;
					if (!err && !ret._readableState.endEmitted) err = new RequestAbortedError$12();
					if (abort$2 && err) abort$2();
					util$28.destroy(body, err);
					util$28.destroy(req, err);
					util$28.destroy(res, err);
					removeSignal$7(this);
					callback(err);
				}
			}).on("prefinish", () => {
				const { req } = this;
				req.push(null);
			});
			this.res = null;
			addSignal$7(this, signal);
		}
		onConnect(abort$2, context$1) {
			const { ret, res } = this;
			assert$40(!res, "pipeline cannot be retried");
			if (ret.destroyed) throw new RequestAbortedError$12();
			this.abort = abort$2;
			this.context = context$1;
		}
		onHeaders(statusCode, rawHeaders, resume$2) {
			const { opaque, handler: handler$1, context: context$1 } = this;
			if (statusCode < 200) {
				if (this.onInfo) {
					const headers = this.responseHeaders === "raw" ? util$28.parseRawHeaders(rawHeaders) : util$28.parseHeaders(rawHeaders);
					this.onInfo({
						statusCode,
						headers
					});
				}
				return;
			}
			this.res = new PipelineResponse$1(resume$2);
			let body;
			try {
				this.handler = null;
				const headers = this.responseHeaders === "raw" ? util$28.parseRawHeaders(rawHeaders) : util$28.parseHeaders(rawHeaders);
				body = this.runInAsyncScope(handler$1, null, {
					statusCode,
					headers,
					opaque,
					body: this.res,
					context: context$1
				});
			} catch (err) {
				this.res.on("error", util$28.nop);
				throw err;
			}
			if (!body || typeof body.on !== "function") throw new InvalidReturnValueError$3("expected Readable");
			body.on("data", (chunk) => {
				const { ret, body: body$1 } = this;
				if (!ret.push(chunk) && body$1.pause) body$1.pause();
			}).on("error", (err) => {
				const { ret } = this;
				util$28.destroy(ret, err);
			}).on("end", () => {
				const { ret } = this;
				ret.push(null);
			}).on("close", () => {
				const { ret } = this;
				if (!ret._readableState.ended) util$28.destroy(ret, new RequestAbortedError$12());
			});
			this.body = body;
		}
		onData(chunk) {
			const { res } = this;
			return res.push(chunk);
		}
		onComplete(trailers) {
			const { res } = this;
			res.push(null);
		}
		onError(err) {
			const { ret } = this;
			this.handler = null;
			util$28.destroy(ret, err);
		}
	};
	function pipeline$5(opts, handler$1) {
		try {
			const pipelineHandler = new PipelineHandler$1(opts, handler$1);
			this.dispatch({
				...opts,
				body: pipelineHandler.req
			}, pipelineHandler);
			return pipelineHandler.ret;
		} catch (err) {
			return new PassThrough$2().destroy(err);
		}
	}
	module.exports = pipeline$5;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-upgrade.js
var require_api_upgrade$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-upgrade.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$40, RequestAbortedError: RequestAbortedError$11, SocketError: SocketError$6 } = require_errors$1();
	const { AsyncResource: AsyncResource$6 } = __require("async_hooks");
	const util$27 = require_util$12();
	const { addSignal: addSignal$6, removeSignal: removeSignal$6 } = require_abort_signal$1();
	const assert$39 = __require("assert");
	var UpgradeHandler$1 = class extends AsyncResource$6 {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$40("invalid opts");
			if (typeof callback !== "function") throw new InvalidArgumentError$40("invalid callback");
			const { signal, opaque, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$40("signal must be an EventEmitter or EventTarget");
			super("UNDICI_UPGRADE");
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.callback = callback;
			this.abort = null;
			this.context = null;
			addSignal$6(this, signal);
		}
		onConnect(abort$2, context$1) {
			if (!this.callback) throw new RequestAbortedError$11();
			this.abort = abort$2;
			this.context = null;
		}
		onHeaders() {
			throw new SocketError$6("bad upgrade", null);
		}
		onUpgrade(statusCode, rawHeaders, socket) {
			const { callback, opaque, context: context$1 } = this;
			assert$39.strictEqual(statusCode, 101);
			removeSignal$6(this);
			this.callback = null;
			const headers = this.responseHeaders === "raw" ? util$27.parseRawHeaders(rawHeaders) : util$27.parseHeaders(rawHeaders);
			this.runInAsyncScope(callback, null, null, {
				headers,
				socket,
				opaque,
				context: context$1
			});
		}
		onError(err) {
			const { callback, opaque } = this;
			removeSignal$6(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
		}
	};
	function upgrade$1(opts, callback) {
		if (callback === void 0) return new Promise((resolve$1, reject) => {
			upgrade$1.call(this, opts, (err, data$1) => {
				return err ? reject(err) : resolve$1(data$1);
			});
		});
		try {
			const upgradeHandler = new UpgradeHandler$1(opts, callback);
			this.dispatch({
				...opts,
				method: opts.method || "GET",
				upgrade: opts.protocol || "Websocket"
			}, upgradeHandler);
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = upgrade$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-connect.js
var require_api_connect$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-connect.js"(exports, module) {
	const { AsyncResource: AsyncResource$5 } = __require("async_hooks");
	const { InvalidArgumentError: InvalidArgumentError$39, RequestAbortedError: RequestAbortedError$10, SocketError: SocketError$5 } = require_errors$1();
	const util$26 = require_util$12();
	const { addSignal: addSignal$5, removeSignal: removeSignal$5 } = require_abort_signal$1();
	var ConnectHandler$1 = class extends AsyncResource$5 {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$39("invalid opts");
			if (typeof callback !== "function") throw new InvalidArgumentError$39("invalid callback");
			const { signal, opaque, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$39("signal must be an EventEmitter or EventTarget");
			super("UNDICI_CONNECT");
			this.opaque = opaque || null;
			this.responseHeaders = responseHeaders || null;
			this.callback = callback;
			this.abort = null;
			addSignal$5(this, signal);
		}
		onConnect(abort$2, context$1) {
			if (!this.callback) throw new RequestAbortedError$10();
			this.abort = abort$2;
			this.context = context$1;
		}
		onHeaders() {
			throw new SocketError$5("bad connect", null);
		}
		onUpgrade(statusCode, rawHeaders, socket) {
			const { callback, opaque, context: context$1 } = this;
			removeSignal$5(this);
			this.callback = null;
			let headers = rawHeaders;
			if (headers != null) headers = this.responseHeaders === "raw" ? util$26.parseRawHeaders(rawHeaders) : util$26.parseHeaders(rawHeaders);
			this.runInAsyncScope(callback, null, null, {
				statusCode,
				headers,
				socket,
				opaque,
				context: context$1
			});
		}
		onError(err) {
			const { callback, opaque } = this;
			removeSignal$5(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
		}
	};
	function connect$3(opts, callback) {
		if (callback === void 0) return new Promise((resolve$1, reject) => {
			connect$3.call(this, opts, (err, data$1) => {
				return err ? reject(err) : resolve$1(data$1);
			});
		});
		try {
			const connectHandler = new ConnectHandler$1(opts, callback);
			this.dispatch({
				...opts,
				method: "CONNECT"
			}, connectHandler);
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = connect$3;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/index.js
var require_api$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/index.js"(exports, module) {
	module.exports.request = require_api_request$1();
	module.exports.stream = require_api_stream$1();
	module.exports.pipeline = require_api_pipeline$1();
	module.exports.upgrade = require_api_upgrade$1();
	module.exports.connect = require_api_connect$1();
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-errors.js
var require_mock_errors$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-errors.js"(exports, module) {
	const { UndiciError: UndiciError$4 } = require_errors$1();
	var MockNotMatchedError$3 = class MockNotMatchedError$3 extends UndiciError$4 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, MockNotMatchedError$3);
			this.name = "MockNotMatchedError";
			this.message = message || "The request does not match any registered mock dispatches";
			this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
		}
	};
	module.exports = { MockNotMatchedError: MockNotMatchedError$3 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-symbols.js
var require_mock_symbols$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-symbols.js"(exports, module) {
	module.exports = {
		kAgent: Symbol("agent"),
		kOptions: Symbol("options"),
		kFactory: Symbol("factory"),
		kDispatches: Symbol("dispatches"),
		kDispatchKey: Symbol("dispatch key"),
		kDefaultHeaders: Symbol("default headers"),
		kDefaultTrailers: Symbol("default trailers"),
		kContentLength: Symbol("content length"),
		kMockAgent: Symbol("mock agent"),
		kMockAgentSet: Symbol("mock agent set"),
		kMockAgentGet: Symbol("mock agent get"),
		kMockDispatch: Symbol("mock dispatch"),
		kClose: Symbol("close"),
		kOriginalClose: Symbol("original agent close"),
		kOrigin: Symbol("origin"),
		kIsMockActive: Symbol("is mock active"),
		kNetConnect: Symbol("net connect"),
		kGetNetConnect: Symbol("get net connect"),
		kConnected: Symbol("connected")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-utils.js
var require_mock_utils$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-utils.js"(exports, module) {
	const { MockNotMatchedError: MockNotMatchedError$2 } = require_mock_errors$1();
	const { kDispatches: kDispatches$9, kMockAgent: kMockAgent$5, kOriginalDispatch: kOriginalDispatch$5, kOrigin: kOrigin$5, kGetNetConnect: kGetNetConnect$3 } = require_mock_symbols$1();
	const { buildURL: buildURL$1, nop } = require_util$12();
	const { STATUS_CODES: STATUS_CODES$3 } = __require("http");
	const { types: { isPromise: isPromise$1 } } = __require("util");
	function matchValue$3(match$1, value) {
		if (typeof match$1 === "string") return match$1 === value;
		if (match$1 instanceof RegExp) return match$1.test(value);
		if (typeof match$1 === "function") return match$1(value) === true;
		return false;
	}
	function lowerCaseEntries$1(headers) {
		return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue]) => {
			return [headerName.toLocaleLowerCase(), headerValue];
		}));
	}
	/**
	* @param {import('../../index').Headers|string[]|Record<string, string>} headers
	* @param {string} key
	*/
	function getHeaderByName$1(headers, key) {
		if (Array.isArray(headers)) {
			for (let i$1 = 0; i$1 < headers.length; i$1 += 2) if (headers[i$1].toLocaleLowerCase() === key.toLocaleLowerCase()) return headers[i$1 + 1];
			return void 0;
		} else if (typeof headers.get === "function") return headers.get(key);
		else return lowerCaseEntries$1(headers)[key.toLocaleLowerCase()];
	}
	/** @param {string[]} headers */
	function buildHeadersFromArray$1(headers) {
		const clone = headers.slice();
		const entries = [];
		for (let index = 0; index < clone.length; index += 2) entries.push([clone[index], clone[index + 1]]);
		return Object.fromEntries(entries);
	}
	function matchHeaders$1(mockDispatch$2, headers) {
		if (typeof mockDispatch$2.headers === "function") {
			if (Array.isArray(headers)) headers = buildHeadersFromArray$1(headers);
			return mockDispatch$2.headers(headers ? lowerCaseEntries$1(headers) : {});
		}
		if (typeof mockDispatch$2.headers === "undefined") return true;
		if (typeof headers !== "object" || typeof mockDispatch$2.headers !== "object") return false;
		for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch$2.headers)) {
			const headerValue = getHeaderByName$1(headers, matchHeaderName);
			if (!matchValue$3(matchHeaderValue, headerValue)) return false;
		}
		return true;
	}
	function safeUrl$1(path$9) {
		if (typeof path$9 !== "string") return path$9;
		const pathSegments = path$9.split("?");
		if (pathSegments.length !== 2) return path$9;
		const qp = new URLSearchParams(pathSegments.pop());
		qp.sort();
		return [...pathSegments, qp.toString()].join("?");
	}
	function matchKey$1(mockDispatch$2, { path: path$9, method, body, headers }) {
		const pathMatch = matchValue$3(mockDispatch$2.path, path$9);
		const methodMatch = matchValue$3(mockDispatch$2.method, method);
		const bodyMatch = typeof mockDispatch$2.body !== "undefined" ? matchValue$3(mockDispatch$2.body, body) : true;
		const headersMatch = matchHeaders$1(mockDispatch$2, headers);
		return pathMatch && methodMatch && bodyMatch && headersMatch;
	}
	function getResponseData$4(data$1) {
		if (Buffer.isBuffer(data$1)) return data$1;
		else if (typeof data$1 === "object") return JSON.stringify(data$1);
		else return data$1.toString();
	}
	function getMockDispatch$1(mockDispatches, key) {
		const basePath = key.query ? buildURL$1(key.path, key.query) : key.path;
		const resolvedPath = typeof basePath === "string" ? safeUrl$1(basePath) : basePath;
		let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path: path$9 }) => matchValue$3(safeUrl$1(path$9), resolvedPath));
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError$2(`Mock dispatch not matched for path '${resolvedPath}'`);
		matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue$3(method, key.method));
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError$2(`Mock dispatch not matched for method '${key.method}'`);
		matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== "undefined" ? matchValue$3(body, key.body) : true);
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError$2(`Mock dispatch not matched for body '${key.body}'`);
		matchedMockDispatches = matchedMockDispatches.filter((mockDispatch$2) => matchHeaders$1(mockDispatch$2, key.headers));
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError$2(`Mock dispatch not matched for headers '${typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers}'`);
		return matchedMockDispatches[0];
	}
	function addMockDispatch$3(mockDispatches, key, data$1) {
		const baseData = {
			timesInvoked: 0,
			times: 1,
			persist: false,
			consumed: false
		};
		const replyData = typeof data$1 === "function" ? { callback: data$1 } : { ...data$1 };
		const newMockDispatch = {
			...baseData,
			...key,
			pending: true,
			data: {
				error: null,
				...replyData
			}
		};
		mockDispatches.push(newMockDispatch);
		return newMockDispatch;
	}
	function deleteMockDispatch$1(mockDispatches, key) {
		const index = mockDispatches.findIndex((dispatch) => {
			if (!dispatch.consumed) return false;
			return matchKey$1(dispatch, key);
		});
		if (index !== -1) mockDispatches.splice(index, 1);
	}
	function buildKey$3(opts) {
		const { path: path$9, method, body, headers, query } = opts;
		return {
			path: path$9,
			method,
			body,
			headers,
			query
		};
	}
	function generateKeyValues$1(data$1) {
		return Object.entries(data$1).reduce((keyValuePairs, [key, value]) => [
			...keyValuePairs,
			Buffer.from(`${key}`),
			Array.isArray(value) ? value.map((x) => Buffer.from(`${x}`)) : Buffer.from(`${value}`)
		], []);
	}
	/**
	* @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
	* @param {number} statusCode
	*/
	function getStatusText$1(statusCode) {
		return STATUS_CODES$3[statusCode] || "unknown";
	}
	async function getResponse$1(body) {
		const buffers = [];
		for await (const data$1 of body) buffers.push(data$1);
		return Buffer.concat(buffers).toString("utf8");
	}
	/**
	* Mock dispatch function used to simulate undici dispatches
	*/
	function mockDispatch$1(opts, handler$1) {
		const key = buildKey$3(opts);
		const mockDispatch$2 = getMockDispatch$1(this[kDispatches$9], key);
		mockDispatch$2.timesInvoked++;
		if (mockDispatch$2.data.callback) mockDispatch$2.data = {
			...mockDispatch$2.data,
			...mockDispatch$2.data.callback(opts)
		};
		const { data: { statusCode, data: data$1, headers, trailers, error: error$1 }, delay: delay$3, persist } = mockDispatch$2;
		const { timesInvoked, times } = mockDispatch$2;
		mockDispatch$2.consumed = !persist && timesInvoked >= times;
		mockDispatch$2.pending = timesInvoked < times;
		if (error$1 !== null) {
			deleteMockDispatch$1(this[kDispatches$9], key);
			handler$1.onError(error$1);
			return true;
		}
		if (typeof delay$3 === "number" && delay$3 > 0) setTimeout(() => {
			handleReply(this[kDispatches$9]);
		}, delay$3);
		else handleReply(this[kDispatches$9]);
		function handleReply(mockDispatches, _data = data$1) {
			const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray$1(opts.headers) : opts.headers;
			const body = typeof _data === "function" ? _data({
				...opts,
				headers: optsHeaders
			}) : _data;
			if (isPromise$1(body)) {
				body.then((newData) => handleReply(mockDispatches, newData));
				return;
			}
			const responseData = getResponseData$4(body);
			const responseHeaders = generateKeyValues$1(headers);
			const responseTrailers = generateKeyValues$1(trailers);
			handler$1.abort = nop;
			handler$1.onHeaders(statusCode, responseHeaders, resume$2, getStatusText$1(statusCode));
			handler$1.onData(Buffer.from(responseData));
			handler$1.onComplete(responseTrailers);
			deleteMockDispatch$1(mockDispatches, key);
		}
		function resume$2() {}
		return true;
	}
	function buildMockDispatch$5() {
		const agent = this[kMockAgent$5];
		const origin = this[kOrigin$5];
		const originalDispatch = this[kOriginalDispatch$5];
		return function dispatch(opts, handler$1) {
			if (agent.isMockActive) try {
				mockDispatch$1.call(this, opts, handler$1);
			} catch (error$1) {
				if (error$1 instanceof MockNotMatchedError$2) {
					const netConnect = agent[kGetNetConnect$3]();
					if (netConnect === false) throw new MockNotMatchedError$2(`${error$1.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
					if (checkNetConnect$1(netConnect, origin)) originalDispatch.call(this, opts, handler$1);
					else throw new MockNotMatchedError$2(`${error$1.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
				} else throw error$1;
			}
			else originalDispatch.call(this, opts, handler$1);
		};
	}
	function checkNetConnect$1(netConnect, origin) {
		const url = new URL(origin);
		if (netConnect === true) return true;
		else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue$3(matcher, url.host))) return true;
		return false;
	}
	function buildMockOptions$1(opts) {
		if (opts) {
			const { agent,...mockOptions } = opts;
			return mockOptions;
		}
	}
	module.exports = {
		getResponseData: getResponseData$4,
		getMockDispatch: getMockDispatch$1,
		addMockDispatch: addMockDispatch$3,
		deleteMockDispatch: deleteMockDispatch$1,
		buildKey: buildKey$3,
		generateKeyValues: generateKeyValues$1,
		matchValue: matchValue$3,
		getResponse: getResponse$1,
		getStatusText: getStatusText$1,
		mockDispatch: mockDispatch$1,
		buildMockDispatch: buildMockDispatch$5,
		checkNetConnect: checkNetConnect$1,
		buildMockOptions: buildMockOptions$1,
		getHeaderByName: getHeaderByName$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-interceptor.js
var require_mock_interceptor$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-interceptor.js"(exports, module) {
	const { getResponseData: getResponseData$3, buildKey: buildKey$2, addMockDispatch: addMockDispatch$2 } = require_mock_utils$1();
	const { kDispatches: kDispatches$8, kDispatchKey: kDispatchKey$1, kDefaultHeaders: kDefaultHeaders$1, kDefaultTrailers: kDefaultTrailers$1, kContentLength: kContentLength$2, kMockDispatch: kMockDispatch$1 } = require_mock_symbols$1();
	const { InvalidArgumentError: InvalidArgumentError$38 } = require_errors$1();
	const { buildURL } = require_util$12();
	/**
	* Defines the scope API for an interceptor reply
	*/
	var MockScope$1 = class {
		constructor(mockDispatch$2) {
			this[kMockDispatch$1] = mockDispatch$2;
		}
		/**
		* Delay a reply by a set amount in ms.
		*/
		delay(waitInMs) {
			if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) throw new InvalidArgumentError$38("waitInMs must be a valid integer > 0");
			this[kMockDispatch$1].delay = waitInMs;
			return this;
		}
		/**
		* For a defined reply, never mark as consumed.
		*/
		persist() {
			this[kMockDispatch$1].persist = true;
			return this;
		}
		/**
		* Allow one to define a reply for a set amount of matching requests.
		*/
		times(repeatTimes) {
			if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) throw new InvalidArgumentError$38("repeatTimes must be a valid integer > 0");
			this[kMockDispatch$1].times = repeatTimes;
			return this;
		}
	};
	/**
	* Defines an interceptor for a Mock
	*/
	var MockInterceptor$5 = class {
		constructor(opts, mockDispatches) {
			if (typeof opts !== "object") throw new InvalidArgumentError$38("opts must be an object");
			if (typeof opts.path === "undefined") throw new InvalidArgumentError$38("opts.path must be defined");
			if (typeof opts.method === "undefined") opts.method = "GET";
			if (typeof opts.path === "string") if (opts.query) opts.path = buildURL(opts.path, opts.query);
			else {
				const parsedURL = new URL(opts.path, "data://");
				opts.path = parsedURL.pathname + parsedURL.search;
			}
			if (typeof opts.method === "string") opts.method = opts.method.toUpperCase();
			this[kDispatchKey$1] = buildKey$2(opts);
			this[kDispatches$8] = mockDispatches;
			this[kDefaultHeaders$1] = {};
			this[kDefaultTrailers$1] = {};
			this[kContentLength$2] = false;
		}
		createMockScopeDispatchData(statusCode, data$1, responseOptions = {}) {
			const responseData = getResponseData$3(data$1);
			const contentLength = this[kContentLength$2] ? { "content-length": responseData.length } : {};
			const headers = {
				...this[kDefaultHeaders$1],
				...contentLength,
				...responseOptions.headers
			};
			const trailers = {
				...this[kDefaultTrailers$1],
				...responseOptions.trailers
			};
			return {
				statusCode,
				data: data$1,
				headers,
				trailers
			};
		}
		validateReplyParameters(statusCode, data$1, responseOptions) {
			if (typeof statusCode === "undefined") throw new InvalidArgumentError$38("statusCode must be defined");
			if (typeof data$1 === "undefined") throw new InvalidArgumentError$38("data must be defined");
			if (typeof responseOptions !== "object") throw new InvalidArgumentError$38("responseOptions must be an object");
		}
		/**
		* Mock an undici request with a defined reply.
		*/
		reply(replyData) {
			if (typeof replyData === "function") {
				const wrappedDefaultsCallback = (opts) => {
					const resolvedData = replyData(opts);
					if (typeof resolvedData !== "object") throw new InvalidArgumentError$38("reply options callback must return an object");
					const { statusCode: statusCode$1, data: data$2 = "", responseOptions: responseOptions$1 = {} } = resolvedData;
					this.validateReplyParameters(statusCode$1, data$2, responseOptions$1);
					return { ...this.createMockScopeDispatchData(statusCode$1, data$2, responseOptions$1) };
				};
				const newMockDispatch$1 = addMockDispatch$2(this[kDispatches$8], this[kDispatchKey$1], wrappedDefaultsCallback);
				return new MockScope$1(newMockDispatch$1);
			}
			const [statusCode, data$1 = "", responseOptions = {}] = [...arguments];
			this.validateReplyParameters(statusCode, data$1, responseOptions);
			const dispatchData = this.createMockScopeDispatchData(statusCode, data$1, responseOptions);
			const newMockDispatch = addMockDispatch$2(this[kDispatches$8], this[kDispatchKey$1], dispatchData);
			return new MockScope$1(newMockDispatch);
		}
		/**
		* Mock an undici request with a defined error.
		*/
		replyWithError(error$1) {
			if (typeof error$1 === "undefined") throw new InvalidArgumentError$38("error must be defined");
			const newMockDispatch = addMockDispatch$2(this[kDispatches$8], this[kDispatchKey$1], { error: error$1 });
			return new MockScope$1(newMockDispatch);
		}
		/**
		* Set default reply headers on the interceptor for subsequent replies
		*/
		defaultReplyHeaders(headers) {
			if (typeof headers === "undefined") throw new InvalidArgumentError$38("headers must be defined");
			this[kDefaultHeaders$1] = headers;
			return this;
		}
		/**
		* Set default reply trailers on the interceptor for subsequent replies
		*/
		defaultReplyTrailers(trailers) {
			if (typeof trailers === "undefined") throw new InvalidArgumentError$38("trailers must be defined");
			this[kDefaultTrailers$1] = trailers;
			return this;
		}
		/**
		* Set reply content length header for replies on the interceptor
		*/
		replyContentLength() {
			this[kContentLength$2] = true;
			return this;
		}
	};
	module.exports.MockInterceptor = MockInterceptor$5;
	module.exports.MockScope = MockScope$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-client.js
var require_mock_client$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-client.js"(exports, module) {
	const { promisify: promisify$4 } = __require("util");
	const Client$8 = require_client$1();
	const { buildMockDispatch: buildMockDispatch$4 } = require_mock_utils$1();
	const { kDispatches: kDispatches$7, kMockAgent: kMockAgent$4, kClose: kClose$11, kOriginalClose: kOriginalClose$3, kOrigin: kOrigin$4, kOriginalDispatch: kOriginalDispatch$4, kConnected: kConnected$6 } = require_mock_symbols$1();
	const { MockInterceptor: MockInterceptor$4 } = require_mock_interceptor$1();
	const Symbols$3 = require_symbols$5();
	const { InvalidArgumentError: InvalidArgumentError$37 } = require_errors$1();
	/**
	* MockClient provides an API that extends the Client to influence the mockDispatches.
	*/
	var MockClient$5 = class extends Client$8 {
		constructor(origin, opts) {
			super(origin, opts);
			if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$37("Argument opts.agent must implement Agent");
			this[kMockAgent$4] = opts.agent;
			this[kOrigin$4] = origin;
			this[kDispatches$7] = [];
			this[kConnected$6] = 1;
			this[kOriginalDispatch$4] = this.dispatch;
			this[kOriginalClose$3] = this.close.bind(this);
			this.dispatch = buildMockDispatch$4.call(this);
			this.close = this[kClose$11];
		}
		get [Symbols$3.kConnected]() {
			return this[kConnected$6];
		}
		/**
		* Sets up the base interceptor for mocking replies from undici.
		*/
		intercept(opts) {
			return new MockInterceptor$4(opts, this[kDispatches$7]);
		}
		async [kClose$11]() {
			await promisify$4(this[kOriginalClose$3])();
			this[kConnected$6] = 0;
			this[kMockAgent$4][Symbols$3.kClients].delete(this[kOrigin$4]);
		}
	};
	module.exports = MockClient$5;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-pool.js
var require_mock_pool$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-pool.js"(exports, module) {
	const { promisify: promisify$3 } = __require("util");
	const Pool$8 = require_pool$1();
	const { buildMockDispatch: buildMockDispatch$3 } = require_mock_utils$1();
	const { kDispatches: kDispatches$6, kMockAgent: kMockAgent$3, kClose: kClose$10, kOriginalClose: kOriginalClose$2, kOrigin: kOrigin$3, kOriginalDispatch: kOriginalDispatch$3, kConnected: kConnected$5 } = require_mock_symbols$1();
	const { MockInterceptor: MockInterceptor$3 } = require_mock_interceptor$1();
	const Symbols$2 = require_symbols$5();
	const { InvalidArgumentError: InvalidArgumentError$36 } = require_errors$1();
	/**
	* MockPool provides an API that extends the Pool to influence the mockDispatches.
	*/
	var MockPool$5 = class extends Pool$8 {
		constructor(origin, opts) {
			super(origin, opts);
			if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$36("Argument opts.agent must implement Agent");
			this[kMockAgent$3] = opts.agent;
			this[kOrigin$3] = origin;
			this[kDispatches$6] = [];
			this[kConnected$5] = 1;
			this[kOriginalDispatch$3] = this.dispatch;
			this[kOriginalClose$2] = this.close.bind(this);
			this.dispatch = buildMockDispatch$3.call(this);
			this.close = this[kClose$10];
		}
		get [Symbols$2.kConnected]() {
			return this[kConnected$5];
		}
		/**
		* Sets up the base interceptor for mocking replies from undici.
		*/
		intercept(opts) {
			return new MockInterceptor$3(opts, this[kDispatches$6]);
		}
		async [kClose$10]() {
			await promisify$3(this[kOriginalClose$2])();
			this[kConnected$5] = 0;
			this[kMockAgent$3][Symbols$2.kClients].delete(this[kOrigin$3]);
		}
	};
	module.exports = MockPool$5;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/pluralizer.js
var require_pluralizer = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/pluralizer.js"(exports, module) {
	const singulars = {
		pronoun: "it",
		is: "is",
		was: "was",
		this: "this"
	};
	const plurals = {
		pronoun: "they",
		is: "are",
		was: "were",
		this: "these"
	};
	module.exports = class Pluralizer$1 {
		constructor(singular, plural) {
			this.singular = singular;
			this.plural = plural;
		}
		pluralize(count$1) {
			const one = count$1 === 1;
			const keys$1 = one ? singulars : plurals;
			const noun = one ? this.singular : this.plural;
			return {
				...keys$1,
				count: count$1,
				noun
			};
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/pending-interceptors-formatter.js
var require_pending_interceptors_formatter$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/pending-interceptors-formatter.js"(exports, module) {
	const { Transform: Transform$4 } = __require("stream");
	const { Console: Console$1 } = __require("console");
	/**
	* Gets the output of `console.table(…)` as a string.
	*/
	module.exports = class PendingInterceptorsFormatter$2 {
		constructor({ disableColors } = {}) {
			this.transform = new Transform$4({ transform(chunk, _enc, cb) {
				cb(null, chunk);
			} });
			this.logger = new Console$1({
				stdout: this.transform,
				inspectOptions: { colors: !disableColors && !process.env.CI }
			});
		}
		format(pendingInterceptors) {
			const withPrettyHeaders = pendingInterceptors.map(({ method, path: path$9, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
				Method: method,
				Origin: origin,
				Path: path$9,
				"Status code": statusCode,
				Persistent: persist ? "✅" : "❌",
				Invocations: timesInvoked,
				Remaining: persist ? Infinity : times - timesInvoked
			}));
			this.logger.table(withPrettyHeaders);
			return this.transform.read().toString();
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-agent.js
var require_mock_agent$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-agent.js"(exports, module) {
	const { kClients: kClients$5 } = require_symbols$5();
	const Agent$9 = require_agent$1();
	const { kAgent: kAgent$3, kMockAgentSet: kMockAgentSet$1, kMockAgentGet: kMockAgentGet$1, kDispatches: kDispatches$5, kIsMockActive: kIsMockActive$1, kNetConnect: kNetConnect$1, kGetNetConnect: kGetNetConnect$2, kOptions: kOptions$4, kFactory: kFactory$4 } = require_mock_symbols$1();
	const MockClient$4 = require_mock_client$1();
	const MockPool$4 = require_mock_pool$1();
	const { matchValue: matchValue$2, buildMockOptions } = require_mock_utils$1();
	const { InvalidArgumentError: InvalidArgumentError$35, UndiciError: UndiciError$3 } = require_errors$1();
	const Dispatcher$6 = require_dispatcher$1();
	const Pluralizer = require_pluralizer();
	const PendingInterceptorsFormatter$1 = require_pending_interceptors_formatter$1();
	var FakeWeakRef = class {
		constructor(value) {
			this.value = value;
		}
		deref() {
			return this.value;
		}
	};
	var MockAgent$3 = class extends Dispatcher$6 {
		constructor(opts) {
			super(opts);
			this[kNetConnect$1] = true;
			this[kIsMockActive$1] = true;
			if (opts && opts.agent && typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$35("Argument opts.agent must implement Agent");
			const agent = opts && opts.agent ? opts.agent : new Agent$9(opts);
			this[kAgent$3] = agent;
			this[kClients$5] = agent[kClients$5];
			this[kOptions$4] = buildMockOptions(opts);
		}
		get(origin) {
			let dispatcher = this[kMockAgentGet$1](origin);
			if (!dispatcher) {
				dispatcher = this[kFactory$4](origin);
				this[kMockAgentSet$1](origin, dispatcher);
			}
			return dispatcher;
		}
		dispatch(opts, handler$1) {
			this.get(opts.origin);
			return this[kAgent$3].dispatch(opts, handler$1);
		}
		async close() {
			await this[kAgent$3].close();
			this[kClients$5].clear();
		}
		deactivate() {
			this[kIsMockActive$1] = false;
		}
		activate() {
			this[kIsMockActive$1] = true;
		}
		enableNetConnect(matcher) {
			if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) if (Array.isArray(this[kNetConnect$1])) this[kNetConnect$1].push(matcher);
			else this[kNetConnect$1] = [matcher];
			else if (typeof matcher === "undefined") this[kNetConnect$1] = true;
			else throw new InvalidArgumentError$35("Unsupported matcher. Must be one of String|Function|RegExp.");
		}
		disableNetConnect() {
			this[kNetConnect$1] = false;
		}
		get isMockActive() {
			return this[kIsMockActive$1];
		}
		[kMockAgentSet$1](origin, dispatcher) {
			this[kClients$5].set(origin, new FakeWeakRef(dispatcher));
		}
		[kFactory$4](origin) {
			const mockOptions = Object.assign({ agent: this }, this[kOptions$4]);
			return this[kOptions$4] && this[kOptions$4].connections === 1 ? new MockClient$4(origin, mockOptions) : new MockPool$4(origin, mockOptions);
		}
		[kMockAgentGet$1](origin) {
			const ref = this[kClients$5].get(origin);
			if (ref) return ref.deref();
			if (typeof origin !== "string") {
				const dispatcher = this[kFactory$4]("http://localhost:9999");
				this[kMockAgentSet$1](origin, dispatcher);
				return dispatcher;
			}
			for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients$5])) {
				const nonExplicitDispatcher = nonExplicitRef.deref();
				if (nonExplicitDispatcher && typeof keyMatcher !== "string" && matchValue$2(keyMatcher, origin)) {
					const dispatcher = this[kFactory$4](origin);
					this[kMockAgentSet$1](origin, dispatcher);
					dispatcher[kDispatches$5] = nonExplicitDispatcher[kDispatches$5];
					return dispatcher;
				}
			}
		}
		[kGetNetConnect$2]() {
			return this[kNetConnect$1];
		}
		pendingInterceptors() {
			const mockAgentClients = this[kClients$5];
			return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope.deref()[kDispatches$5].map((dispatch) => ({
				...dispatch,
				origin
			}))).filter(({ pending }) => pending);
		}
		assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter$1() } = {}) {
			const pending = this.pendingInterceptors();
			if (pending.length === 0) return;
			const pluralizer = new Pluralizer("interceptor", "interceptors").pluralize(pending.length);
			throw new UndiciError$3(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
		}
	};
	module.exports = MockAgent$3;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/proxy-agent.js
var require_proxy_agent$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/proxy-agent.js"(exports, module) {
	const { kProxy: kProxy$1, kClose: kClose$9, kDestroy: kDestroy$7, kInterceptors } = require_symbols$5();
	const { URL: URL$2 } = __require("url");
	const Agent$8 = require_agent$1();
	const Pool$7 = require_pool$1();
	const DispatcherBase$7 = require_dispatcher_base$1();
	const { InvalidArgumentError: InvalidArgumentError$34, RequestAbortedError: RequestAbortedError$9 } = require_errors$1();
	const buildConnector$6 = require_connect$1();
	const kAgent$2 = Symbol("proxy agent");
	const kClient$4 = Symbol("proxy client");
	const kProxyHeaders$1 = Symbol("proxy headers");
	const kRequestTls$1 = Symbol("request tls settings");
	const kProxyTls$1 = Symbol("proxy tls settings");
	const kConnectEndpoint$1 = Symbol("connect endpoint function");
	function defaultProtocolPort$1(protocol) {
		return protocol === "https:" ? 443 : 80;
	}
	function buildProxyOptions(opts) {
		if (typeof opts === "string") opts = { uri: opts };
		if (!opts || !opts.uri) throw new InvalidArgumentError$34("Proxy opts.uri is mandatory");
		return {
			uri: opts.uri,
			protocol: opts.protocol || "https"
		};
	}
	function defaultFactory$4(origin, opts) {
		return new Pool$7(origin, opts);
	}
	var ProxyAgent$5 = class extends DispatcherBase$7 {
		constructor(opts) {
			super(opts);
			this[kProxy$1] = buildProxyOptions(opts);
			this[kAgent$2] = new Agent$8(opts);
			this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
			if (typeof opts === "string") opts = { uri: opts };
			if (!opts || !opts.uri) throw new InvalidArgumentError$34("Proxy opts.uri is mandatory");
			const { clientFactory = defaultFactory$4 } = opts;
			if (typeof clientFactory !== "function") throw new InvalidArgumentError$34("Proxy opts.clientFactory must be a function.");
			this[kRequestTls$1] = opts.requestTls;
			this[kProxyTls$1] = opts.proxyTls;
			this[kProxyHeaders$1] = opts.headers || {};
			const resolvedUrl = new URL$2(opts.uri);
			const { origin, port, host, username, password } = resolvedUrl;
			if (opts.auth && opts.token) throw new InvalidArgumentError$34("opts.auth cannot be used in combination with opts.token");
			else if (opts.auth) this[kProxyHeaders$1]["proxy-authorization"] = `Basic ${opts.auth}`;
			else if (opts.token) this[kProxyHeaders$1]["proxy-authorization"] = opts.token;
			else if (username && password) this[kProxyHeaders$1]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
			const connect$5 = buildConnector$6({ ...opts.proxyTls });
			this[kConnectEndpoint$1] = buildConnector$6({ ...opts.requestTls });
			this[kClient$4] = clientFactory(resolvedUrl, { connect: connect$5 });
			this[kAgent$2] = new Agent$8({
				...opts,
				connect: async (opts$1, callback) => {
					let requestedHost = opts$1.host;
					if (!opts$1.port) requestedHost += `:${defaultProtocolPort$1(opts$1.protocol)}`;
					try {
						const { socket, statusCode } = await this[kClient$4].connect({
							origin,
							port,
							path: requestedHost,
							signal: opts$1.signal,
							headers: {
								...this[kProxyHeaders$1],
								host
							}
						});
						if (statusCode !== 200) {
							socket.on("error", () => {}).destroy();
							callback(new RequestAbortedError$9(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
						}
						if (opts$1.protocol !== "https:") {
							callback(null, socket);
							return;
						}
						let servername;
						if (this[kRequestTls$1]) servername = this[kRequestTls$1].servername;
						else servername = opts$1.servername;
						this[kConnectEndpoint$1]({
							...opts$1,
							servername,
							httpSocket: socket
						}, callback);
					} catch (err) {
						callback(err);
					}
				}
			});
		}
		dispatch(opts, handler$1) {
			const { host } = new URL$2(opts.origin);
			const headers = buildHeaders$1(opts.headers);
			throwIfProxyAuthIsSent$1(headers);
			return this[kAgent$2].dispatch({
				...opts,
				headers: {
					...headers,
					host
				}
			}, handler$1);
		}
		async [kClose$9]() {
			await this[kAgent$2].close();
			await this[kClient$4].close();
		}
		async [kDestroy$7]() {
			await this[kAgent$2].destroy();
			await this[kClient$4].destroy();
		}
	};
	/**
	* @param {string[] | Record<string, string>} headers
	* @returns {Record<string, string>}
	*/
	function buildHeaders$1(headers) {
		if (Array.isArray(headers)) {
			/** @type {Record<string, string>} */
			const headersPair = {};
			for (let i$1 = 0; i$1 < headers.length; i$1 += 2) headersPair[headers[i$1]] = headers[i$1 + 1];
			return headersPair;
		}
		return headers;
	}
	/**
	* @param {Record<string, string>} headers
	*
	* Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
	* Nevertheless, it was changed and to avoid a security vulnerability by end users
	* this check was created.
	* It should be removed in the next major version for performance reasons
	*/
	function throwIfProxyAuthIsSent$1(headers) {
		const existProxyAuth = headers && Object.keys(headers).find((key) => key.toLowerCase() === "proxy-authorization");
		if (existProxyAuth) throw new InvalidArgumentError$34("Proxy-Authorization should be sent in ProxyAgent constructor");
	}
	module.exports = ProxyAgent$5;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/handler/RetryHandler.js
var require_RetryHandler = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/handler/RetryHandler.js"(exports, module) {
	const assert$38 = __require("assert");
	const { kRetryHandlerDefaultRetry: kRetryHandlerDefaultRetry$1 } = require_symbols$5();
	const { RequestRetryError: RequestRetryError$2 } = require_errors$1();
	const { isDisturbed: isDisturbed$5, parseHeaders: parseHeaders$2, parseRangeHeader: parseRangeHeader$2 } = require_util$12();
	function calculateRetryAfterHeader$1(retryAfter) {
		const current = Date.now();
		const diff = new Date(retryAfter).getTime() - current;
		return diff;
	}
	var RetryHandler$5 = class RetryHandler$5 {
		constructor(opts, handlers) {
			const { retryOptions,...dispatchOpts } = opts;
			const { retry: retryFn, maxRetries, maxTimeout, minTimeout, timeoutFactor, methods, errorCodes, retryAfter, statusCodes } = retryOptions ?? {};
			this.dispatch = handlers.dispatch;
			this.handler = handlers.handler;
			this.opts = dispatchOpts;
			this.abort = null;
			this.aborted = false;
			this.retryOpts = {
				retry: retryFn ?? RetryHandler$5[kRetryHandlerDefaultRetry$1],
				retryAfter: retryAfter ?? true,
				maxTimeout: maxTimeout ?? 30 * 1e3,
				timeout: minTimeout ?? 500,
				timeoutFactor: timeoutFactor ?? 2,
				maxRetries: maxRetries ?? 5,
				methods: methods ?? [
					"GET",
					"HEAD",
					"OPTIONS",
					"PUT",
					"DELETE",
					"TRACE"
				],
				statusCodes: statusCodes ?? [
					500,
					502,
					503,
					504,
					429
				],
				errorCodes: errorCodes ?? [
					"ECONNRESET",
					"ECONNREFUSED",
					"ENOTFOUND",
					"ENETDOWN",
					"ENETUNREACH",
					"EHOSTDOWN",
					"EHOSTUNREACH",
					"EPIPE"
				]
			};
			this.retryCount = 0;
			this.start = 0;
			this.end = null;
			this.etag = null;
			this.resume = null;
			this.handler.onConnect((reason) => {
				this.aborted = true;
				if (this.abort) this.abort(reason);
				else this.reason = reason;
			});
		}
		onRequestSent() {
			if (this.handler.onRequestSent) this.handler.onRequestSent();
		}
		onUpgrade(statusCode, headers, socket) {
			if (this.handler.onUpgrade) this.handler.onUpgrade(statusCode, headers, socket);
		}
		onConnect(abort$2) {
			if (this.aborted) abort$2(this.reason);
			else this.abort = abort$2;
		}
		onBodySent(chunk) {
			if (this.handler.onBodySent) return this.handler.onBodySent(chunk);
		}
		static [kRetryHandlerDefaultRetry$1](err, { state, opts }, cb) {
			const { statusCode, code, headers } = err;
			const { method, retryOptions } = opts;
			const { maxRetries, timeout, maxTimeout, timeoutFactor, statusCodes, errorCodes, methods } = retryOptions;
			let { counter, currentTimeout } = state;
			currentTimeout = currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout;
			if (code && code !== "UND_ERR_REQ_RETRY" && code !== "UND_ERR_SOCKET" && !errorCodes.includes(code)) {
				cb(err);
				return;
			}
			if (Array.isArray(methods) && !methods.includes(method)) {
				cb(err);
				return;
			}
			if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
				cb(err);
				return;
			}
			if (counter > maxRetries) {
				cb(err);
				return;
			}
			let retryAfterHeader = headers != null && headers["retry-after"];
			if (retryAfterHeader) {
				retryAfterHeader = Number(retryAfterHeader);
				retryAfterHeader = isNaN(retryAfterHeader) ? calculateRetryAfterHeader$1(retryAfterHeader) : retryAfterHeader * 1e3;
			}
			const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
			state.currentTimeout = retryTimeout;
			setTimeout(() => cb(null), retryTimeout);
		}
		onHeaders(statusCode, rawHeaders, resume$2, statusMessage) {
			const headers = parseHeaders$2(rawHeaders);
			this.retryCount += 1;
			if (statusCode >= 300) {
				this.abort(new RequestRetryError$2("Request failed", statusCode, {
					headers,
					count: this.retryCount
				}));
				return false;
			}
			if (this.resume != null) {
				this.resume = null;
				if (statusCode !== 206) return true;
				const contentRange = parseRangeHeader$2(headers["content-range"]);
				if (!contentRange) {
					this.abort(new RequestRetryError$2("Content-Range mismatch", statusCode, {
						headers,
						count: this.retryCount
					}));
					return false;
				}
				if (this.etag != null && this.etag !== headers.etag) {
					this.abort(new RequestRetryError$2("ETag mismatch", statusCode, {
						headers,
						count: this.retryCount
					}));
					return false;
				}
				const { start, size, end = size } = contentRange;
				assert$38(this.start === start, "content-range mismatch");
				assert$38(this.end == null || this.end === end, "content-range mismatch");
				this.resume = resume$2;
				return true;
			}
			if (this.end == null) {
				if (statusCode === 206) {
					const range = parseRangeHeader$2(headers["content-range"]);
					if (range == null) return this.handler.onHeaders(statusCode, rawHeaders, resume$2, statusMessage);
					const { start, size, end = size } = range;
					assert$38(start != null && Number.isFinite(start) && this.start !== start, "content-range mismatch");
					assert$38(Number.isFinite(start));
					assert$38(end != null && Number.isFinite(end) && this.end !== end, "invalid content-length");
					this.start = start;
					this.end = end;
				}
				if (this.end == null) {
					const contentLength = headers["content-length"];
					this.end = contentLength != null ? Number(contentLength) : null;
				}
				assert$38(Number.isFinite(this.start));
				assert$38(this.end == null || Number.isFinite(this.end), "invalid content-length");
				this.resume = resume$2;
				this.etag = headers.etag != null ? headers.etag : null;
				return this.handler.onHeaders(statusCode, rawHeaders, resume$2, statusMessage);
			}
			const err = new RequestRetryError$2("Request failed", statusCode, {
				headers,
				count: this.retryCount
			});
			this.abort(err);
			return false;
		}
		onData(chunk) {
			this.start += chunk.length;
			return this.handler.onData(chunk);
		}
		onComplete(rawTrailers) {
			this.retryCount = 0;
			return this.handler.onComplete(rawTrailers);
		}
		onError(err) {
			if (this.aborted || isDisturbed$5(this.opts.body)) return this.handler.onError(err);
			this.retryOpts.retry(err, {
				state: {
					counter: this.retryCount++,
					currentTimeout: this.retryAfter
				},
				opts: {
					retryOptions: this.retryOpts,
					...this.opts
				}
			}, onRetry.bind(this));
			function onRetry(err$1) {
				if (err$1 != null || this.aborted || isDisturbed$5(this.opts.body)) return this.handler.onError(err$1);
				if (this.start !== 0) this.opts = {
					...this.opts,
					headers: {
						...this.opts.headers,
						range: `bytes=${this.start}-${this.end ?? ""}`
					}
				};
				try {
					this.dispatch(this.opts, this);
				} catch (err$2) {
					this.handler.onError(err$2);
				}
			}
		}
	};
	module.exports = RetryHandler$5;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/global.js
var require_global$2 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/global.js"(exports, module) {
	const globalDispatcher$1 = Symbol.for("undici.globalDispatcher.1");
	const { InvalidArgumentError: InvalidArgumentError$33 } = require_errors$1();
	const Agent$7 = require_agent$1();
	if (getGlobalDispatcher$9() === void 0) setGlobalDispatcher$3(new Agent$7());
	function setGlobalDispatcher$3(agent) {
		if (!agent || typeof agent.dispatch !== "function") throw new InvalidArgumentError$33("Argument agent must implement Agent");
		Object.defineProperty(globalThis, globalDispatcher$1, {
			value: agent,
			writable: true,
			enumerable: false,
			configurable: false
		});
	}
	function getGlobalDispatcher$9() {
		return globalThis[globalDispatcher$1];
	}
	module.exports = {
		setGlobalDispatcher: setGlobalDispatcher$3,
		getGlobalDispatcher: getGlobalDispatcher$9
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/handler/DecoratorHandler.js
var require_DecoratorHandler = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/handler/DecoratorHandler.js"(exports, module) {
	module.exports = class DecoratorHandler$5 {
		constructor(handler$1) {
			this.handler = handler$1;
		}
		onConnect(...args) {
			return this.handler.onConnect(...args);
		}
		onError(...args) {
			return this.handler.onError(...args);
		}
		onUpgrade(...args) {
			return this.handler.onUpgrade(...args);
		}
		onHeaders(...args) {
			return this.handler.onHeaders(...args);
		}
		onData(...args) {
			return this.handler.onData(...args);
		}
		onComplete(...args) {
			return this.handler.onComplete(...args);
		}
		onBodySent(...args) {
			return this.handler.onBodySent(...args);
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/headers.js
var require_headers$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/headers.js"(exports, module) {
	const { kHeadersList: kHeadersList$6, kConstruct: kConstruct$12 } = require_symbols$5();
	const { kGuard: kGuard$4 } = require_symbols$4();
	const { kEnumerableProperty: kEnumerableProperty$19 } = require_util$12();
	const { makeIterator, isValidHeaderName: isValidHeaderName$4, isValidHeaderValue: isValidHeaderValue$4 } = require_util$11();
	const { webidl: webidl$27 } = require_webidl$1();
	const assert$37 = __require("assert");
	const kHeadersMap = Symbol("headers map");
	const kHeadersSortedMap = Symbol("headers map sorted");
	/**
	* @param {number} code
	*/
	function isHTTPWhiteSpaceCharCode$1(code) {
		return code === 10 || code === 13 || code === 9 || code === 32;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
	* @param {string} potentialValue
	*/
	function headerValueNormalize$1(potentialValue) {
		let i$1 = 0;
		let j = potentialValue.length;
		while (j > i$1 && isHTTPWhiteSpaceCharCode$1(potentialValue.charCodeAt(j - 1))) --j;
		while (j > i$1 && isHTTPWhiteSpaceCharCode$1(potentialValue.charCodeAt(i$1))) ++i$1;
		return i$1 === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i$1, j);
	}
	function fill$3(headers, object$1) {
		if (Array.isArray(object$1)) for (let i$1 = 0; i$1 < object$1.length; ++i$1) {
			const header = object$1[i$1];
			if (header.length !== 2) throw webidl$27.errors.exception({
				header: "Headers constructor",
				message: `expected name/value pair to be length 2, found ${header.length}.`
			});
			appendHeader$1(headers, header[0], header[1]);
		}
		else if (typeof object$1 === "object" && object$1 !== null) {
			const keys$1 = Object.keys(object$1);
			for (let i$1 = 0; i$1 < keys$1.length; ++i$1) appendHeader$1(headers, keys$1[i$1], object$1[keys$1[i$1]]);
		} else throw webidl$27.errors.conversionFailed({
			prefix: "Headers constructor",
			argument: "Argument 1",
			types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
		});
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-headers-append
	*/
	function appendHeader$1(headers, name$2, value) {
		value = headerValueNormalize$1(value);
		if (!isValidHeaderName$4(name$2)) throw webidl$27.errors.invalidArgument({
			prefix: "Headers.append",
			value: name$2,
			type: "header name"
		});
		else if (!isValidHeaderValue$4(value)) throw webidl$27.errors.invalidArgument({
			prefix: "Headers.append",
			value,
			type: "header value"
		});
		if (headers[kGuard$4] === "immutable") throw new TypeError("immutable");
		else if (headers[kGuard$4] === "request-no-cors") {}
		return headers[kHeadersList$6].append(name$2, value);
	}
	var HeadersList$6 = class HeadersList$6 {
		/** @type {[string, string][]|null} */
		cookies = null;
		constructor(init) {
			if (init instanceof HeadersList$6) {
				this[kHeadersMap] = new Map(init[kHeadersMap]);
				this[kHeadersSortedMap] = init[kHeadersSortedMap];
				this.cookies = init.cookies === null ? null : [...init.cookies];
			} else {
				this[kHeadersMap] = new Map(init);
				this[kHeadersSortedMap] = null;
			}
		}
		contains(name$2) {
			name$2 = name$2.toLowerCase();
			return this[kHeadersMap].has(name$2);
		}
		clear() {
			this[kHeadersMap].clear();
			this[kHeadersSortedMap] = null;
			this.cookies = null;
		}
		append(name$2, value) {
			this[kHeadersSortedMap] = null;
			const lowercaseName = name$2.toLowerCase();
			const exists$1 = this[kHeadersMap].get(lowercaseName);
			if (exists$1) {
				const delimiter = lowercaseName === "cookie" ? "; " : ", ";
				this[kHeadersMap].set(lowercaseName, {
					name: exists$1.name,
					value: `${exists$1.value}${delimiter}${value}`
				});
			} else this[kHeadersMap].set(lowercaseName, {
				name: name$2,
				value
			});
			if (lowercaseName === "set-cookie") {
				this.cookies ??= [];
				this.cookies.push(value);
			}
		}
		set(name$2, value) {
			this[kHeadersSortedMap] = null;
			const lowercaseName = name$2.toLowerCase();
			if (lowercaseName === "set-cookie") this.cookies = [value];
			this[kHeadersMap].set(lowercaseName, {
				name: name$2,
				value
			});
		}
		delete(name$2) {
			this[kHeadersSortedMap] = null;
			name$2 = name$2.toLowerCase();
			if (name$2 === "set-cookie") this.cookies = null;
			this[kHeadersMap].delete(name$2);
		}
		get(name$2) {
			const value = this[kHeadersMap].get(name$2.toLowerCase());
			return value === void 0 ? null : value.value;
		}
		*[Symbol.iterator]() {
			for (const [name$2, { value }] of this[kHeadersMap]) yield [name$2, value];
		}
		get entries() {
			const headers = {};
			if (this[kHeadersMap].size) for (const { name: name$2, value } of this[kHeadersMap].values()) headers[name$2] = value;
			return headers;
		}
	};
	var Headers$12 = class Headers$12 {
		constructor(init = void 0) {
			if (init === kConstruct$12) return;
			this[kHeadersList$6] = new HeadersList$6();
			this[kGuard$4] = "none";
			if (init !== void 0) {
				init = webidl$27.converters.HeadersInit(init);
				fill$3(this, init);
			}
		}
		append(name$2, value) {
			webidl$27.brandCheck(this, Headers$12);
			webidl$27.argumentLengthCheck(arguments, 2, { header: "Headers.append" });
			name$2 = webidl$27.converters.ByteString(name$2);
			value = webidl$27.converters.ByteString(value);
			return appendHeader$1(this, name$2, value);
		}
		delete(name$2) {
			webidl$27.brandCheck(this, Headers$12);
			webidl$27.argumentLengthCheck(arguments, 1, { header: "Headers.delete" });
			name$2 = webidl$27.converters.ByteString(name$2);
			if (!isValidHeaderName$4(name$2)) throw webidl$27.errors.invalidArgument({
				prefix: "Headers.delete",
				value: name$2,
				type: "header name"
			});
			if (this[kGuard$4] === "immutable") throw new TypeError("immutable");
			else if (this[kGuard$4] === "request-no-cors") {}
			if (!this[kHeadersList$6].contains(name$2)) return;
			this[kHeadersList$6].delete(name$2);
		}
		get(name$2) {
			webidl$27.brandCheck(this, Headers$12);
			webidl$27.argumentLengthCheck(arguments, 1, { header: "Headers.get" });
			name$2 = webidl$27.converters.ByteString(name$2);
			if (!isValidHeaderName$4(name$2)) throw webidl$27.errors.invalidArgument({
				prefix: "Headers.get",
				value: name$2,
				type: "header name"
			});
			return this[kHeadersList$6].get(name$2);
		}
		has(name$2) {
			webidl$27.brandCheck(this, Headers$12);
			webidl$27.argumentLengthCheck(arguments, 1, { header: "Headers.has" });
			name$2 = webidl$27.converters.ByteString(name$2);
			if (!isValidHeaderName$4(name$2)) throw webidl$27.errors.invalidArgument({
				prefix: "Headers.has",
				value: name$2,
				type: "header name"
			});
			return this[kHeadersList$6].contains(name$2);
		}
		set(name$2, value) {
			webidl$27.brandCheck(this, Headers$12);
			webidl$27.argumentLengthCheck(arguments, 2, { header: "Headers.set" });
			name$2 = webidl$27.converters.ByteString(name$2);
			value = webidl$27.converters.ByteString(value);
			value = headerValueNormalize$1(value);
			if (!isValidHeaderName$4(name$2)) throw webidl$27.errors.invalidArgument({
				prefix: "Headers.set",
				value: name$2,
				type: "header name"
			});
			else if (!isValidHeaderValue$4(value)) throw webidl$27.errors.invalidArgument({
				prefix: "Headers.set",
				value,
				type: "header value"
			});
			if (this[kGuard$4] === "immutable") throw new TypeError("immutable");
			else if (this[kGuard$4] === "request-no-cors") {}
			this[kHeadersList$6].set(name$2, value);
		}
		getSetCookie() {
			webidl$27.brandCheck(this, Headers$12);
			const list = this[kHeadersList$6].cookies;
			if (list) return [...list];
			return [];
		}
		get [kHeadersSortedMap]() {
			if (this[kHeadersList$6][kHeadersSortedMap]) return this[kHeadersList$6][kHeadersSortedMap];
			const headers = [];
			const names = [...this[kHeadersList$6]].sort((a$1, b) => a$1[0] < b[0] ? -1 : 1);
			const cookies = this[kHeadersList$6].cookies;
			for (let i$1 = 0; i$1 < names.length; ++i$1) {
				const [name$2, value] = names[i$1];
				if (name$2 === "set-cookie") for (let j = 0; j < cookies.length; ++j) headers.push([name$2, cookies[j]]);
				else {
					assert$37(value !== null);
					headers.push([name$2, value]);
				}
			}
			this[kHeadersList$6][kHeadersSortedMap] = headers;
			return headers;
		}
		keys() {
			webidl$27.brandCheck(this, Headers$12);
			if (this[kGuard$4] === "immutable") {
				const value = this[kHeadersSortedMap];
				return makeIterator(() => value, "Headers", "key");
			}
			return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "key");
		}
		values() {
			webidl$27.brandCheck(this, Headers$12);
			if (this[kGuard$4] === "immutable") {
				const value = this[kHeadersSortedMap];
				return makeIterator(() => value, "Headers", "value");
			}
			return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "value");
		}
		entries() {
			webidl$27.brandCheck(this, Headers$12);
			if (this[kGuard$4] === "immutable") {
				const value = this[kHeadersSortedMap];
				return makeIterator(() => value, "Headers", "key+value");
			}
			return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "key+value");
		}
		/**
		* @param {(value: string, key: string, self: Headers) => void} callbackFn
		* @param {unknown} thisArg
		*/
		forEach(callbackFn, thisArg = globalThis) {
			webidl$27.brandCheck(this, Headers$12);
			webidl$27.argumentLengthCheck(arguments, 1, { header: "Headers.forEach" });
			if (typeof callbackFn !== "function") throw new TypeError("Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.");
			for (const [key, value] of this) callbackFn.apply(thisArg, [
				value,
				key,
				this
			]);
		}
		[Symbol.for("nodejs.util.inspect.custom")]() {
			webidl$27.brandCheck(this, Headers$12);
			return this[kHeadersList$6];
		}
	};
	Headers$12.prototype[Symbol.iterator] = Headers$12.prototype.entries;
	Object.defineProperties(Headers$12.prototype, {
		append: kEnumerableProperty$19,
		delete: kEnumerableProperty$19,
		get: kEnumerableProperty$19,
		has: kEnumerableProperty$19,
		set: kEnumerableProperty$19,
		getSetCookie: kEnumerableProperty$19,
		keys: kEnumerableProperty$19,
		values: kEnumerableProperty$19,
		entries: kEnumerableProperty$19,
		forEach: kEnumerableProperty$19,
		[Symbol.iterator]: { enumerable: false },
		[Symbol.toStringTag]: {
			value: "Headers",
			configurable: true
		}
	});
	webidl$27.converters.HeadersInit = function(V) {
		if (webidl$27.util.Type(V) === "Object") {
			if (V[Symbol.iterator]) return webidl$27.converters["sequence<sequence<ByteString>>"](V);
			return webidl$27.converters["record<ByteString, ByteString>"](V);
		}
		throw webidl$27.errors.conversionFailed({
			prefix: "Headers constructor",
			argument: "Argument 1",
			types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
		});
	};
	module.exports = {
		fill: fill$3,
		Headers: Headers$12,
		HeadersList: HeadersList$6
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/response.js
var require_response$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/response.js"(exports, module) {
	const { Headers: Headers$11, HeadersList: HeadersList$5, fill: fill$2 } = require_headers$1();
	const { extractBody: extractBody$7, cloneBody: cloneBody$4, mixinBody: mixinBody$4 } = require_body$1();
	const util$25 = require_util$12();
	const { kEnumerableProperty: kEnumerableProperty$18 } = util$25;
	const { isValidReasonPhrase: isValidReasonPhrase$2, isCancelled: isCancelled$4, isAborted: isAborted$5, isBlobLike: isBlobLike$4, serializeJavascriptValueToJSONString: serializeJavascriptValueToJSONString$2, isErrorLike: isErrorLike$4, isomorphicEncode: isomorphicEncode$4 } = require_util$11();
	const { redirectStatusSet: redirectStatusSet$5, nullBodyStatus: nullBodyStatus$4, DOMException: DOMException$4 } = require_constants$8();
	const { kState: kState$6, kHeaders: kHeaders$3, kGuard: kGuard$3, kRealm: kRealm$3 } = require_symbols$4();
	const { webidl: webidl$26 } = require_webidl$1();
	const { FormData: FormData$3 } = require_formdata$1();
	const { getGlobalOrigin: getGlobalOrigin$5 } = require_global$3();
	const { URLSerializer: URLSerializer$8 } = require_dataURL();
	const { kHeadersList: kHeadersList$5, kConstruct: kConstruct$11 } = require_symbols$5();
	const assert$36 = __require("assert");
	const { types: types$6 } = __require("util");
	const ReadableStream$2 = globalThis.ReadableStream || __require("stream/web").ReadableStream;
	const textEncoder$4 = new TextEncoder("utf-8");
	var Response$4 = class Response$4 {
		static error() {
			const relevantRealm$1 = { settingsObject: {} };
			const responseObject = new Response$4();
			responseObject[kState$6] = makeNetworkError$3();
			responseObject[kRealm$3] = relevantRealm$1;
			responseObject[kHeaders$3][kHeadersList$5] = responseObject[kState$6].headersList;
			responseObject[kHeaders$3][kGuard$3] = "immutable";
			responseObject[kHeaders$3][kRealm$3] = relevantRealm$1;
			return responseObject;
		}
		static json(data$1, init = {}) {
			webidl$26.argumentLengthCheck(arguments, 1, { header: "Response.json" });
			if (init !== null) init = webidl$26.converters.ResponseInit(init);
			const bytes = textEncoder$4.encode(serializeJavascriptValueToJSONString$2(data$1));
			const body = extractBody$7(bytes);
			const relevantRealm$1 = { settingsObject: {} };
			const responseObject = new Response$4();
			responseObject[kRealm$3] = relevantRealm$1;
			responseObject[kHeaders$3][kGuard$3] = "response";
			responseObject[kHeaders$3][kRealm$3] = relevantRealm$1;
			initializeResponse$1(responseObject, init, {
				body: body[0],
				type: "application/json"
			});
			return responseObject;
		}
		static redirect(url, status = 302) {
			const relevantRealm$1 = { settingsObject: {} };
			webidl$26.argumentLengthCheck(arguments, 1, { header: "Response.redirect" });
			url = webidl$26.converters.USVString(url);
			status = webidl$26.converters["unsigned short"](status);
			let parsedURL;
			try {
				parsedURL = new URL(url, getGlobalOrigin$5());
			} catch (err) {
				throw Object.assign(/* @__PURE__ */ new TypeError("Failed to parse URL from " + url), { cause: err });
			}
			if (!redirectStatusSet$5.has(status)) throw new RangeError("Invalid status code " + status);
			const responseObject = new Response$4();
			responseObject[kRealm$3] = relevantRealm$1;
			responseObject[kHeaders$3][kGuard$3] = "immutable";
			responseObject[kHeaders$3][kRealm$3] = relevantRealm$1;
			responseObject[kState$6].status = status;
			const value = isomorphicEncode$4(URLSerializer$8(parsedURL));
			responseObject[kState$6].headersList.append("location", value);
			return responseObject;
		}
		constructor(body = null, init = {}) {
			if (body !== null) body = webidl$26.converters.BodyInit(body);
			init = webidl$26.converters.ResponseInit(init);
			this[kRealm$3] = { settingsObject: {} };
			this[kState$6] = makeResponse$3({});
			this[kHeaders$3] = new Headers$11(kConstruct$11);
			this[kHeaders$3][kGuard$3] = "response";
			this[kHeaders$3][kHeadersList$5] = this[kState$6].headersList;
			this[kHeaders$3][kRealm$3] = this[kRealm$3];
			let bodyWithType = null;
			if (body != null) {
				const [extractedBody, type] = extractBody$7(body);
				bodyWithType = {
					body: extractedBody,
					type
				};
			}
			initializeResponse$1(this, init, bodyWithType);
		}
		get type() {
			webidl$26.brandCheck(this, Response$4);
			return this[kState$6].type;
		}
		get url() {
			webidl$26.brandCheck(this, Response$4);
			const urlList = this[kState$6].urlList;
			const url = urlList[urlList.length - 1] ?? null;
			if (url === null) return "";
			return URLSerializer$8(url, true);
		}
		get redirected() {
			webidl$26.brandCheck(this, Response$4);
			return this[kState$6].urlList.length > 1;
		}
		get status() {
			webidl$26.brandCheck(this, Response$4);
			return this[kState$6].status;
		}
		get ok() {
			webidl$26.brandCheck(this, Response$4);
			return this[kState$6].status >= 200 && this[kState$6].status <= 299;
		}
		get statusText() {
			webidl$26.brandCheck(this, Response$4);
			return this[kState$6].statusText;
		}
		get headers() {
			webidl$26.brandCheck(this, Response$4);
			return this[kHeaders$3];
		}
		get body() {
			webidl$26.brandCheck(this, Response$4);
			return this[kState$6].body ? this[kState$6].body.stream : null;
		}
		get bodyUsed() {
			webidl$26.brandCheck(this, Response$4);
			return !!this[kState$6].body && util$25.isDisturbed(this[kState$6].body.stream);
		}
		clone() {
			webidl$26.brandCheck(this, Response$4);
			if (this.bodyUsed || this.body && this.body.locked) throw webidl$26.errors.exception({
				header: "Response.clone",
				message: "Body has already been consumed."
			});
			const clonedResponse = cloneResponse$3(this[kState$6]);
			const clonedResponseObject = new Response$4();
			clonedResponseObject[kState$6] = clonedResponse;
			clonedResponseObject[kRealm$3] = this[kRealm$3];
			clonedResponseObject[kHeaders$3][kHeadersList$5] = clonedResponse.headersList;
			clonedResponseObject[kHeaders$3][kGuard$3] = this[kHeaders$3][kGuard$3];
			clonedResponseObject[kHeaders$3][kRealm$3] = this[kHeaders$3][kRealm$3];
			return clonedResponseObject;
		}
	};
	mixinBody$4(Response$4);
	Object.defineProperties(Response$4.prototype, {
		type: kEnumerableProperty$18,
		url: kEnumerableProperty$18,
		status: kEnumerableProperty$18,
		ok: kEnumerableProperty$18,
		redirected: kEnumerableProperty$18,
		statusText: kEnumerableProperty$18,
		headers: kEnumerableProperty$18,
		clone: kEnumerableProperty$18,
		body: kEnumerableProperty$18,
		bodyUsed: kEnumerableProperty$18,
		[Symbol.toStringTag]: {
			value: "Response",
			configurable: true
		}
	});
	Object.defineProperties(Response$4, {
		json: kEnumerableProperty$18,
		redirect: kEnumerableProperty$18,
		error: kEnumerableProperty$18
	});
	function cloneResponse$3(response) {
		if (response.internalResponse) return filterResponse$3(cloneResponse$3(response.internalResponse), response.type);
		const newResponse = makeResponse$3({
			...response,
			body: null
		});
		if (response.body != null) newResponse.body = cloneBody$4(response.body);
		return newResponse;
	}
	function makeResponse$3(init) {
		return {
			aborted: false,
			rangeRequested: false,
			timingAllowPassed: false,
			requestIncludesCredentials: false,
			type: "default",
			status: 200,
			timingInfo: null,
			cacheState: "",
			statusText: "",
			...init,
			headersList: init.headersList ? new HeadersList$5(init.headersList) : new HeadersList$5(),
			urlList: init.urlList ? [...init.urlList] : []
		};
	}
	function makeNetworkError$3(reason) {
		const isError = isErrorLike$4(reason);
		return makeResponse$3({
			type: "error",
			status: 0,
			error: isError ? reason : new Error(reason ? String(reason) : reason),
			aborted: reason && reason.name === "AbortError"
		});
	}
	function makeFilteredResponse$1(response, state) {
		state = {
			internalResponse: response,
			...state
		};
		return new Proxy(response, {
			get(target, p) {
				return p in state ? state[p] : target[p];
			},
			set(target, p, value) {
				assert$36(!(p in state));
				target[p] = value;
				return true;
			}
		});
	}
	function filterResponse$3(response, type) {
		if (type === "basic") return makeFilteredResponse$1(response, {
			type: "basic",
			headersList: response.headersList
		});
		else if (type === "cors") return makeFilteredResponse$1(response, {
			type: "cors",
			headersList: response.headersList
		});
		else if (type === "opaque") return makeFilteredResponse$1(response, {
			type: "opaque",
			urlList: Object.freeze([]),
			status: 0,
			statusText: "",
			body: null
		});
		else if (type === "opaqueredirect") return makeFilteredResponse$1(response, {
			type: "opaqueredirect",
			status: 0,
			statusText: "",
			headersList: [],
			body: null
		});
		else assert$36(false);
	}
	function makeAppropriateNetworkError$3(fetchParams, err = null) {
		assert$36(isCancelled$4(fetchParams));
		return isAborted$5(fetchParams) ? makeNetworkError$3(Object.assign(new DOMException$4("The operation was aborted.", "AbortError"), { cause: err })) : makeNetworkError$3(Object.assign(new DOMException$4("Request was cancelled."), { cause: err }));
	}
	function initializeResponse$1(response, init, body) {
		if (init.status !== null && (init.status < 200 || init.status > 599)) throw new RangeError("init[\"status\"] must be in the range of 200 to 599, inclusive.");
		if ("statusText" in init && init.statusText != null) {
			if (!isValidReasonPhrase$2(String(init.statusText))) throw new TypeError("Invalid statusText");
		}
		if ("status" in init && init.status != null) response[kState$6].status = init.status;
		if ("statusText" in init && init.statusText != null) response[kState$6].statusText = init.statusText;
		if ("headers" in init && init.headers != null) fill$2(response[kHeaders$3], init.headers);
		if (body) {
			if (nullBodyStatus$4.includes(response.status)) throw webidl$26.errors.exception({
				header: "Response constructor",
				message: "Invalid response status code " + response.status
			});
			response[kState$6].body = body.body;
			if (body.type != null && !response[kState$6].headersList.contains("Content-Type")) response[kState$6].headersList.append("content-type", body.type);
		}
	}
	webidl$26.converters.ReadableStream = webidl$26.interfaceConverter(ReadableStream$2);
	webidl$26.converters.FormData = webidl$26.interfaceConverter(FormData$3);
	webidl$26.converters.URLSearchParams = webidl$26.interfaceConverter(URLSearchParams);
	webidl$26.converters.XMLHttpRequestBodyInit = function(V) {
		if (typeof V === "string") return webidl$26.converters.USVString(V);
		if (isBlobLike$4(V)) return webidl$26.converters.Blob(V, { strict: false });
		if (types$6.isArrayBuffer(V) || types$6.isTypedArray(V) || types$6.isDataView(V)) return webidl$26.converters.BufferSource(V);
		if (util$25.isFormDataLike(V)) return webidl$26.converters.FormData(V, { strict: false });
		if (V instanceof URLSearchParams) return webidl$26.converters.URLSearchParams(V);
		return webidl$26.converters.DOMString(V);
	};
	webidl$26.converters.BodyInit = function(V) {
		if (V instanceof ReadableStream$2) return webidl$26.converters.ReadableStream(V);
		if (V?.[Symbol.asyncIterator]) return V;
		return webidl$26.converters.XMLHttpRequestBodyInit(V);
	};
	webidl$26.converters.ResponseInit = webidl$26.dictionaryConverter([
		{
			key: "status",
			converter: webidl$26.converters["unsigned short"],
			defaultValue: 200
		},
		{
			key: "statusText",
			converter: webidl$26.converters.ByteString,
			defaultValue: ""
		},
		{
			key: "headers",
			converter: webidl$26.converters.HeadersInit
		}
	]);
	module.exports = {
		makeNetworkError: makeNetworkError$3,
		makeResponse: makeResponse$3,
		makeAppropriateNetworkError: makeAppropriateNetworkError$3,
		filterResponse: filterResponse$3,
		Response: Response$4,
		cloneResponse: cloneResponse$3
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/request.js
var require_request$2 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/request.js"(exports, module) {
	const { extractBody: extractBody$6, mixinBody: mixinBody$3, cloneBody: cloneBody$3 } = require_body$1();
	const { Headers: Headers$10, fill: fillHeaders$1, HeadersList: HeadersList$4 } = require_headers$1();
	const { FinalizationRegistry: FinalizationRegistry$1 } = require_dispatcher_weakref()();
	const util$24 = require_util$12();
	const { isValidHTTPToken: isValidHTTPToken$4, sameOrigin: sameOrigin$4, normalizeMethod: normalizeMethod$1, makePolicyContainer: makePolicyContainer$3, normalizeMethodRecord } = require_util$11();
	const { forbiddenMethodsSet: forbiddenMethodsSet$2, corsSafeListedMethodsSet: corsSafeListedMethodsSet$2, referrerPolicy: referrerPolicy$2, requestRedirect: requestRedirect$2, requestMode: requestMode$2, requestCredentials: requestCredentials$2, requestCache: requestCache$2, requestDuplex: requestDuplex$2 } = require_constants$8();
	const { kEnumerableProperty: kEnumerableProperty$17 } = util$24;
	const { kHeaders: kHeaders$2, kSignal: kSignal$1, kState: kState$5, kGuard: kGuard$2, kRealm: kRealm$2 } = require_symbols$4();
	const { webidl: webidl$25 } = require_webidl$1();
	const { getGlobalOrigin: getGlobalOrigin$4 } = require_global$3();
	const { URLSerializer: URLSerializer$7 } = require_dataURL();
	const { kHeadersList: kHeadersList$4, kConstruct: kConstruct$10 } = require_symbols$5();
	const assert$35 = __require("assert");
	const { getMaxListeners: getMaxListeners$1, setMaxListeners: setMaxListeners$2, getEventListeners, defaultMaxListeners: defaultMaxListeners$1 } = __require("events");
	let TransformStream$2 = globalThis.TransformStream;
	const kAbortController$1 = Symbol("abortController");
	const requestFinalizer$1 = new FinalizationRegistry$1(({ signal, abort: abort$2 }) => {
		signal.removeEventListener("abort", abort$2);
	});
	var Request$7 = class Request$7 {
		constructor(input, init = {}) {
			if (input === kConstruct$10) return;
			webidl$25.argumentLengthCheck(arguments, 1, { header: "Request constructor" });
			input = webidl$25.converters.RequestInfo(input);
			init = webidl$25.converters.RequestInit(init);
			this[kRealm$2] = { settingsObject: {
				baseUrl: getGlobalOrigin$4(),
				get origin() {
					return this.baseUrl?.origin;
				},
				policyContainer: makePolicyContainer$3()
			} };
			let request$3 = null;
			let fallbackMode = null;
			const baseUrl$1 = this[kRealm$2].settingsObject.baseUrl;
			let signal = null;
			if (typeof input === "string") {
				let parsedURL;
				try {
					parsedURL = new URL(input, baseUrl$1);
				} catch (err) {
					throw new TypeError("Failed to parse URL from " + input, { cause: err });
				}
				if (parsedURL.username || parsedURL.password) throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
				request$3 = makeRequest$5({ urlList: [parsedURL] });
				fallbackMode = "cors";
			} else {
				assert$35(input instanceof Request$7);
				request$3 = input[kState$5];
				signal = input[kSignal$1];
			}
			const origin = this[kRealm$2].settingsObject.origin;
			let window$1 = "client";
			if (request$3.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin$4(request$3.window, origin)) window$1 = request$3.window;
			if (init.window != null) throw new TypeError(`'window' option '${window$1}' must be null`);
			if ("window" in init) window$1 = "no-window";
			request$3 = makeRequest$5({
				method: request$3.method,
				headersList: request$3.headersList,
				unsafeRequest: request$3.unsafeRequest,
				client: this[kRealm$2].settingsObject,
				window: window$1,
				priority: request$3.priority,
				origin: request$3.origin,
				referrer: request$3.referrer,
				referrerPolicy: request$3.referrerPolicy,
				mode: request$3.mode,
				credentials: request$3.credentials,
				cache: request$3.cache,
				redirect: request$3.redirect,
				integrity: request$3.integrity,
				keepalive: request$3.keepalive,
				reloadNavigation: request$3.reloadNavigation,
				historyNavigation: request$3.historyNavigation,
				urlList: [...request$3.urlList]
			});
			const initHasKey = Object.keys(init).length !== 0;
			if (initHasKey) {
				if (request$3.mode === "navigate") request$3.mode = "same-origin";
				request$3.reloadNavigation = false;
				request$3.historyNavigation = false;
				request$3.origin = "client";
				request$3.referrer = "client";
				request$3.referrerPolicy = "";
				request$3.url = request$3.urlList[request$3.urlList.length - 1];
				request$3.urlList = [request$3.url];
			}
			if (init.referrer !== void 0) {
				const referrer = init.referrer;
				if (referrer === "") request$3.referrer = "no-referrer";
				else {
					let parsedReferrer;
					try {
						parsedReferrer = new URL(referrer, baseUrl$1);
					} catch (err) {
						throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
					}
					if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !sameOrigin$4(parsedReferrer, this[kRealm$2].settingsObject.baseUrl)) request$3.referrer = "client";
					else request$3.referrer = parsedReferrer;
				}
			}
			if (init.referrerPolicy !== void 0) request$3.referrerPolicy = init.referrerPolicy;
			let mode;
			if (init.mode !== void 0) mode = init.mode;
			else mode = fallbackMode;
			if (mode === "navigate") throw webidl$25.errors.exception({
				header: "Request constructor",
				message: "invalid request mode navigate."
			});
			if (mode != null) request$3.mode = mode;
			if (init.credentials !== void 0) request$3.credentials = init.credentials;
			if (init.cache !== void 0) request$3.cache = init.cache;
			if (request$3.cache === "only-if-cached" && request$3.mode !== "same-origin") throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
			if (init.redirect !== void 0) request$3.redirect = init.redirect;
			if (init.integrity != null) request$3.integrity = String(init.integrity);
			if (init.keepalive !== void 0) request$3.keepalive = Boolean(init.keepalive);
			if (init.method !== void 0) {
				let method = init.method;
				if (!isValidHTTPToken$4(method)) throw new TypeError(`'${method}' is not a valid HTTP method.`);
				if (forbiddenMethodsSet$2.has(method.toUpperCase())) throw new TypeError(`'${method}' HTTP method is unsupported.`);
				method = normalizeMethodRecord[method] ?? normalizeMethod$1(method);
				request$3.method = method;
			}
			if (init.signal !== void 0) signal = init.signal;
			this[kState$5] = request$3;
			const ac = new AbortController();
			this[kSignal$1] = ac.signal;
			this[kSignal$1][kRealm$2] = this[kRealm$2];
			if (signal != null) {
				if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") throw new TypeError("Failed to construct 'Request': member signal is not of type AbortSignal.");
				if (signal.aborted) ac.abort(signal.reason);
				else {
					this[kAbortController$1] = ac;
					const acRef = new WeakRef(ac);
					const abort$2 = function() {
						const ac$1 = acRef.deref();
						if (ac$1 !== void 0) ac$1.abort(this.reason);
					};
					try {
						if (typeof getMaxListeners$1 === "function" && getMaxListeners$1(signal) === defaultMaxListeners$1) setMaxListeners$2(100, signal);
						else if (getEventListeners(signal, "abort").length >= defaultMaxListeners$1) setMaxListeners$2(100, signal);
					} catch {}
					util$24.addAbortListener(signal, abort$2);
					requestFinalizer$1.register(ac, {
						signal,
						abort: abort$2
					});
				}
			}
			this[kHeaders$2] = new Headers$10(kConstruct$10);
			this[kHeaders$2][kHeadersList$4] = request$3.headersList;
			this[kHeaders$2][kGuard$2] = "request";
			this[kHeaders$2][kRealm$2] = this[kRealm$2];
			if (mode === "no-cors") {
				if (!corsSafeListedMethodsSet$2.has(request$3.method)) throw new TypeError(`'${request$3.method} is unsupported in no-cors mode.`);
				this[kHeaders$2][kGuard$2] = "request-no-cors";
			}
			if (initHasKey) {
				/** @type {HeadersList} */
				const headersList = this[kHeaders$2][kHeadersList$4];
				const headers = init.headers !== void 0 ? init.headers : new HeadersList$4(headersList);
				headersList.clear();
				if (headers instanceof HeadersList$4) {
					for (const [key, val] of headers) headersList.append(key, val);
					headersList.cookies = headers.cookies;
				} else fillHeaders$1(this[kHeaders$2], headers);
			}
			const inputBody = input instanceof Request$7 ? input[kState$5].body : null;
			if ((init.body != null || inputBody != null) && (request$3.method === "GET" || request$3.method === "HEAD")) throw new TypeError("Request with GET/HEAD method cannot have body.");
			let initBody = null;
			if (init.body != null) {
				const [extractedBody, contentType] = extractBody$6(init.body, request$3.keepalive);
				initBody = extractedBody;
				if (contentType && !this[kHeaders$2][kHeadersList$4].contains("content-type")) this[kHeaders$2].append("content-type", contentType);
			}
			const inputOrInitBody = initBody ?? inputBody;
			if (inputOrInitBody != null && inputOrInitBody.source == null) {
				if (initBody != null && init.duplex == null) throw new TypeError("RequestInit: duplex option is required when sending a body.");
				if (request$3.mode !== "same-origin" && request$3.mode !== "cors") throw new TypeError("If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"");
				request$3.useCORSPreflightFlag = true;
			}
			let finalBody = inputOrInitBody;
			if (initBody == null && inputBody != null) {
				if (util$24.isDisturbed(inputBody.stream) || inputBody.stream.locked) throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
				if (!TransformStream$2) TransformStream$2 = __require("stream/web").TransformStream;
				const identityTransform = new TransformStream$2();
				inputBody.stream.pipeThrough(identityTransform);
				finalBody = {
					source: inputBody.source,
					length: inputBody.length,
					stream: identityTransform.readable
				};
			}
			this[kState$5].body = finalBody;
		}
		get method() {
			webidl$25.brandCheck(this, Request$7);
			return this[kState$5].method;
		}
		get url() {
			webidl$25.brandCheck(this, Request$7);
			return URLSerializer$7(this[kState$5].url);
		}
		get headers() {
			webidl$25.brandCheck(this, Request$7);
			return this[kHeaders$2];
		}
		get destination() {
			webidl$25.brandCheck(this, Request$7);
			return this[kState$5].destination;
		}
		get referrer() {
			webidl$25.brandCheck(this, Request$7);
			if (this[kState$5].referrer === "no-referrer") return "";
			if (this[kState$5].referrer === "client") return "about:client";
			return this[kState$5].referrer.toString();
		}
		get referrerPolicy() {
			webidl$25.brandCheck(this, Request$7);
			return this[kState$5].referrerPolicy;
		}
		get mode() {
			webidl$25.brandCheck(this, Request$7);
			return this[kState$5].mode;
		}
		get credentials() {
			return this[kState$5].credentials;
		}
		get cache() {
			webidl$25.brandCheck(this, Request$7);
			return this[kState$5].cache;
		}
		get redirect() {
			webidl$25.brandCheck(this, Request$7);
			return this[kState$5].redirect;
		}
		get integrity() {
			webidl$25.brandCheck(this, Request$7);
			return this[kState$5].integrity;
		}
		get keepalive() {
			webidl$25.brandCheck(this, Request$7);
			return this[kState$5].keepalive;
		}
		get isReloadNavigation() {
			webidl$25.brandCheck(this, Request$7);
			return this[kState$5].reloadNavigation;
		}
		get isHistoryNavigation() {
			webidl$25.brandCheck(this, Request$7);
			return this[kState$5].historyNavigation;
		}
		get signal() {
			webidl$25.brandCheck(this, Request$7);
			return this[kSignal$1];
		}
		get body() {
			webidl$25.brandCheck(this, Request$7);
			return this[kState$5].body ? this[kState$5].body.stream : null;
		}
		get bodyUsed() {
			webidl$25.brandCheck(this, Request$7);
			return !!this[kState$5].body && util$24.isDisturbed(this[kState$5].body.stream);
		}
		get duplex() {
			webidl$25.brandCheck(this, Request$7);
			return "half";
		}
		clone() {
			webidl$25.brandCheck(this, Request$7);
			if (this.bodyUsed || this.body?.locked) throw new TypeError("unusable");
			const clonedRequest = cloneRequest$2(this[kState$5]);
			const clonedRequestObject = new Request$7(kConstruct$10);
			clonedRequestObject[kState$5] = clonedRequest;
			clonedRequestObject[kRealm$2] = this[kRealm$2];
			clonedRequestObject[kHeaders$2] = new Headers$10(kConstruct$10);
			clonedRequestObject[kHeaders$2][kHeadersList$4] = clonedRequest.headersList;
			clonedRequestObject[kHeaders$2][kGuard$2] = this[kHeaders$2][kGuard$2];
			clonedRequestObject[kHeaders$2][kRealm$2] = this[kHeaders$2][kRealm$2];
			const ac = new AbortController();
			if (this.signal.aborted) ac.abort(this.signal.reason);
			else util$24.addAbortListener(this.signal, () => {
				ac.abort(this.signal.reason);
			});
			clonedRequestObject[kSignal$1] = ac.signal;
			return clonedRequestObject;
		}
	};
	mixinBody$3(Request$7);
	function makeRequest$5(init) {
		const request$3 = {
			method: "GET",
			localURLsOnly: false,
			unsafeRequest: false,
			body: null,
			client: null,
			reservedClient: null,
			replacesClientId: "",
			window: "client",
			keepalive: false,
			serviceWorkers: "all",
			initiator: "",
			destination: "",
			priority: null,
			origin: "client",
			policyContainer: "client",
			referrer: "client",
			referrerPolicy: "",
			mode: "no-cors",
			useCORSPreflightFlag: false,
			credentials: "same-origin",
			useCredentials: false,
			cache: "default",
			redirect: "follow",
			integrity: "",
			cryptoGraphicsNonceMetadata: "",
			parserMetadata: "",
			reloadNavigation: false,
			historyNavigation: false,
			userActivation: false,
			taintedOrigin: false,
			redirectCount: 0,
			responseTainting: "basic",
			preventNoCacheCacheControlHeaderModification: false,
			done: false,
			timingAllowFailed: false,
			...init,
			headersList: init.headersList ? new HeadersList$4(init.headersList) : new HeadersList$4()
		};
		request$3.url = request$3.urlList[0];
		return request$3;
	}
	function cloneRequest$2(request$3) {
		const newRequest = makeRequest$5({
			...request$3,
			body: null
		});
		if (request$3.body != null) newRequest.body = cloneBody$3(request$3.body);
		return newRequest;
	}
	Object.defineProperties(Request$7.prototype, {
		method: kEnumerableProperty$17,
		url: kEnumerableProperty$17,
		headers: kEnumerableProperty$17,
		redirect: kEnumerableProperty$17,
		clone: kEnumerableProperty$17,
		signal: kEnumerableProperty$17,
		duplex: kEnumerableProperty$17,
		destination: kEnumerableProperty$17,
		body: kEnumerableProperty$17,
		bodyUsed: kEnumerableProperty$17,
		isHistoryNavigation: kEnumerableProperty$17,
		isReloadNavigation: kEnumerableProperty$17,
		keepalive: kEnumerableProperty$17,
		integrity: kEnumerableProperty$17,
		cache: kEnumerableProperty$17,
		credentials: kEnumerableProperty$17,
		attribute: kEnumerableProperty$17,
		referrerPolicy: kEnumerableProperty$17,
		referrer: kEnumerableProperty$17,
		mode: kEnumerableProperty$17,
		[Symbol.toStringTag]: {
			value: "Request",
			configurable: true
		}
	});
	webidl$25.converters.Request = webidl$25.interfaceConverter(Request$7);
	webidl$25.converters.RequestInfo = function(V) {
		if (typeof V === "string") return webidl$25.converters.USVString(V);
		if (V instanceof Request$7) return webidl$25.converters.Request(V);
		return webidl$25.converters.USVString(V);
	};
	webidl$25.converters.AbortSignal = webidl$25.interfaceConverter(AbortSignal);
	webidl$25.converters.RequestInit = webidl$25.dictionaryConverter([
		{
			key: "method",
			converter: webidl$25.converters.ByteString
		},
		{
			key: "headers",
			converter: webidl$25.converters.HeadersInit
		},
		{
			key: "body",
			converter: webidl$25.nullableConverter(webidl$25.converters.BodyInit)
		},
		{
			key: "referrer",
			converter: webidl$25.converters.USVString
		},
		{
			key: "referrerPolicy",
			converter: webidl$25.converters.DOMString,
			allowedValues: referrerPolicy$2
		},
		{
			key: "mode",
			converter: webidl$25.converters.DOMString,
			allowedValues: requestMode$2
		},
		{
			key: "credentials",
			converter: webidl$25.converters.DOMString,
			allowedValues: requestCredentials$2
		},
		{
			key: "cache",
			converter: webidl$25.converters.DOMString,
			allowedValues: requestCache$2
		},
		{
			key: "redirect",
			converter: webidl$25.converters.DOMString,
			allowedValues: requestRedirect$2
		},
		{
			key: "integrity",
			converter: webidl$25.converters.DOMString
		},
		{
			key: "keepalive",
			converter: webidl$25.converters.boolean
		},
		{
			key: "signal",
			converter: webidl$25.nullableConverter((signal) => webidl$25.converters.AbortSignal(signal, { strict: false }))
		},
		{
			key: "window",
			converter: webidl$25.converters.any
		},
		{
			key: "duplex",
			converter: webidl$25.converters.DOMString,
			allowedValues: requestDuplex$2
		}
	]);
	module.exports = {
		Request: Request$7,
		makeRequest: makeRequest$5
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/index.js
var require_fetch$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/index.js"(exports, module) {
	const { Response: Response$3, makeNetworkError: makeNetworkError$2, makeAppropriateNetworkError: makeAppropriateNetworkError$2, filterResponse: filterResponse$2, makeResponse: makeResponse$2 } = require_response$1();
	const { Headers: Headers$9 } = require_headers$1();
	const { Request: Request$6, makeRequest: makeRequest$4 } = require_request$2();
	const zlib$2 = __require("zlib");
	const { bytesMatch: bytesMatch$2, makePolicyContainer: makePolicyContainer$2, clonePolicyContainer: clonePolicyContainer$2, requestBadPort: requestBadPort$2, TAOCheck: TAOCheck$2, appendRequestOriginHeader: appendRequestOriginHeader$2, responseLocationURL: responseLocationURL$2, requestCurrentURL: requestCurrentURL$2, setRequestReferrerPolicyOnRedirect: setRequestReferrerPolicyOnRedirect$2, tryUpgradeRequestToAPotentiallyTrustworthyURL: tryUpgradeRequestToAPotentiallyTrustworthyURL$2, createOpaqueTimingInfo: createOpaqueTimingInfo$2, appendFetchMetadata: appendFetchMetadata$2, corsCheck: corsCheck$2, crossOriginResourcePolicyCheck: crossOriginResourcePolicyCheck$2, determineRequestsReferrer: determineRequestsReferrer$2, coarsenedSharedCurrentTime: coarsenedSharedCurrentTime$2, createDeferredPromise: createDeferredPromise$6, isBlobLike: isBlobLike$3, sameOrigin: sameOrigin$3, isCancelled: isCancelled$3, isAborted: isAborted$4, isErrorLike: isErrorLike$3, fullyReadBody: fullyReadBody$3, readableStreamClose: readableStreamClose$3, isomorphicEncode: isomorphicEncode$3, urlIsLocal: urlIsLocal$2, urlIsHttpHttpsScheme: urlIsHttpHttpsScheme$4, urlHasHttpsScheme: urlHasHttpsScheme$2 } = require_util$11();
	const { kState: kState$4, kHeaders: kHeaders$1, kGuard: kGuard$1, kRealm: kRealm$1 } = require_symbols$4();
	const assert$34 = __require("assert");
	const { safelyExtractBody: safelyExtractBody$2 } = require_body$1();
	const { redirectStatusSet: redirectStatusSet$4, nullBodyStatus: nullBodyStatus$3, safeMethodsSet: safeMethodsSet$2, requestBodyHeader: requestBodyHeader$2, subresourceSet: subresourceSet$2, DOMException: DOMException$3 } = require_constants$8();
	const { kHeadersList: kHeadersList$3 } = require_symbols$5();
	const EE$3 = __require("events");
	const { Readable: Readable$6, pipeline: pipeline$4 } = __require("stream");
	const { addAbortListener: addAbortListener$4, isErrored: isErrored$2, isReadable: isReadable$1, nodeMajor: nodeMajor$1, nodeMinor: nodeMinor$1 } = require_util$12();
	const { dataURLProcessor: dataURLProcessor$2, serializeAMimeType: serializeAMimeType$5 } = require_dataURL();
	const { TransformStream: TransformStream$1 } = __require("stream/web");
	const { getGlobalDispatcher: getGlobalDispatcher$8 } = require_global$2();
	const { webidl: webidl$24 } = require_webidl$1();
	const { STATUS_CODES: STATUS_CODES$2 } = __require("http");
	const GET_OR_HEAD$1 = ["GET", "HEAD"];
	/** @type {import('buffer').resolveObjectURL} */
	let resolveObjectURL$1;
	let ReadableStream$1 = globalThis.ReadableStream;
	var Fetch$1 = class extends EE$3 {
		constructor(dispatcher) {
			super();
			this.dispatcher = dispatcher;
			this.connection = null;
			this.dump = false;
			this.state = "ongoing";
			this.setMaxListeners(21);
		}
		terminate(reason) {
			if (this.state !== "ongoing") return;
			this.state = "terminated";
			this.connection?.destroy(reason);
			this.emit("terminated", reason);
		}
		abort(error$1) {
			if (this.state !== "ongoing") return;
			this.state = "aborted";
			if (!error$1) error$1 = new DOMException$3("The operation was aborted.", "AbortError");
			this.serializedAbortReason = error$1;
			this.connection?.destroy(error$1);
			this.emit("terminated", error$1);
		}
	};
	function fetch$3(input, init = {}) {
		webidl$24.argumentLengthCheck(arguments, 1, { header: "globalThis.fetch" });
		const p = createDeferredPromise$6();
		let requestObject;
		try {
			requestObject = new Request$6(input, init);
		} catch (e) {
			p.reject(e);
			return p.promise;
		}
		const request$3 = requestObject[kState$4];
		if (requestObject.signal.aborted) {
			abortFetch$1(p, request$3, null, requestObject.signal.reason);
			return p.promise;
		}
		const globalObject = request$3.client.globalObject;
		if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") request$3.serviceWorkers = "none";
		let responseObject = null;
		const relevantRealm$1 = null;
		let locallyAborted = false;
		let controller = null;
		addAbortListener$4(requestObject.signal, () => {
			locallyAborted = true;
			assert$34(controller != null);
			controller.abort(requestObject.signal.reason);
			abortFetch$1(p, request$3, responseObject, requestObject.signal.reason);
		});
		const handleFetchDone$1 = (response) => finalizeAndReportTiming$1(response, "fetch");
		const processResponse = (response) => {
			if (locallyAborted) return Promise.resolve();
			if (response.aborted) {
				abortFetch$1(p, request$3, responseObject, controller.serializedAbortReason);
				return Promise.resolve();
			}
			if (response.type === "error") {
				p.reject(Object.assign(/* @__PURE__ */ new TypeError("fetch failed"), { cause: response.error }));
				return Promise.resolve();
			}
			responseObject = new Response$3();
			responseObject[kState$4] = response;
			responseObject[kRealm$1] = relevantRealm$1;
			responseObject[kHeaders$1][kHeadersList$3] = response.headersList;
			responseObject[kHeaders$1][kGuard$1] = "immutable";
			responseObject[kHeaders$1][kRealm$1] = relevantRealm$1;
			p.resolve(responseObject);
		};
		controller = fetching$6({
			request: request$3,
			processResponseEndOfBody: handleFetchDone$1,
			processResponse,
			dispatcher: init.dispatcher ?? getGlobalDispatcher$8()
		});
		return p.promise;
	}
	function finalizeAndReportTiming$1(response, initiatorType = "other") {
		if (response.type === "error" && response.aborted) return;
		if (!response.urlList?.length) return;
		const originalURL = response.urlList[0];
		let timingInfo = response.timingInfo;
		let cacheState = response.cacheState;
		if (!urlIsHttpHttpsScheme$4(originalURL)) return;
		if (timingInfo === null) return;
		if (!response.timingAllowPassed) {
			timingInfo = createOpaqueTimingInfo$2({ startTime: timingInfo.startTime });
			cacheState = "";
		}
		timingInfo.endTime = coarsenedSharedCurrentTime$2();
		response.timingInfo = timingInfo;
		markResourceTiming$1(timingInfo, originalURL, initiatorType, globalThis, cacheState);
	}
	function markResourceTiming$1(timingInfo, originalURL, initiatorType, globalThis$13, cacheState) {
		if (nodeMajor$1 > 18 || nodeMajor$1 === 18 && nodeMinor$1 >= 2) performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis$13, cacheState);
	}
	function abortFetch$1(p, request$3, responseObject, error$1) {
		if (!error$1) error$1 = new DOMException$3("The operation was aborted.", "AbortError");
		p.reject(error$1);
		if (request$3.body != null && isReadable$1(request$3.body?.stream)) request$3.body.stream.cancel(error$1).catch((err) => {
			if (err.code === "ERR_INVALID_STATE") return;
			throw err;
		});
		if (responseObject == null) return;
		const response = responseObject[kState$4];
		if (response.body != null && isReadable$1(response.body?.stream)) response.body.stream.cancel(error$1).catch((err) => {
			if (err.code === "ERR_INVALID_STATE") return;
			throw err;
		});
	}
	function fetching$6({ request: request$3, processRequestBodyChunkLength, processRequestEndOfBody, processResponse, processResponseEndOfBody, processResponseConsumeBody, useParallelQueue = false, dispatcher }) {
		let taskDestination = null;
		let crossOriginIsolatedCapability = false;
		if (request$3.client != null) {
			taskDestination = request$3.client.globalObject;
			crossOriginIsolatedCapability = request$3.client.crossOriginIsolatedCapability;
		}
		const currenTime = coarsenedSharedCurrentTime$2(crossOriginIsolatedCapability);
		const timingInfo = createOpaqueTimingInfo$2({ startTime: currenTime });
		const fetchParams = {
			controller: new Fetch$1(dispatcher),
			request: request$3,
			timingInfo,
			processRequestBodyChunkLength,
			processRequestEndOfBody,
			processResponse,
			processResponseConsumeBody,
			processResponseEndOfBody,
			taskDestination,
			crossOriginIsolatedCapability
		};
		assert$34(!request$3.body || request$3.body.stream);
		if (request$3.window === "client") request$3.window = request$3.client?.globalObject?.constructor?.name === "Window" ? request$3.client : "no-window";
		if (request$3.origin === "client") request$3.origin = request$3.client?.origin;
		if (request$3.policyContainer === "client") if (request$3.client != null) request$3.policyContainer = clonePolicyContainer$2(request$3.client.policyContainer);
		else request$3.policyContainer = makePolicyContainer$2();
		if (!request$3.headersList.contains("accept")) {
			const value = "*/*";
			request$3.headersList.append("accept", value);
		}
		if (!request$3.headersList.contains("accept-language")) request$3.headersList.append("accept-language", "*");
		if (request$3.priority === null) {}
		if (subresourceSet$2.has(request$3.destination)) {}
		mainFetch$1(fetchParams).catch((err) => {
			fetchParams.controller.terminate(err);
		});
		return fetchParams.controller;
	}
	async function mainFetch$1(fetchParams, recursive = false) {
		const request$3 = fetchParams.request;
		let response = null;
		if (request$3.localURLsOnly && !urlIsLocal$2(requestCurrentURL$2(request$3))) response = makeNetworkError$2("local URLs only");
		tryUpgradeRequestToAPotentiallyTrustworthyURL$2(request$3);
		if (requestBadPort$2(request$3) === "blocked") response = makeNetworkError$2("bad port");
		if (request$3.referrerPolicy === "") request$3.referrerPolicy = request$3.policyContainer.referrerPolicy;
		if (request$3.referrer !== "no-referrer") request$3.referrer = determineRequestsReferrer$2(request$3);
		if (response === null) response = await (async () => {
			const currentURL = requestCurrentURL$2(request$3);
			if (sameOrigin$3(currentURL, request$3.url) && request$3.responseTainting === "basic" || currentURL.protocol === "data:" || request$3.mode === "navigate" || request$3.mode === "websocket") {
				request$3.responseTainting = "basic";
				return await schemeFetch$1(fetchParams);
			}
			if (request$3.mode === "same-origin") return makeNetworkError$2("request mode cannot be \"same-origin\"");
			if (request$3.mode === "no-cors") {
				if (request$3.redirect !== "follow") return makeNetworkError$2("redirect mode cannot be \"follow\" for \"no-cors\" request");
				request$3.responseTainting = "opaque";
				return await schemeFetch$1(fetchParams);
			}
			if (!urlIsHttpHttpsScheme$4(requestCurrentURL$2(request$3))) return makeNetworkError$2("URL scheme must be a HTTP(S) scheme");
			request$3.responseTainting = "cors";
			return await httpFetch$1(fetchParams);
		})();
		if (recursive) return response;
		if (response.status !== 0 && !response.internalResponse) {
			if (request$3.responseTainting === "cors") {}
			if (request$3.responseTainting === "basic") response = filterResponse$2(response, "basic");
			else if (request$3.responseTainting === "cors") response = filterResponse$2(response, "cors");
			else if (request$3.responseTainting === "opaque") response = filterResponse$2(response, "opaque");
			else assert$34(false);
		}
		let internalResponse = response.status === 0 ? response : response.internalResponse;
		if (internalResponse.urlList.length === 0) internalResponse.urlList.push(...request$3.urlList);
		if (!request$3.timingAllowFailed) response.timingAllowPassed = true;
		if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request$3.headers.contains("range")) response = internalResponse = makeNetworkError$2();
		if (response.status !== 0 && (request$3.method === "HEAD" || request$3.method === "CONNECT" || nullBodyStatus$3.includes(internalResponse.status))) {
			internalResponse.body = null;
			fetchParams.controller.dump = true;
		}
		if (request$3.integrity) {
			const processBodyError = (reason) => fetchFinale$1(fetchParams, makeNetworkError$2(reason));
			if (request$3.responseTainting === "opaque" || response.body == null) {
				processBodyError(response.error);
				return;
			}
			const processBody = (bytes) => {
				if (!bytesMatch$2(bytes, request$3.integrity)) {
					processBodyError("integrity mismatch");
					return;
				}
				response.body = safelyExtractBody$2(bytes)[0];
				fetchFinale$1(fetchParams, response);
			};
			await fullyReadBody$3(response.body, processBody, processBodyError);
		} else fetchFinale$1(fetchParams, response);
	}
	function schemeFetch$1(fetchParams) {
		if (isCancelled$3(fetchParams) && fetchParams.request.redirectCount === 0) return Promise.resolve(makeAppropriateNetworkError$2(fetchParams));
		const { request: request$3 } = fetchParams;
		const { protocol: scheme } = requestCurrentURL$2(request$3);
		switch (scheme) {
			case "about:": return Promise.resolve(makeNetworkError$2("about scheme is not supported"));
			case "blob:": {
				if (!resolveObjectURL$1) resolveObjectURL$1 = __require("buffer").resolveObjectURL;
				const blobURLEntry = requestCurrentURL$2(request$3);
				if (blobURLEntry.search.length !== 0) return Promise.resolve(makeNetworkError$2("NetworkError when attempting to fetch resource."));
				const blobURLEntryObject = resolveObjectURL$1(blobURLEntry.toString());
				if (request$3.method !== "GET" || !isBlobLike$3(blobURLEntryObject)) return Promise.resolve(makeNetworkError$2("invalid method"));
				const bodyWithType = safelyExtractBody$2(blobURLEntryObject);
				const body = bodyWithType[0];
				const length = isomorphicEncode$3(`${body.length}`);
				const type = bodyWithType[1] ?? "";
				const response = makeResponse$2({
					statusText: "OK",
					headersList: [["content-length", {
						name: "Content-Length",
						value: length
					}], ["content-type", {
						name: "Content-Type",
						value: type
					}]]
				});
				response.body = body;
				return Promise.resolve(response);
			}
			case "data:": {
				const currentURL = requestCurrentURL$2(request$3);
				const dataURLStruct = dataURLProcessor$2(currentURL);
				if (dataURLStruct === "failure") return Promise.resolve(makeNetworkError$2("failed to fetch the data URL"));
				const mimeType = serializeAMimeType$5(dataURLStruct.mimeType);
				return Promise.resolve(makeResponse$2({
					statusText: "OK",
					headersList: [["content-type", {
						name: "Content-Type",
						value: mimeType
					}]],
					body: safelyExtractBody$2(dataURLStruct.body)[0]
				}));
			}
			case "file:": return Promise.resolve(makeNetworkError$2("not implemented... yet..."));
			case "http:":
			case "https:": return httpFetch$1(fetchParams).catch((err) => makeNetworkError$2(err));
			default: return Promise.resolve(makeNetworkError$2("unknown scheme"));
		}
	}
	function finalizeResponse$1(fetchParams, response) {
		fetchParams.request.done = true;
		if (fetchParams.processResponseDone != null) queueMicrotask(() => fetchParams.processResponseDone(response));
	}
	function fetchFinale$1(fetchParams, response) {
		if (response.type === "error") {
			response.urlList = [fetchParams.request.urlList[0]];
			response.timingInfo = createOpaqueTimingInfo$2({ startTime: fetchParams.timingInfo.startTime });
		}
		const processResponseEndOfBody = () => {
			fetchParams.request.done = true;
			if (fetchParams.processResponseEndOfBody != null) queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
		};
		if (fetchParams.processResponse != null) queueMicrotask(() => fetchParams.processResponse(response));
		if (response.body == null) processResponseEndOfBody();
		else {
			const identityTransformAlgorithm = (chunk, controller) => {
				controller.enqueue(chunk);
			};
			const transformStream = new TransformStream$1({
				start() {},
				transform: identityTransformAlgorithm,
				flush: processResponseEndOfBody
			}, { size() {
				return 1;
			} }, { size() {
				return 1;
			} });
			response.body = { stream: response.body.stream.pipeThrough(transformStream) };
		}
		if (fetchParams.processResponseConsumeBody != null) {
			const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes);
			const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure);
			if (response.body == null) queueMicrotask(() => processBody(null));
			else return fullyReadBody$3(response.body, processBody, processBodyError);
			return Promise.resolve();
		}
	}
	async function httpFetch$1(fetchParams) {
		const request$3 = fetchParams.request;
		let response = null;
		let actualResponse = null;
		const timingInfo = fetchParams.timingInfo;
		if (request$3.serviceWorkers === "all") {}
		if (response === null) {
			if (request$3.redirect === "follow") request$3.serviceWorkers = "none";
			actualResponse = response = await httpNetworkOrCacheFetch$1(fetchParams);
			if (request$3.responseTainting === "cors" && corsCheck$2(request$3, response) === "failure") return makeNetworkError$2("cors failure");
			if (TAOCheck$2(request$3, response) === "failure") request$3.timingAllowFailed = true;
		}
		if ((request$3.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck$2(request$3.origin, request$3.client, request$3.destination, actualResponse) === "blocked") return makeNetworkError$2("blocked");
		if (redirectStatusSet$4.has(actualResponse.status)) {
			if (request$3.redirect !== "manual") fetchParams.controller.connection.destroy();
			if (request$3.redirect === "error") response = makeNetworkError$2("unexpected redirect");
			else if (request$3.redirect === "manual") response = actualResponse;
			else if (request$3.redirect === "follow") response = await httpRedirectFetch$1(fetchParams, response);
			else assert$34(false);
		}
		response.timingInfo = timingInfo;
		return response;
	}
	function httpRedirectFetch$1(fetchParams, response) {
		const request$3 = fetchParams.request;
		const actualResponse = response.internalResponse ? response.internalResponse : response;
		let locationURL;
		try {
			locationURL = responseLocationURL$2(actualResponse, requestCurrentURL$2(request$3).hash);
			if (locationURL == null) return response;
		} catch (err) {
			return Promise.resolve(makeNetworkError$2(err));
		}
		if (!urlIsHttpHttpsScheme$4(locationURL)) return Promise.resolve(makeNetworkError$2("URL scheme must be a HTTP(S) scheme"));
		if (request$3.redirectCount === 20) return Promise.resolve(makeNetworkError$2("redirect count exceeded"));
		request$3.redirectCount += 1;
		if (request$3.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin$3(request$3, locationURL)) return Promise.resolve(makeNetworkError$2("cross origin not allowed for request mode \"cors\""));
		if (request$3.responseTainting === "cors" && (locationURL.username || locationURL.password)) return Promise.resolve(makeNetworkError$2("URL cannot contain credentials for request mode \"cors\""));
		if (actualResponse.status !== 303 && request$3.body != null && request$3.body.source == null) return Promise.resolve(makeNetworkError$2());
		if ([301, 302].includes(actualResponse.status) && request$3.method === "POST" || actualResponse.status === 303 && !GET_OR_HEAD$1.includes(request$3.method)) {
			request$3.method = "GET";
			request$3.body = null;
			for (const headerName of requestBodyHeader$2) request$3.headersList.delete(headerName);
		}
		if (!sameOrigin$3(requestCurrentURL$2(request$3), locationURL)) {
			request$3.headersList.delete("authorization");
			request$3.headersList.delete("proxy-authorization", true);
			request$3.headersList.delete("cookie");
			request$3.headersList.delete("host");
		}
		if (request$3.body != null) {
			assert$34(request$3.body.source != null);
			request$3.body = safelyExtractBody$2(request$3.body.source)[0];
		}
		const timingInfo = fetchParams.timingInfo;
		timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime$2(fetchParams.crossOriginIsolatedCapability);
		if (timingInfo.redirectStartTime === 0) timingInfo.redirectStartTime = timingInfo.startTime;
		request$3.urlList.push(locationURL);
		setRequestReferrerPolicyOnRedirect$2(request$3, actualResponse);
		return mainFetch$1(fetchParams, true);
	}
	async function httpNetworkOrCacheFetch$1(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
		const request$3 = fetchParams.request;
		let httpFetchParams = null;
		let httpRequest = null;
		let response = null;
		const httpCache = null;
		const revalidatingFlag = false;
		if (request$3.window === "no-window" && request$3.redirect === "error") {
			httpFetchParams = fetchParams;
			httpRequest = request$3;
		} else {
			httpRequest = makeRequest$4(request$3);
			httpFetchParams = { ...fetchParams };
			httpFetchParams.request = httpRequest;
		}
		const includeCredentials = request$3.credentials === "include" || request$3.credentials === "same-origin" && request$3.responseTainting === "basic";
		const contentLength = httpRequest.body ? httpRequest.body.length : null;
		let contentLengthHeaderValue = null;
		if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) contentLengthHeaderValue = "0";
		if (contentLength != null) contentLengthHeaderValue = isomorphicEncode$3(`${contentLength}`);
		if (contentLengthHeaderValue != null) httpRequest.headersList.append("content-length", contentLengthHeaderValue);
		if (contentLength != null && httpRequest.keepalive) {}
		if (httpRequest.referrer instanceof URL) httpRequest.headersList.append("referer", isomorphicEncode$3(httpRequest.referrer.href));
		appendRequestOriginHeader$2(httpRequest);
		appendFetchMetadata$2(httpRequest);
		if (!httpRequest.headersList.contains("user-agent")) httpRequest.headersList.append("user-agent", typeof esbuildDetection === "undefined" ? "undici" : "node");
		if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range"))) httpRequest.cache = "no-store";
		if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control")) httpRequest.headersList.append("cache-control", "max-age=0");
		if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
			if (!httpRequest.headersList.contains("pragma")) httpRequest.headersList.append("pragma", "no-cache");
			if (!httpRequest.headersList.contains("cache-control")) httpRequest.headersList.append("cache-control", "no-cache");
		}
		if (httpRequest.headersList.contains("range")) httpRequest.headersList.append("accept-encoding", "identity");
		if (!httpRequest.headersList.contains("accept-encoding")) if (urlHasHttpsScheme$2(requestCurrentURL$2(httpRequest))) httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
		else httpRequest.headersList.append("accept-encoding", "gzip, deflate");
		httpRequest.headersList.delete("host");
		if (includeCredentials) {}
		if (httpCache == null) httpRequest.cache = "no-store";
		if (httpRequest.mode !== "no-store" && httpRequest.mode !== "reload") {}
		if (response == null) {
			if (httpRequest.mode === "only-if-cached") return makeNetworkError$2("only if cached");
			const forwardResponse = await httpNetworkFetch$1(httpFetchParams, includeCredentials, isNewConnectionFetch);
			if (!safeMethodsSet$2.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {}
			if (response == null) response = forwardResponse;
		}
		response.urlList = [...httpRequest.urlList];
		if (httpRequest.headersList.contains("range")) response.rangeRequested = true;
		response.requestIncludesCredentials = includeCredentials;
		if (response.status === 407) {
			if (request$3.window === "no-window") return makeNetworkError$2();
			if (isCancelled$3(fetchParams)) return makeAppropriateNetworkError$2(fetchParams);
			return makeNetworkError$2("proxy authentication required");
		}
		if (response.status === 421 && !isNewConnectionFetch && (request$3.body == null || request$3.body.source != null)) {
			if (isCancelled$3(fetchParams)) return makeAppropriateNetworkError$2(fetchParams);
			fetchParams.controller.connection.destroy();
			response = await httpNetworkOrCacheFetch$1(fetchParams, isAuthenticationFetch, true);
		}
		if (isAuthenticationFetch) {}
		return response;
	}
	async function httpNetworkFetch$1(fetchParams, includeCredentials = false, forceNewConnection = false) {
		assert$34(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
		fetchParams.controller.connection = {
			abort: null,
			destroyed: false,
			destroy(err) {
				if (!this.destroyed) {
					this.destroyed = true;
					this.abort?.(err ?? new DOMException$3("The operation was aborted.", "AbortError"));
				}
			}
		};
		const request$3 = fetchParams.request;
		let response = null;
		const timingInfo = fetchParams.timingInfo;
		const httpCache = null;
		if (httpCache == null) request$3.cache = "no-store";
		const newConnection = forceNewConnection ? "yes" : "no";
		if (request$3.mode === "websocket") {}
		let requestBody = null;
		if (request$3.body == null && fetchParams.processRequestEndOfBody) queueMicrotask(() => fetchParams.processRequestEndOfBody());
		else if (request$3.body != null) {
			const processBodyChunk = async function* (bytes) {
				if (isCancelled$3(fetchParams)) return;
				yield bytes;
				fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
			};
			const processEndOfBody = () => {
				if (isCancelled$3(fetchParams)) return;
				if (fetchParams.processRequestEndOfBody) fetchParams.processRequestEndOfBody();
			};
			const processBodyError = (e) => {
				if (isCancelled$3(fetchParams)) return;
				if (e.name === "AbortError") fetchParams.controller.abort();
				else fetchParams.controller.terminate(e);
			};
			requestBody = async function* () {
				try {
					for await (const bytes of request$3.body.stream) yield* processBodyChunk(bytes);
					processEndOfBody();
				} catch (err) {
					processBodyError(err);
				}
			}();
		}
		try {
			const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });
			if (socket) response = makeResponse$2({
				status,
				statusText,
				headersList,
				socket
			});
			else {
				const iterator$1 = body[Symbol.asyncIterator]();
				fetchParams.controller.next = () => iterator$1.next();
				response = makeResponse$2({
					status,
					statusText,
					headersList
				});
			}
		} catch (err) {
			if (err.name === "AbortError") {
				fetchParams.controller.connection.destroy();
				return makeAppropriateNetworkError$2(fetchParams, err);
			}
			return makeNetworkError$2(err);
		}
		const pullAlgorithm = () => {
			fetchParams.controller.resume();
		};
		const cancelAlgorithm = (reason) => {
			fetchParams.controller.abort(reason);
		};
		if (!ReadableStream$1) ReadableStream$1 = __require("stream/web").ReadableStream;
		const stream$4 = new ReadableStream$1({
			async start(controller) {
				fetchParams.controller.controller = controller;
			},
			async pull(controller) {
				await pullAlgorithm(controller);
			},
			async cancel(reason) {
				await cancelAlgorithm(reason);
			}
		}, {
			highWaterMark: 0,
			size() {
				return 1;
			}
		});
		response.body = { stream: stream$4 };
		fetchParams.controller.on("terminated", onAborted);
		fetchParams.controller.resume = async () => {
			while (true) {
				let bytes;
				let isFailure;
				try {
					const { done, value } = await fetchParams.controller.next();
					if (isAborted$4(fetchParams)) break;
					bytes = done ? void 0 : value;
				} catch (err) {
					if (fetchParams.controller.ended && !timingInfo.encodedBodySize) bytes = void 0;
					else {
						bytes = err;
						isFailure = true;
					}
				}
				if (bytes === void 0) {
					readableStreamClose$3(fetchParams.controller.controller);
					finalizeResponse$1(fetchParams, response);
					return;
				}
				timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
				if (isFailure) {
					fetchParams.controller.terminate(bytes);
					return;
				}
				fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
				if (isErrored$2(stream$4)) {
					fetchParams.controller.terminate();
					return;
				}
				if (!fetchParams.controller.controller.desiredSize) return;
			}
		};
		function onAborted(reason) {
			if (isAborted$4(fetchParams)) {
				response.aborted = true;
				if (isReadable$1(stream$4)) fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);
			} else if (isReadable$1(stream$4)) fetchParams.controller.controller.error(new TypeError("terminated", { cause: isErrorLike$3(reason) ? reason : void 0 }));
			fetchParams.controller.connection.destroy();
		}
		return response;
		async function dispatch({ body }) {
			const url = requestCurrentURL$2(request$3);
			/** @type {import('../..').Agent} */
			const agent = fetchParams.controller.dispatcher;
			return new Promise((resolve$1, reject) => agent.dispatch({
				path: url.pathname + url.search,
				origin: url.origin,
				method: request$3.method,
				body: fetchParams.controller.dispatcher.isMockActive ? request$3.body && (request$3.body.source || request$3.body.stream) : body,
				headers: request$3.headersList.entries,
				maxRedirections: 0,
				upgrade: request$3.mode === "websocket" ? "websocket" : void 0
			}, {
				body: null,
				abort: null,
				onConnect(abort$2) {
					const { connection } = fetchParams.controller;
					if (connection.destroyed) abort$2(new DOMException$3("The operation was aborted.", "AbortError"));
					else {
						fetchParams.controller.on("terminated", abort$2);
						this.abort = connection.abort = abort$2;
					}
				},
				onHeaders(status, headersList, resume$2, statusText) {
					if (status < 200) return;
					let codings = [];
					let location = "";
					const headers = new Headers$9();
					if (Array.isArray(headersList)) for (let n$1 = 0; n$1 < headersList.length; n$1 += 2) {
						const key = headersList[n$1 + 0].toString("latin1");
						const val = headersList[n$1 + 1].toString("latin1");
						if (key.toLowerCase() === "content-encoding") codings = val.toLowerCase().split(",").map((x) => x.trim());
						else if (key.toLowerCase() === "location") location = val;
						headers[kHeadersList$3].append(key, val);
					}
					else {
						const keys$1 = Object.keys(headersList);
						for (const key of keys$1) {
							const val = headersList[key];
							if (key.toLowerCase() === "content-encoding") codings = val.toLowerCase().split(",").map((x) => x.trim()).reverse();
							else if (key.toLowerCase() === "location") location = val;
							headers[kHeadersList$3].append(key, val);
						}
					}
					this.body = new Readable$6({ read: resume$2 });
					const decoders$1 = [];
					const willFollow = request$3.redirect === "follow" && location && redirectStatusSet$4.has(status);
					if (request$3.method !== "HEAD" && request$3.method !== "CONNECT" && !nullBodyStatus$3.includes(status) && !willFollow) for (const coding of codings) if (coding === "x-gzip" || coding === "gzip") decoders$1.push(zlib$2.createGunzip({
						flush: zlib$2.constants.Z_SYNC_FLUSH,
						finishFlush: zlib$2.constants.Z_SYNC_FLUSH
					}));
					else if (coding === "deflate") decoders$1.push(zlib$2.createInflate());
					else if (coding === "br") decoders$1.push(zlib$2.createBrotliDecompress());
					else {
						decoders$1.length = 0;
						break;
					}
					resolve$1({
						status,
						statusText,
						headersList: headers[kHeadersList$3],
						body: decoders$1.length ? pipeline$4(this.body, ...decoders$1, () => {}) : this.body.on("error", () => {})
					});
					return true;
				},
				onData(chunk) {
					if (fetchParams.controller.dump) return;
					const bytes = chunk;
					timingInfo.encodedBodySize += bytes.byteLength;
					return this.body.push(bytes);
				},
				onComplete() {
					if (this.abort) fetchParams.controller.off("terminated", this.abort);
					fetchParams.controller.ended = true;
					this.body.push(null);
				},
				onError(error$1) {
					if (this.abort) fetchParams.controller.off("terminated", this.abort);
					this.body?.destroy(error$1);
					fetchParams.controller.terminate(error$1);
					reject(error$1);
				},
				onUpgrade(status, headersList, socket) {
					if (status !== 101) return;
					const headers = new Headers$9();
					for (let n$1 = 0; n$1 < headersList.length; n$1 += 2) {
						const key = headersList[n$1 + 0].toString("latin1");
						const val = headersList[n$1 + 1].toString("latin1");
						headers[kHeadersList$3].append(key, val);
					}
					resolve$1({
						status,
						statusText: STATUS_CODES$2[status],
						headersList: headers[kHeadersList$3],
						socket
					});
					return true;
				}
			}));
		}
	}
	module.exports = {
		fetch: fetch$3,
		Fetch: Fetch$1,
		fetching: fetching$6,
		finalizeAndReportTiming: finalizeAndReportTiming$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/symbols.js
var require_symbols$3 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/symbols.js"(exports, module) {
	module.exports = {
		kState: Symbol("FileReader state"),
		kResult: Symbol("FileReader result"),
		kError: Symbol("FileReader error"),
		kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
		kEvents: Symbol("FileReader events"),
		kAborted: Symbol("FileReader aborted")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/progressevent.js
var require_progressevent = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/progressevent.js"(exports, module) {
	const { webidl: webidl$23 } = require_webidl$1();
	const kState$3 = Symbol("ProgressEvent state");
	/**
	* @see https://xhr.spec.whatwg.org/#progressevent
	*/
	var ProgressEvent$1 = class ProgressEvent$1 extends Event {
		constructor(type, eventInitDict = {}) {
			type = webidl$23.converters.DOMString(type);
			eventInitDict = webidl$23.converters.ProgressEventInit(eventInitDict ?? {});
			super(type, eventInitDict);
			this[kState$3] = {
				lengthComputable: eventInitDict.lengthComputable,
				loaded: eventInitDict.loaded,
				total: eventInitDict.total
			};
		}
		get lengthComputable() {
			webidl$23.brandCheck(this, ProgressEvent$1);
			return this[kState$3].lengthComputable;
		}
		get loaded() {
			webidl$23.brandCheck(this, ProgressEvent$1);
			return this[kState$3].loaded;
		}
		get total() {
			webidl$23.brandCheck(this, ProgressEvent$1);
			return this[kState$3].total;
		}
	};
	webidl$23.converters.ProgressEventInit = webidl$23.dictionaryConverter([
		{
			key: "lengthComputable",
			converter: webidl$23.converters.boolean,
			defaultValue: false
		},
		{
			key: "loaded",
			converter: webidl$23.converters["unsigned long long"],
			defaultValue: 0
		},
		{
			key: "total",
			converter: webidl$23.converters["unsigned long long"],
			defaultValue: 0
		},
		{
			key: "bubbles",
			converter: webidl$23.converters.boolean,
			defaultValue: false
		},
		{
			key: "cancelable",
			converter: webidl$23.converters.boolean,
			defaultValue: false
		},
		{
			key: "composed",
			converter: webidl$23.converters.boolean,
			defaultValue: false
		}
	]);
	module.exports = { ProgressEvent: ProgressEvent$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/encoding.js
var require_encoding = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/encoding.js"(exports, module) {
	/**
	* @see https://encoding.spec.whatwg.org/#concept-encoding-get
	* @param {string|undefined} label
	*/
	function getEncoding$1(label) {
		if (!label) return "failure";
		switch (label.trim().toLowerCase()) {
			case "unicode-1-1-utf-8":
			case "unicode11utf8":
			case "unicode20utf8":
			case "utf-8":
			case "utf8":
			case "x-unicode20utf8": return "UTF-8";
			case "866":
			case "cp866":
			case "csibm866":
			case "ibm866": return "IBM866";
			case "csisolatin2":
			case "iso-8859-2":
			case "iso-ir-101":
			case "iso8859-2":
			case "iso88592":
			case "iso_8859-2":
			case "iso_8859-2:1987":
			case "l2":
			case "latin2": return "ISO-8859-2";
			case "csisolatin3":
			case "iso-8859-3":
			case "iso-ir-109":
			case "iso8859-3":
			case "iso88593":
			case "iso_8859-3":
			case "iso_8859-3:1988":
			case "l3":
			case "latin3": return "ISO-8859-3";
			case "csisolatin4":
			case "iso-8859-4":
			case "iso-ir-110":
			case "iso8859-4":
			case "iso88594":
			case "iso_8859-4":
			case "iso_8859-4:1988":
			case "l4":
			case "latin4": return "ISO-8859-4";
			case "csisolatincyrillic":
			case "cyrillic":
			case "iso-8859-5":
			case "iso-ir-144":
			case "iso8859-5":
			case "iso88595":
			case "iso_8859-5":
			case "iso_8859-5:1988": return "ISO-8859-5";
			case "arabic":
			case "asmo-708":
			case "csiso88596e":
			case "csiso88596i":
			case "csisolatinarabic":
			case "ecma-114":
			case "iso-8859-6":
			case "iso-8859-6-e":
			case "iso-8859-6-i":
			case "iso-ir-127":
			case "iso8859-6":
			case "iso88596":
			case "iso_8859-6":
			case "iso_8859-6:1987": return "ISO-8859-6";
			case "csisolatingreek":
			case "ecma-118":
			case "elot_928":
			case "greek":
			case "greek8":
			case "iso-8859-7":
			case "iso-ir-126":
			case "iso8859-7":
			case "iso88597":
			case "iso_8859-7":
			case "iso_8859-7:1987":
			case "sun_eu_greek": return "ISO-8859-7";
			case "csiso88598e":
			case "csisolatinhebrew":
			case "hebrew":
			case "iso-8859-8":
			case "iso-8859-8-e":
			case "iso-ir-138":
			case "iso8859-8":
			case "iso88598":
			case "iso_8859-8":
			case "iso_8859-8:1988":
			case "visual": return "ISO-8859-8";
			case "csiso88598i":
			case "iso-8859-8-i":
			case "logical": return "ISO-8859-8-I";
			case "csisolatin6":
			case "iso-8859-10":
			case "iso-ir-157":
			case "iso8859-10":
			case "iso885910":
			case "l6":
			case "latin6": return "ISO-8859-10";
			case "iso-8859-13":
			case "iso8859-13":
			case "iso885913": return "ISO-8859-13";
			case "iso-8859-14":
			case "iso8859-14":
			case "iso885914": return "ISO-8859-14";
			case "csisolatin9":
			case "iso-8859-15":
			case "iso8859-15":
			case "iso885915":
			case "iso_8859-15":
			case "l9": return "ISO-8859-15";
			case "iso-8859-16": return "ISO-8859-16";
			case "cskoi8r":
			case "koi":
			case "koi8":
			case "koi8-r":
			case "koi8_r": return "KOI8-R";
			case "koi8-ru":
			case "koi8-u": return "KOI8-U";
			case "csmacintosh":
			case "mac":
			case "macintosh":
			case "x-mac-roman": return "macintosh";
			case "iso-8859-11":
			case "iso8859-11":
			case "iso885911":
			case "tis-620":
			case "windows-874": return "windows-874";
			case "cp1250":
			case "windows-1250":
			case "x-cp1250": return "windows-1250";
			case "cp1251":
			case "windows-1251":
			case "x-cp1251": return "windows-1251";
			case "ansi_x3.4-1968":
			case "ascii":
			case "cp1252":
			case "cp819":
			case "csisolatin1":
			case "ibm819":
			case "iso-8859-1":
			case "iso-ir-100":
			case "iso8859-1":
			case "iso88591":
			case "iso_8859-1":
			case "iso_8859-1:1987":
			case "l1":
			case "latin1":
			case "us-ascii":
			case "windows-1252":
			case "x-cp1252": return "windows-1252";
			case "cp1253":
			case "windows-1253":
			case "x-cp1253": return "windows-1253";
			case "cp1254":
			case "csisolatin5":
			case "iso-8859-9":
			case "iso-ir-148":
			case "iso8859-9":
			case "iso88599":
			case "iso_8859-9":
			case "iso_8859-9:1989":
			case "l5":
			case "latin5":
			case "windows-1254":
			case "x-cp1254": return "windows-1254";
			case "cp1255":
			case "windows-1255":
			case "x-cp1255": return "windows-1255";
			case "cp1256":
			case "windows-1256":
			case "x-cp1256": return "windows-1256";
			case "cp1257":
			case "windows-1257":
			case "x-cp1257": return "windows-1257";
			case "cp1258":
			case "windows-1258":
			case "x-cp1258": return "windows-1258";
			case "x-mac-cyrillic":
			case "x-mac-ukrainian": return "x-mac-cyrillic";
			case "chinese":
			case "csgb2312":
			case "csiso58gb231280":
			case "gb2312":
			case "gb_2312":
			case "gb_2312-80":
			case "gbk":
			case "iso-ir-58":
			case "x-gbk": return "GBK";
			case "gb18030": return "gb18030";
			case "big5":
			case "big5-hkscs":
			case "cn-big5":
			case "csbig5":
			case "x-x-big5": return "Big5";
			case "cseucpkdfmtjapanese":
			case "euc-jp":
			case "x-euc-jp": return "EUC-JP";
			case "csiso2022jp":
			case "iso-2022-jp": return "ISO-2022-JP";
			case "csshiftjis":
			case "ms932":
			case "ms_kanji":
			case "shift-jis":
			case "shift_jis":
			case "sjis":
			case "windows-31j":
			case "x-sjis": return "Shift_JIS";
			case "cseuckr":
			case "csksc56011987":
			case "euc-kr":
			case "iso-ir-149":
			case "korean":
			case "ks_c_5601-1987":
			case "ks_c_5601-1989":
			case "ksc5601":
			case "ksc_5601":
			case "windows-949": return "EUC-KR";
			case "csiso2022kr":
			case "hz-gb-2312":
			case "iso-2022-cn":
			case "iso-2022-cn-ext":
			case "iso-2022-kr":
			case "replacement": return "replacement";
			case "unicodefffe":
			case "utf-16be": return "UTF-16BE";
			case "csunicode":
			case "iso-10646-ucs-2":
			case "ucs-2":
			case "unicode":
			case "unicodefeff":
			case "utf-16":
			case "utf-16le": return "UTF-16LE";
			case "x-user-defined": return "x-user-defined";
			default: return "failure";
		}
	}
	module.exports = { getEncoding: getEncoding$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/util.js
var require_util$9 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/util.js"(exports, module) {
	const { kState: kState$2, kError: kError$4, kResult: kResult$1, kAborted: kAborted$1, kLastProgressEventFired } = require_symbols$3();
	const { ProgressEvent } = require_progressevent();
	const { getEncoding } = require_encoding();
	const { DOMException: DOMException$2 } = require_constants$8();
	const { serializeAMimeType: serializeAMimeType$4, parseMIMEType: parseMIMEType$4 } = require_dataURL();
	const { types: types$5 } = __require("util");
	const { StringDecoder: StringDecoder$1 } = __require("string_decoder");
	const { btoa: btoa$1 } = __require("buffer");
	/** @type {PropertyDescriptor} */
	const staticPropertyDescriptors$5 = {
		enumerable: true,
		writable: false,
		configurable: false
	};
	/**
	* @see https://w3c.github.io/FileAPI/#readOperation
	* @param {import('./filereader').FileReader} fr
	* @param {import('buffer').Blob} blob
	* @param {string} type
	* @param {string?} encodingName
	*/
	function readOperation$1(fr, blob, type, encodingName) {
		if (fr[kState$2] === "loading") throw new DOMException$2("Invalid state", "InvalidStateError");
		fr[kState$2] = "loading";
		fr[kResult$1] = null;
		fr[kError$4] = null;
		/** @type {import('stream/web').ReadableStream} */
		const stream$4 = blob.stream();
		const reader = stream$4.getReader();
		/** @type {Uint8Array[]} */
		const bytes = [];
		let chunkPromise = reader.read();
		let isFirstChunk = true;
		(async () => {
			while (!fr[kAborted$1]) try {
				const { done, value } = await chunkPromise;
				if (isFirstChunk && !fr[kAborted$1]) queueMicrotask(() => {
					fireAProgressEvent$1("loadstart", fr);
				});
				isFirstChunk = false;
				if (!done && types$5.isUint8Array(value)) {
					bytes.push(value);
					if ((fr[kLastProgressEventFired] === void 0 || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted$1]) {
						fr[kLastProgressEventFired] = Date.now();
						queueMicrotask(() => {
							fireAProgressEvent$1("progress", fr);
						});
					}
					chunkPromise = reader.read();
				} else if (done) {
					queueMicrotask(() => {
						fr[kState$2] = "done";
						try {
							const result = packageData(bytes, type, blob.type, encodingName);
							if (fr[kAborted$1]) return;
							fr[kResult$1] = result;
							fireAProgressEvent$1("load", fr);
						} catch (error$1) {
							fr[kError$4] = error$1;
							fireAProgressEvent$1("error", fr);
						}
						if (fr[kState$2] !== "loading") fireAProgressEvent$1("loadend", fr);
					});
					break;
				}
			} catch (error$1) {
				if (fr[kAborted$1]) return;
				queueMicrotask(() => {
					fr[kState$2] = "done";
					fr[kError$4] = error$1;
					fireAProgressEvent$1("error", fr);
					if (fr[kState$2] !== "loading") fireAProgressEvent$1("loadend", fr);
				});
				break;
			}
		})();
	}
	/**
	* @see https://w3c.github.io/FileAPI/#fire-a-progress-event
	* @see https://dom.spec.whatwg.org/#concept-event-fire
	* @param {string} e The name of the event
	* @param {import('./filereader').FileReader} reader
	*/
	function fireAProgressEvent$1(e, reader) {
		const event = new ProgressEvent(e, {
			bubbles: false,
			cancelable: false
		});
		reader.dispatchEvent(event);
	}
	/**
	* @see https://w3c.github.io/FileAPI/#blob-package-data
	* @param {Uint8Array[]} bytes
	* @param {string} type
	* @param {string?} mimeType
	* @param {string?} encodingName
	*/
	function packageData(bytes, type, mimeType, encodingName) {
		switch (type) {
			case "DataURL": {
				let dataURL = "data:";
				const parsed = parseMIMEType$4(mimeType || "application/octet-stream");
				if (parsed !== "failure") dataURL += serializeAMimeType$4(parsed);
				dataURL += ";base64,";
				const decoder = new StringDecoder$1("latin1");
				for (const chunk of bytes) dataURL += btoa$1(decoder.write(chunk));
				dataURL += btoa$1(decoder.end());
				return dataURL;
			}
			case "Text": {
				let encoding = "failure";
				if (encodingName) encoding = getEncoding(encodingName);
				if (encoding === "failure" && mimeType) {
					const type$1 = parseMIMEType$4(mimeType);
					if (type$1 !== "failure") encoding = getEncoding(type$1.parameters.get("charset"));
				}
				if (encoding === "failure") encoding = "UTF-8";
				return decode(bytes, encoding);
			}
			case "ArrayBuffer": {
				const sequence = combineByteSequences(bytes);
				return sequence.buffer;
			}
			case "BinaryString": {
				let binaryString = "";
				const decoder = new StringDecoder$1("latin1");
				for (const chunk of bytes) binaryString += decoder.write(chunk);
				binaryString += decoder.end();
				return binaryString;
			}
		}
	}
	/**
	* @see https://encoding.spec.whatwg.org/#decode
	* @param {Uint8Array[]} ioQueue
	* @param {string} encoding
	*/
	function decode(ioQueue, encoding) {
		const bytes = combineByteSequences(ioQueue);
		const BOMEncoding = BOMSniffing(bytes);
		let slice = 0;
		if (BOMEncoding !== null) {
			encoding = BOMEncoding;
			slice = BOMEncoding === "UTF-8" ? 3 : 2;
		}
		const sliced = bytes.slice(slice);
		return new TextDecoder(encoding).decode(sliced);
	}
	/**
	* @see https://encoding.spec.whatwg.org/#bom-sniff
	* @param {Uint8Array} ioQueue
	*/
	function BOMSniffing(ioQueue) {
		const [a$1, b, c$1] = ioQueue;
		if (a$1 === 239 && b === 187 && c$1 === 191) return "UTF-8";
		else if (a$1 === 254 && b === 255) return "UTF-16BE";
		else if (a$1 === 255 && b === 254) return "UTF-16LE";
		return null;
	}
	/**
	* @param {Uint8Array[]} sequences
	*/
	function combineByteSequences(sequences) {
		const size = sequences.reduce((a$1, b) => {
			return a$1 + b.byteLength;
		}, 0);
		let offset = 0;
		return sequences.reduce((a$1, b) => {
			a$1.set(b, offset);
			offset += b.byteLength;
			return a$1;
		}, new Uint8Array(size));
	}
	module.exports = {
		staticPropertyDescriptors: staticPropertyDescriptors$5,
		readOperation: readOperation$1,
		fireAProgressEvent: fireAProgressEvent$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/filereader.js
var require_filereader = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/filereader.js"(exports, module) {
	const { staticPropertyDescriptors: staticPropertyDescriptors$4, readOperation, fireAProgressEvent } = require_util$9();
	const { kState: kState$1, kError: kError$3, kResult, kEvents, kAborted } = require_symbols$3();
	const { webidl: webidl$22 } = require_webidl$1();
	const { kEnumerableProperty: kEnumerableProperty$16 } = require_util$12();
	var FileReader$1 = class FileReader$1 extends EventTarget {
		constructor() {
			super();
			this[kState$1] = "empty";
			this[kResult] = null;
			this[kError$3] = null;
			this[kEvents] = {
				loadend: null,
				error: null,
				abort: null,
				load: null,
				progress: null,
				loadstart: null
			};
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
		* @param {import('buffer').Blob} blob
		*/
		readAsArrayBuffer(blob) {
			webidl$22.brandCheck(this, FileReader$1);
			webidl$22.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsArrayBuffer" });
			blob = webidl$22.converters.Blob(blob, { strict: false });
			readOperation(this, blob, "ArrayBuffer");
		}
		/**
		* @see https://w3c.github.io/FileAPI/#readAsBinaryString
		* @param {import('buffer').Blob} blob
		*/
		readAsBinaryString(blob) {
			webidl$22.brandCheck(this, FileReader$1);
			webidl$22.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsBinaryString" });
			blob = webidl$22.converters.Blob(blob, { strict: false });
			readOperation(this, blob, "BinaryString");
		}
		/**
		* @see https://w3c.github.io/FileAPI/#readAsDataText
		* @param {import('buffer').Blob} blob
		* @param {string?} encoding
		*/
		readAsText(blob, encoding = void 0) {
			webidl$22.brandCheck(this, FileReader$1);
			webidl$22.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsText" });
			blob = webidl$22.converters.Blob(blob, { strict: false });
			if (encoding !== void 0) encoding = webidl$22.converters.DOMString(encoding);
			readOperation(this, blob, "Text", encoding);
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
		* @param {import('buffer').Blob} blob
		*/
		readAsDataURL(blob) {
			webidl$22.brandCheck(this, FileReader$1);
			webidl$22.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsDataURL" });
			blob = webidl$22.converters.Blob(blob, { strict: false });
			readOperation(this, blob, "DataURL");
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dfn-abort
		*/
		abort() {
			if (this[kState$1] === "empty" || this[kState$1] === "done") {
				this[kResult] = null;
				return;
			}
			if (this[kState$1] === "loading") {
				this[kState$1] = "done";
				this[kResult] = null;
			}
			this[kAborted] = true;
			fireAProgressEvent("abort", this);
			if (this[kState$1] !== "loading") fireAProgressEvent("loadend", this);
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
		*/
		get readyState() {
			webidl$22.brandCheck(this, FileReader$1);
			switch (this[kState$1]) {
				case "empty": return this.EMPTY;
				case "loading": return this.LOADING;
				case "done": return this.DONE;
			}
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dom-filereader-result
		*/
		get result() {
			webidl$22.brandCheck(this, FileReader$1);
			return this[kResult];
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dom-filereader-error
		*/
		get error() {
			webidl$22.brandCheck(this, FileReader$1);
			return this[kError$3];
		}
		get onloadend() {
			webidl$22.brandCheck(this, FileReader$1);
			return this[kEvents].loadend;
		}
		set onloadend(fn) {
			webidl$22.brandCheck(this, FileReader$1);
			if (this[kEvents].loadend) this.removeEventListener("loadend", this[kEvents].loadend);
			if (typeof fn === "function") {
				this[kEvents].loadend = fn;
				this.addEventListener("loadend", fn);
			} else this[kEvents].loadend = null;
		}
		get onerror() {
			webidl$22.brandCheck(this, FileReader$1);
			return this[kEvents].error;
		}
		set onerror(fn) {
			webidl$22.brandCheck(this, FileReader$1);
			if (this[kEvents].error) this.removeEventListener("error", this[kEvents].error);
			if (typeof fn === "function") {
				this[kEvents].error = fn;
				this.addEventListener("error", fn);
			} else this[kEvents].error = null;
		}
		get onloadstart() {
			webidl$22.brandCheck(this, FileReader$1);
			return this[kEvents].loadstart;
		}
		set onloadstart(fn) {
			webidl$22.brandCheck(this, FileReader$1);
			if (this[kEvents].loadstart) this.removeEventListener("loadstart", this[kEvents].loadstart);
			if (typeof fn === "function") {
				this[kEvents].loadstart = fn;
				this.addEventListener("loadstart", fn);
			} else this[kEvents].loadstart = null;
		}
		get onprogress() {
			webidl$22.brandCheck(this, FileReader$1);
			return this[kEvents].progress;
		}
		set onprogress(fn) {
			webidl$22.brandCheck(this, FileReader$1);
			if (this[kEvents].progress) this.removeEventListener("progress", this[kEvents].progress);
			if (typeof fn === "function") {
				this[kEvents].progress = fn;
				this.addEventListener("progress", fn);
			} else this[kEvents].progress = null;
		}
		get onload() {
			webidl$22.brandCheck(this, FileReader$1);
			return this[kEvents].load;
		}
		set onload(fn) {
			webidl$22.brandCheck(this, FileReader$1);
			if (this[kEvents].load) this.removeEventListener("load", this[kEvents].load);
			if (typeof fn === "function") {
				this[kEvents].load = fn;
				this.addEventListener("load", fn);
			} else this[kEvents].load = null;
		}
		get onabort() {
			webidl$22.brandCheck(this, FileReader$1);
			return this[kEvents].abort;
		}
		set onabort(fn) {
			webidl$22.brandCheck(this, FileReader$1);
			if (this[kEvents].abort) this.removeEventListener("abort", this[kEvents].abort);
			if (typeof fn === "function") {
				this[kEvents].abort = fn;
				this.addEventListener("abort", fn);
			} else this[kEvents].abort = null;
		}
	};
	FileReader$1.EMPTY = FileReader$1.prototype.EMPTY = 0;
	FileReader$1.LOADING = FileReader$1.prototype.LOADING = 1;
	FileReader$1.DONE = FileReader$1.prototype.DONE = 2;
	Object.defineProperties(FileReader$1.prototype, {
		EMPTY: staticPropertyDescriptors$4,
		LOADING: staticPropertyDescriptors$4,
		DONE: staticPropertyDescriptors$4,
		readAsArrayBuffer: kEnumerableProperty$16,
		readAsBinaryString: kEnumerableProperty$16,
		readAsText: kEnumerableProperty$16,
		readAsDataURL: kEnumerableProperty$16,
		abort: kEnumerableProperty$16,
		readyState: kEnumerableProperty$16,
		result: kEnumerableProperty$16,
		error: kEnumerableProperty$16,
		onloadstart: kEnumerableProperty$16,
		onprogress: kEnumerableProperty$16,
		onload: kEnumerableProperty$16,
		onabort: kEnumerableProperty$16,
		onerror: kEnumerableProperty$16,
		onloadend: kEnumerableProperty$16,
		[Symbol.toStringTag]: {
			value: "FileReader",
			writable: false,
			enumerable: false,
			configurable: true
		}
	});
	Object.defineProperties(FileReader$1, {
		EMPTY: staticPropertyDescriptors$4,
		LOADING: staticPropertyDescriptors$4,
		DONE: staticPropertyDescriptors$4
	});
	module.exports = { FileReader: FileReader$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cache/symbols.js
var require_symbols$2 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cache/symbols.js"(exports, module) {
	module.exports = { kConstruct: require_symbols$5().kConstruct };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cache/util.js
var require_util$8 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cache/util.js"(exports, module) {
	const assert$33 = __require("assert");
	const { URLSerializer: URLSerializer$6 } = require_dataURL();
	const { isValidHeaderName: isValidHeaderName$3 } = require_util$11();
	/**
	* @see https://url.spec.whatwg.org/#concept-url-equals
	* @param {URL} A
	* @param {URL} B
	* @param {boolean | undefined} excludeFragment
	* @returns {boolean}
	*/
	function urlEquals$3(A, B, excludeFragment = false) {
		const serializedA = URLSerializer$6(A, excludeFragment);
		const serializedB = URLSerializer$6(B, excludeFragment);
		return serializedA === serializedB;
	}
	/**
	* @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
	* @param {string} header
	*/
	function fieldValues(header) {
		assert$33(header !== null);
		const values = [];
		for (let value of header.split(",")) {
			value = value.trim();
			if (!value.length) continue;
			else if (!isValidHeaderName$3(value)) continue;
			values.push(value);
		}
		return values;
	}
	module.exports = {
		urlEquals: urlEquals$3,
		fieldValues
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cache/cache.js
var require_cache$3 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cache/cache.js"(exports, module) {
	const { kConstruct: kConstruct$9 } = require_symbols$2();
	const { urlEquals: urlEquals$2, fieldValues: getFieldValues$2 } = require_util$8();
	const { kEnumerableProperty: kEnumerableProperty$15, isDisturbed: isDisturbed$4 } = require_util$12();
	const { kHeadersList: kHeadersList$2 } = require_symbols$5();
	const { webidl: webidl$21 } = require_webidl$1();
	const { Response: Response$2, cloneResponse: cloneResponse$2 } = require_response$1();
	const { Request: Request$5 } = require_request$2();
	const { kState, kHeaders, kGuard, kRealm } = require_symbols$4();
	const { fetching: fetching$5 } = require_fetch$1();
	const { urlIsHttpHttpsScheme: urlIsHttpHttpsScheme$3, createDeferredPromise: createDeferredPromise$5, readAllBytes: readAllBytes$2 } = require_util$11();
	const assert$32 = __require("assert");
	const { getGlobalDispatcher: getGlobalDispatcher$7 } = require_global$2();
	/**
	* @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation
	* @typedef {Object} CacheBatchOperation
	* @property {'delete' | 'put'} type
	* @property {any} request
	* @property {any} response
	* @property {import('../../types/cache').CacheQueryOptions} options
	*/
	/**
	* @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list
	* @typedef {[any, any][]} requestResponseList
	*/
	var Cache$3 = class Cache$3 {
		/**
		* @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
		* @type {requestResponseList}
		*/
		#relevantRequestResponseList;
		constructor() {
			if (arguments[0] !== kConstruct$9) webidl$21.illegalConstructor();
			this.#relevantRequestResponseList = arguments[1];
		}
		async match(request$3, options = {}) {
			webidl$21.brandCheck(this, Cache$3);
			webidl$21.argumentLengthCheck(arguments, 1, { header: "Cache.match" });
			request$3 = webidl$21.converters.RequestInfo(request$3);
			options = webidl$21.converters.CacheQueryOptions(options);
			const p = await this.matchAll(request$3, options);
			if (p.length === 0) return;
			return p[0];
		}
		async matchAll(request$3 = void 0, options = {}) {
			webidl$21.brandCheck(this, Cache$3);
			if (request$3 !== void 0) request$3 = webidl$21.converters.RequestInfo(request$3);
			options = webidl$21.converters.CacheQueryOptions(options);
			let r = null;
			if (request$3 !== void 0) {
				if (request$3 instanceof Request$5) {
					r = request$3[kState];
					if (r.method !== "GET" && !options.ignoreMethod) return [];
				} else if (typeof request$3 === "string") r = new Request$5(request$3)[kState];
			}
			const responses = [];
			if (request$3 === void 0) for (const requestResponse of this.#relevantRequestResponseList) responses.push(requestResponse[1]);
			else {
				const requestResponses = this.#queryCache(r, options);
				for (const requestResponse of requestResponses) responses.push(requestResponse[1]);
			}
			const responseList = [];
			for (const response of responses) {
				const responseObject = new Response$2(response.body?.source ?? null);
				const body = responseObject[kState].body;
				responseObject[kState] = response;
				responseObject[kState].body = body;
				responseObject[kHeaders][kHeadersList$2] = response.headersList;
				responseObject[kHeaders][kGuard] = "immutable";
				responseList.push(responseObject);
			}
			return Object.freeze(responseList);
		}
		async add(request$3) {
			webidl$21.brandCheck(this, Cache$3);
			webidl$21.argumentLengthCheck(arguments, 1, { header: "Cache.add" });
			request$3 = webidl$21.converters.RequestInfo(request$3);
			const requests = [request$3];
			const responseArrayPromise = this.addAll(requests);
			return await responseArrayPromise;
		}
		async addAll(requests) {
			webidl$21.brandCheck(this, Cache$3);
			webidl$21.argumentLengthCheck(arguments, 1, { header: "Cache.addAll" });
			requests = webidl$21.converters["sequence<RequestInfo>"](requests);
			const responsePromises = [];
			const requestList = [];
			for (const request$3 of requests) {
				if (typeof request$3 === "string") continue;
				const r = request$3[kState];
				if (!urlIsHttpHttpsScheme$3(r.url) || r.method !== "GET") throw webidl$21.errors.exception({
					header: "Cache.addAll",
					message: "Expected http/s scheme when method is not GET."
				});
			}
			/** @type {ReturnType<typeof fetching>[]} */
			const fetchControllers = [];
			for (const request$3 of requests) {
				const r = new Request$5(request$3)[kState];
				if (!urlIsHttpHttpsScheme$3(r.url)) throw webidl$21.errors.exception({
					header: "Cache.addAll",
					message: "Expected http/s scheme."
				});
				r.initiator = "fetch";
				r.destination = "subresource";
				requestList.push(r);
				const responsePromise = createDeferredPromise$5();
				fetchControllers.push(fetching$5({
					request: r,
					dispatcher: getGlobalDispatcher$7(),
					processResponse(response) {
						if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) responsePromise.reject(webidl$21.errors.exception({
							header: "Cache.addAll",
							message: "Received an invalid status code or the request failed."
						}));
						else if (response.headersList.contains("vary")) {
							const fieldValues$1 = getFieldValues$2(response.headersList.get("vary"));
							for (const fieldValue of fieldValues$1) if (fieldValue === "*") {
								responsePromise.reject(webidl$21.errors.exception({
									header: "Cache.addAll",
									message: "invalid vary field value"
								}));
								for (const controller of fetchControllers) controller.abort();
								return;
							}
						}
					},
					processResponseEndOfBody(response) {
						if (response.aborted) {
							responsePromise.reject(new DOMException("aborted", "AbortError"));
							return;
						}
						responsePromise.resolve(response);
					}
				}));
				responsePromises.push(responsePromise.promise);
			}
			const p = Promise.all(responsePromises);
			const responses = await p;
			const operations = [];
			let index = 0;
			for (const response of responses) {
				/** @type {CacheBatchOperation} */
				const operation = {
					type: "put",
					request: requestList[index],
					response
				};
				operations.push(operation);
				index++;
			}
			const cacheJobPromise = createDeferredPromise$5();
			let errorData = null;
			try {
				this.#batchCacheOperations(operations);
			} catch (e) {
				errorData = e;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve(void 0);
				else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		async put(request$3, response) {
			webidl$21.brandCheck(this, Cache$3);
			webidl$21.argumentLengthCheck(arguments, 2, { header: "Cache.put" });
			request$3 = webidl$21.converters.RequestInfo(request$3);
			response = webidl$21.converters.Response(response);
			let innerRequest = null;
			if (request$3 instanceof Request$5) innerRequest = request$3[kState];
			else innerRequest = new Request$5(request$3)[kState];
			if (!urlIsHttpHttpsScheme$3(innerRequest.url) || innerRequest.method !== "GET") throw webidl$21.errors.exception({
				header: "Cache.put",
				message: "Expected an http/s scheme when method is not GET"
			});
			const innerResponse = response[kState];
			if (innerResponse.status === 206) throw webidl$21.errors.exception({
				header: "Cache.put",
				message: "Got 206 status"
			});
			if (innerResponse.headersList.contains("vary")) {
				const fieldValues$1 = getFieldValues$2(innerResponse.headersList.get("vary"));
				for (const fieldValue of fieldValues$1) if (fieldValue === "*") throw webidl$21.errors.exception({
					header: "Cache.put",
					message: "Got * vary field value"
				});
			}
			if (innerResponse.body && (isDisturbed$4(innerResponse.body.stream) || innerResponse.body.stream.locked)) throw webidl$21.errors.exception({
				header: "Cache.put",
				message: "Response body is locked or disturbed"
			});
			const clonedResponse = cloneResponse$2(innerResponse);
			const bodyReadPromise = createDeferredPromise$5();
			if (innerResponse.body != null) {
				const stream$4 = innerResponse.body.stream;
				const reader = stream$4.getReader();
				readAllBytes$2(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
			} else bodyReadPromise.resolve(void 0);
			/** @type {CacheBatchOperation[]} */
			const operations = [];
			/** @type {CacheBatchOperation} */
			const operation = {
				type: "put",
				request: innerRequest,
				response: clonedResponse
			};
			operations.push(operation);
			const bytes = await bodyReadPromise.promise;
			if (clonedResponse.body != null) clonedResponse.body.source = bytes;
			const cacheJobPromise = createDeferredPromise$5();
			let errorData = null;
			try {
				this.#batchCacheOperations(operations);
			} catch (e) {
				errorData = e;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve();
				else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		async delete(request$3, options = {}) {
			webidl$21.brandCheck(this, Cache$3);
			webidl$21.argumentLengthCheck(arguments, 1, { header: "Cache.delete" });
			request$3 = webidl$21.converters.RequestInfo(request$3);
			options = webidl$21.converters.CacheQueryOptions(options);
			/**
			* @type {Request}
			*/
			let r = null;
			if (request$3 instanceof Request$5) {
				r = request$3[kState];
				if (r.method !== "GET" && !options.ignoreMethod) return false;
			} else {
				assert$32(typeof request$3 === "string");
				r = new Request$5(request$3)[kState];
			}
			/** @type {CacheBatchOperation[]} */
			const operations = [];
			/** @type {CacheBatchOperation} */
			const operation = {
				type: "delete",
				request: r,
				options
			};
			operations.push(operation);
			const cacheJobPromise = createDeferredPromise$5();
			let errorData = null;
			let requestResponses;
			try {
				requestResponses = this.#batchCacheOperations(operations);
			} catch (e) {
				errorData = e;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve(!!requestResponses?.length);
				else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
		* @param {any} request
		* @param {import('../../types/cache').CacheQueryOptions} options
		* @returns {readonly Request[]}
		*/
		async keys(request$3 = void 0, options = {}) {
			webidl$21.brandCheck(this, Cache$3);
			if (request$3 !== void 0) request$3 = webidl$21.converters.RequestInfo(request$3);
			options = webidl$21.converters.CacheQueryOptions(options);
			let r = null;
			if (request$3 !== void 0) {
				if (request$3 instanceof Request$5) {
					r = request$3[kState];
					if (r.method !== "GET" && !options.ignoreMethod) return [];
				} else if (typeof request$3 === "string") r = new Request$5(request$3)[kState];
			}
			const promise = createDeferredPromise$5();
			const requests = [];
			if (request$3 === void 0) for (const requestResponse of this.#relevantRequestResponseList) requests.push(requestResponse[0]);
			else {
				const requestResponses = this.#queryCache(r, options);
				for (const requestResponse of requestResponses) requests.push(requestResponse[0]);
			}
			queueMicrotask(() => {
				const requestList = [];
				for (const request$4 of requests) {
					const requestObject = new Request$5("https://a");
					requestObject[kState] = request$4;
					requestObject[kHeaders][kHeadersList$2] = request$4.headersList;
					requestObject[kHeaders][kGuard] = "immutable";
					requestObject[kRealm] = request$4.client;
					requestList.push(requestObject);
				}
				promise.resolve(Object.freeze(requestList));
			});
			return promise.promise;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
		* @param {CacheBatchOperation[]} operations
		* @returns {requestResponseList}
		*/
		#batchCacheOperations(operations) {
			const cache = this.#relevantRequestResponseList;
			const backupCache = [...cache];
			const addedItems = [];
			const resultList = [];
			try {
				for (const operation of operations) {
					if (operation.type !== "delete" && operation.type !== "put") throw webidl$21.errors.exception({
						header: "Cache.#batchCacheOperations",
						message: "operation type does not match \"delete\" or \"put\""
					});
					if (operation.type === "delete" && operation.response != null) throw webidl$21.errors.exception({
						header: "Cache.#batchCacheOperations",
						message: "delete operation should not have an associated response"
					});
					if (this.#queryCache(operation.request, operation.options, addedItems).length) throw new DOMException("???", "InvalidStateError");
					let requestResponses;
					if (operation.type === "delete") {
						requestResponses = this.#queryCache(operation.request, operation.options);
						if (requestResponses.length === 0) return [];
						for (const requestResponse of requestResponses) {
							const idx = cache.indexOf(requestResponse);
							assert$32(idx !== -1);
							cache.splice(idx, 1);
						}
					} else if (operation.type === "put") {
						if (operation.response == null) throw webidl$21.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "put operation should have an associated response"
						});
						const r = operation.request;
						if (!urlIsHttpHttpsScheme$3(r.url)) throw webidl$21.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "expected http or https scheme"
						});
						if (r.method !== "GET") throw webidl$21.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "not get method"
						});
						if (operation.options != null) throw webidl$21.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "options must not be defined"
						});
						requestResponses = this.#queryCache(operation.request);
						for (const requestResponse of requestResponses) {
							const idx = cache.indexOf(requestResponse);
							assert$32(idx !== -1);
							cache.splice(idx, 1);
						}
						cache.push([operation.request, operation.response]);
						addedItems.push([operation.request, operation.response]);
					}
					resultList.push([operation.request, operation.response]);
				}
				return resultList;
			} catch (e) {
				this.#relevantRequestResponseList.length = 0;
				this.#relevantRequestResponseList = backupCache;
				throw e;
			}
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#query-cache
		* @param {any} requestQuery
		* @param {import('../../types/cache').CacheQueryOptions} options
		* @param {requestResponseList} targetStorage
		* @returns {requestResponseList}
		*/
		#queryCache(requestQuery, options, targetStorage) {
			/** @type {requestResponseList} */
			const resultList = [];
			const storage = targetStorage ?? this.#relevantRequestResponseList;
			for (const requestResponse of storage) {
				const [cachedRequest, cachedResponse] = requestResponse;
				if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) resultList.push(requestResponse);
			}
			return resultList;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
		* @param {any} requestQuery
		* @param {any} request
		* @param {any | null} response
		* @param {import('../../types/cache').CacheQueryOptions | undefined} options
		* @returns {boolean}
		*/
		#requestMatchesCachedItem(requestQuery, request$3, response = null, options) {
			const queryURL = new URL(requestQuery.url);
			const cachedURL = new URL(request$3.url);
			if (options?.ignoreSearch) {
				cachedURL.search = "";
				queryURL.search = "";
			}
			if (!urlEquals$2(queryURL, cachedURL, true)) return false;
			if (response == null || options?.ignoreVary || !response.headersList.contains("vary")) return true;
			const fieldValues$1 = getFieldValues$2(response.headersList.get("vary"));
			for (const fieldValue of fieldValues$1) {
				if (fieldValue === "*") return false;
				const requestValue = request$3.headersList.get(fieldValue);
				const queryValue = requestQuery.headersList.get(fieldValue);
				if (requestValue !== queryValue) return false;
			}
			return true;
		}
	};
	Object.defineProperties(Cache$3.prototype, {
		[Symbol.toStringTag]: {
			value: "Cache",
			configurable: true
		},
		match: kEnumerableProperty$15,
		matchAll: kEnumerableProperty$15,
		add: kEnumerableProperty$15,
		addAll: kEnumerableProperty$15,
		put: kEnumerableProperty$15,
		delete: kEnumerableProperty$15,
		keys: kEnumerableProperty$15
	});
	const cacheQueryOptionConverters$1 = [
		{
			key: "ignoreSearch",
			converter: webidl$21.converters.boolean,
			defaultValue: false
		},
		{
			key: "ignoreMethod",
			converter: webidl$21.converters.boolean,
			defaultValue: false
		},
		{
			key: "ignoreVary",
			converter: webidl$21.converters.boolean,
			defaultValue: false
		}
	];
	webidl$21.converters.CacheQueryOptions = webidl$21.dictionaryConverter(cacheQueryOptionConverters$1);
	webidl$21.converters.MultiCacheQueryOptions = webidl$21.dictionaryConverter([...cacheQueryOptionConverters$1, {
		key: "cacheName",
		converter: webidl$21.converters.DOMString
	}]);
	webidl$21.converters.Response = webidl$21.interfaceConverter(Response$2);
	webidl$21.converters["sequence<RequestInfo>"] = webidl$21.sequenceConverter(webidl$21.converters.RequestInfo);
	module.exports = { Cache: Cache$3 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cache/cachestorage.js
var require_cachestorage$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cache/cachestorage.js"(exports, module) {
	const { kConstruct: kConstruct$8 } = require_symbols$2();
	const { Cache: Cache$2 } = require_cache$3();
	const { webidl: webidl$20 } = require_webidl$1();
	const { kEnumerableProperty: kEnumerableProperty$14 } = require_util$12();
	var CacheStorage$2 = class CacheStorage$2 {
		/**
		* @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
		* @type {Map<string, import('./cache').requestResponseList}
		*/
		#caches = /* @__PURE__ */ new Map();
		constructor() {
			if (arguments[0] !== kConstruct$8) webidl$20.illegalConstructor();
		}
		async match(request$3, options = {}) {
			webidl$20.brandCheck(this, CacheStorage$2);
			webidl$20.argumentLengthCheck(arguments, 1, { header: "CacheStorage.match" });
			request$3 = webidl$20.converters.RequestInfo(request$3);
			options = webidl$20.converters.MultiCacheQueryOptions(options);
			if (options.cacheName != null) {
				if (this.#caches.has(options.cacheName)) {
					const cacheList = this.#caches.get(options.cacheName);
					const cache = new Cache$2(kConstruct$8, cacheList);
					return await cache.match(request$3, options);
				}
			} else for (const cacheList of this.#caches.values()) {
				const cache = new Cache$2(kConstruct$8, cacheList);
				const response = await cache.match(request$3, options);
				if (response !== void 0) return response;
			}
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-has
		* @param {string} cacheName
		* @returns {Promise<boolean>}
		*/
		async has(cacheName) {
			webidl$20.brandCheck(this, CacheStorage$2);
			webidl$20.argumentLengthCheck(arguments, 1, { header: "CacheStorage.has" });
			cacheName = webidl$20.converters.DOMString(cacheName);
			return this.#caches.has(cacheName);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
		* @param {string} cacheName
		* @returns {Promise<Cache>}
		*/
		async open(cacheName) {
			webidl$20.brandCheck(this, CacheStorage$2);
			webidl$20.argumentLengthCheck(arguments, 1, { header: "CacheStorage.open" });
			cacheName = webidl$20.converters.DOMString(cacheName);
			if (this.#caches.has(cacheName)) {
				const cache$1 = this.#caches.get(cacheName);
				return new Cache$2(kConstruct$8, cache$1);
			}
			const cache = [];
			this.#caches.set(cacheName, cache);
			return new Cache$2(kConstruct$8, cache);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
		* @param {string} cacheName
		* @returns {Promise<boolean>}
		*/
		async delete(cacheName) {
			webidl$20.brandCheck(this, CacheStorage$2);
			webidl$20.argumentLengthCheck(arguments, 1, { header: "CacheStorage.delete" });
			cacheName = webidl$20.converters.DOMString(cacheName);
			return this.#caches.delete(cacheName);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
		* @returns {string[]}
		*/
		async keys() {
			webidl$20.brandCheck(this, CacheStorage$2);
			const keys$1 = this.#caches.keys();
			return [...keys$1];
		}
	};
	Object.defineProperties(CacheStorage$2.prototype, {
		[Symbol.toStringTag]: {
			value: "CacheStorage",
			configurable: true
		},
		match: kEnumerableProperty$14,
		has: kEnumerableProperty$14,
		open: kEnumerableProperty$14,
		delete: kEnumerableProperty$14,
		keys: kEnumerableProperty$14
	});
	module.exports = { CacheStorage: CacheStorage$2 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cookies/constants.js
var require_constants$6 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cookies/constants.js"(exports, module) {
	const maxAttributeValueSize$3 = 1024;
	const maxNameValuePairSize$3 = 4096;
	module.exports = {
		maxAttributeValueSize: maxAttributeValueSize$3,
		maxNameValuePairSize: maxNameValuePairSize$3
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cookies/util.js
var require_util$7 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cookies/util.js"(exports, module) {
	const assert$31 = __require("assert");
	const { kHeadersList: kHeadersList$1 } = require_symbols$5();
	function isCTLExcludingHtab$3(value) {
		if (value.length === 0) return false;
		for (const char of value) {
			const code = char.charCodeAt(0);
			if (code >= 0 || code <= 8 || code >= 10 || code <= 31 || code === 127) return false;
		}
	}
	/**
	CHAR           = <any US-ASCII character (octets 0 - 127)>
	token          = 1*<any CHAR except CTLs or separators>
	separators     = "(" | ")" | "<" | ">" | "@"
	| "," | ";" | ":" | "\" | <">
	| "/" | "[" | "]" | "?" | "="
	| "{" | "}" | SP | HT
	* @param {string} name
	*/
	function validateCookieName$1(name$2) {
		for (const char of name$2) {
			const code = char.charCodeAt(0);
			if (code <= 32 || code > 127 || char === "(" || char === ")" || char === ">" || char === "<" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === "\"" || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}") throw new Error("Invalid cookie name");
		}
	}
	/**
	cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
	cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
	; US-ASCII characters excluding CTLs,
	; whitespace DQUOTE, comma, semicolon,
	; and backslash
	* @param {string} value
	*/
	function validateCookieValue$1(value) {
		for (const char of value) {
			const code = char.charCodeAt(0);
			if (code < 33 || code === 34 || code === 44 || code === 59 || code === 92 || code > 126) throw new Error("Invalid header value");
		}
	}
	/**
	* path-value        = <any CHAR except CTLs or ";">
	* @param {string} path
	*/
	function validateCookiePath$1(path$9) {
		for (const char of path$9) {
			const code = char.charCodeAt(0);
			if (code < 33 || char === ";") throw new Error("Invalid cookie path");
		}
	}
	/**
	* I have no idea why these values aren't allowed to be honest,
	* but Deno tests these. - Khafra
	* @param {string} domain
	*/
	function validateCookieDomain$1(domain) {
		if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) throw new Error("Invalid cookie domain");
	}
	/**
	* @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
	* @param {number|Date} date
	IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
	; fixed length/zone/capitalization subset of the format
	; see Section 3.3 of [RFC5322]
	
	day-name     = %x4D.6F.6E ; "Mon", case-sensitive
	/ %x54.75.65 ; "Tue", case-sensitive
	/ %x57.65.64 ; "Wed", case-sensitive
	/ %x54.68.75 ; "Thu", case-sensitive
	/ %x46.72.69 ; "Fri", case-sensitive
	/ %x53.61.74 ; "Sat", case-sensitive
	/ %x53.75.6E ; "Sun", case-sensitive
	date1        = day SP month SP year
	; e.g., 02 Jun 1982
	
	day          = 2DIGIT
	month        = %x4A.61.6E ; "Jan", case-sensitive
	/ %x46.65.62 ; "Feb", case-sensitive
	/ %x4D.61.72 ; "Mar", case-sensitive
	/ %x41.70.72 ; "Apr", case-sensitive
	/ %x4D.61.79 ; "May", case-sensitive
	/ %x4A.75.6E ; "Jun", case-sensitive
	/ %x4A.75.6C ; "Jul", case-sensitive
	/ %x41.75.67 ; "Aug", case-sensitive
	/ %x53.65.70 ; "Sep", case-sensitive
	/ %x4F.63.74 ; "Oct", case-sensitive
	/ %x4E.6F.76 ; "Nov", case-sensitive
	/ %x44.65.63 ; "Dec", case-sensitive
	year         = 4DIGIT
	
	GMT          = %x47.4D.54 ; "GMT", case-sensitive
	
	time-of-day  = hour ":" minute ":" second
	; 00:00:00 - 23:59:60 (leap second)
	
	hour         = 2DIGIT
	minute       = 2DIGIT
	second       = 2DIGIT
	*/
	function toIMFDate$1(date) {
		if (typeof date === "number") date = new Date(date);
		const days = [
			"Sun",
			"Mon",
			"Tue",
			"Wed",
			"Thu",
			"Fri",
			"Sat"
		];
		const months = [
			"Jan",
			"Feb",
			"Mar",
			"Apr",
			"May",
			"Jun",
			"Jul",
			"Aug",
			"Sep",
			"Oct",
			"Nov",
			"Dec"
		];
		const dayName = days[date.getUTCDay()];
		const day = date.getUTCDate().toString().padStart(2, "0");
		const month = months[date.getUTCMonth()];
		const year = date.getUTCFullYear();
		const hour = date.getUTCHours().toString().padStart(2, "0");
		const minute = date.getUTCMinutes().toString().padStart(2, "0");
		const second = date.getUTCSeconds().toString().padStart(2, "0");
		return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
	}
	/**
	max-age-av        = "Max-Age=" non-zero-digit *DIGIT
	; In practice, both expires-av and max-age-av
	; are limited to dates representable by the
	; user agent.
	* @param {number} maxAge
	*/
	function validateCookieMaxAge$1(maxAge) {
		if (maxAge < 0) throw new Error("Invalid cookie max-age");
	}
	/**
	* @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
	* @param {import('./index').Cookie} cookie
	*/
	function stringify$4(cookie) {
		if (cookie.name.length === 0) return null;
		validateCookieName$1(cookie.name);
		validateCookieValue$1(cookie.value);
		const out = [`${cookie.name}=${cookie.value}`];
		if (cookie.name.startsWith("__Secure-")) cookie.secure = true;
		if (cookie.name.startsWith("__Host-")) {
			cookie.secure = true;
			cookie.domain = null;
			cookie.path = "/";
		}
		if (cookie.secure) out.push("Secure");
		if (cookie.httpOnly) out.push("HttpOnly");
		if (typeof cookie.maxAge === "number") {
			validateCookieMaxAge$1(cookie.maxAge);
			out.push(`Max-Age=${cookie.maxAge}`);
		}
		if (cookie.domain) {
			validateCookieDomain$1(cookie.domain);
			out.push(`Domain=${cookie.domain}`);
		}
		if (cookie.path) {
			validateCookiePath$1(cookie.path);
			out.push(`Path=${cookie.path}`);
		}
		if (cookie.expires && cookie.expires.toString() !== "Invalid Date") out.push(`Expires=${toIMFDate$1(cookie.expires)}`);
		if (cookie.sameSite) out.push(`SameSite=${cookie.sameSite}`);
		for (const part of cookie.unparsed) {
			if (!part.includes("=")) throw new Error("Invalid unparsed");
			const [key, ...value] = part.split("=");
			out.push(`${key.trim()}=${value.join("=")}`);
		}
		return out.join("; ");
	}
	let kHeadersListNode;
	function getHeadersList$4(headers) {
		if (headers[kHeadersList$1]) return headers[kHeadersList$1];
		if (!kHeadersListNode) {
			kHeadersListNode = Object.getOwnPropertySymbols(headers).find((symbol$2) => symbol$2.description === "headers list");
			assert$31(kHeadersListNode, "Headers cannot be parsed");
		}
		const headersList = headers[kHeadersListNode];
		assert$31(headersList);
		return headersList;
	}
	module.exports = {
		isCTLExcludingHtab: isCTLExcludingHtab$3,
		stringify: stringify$4,
		getHeadersList: getHeadersList$4
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cookies/parse.js
var require_parse$2 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cookies/parse.js"(exports, module) {
	const { maxNameValuePairSize: maxNameValuePairSize$2, maxAttributeValueSize: maxAttributeValueSize$2 } = require_constants$6();
	const { isCTLExcludingHtab: isCTLExcludingHtab$2 } = require_util$7();
	const { collectASequenceOfCodePointsFast: collectASequenceOfCodePointsFast$3 } = require_dataURL();
	const assert$30 = __require("assert");
	/**
	* @description Parses the field-value attributes of a set-cookie header string.
	* @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
	* @param {string} header
	* @returns if the header is invalid, null will be returned
	*/
	function parseSetCookie$3(header) {
		if (isCTLExcludingHtab$2(header)) return null;
		let nameValuePair = "";
		let unparsedAttributes = "";
		let name$2 = "";
		let value = "";
		if (header.includes(";")) {
			const position = { position: 0 };
			nameValuePair = collectASequenceOfCodePointsFast$3(";", header, position);
			unparsedAttributes = header.slice(position.position);
		} else nameValuePair = header;
		if (!nameValuePair.includes("=")) value = nameValuePair;
		else {
			const position = { position: 0 };
			name$2 = collectASequenceOfCodePointsFast$3("=", nameValuePair, position);
			value = nameValuePair.slice(position.position + 1);
		}
		name$2 = name$2.trim();
		value = value.trim();
		if (name$2.length + value.length > maxNameValuePairSize$2) return null;
		return {
			name: name$2,
			value,
			...parseUnparsedAttributes$1(unparsedAttributes)
		};
	}
	/**
	* Parses the remaining attributes of a set-cookie header
	* @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
	* @param {string} unparsedAttributes
	* @param {[Object.<string, unknown>]={}} cookieAttributeList
	*/
	function parseUnparsedAttributes$1(unparsedAttributes, cookieAttributeList = {}) {
		if (unparsedAttributes.length === 0) return cookieAttributeList;
		assert$30(unparsedAttributes[0] === ";");
		unparsedAttributes = unparsedAttributes.slice(1);
		let cookieAv = "";
		if (unparsedAttributes.includes(";")) {
			cookieAv = collectASequenceOfCodePointsFast$3(";", unparsedAttributes, { position: 0 });
			unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
		} else {
			cookieAv = unparsedAttributes;
			unparsedAttributes = "";
		}
		let attributeName = "";
		let attributeValue = "";
		if (cookieAv.includes("=")) {
			const position = { position: 0 };
			attributeName = collectASequenceOfCodePointsFast$3("=", cookieAv, position);
			attributeValue = cookieAv.slice(position.position + 1);
		} else attributeName = cookieAv;
		attributeName = attributeName.trim();
		attributeValue = attributeValue.trim();
		if (attributeValue.length > maxAttributeValueSize$2) return parseUnparsedAttributes$1(unparsedAttributes, cookieAttributeList);
		const attributeNameLowercase = attributeName.toLowerCase();
		if (attributeNameLowercase === "expires") {
			const expiryTime = new Date(attributeValue);
			cookieAttributeList.expires = expiryTime;
		} else if (attributeNameLowercase === "max-age") {
			const charCode = attributeValue.charCodeAt(0);
			if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") return parseUnparsedAttributes$1(unparsedAttributes, cookieAttributeList);
			if (!/^\d+$/.test(attributeValue)) return parseUnparsedAttributes$1(unparsedAttributes, cookieAttributeList);
			const deltaSeconds = Number(attributeValue);
			cookieAttributeList.maxAge = deltaSeconds;
		} else if (attributeNameLowercase === "domain") {
			let cookieDomain = attributeValue;
			if (cookieDomain[0] === ".") cookieDomain = cookieDomain.slice(1);
			cookieDomain = cookieDomain.toLowerCase();
			cookieAttributeList.domain = cookieDomain;
		} else if (attributeNameLowercase === "path") {
			let cookiePath = "";
			if (attributeValue.length === 0 || attributeValue[0] !== "/") cookiePath = "/";
			else cookiePath = attributeValue;
			cookieAttributeList.path = cookiePath;
		} else if (attributeNameLowercase === "secure") cookieAttributeList.secure = true;
		else if (attributeNameLowercase === "httponly") cookieAttributeList.httpOnly = true;
		else if (attributeNameLowercase === "samesite") {
			let enforcement = "Default";
			const attributeValueLowercase = attributeValue.toLowerCase();
			if (attributeValueLowercase.includes("none")) enforcement = "None";
			if (attributeValueLowercase.includes("strict")) enforcement = "Strict";
			if (attributeValueLowercase.includes("lax")) enforcement = "Lax";
			cookieAttributeList.sameSite = enforcement;
		} else {
			cookieAttributeList.unparsed ??= [];
			cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
		}
		return parseUnparsedAttributes$1(unparsedAttributes, cookieAttributeList);
	}
	module.exports = {
		parseSetCookie: parseSetCookie$3,
		parseUnparsedAttributes: parseUnparsedAttributes$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cookies/index.js
var require_cookies$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cookies/index.js"(exports, module) {
	const { parseSetCookie: parseSetCookie$2 } = require_parse$2();
	const { stringify: stringify$3, getHeadersList: getHeadersList$3 } = require_util$7();
	const { webidl: webidl$19 } = require_webidl$1();
	const { Headers: Headers$8 } = require_headers$1();
	/**
	* @typedef {Object} Cookie
	* @property {string} name
	* @property {string} value
	* @property {Date|number|undefined} expires
	* @property {number|undefined} maxAge
	* @property {string|undefined} domain
	* @property {string|undefined} path
	* @property {boolean|undefined} secure
	* @property {boolean|undefined} httpOnly
	* @property {'Strict'|'Lax'|'None'} sameSite
	* @property {string[]} unparsed
	*/
	/**
	* @param {Headers} headers
	* @returns {Record<string, string>}
	*/
	function getCookies$2(headers) {
		webidl$19.argumentLengthCheck(arguments, 1, { header: "getCookies" });
		webidl$19.brandCheck(headers, Headers$8, { strict: false });
		const cookie = headers.get("cookie");
		const out = {};
		if (!cookie) return out;
		for (const piece of cookie.split(";")) {
			const [name$2, ...value] = piece.split("=");
			out[name$2.trim()] = value.join("=");
		}
		return out;
	}
	/**
	* @param {Headers} headers
	* @param {string} name
	* @param {{ path?: string, domain?: string }|undefined} attributes
	* @returns {void}
	*/
	function deleteCookie$2(headers, name$2, attributes) {
		webidl$19.argumentLengthCheck(arguments, 2, { header: "deleteCookie" });
		webidl$19.brandCheck(headers, Headers$8, { strict: false });
		name$2 = webidl$19.converters.DOMString(name$2);
		attributes = webidl$19.converters.DeleteCookieAttributes(attributes);
		setCookie$2(headers, {
			name: name$2,
			value: "",
			expires: /* @__PURE__ */ new Date(0),
			...attributes
		});
	}
	/**
	* @param {Headers} headers
	* @returns {Cookie[]}
	*/
	function getSetCookies$2(headers) {
		webidl$19.argumentLengthCheck(arguments, 1, { header: "getSetCookies" });
		webidl$19.brandCheck(headers, Headers$8, { strict: false });
		const cookies = getHeadersList$3(headers).cookies;
		if (!cookies) return [];
		return cookies.map((pair) => parseSetCookie$2(Array.isArray(pair) ? pair[1] : pair));
	}
	/**
	* @param {Headers} headers
	* @param {Cookie} cookie
	* @returns {void}
	*/
	function setCookie$2(headers, cookie) {
		webidl$19.argumentLengthCheck(arguments, 2, { header: "setCookie" });
		webidl$19.brandCheck(headers, Headers$8, { strict: false });
		cookie = webidl$19.converters.Cookie(cookie);
		const str = stringify$3(cookie);
		if (str) headers.append("Set-Cookie", stringify$3(cookie));
	}
	webidl$19.converters.DeleteCookieAttributes = webidl$19.dictionaryConverter([{
		converter: webidl$19.nullableConverter(webidl$19.converters.DOMString),
		key: "path",
		defaultValue: null
	}, {
		converter: webidl$19.nullableConverter(webidl$19.converters.DOMString),
		key: "domain",
		defaultValue: null
	}]);
	webidl$19.converters.Cookie = webidl$19.dictionaryConverter([
		{
			converter: webidl$19.converters.DOMString,
			key: "name"
		},
		{
			converter: webidl$19.converters.DOMString,
			key: "value"
		},
		{
			converter: webidl$19.nullableConverter((value) => {
				if (typeof value === "number") return webidl$19.converters["unsigned long long"](value);
				return new Date(value);
			}),
			key: "expires",
			defaultValue: null
		},
		{
			converter: webidl$19.nullableConverter(webidl$19.converters["long long"]),
			key: "maxAge",
			defaultValue: null
		},
		{
			converter: webidl$19.nullableConverter(webidl$19.converters.DOMString),
			key: "domain",
			defaultValue: null
		},
		{
			converter: webidl$19.nullableConverter(webidl$19.converters.DOMString),
			key: "path",
			defaultValue: null
		},
		{
			converter: webidl$19.nullableConverter(webidl$19.converters.boolean),
			key: "secure",
			defaultValue: null
		},
		{
			converter: webidl$19.nullableConverter(webidl$19.converters.boolean),
			key: "httpOnly",
			defaultValue: null
		},
		{
			converter: webidl$19.converters.USVString,
			key: "sameSite",
			allowedValues: [
				"Strict",
				"Lax",
				"None"
			]
		},
		{
			converter: webidl$19.sequenceConverter(webidl$19.converters.DOMString),
			key: "unparsed",
			defaultValue: []
		}
	]);
	module.exports = {
		getCookies: getCookies$2,
		deleteCookie: deleteCookie$2,
		getSetCookies: getSetCookies$2,
		setCookie: setCookie$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/constants.js
var require_constants$5 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/constants.js"(exports, module) {
	const uid$5 = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
	/** @type {PropertyDescriptor} */
	const staticPropertyDescriptors$3 = {
		enumerable: true,
		writable: false,
		configurable: false
	};
	const states$10 = {
		CONNECTING: 0,
		OPEN: 1,
		CLOSING: 2,
		CLOSED: 3
	};
	const opcodes$11 = {
		CONTINUATION: 0,
		TEXT: 1,
		BINARY: 2,
		CLOSE: 8,
		PING: 9,
		PONG: 10
	};
	const maxUnsigned16Bit$3 = 2 ** 16 - 1;
	const parserStates$3 = {
		INFO: 0,
		PAYLOADLENGTH_16: 2,
		PAYLOADLENGTH_64: 3,
		READ_DATA: 4
	};
	const emptyBuffer$5 = Buffer.allocUnsafe(0);
	module.exports = {
		uid: uid$5,
		staticPropertyDescriptors: staticPropertyDescriptors$3,
		states: states$10,
		opcodes: opcodes$11,
		maxUnsigned16Bit: maxUnsigned16Bit$3,
		parserStates: parserStates$3,
		emptyBuffer: emptyBuffer$5
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/symbols.js
var require_symbols$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/symbols.js"(exports, module) {
	module.exports = {
		kWebSocketURL: Symbol("url"),
		kReadyState: Symbol("ready state"),
		kController: Symbol("controller"),
		kResponse: Symbol("response"),
		kBinaryType: Symbol("binary type"),
		kSentClose: Symbol("sent close"),
		kReceivedClose: Symbol("received close"),
		kByteParser: Symbol("byte parser")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/events.js
var require_events$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/events.js"(exports, module) {
	const { webidl: webidl$18 } = require_webidl$1();
	const { kEnumerableProperty: kEnumerableProperty$13 } = require_util$12();
	const { MessagePort: MessagePort$1 } = __require("worker_threads");
	/**
	* @see https://html.spec.whatwg.org/multipage/comms.html#messageevent
	*/
	var MessageEvent$3 = class MessageEvent$3 extends Event {
		#eventInit;
		constructor(type, eventInitDict = {}) {
			webidl$18.argumentLengthCheck(arguments, 1, { header: "MessageEvent constructor" });
			type = webidl$18.converters.DOMString(type);
			eventInitDict = webidl$18.converters.MessageEventInit(eventInitDict);
			super(type, eventInitDict);
			this.#eventInit = eventInitDict;
		}
		get data() {
			webidl$18.brandCheck(this, MessageEvent$3);
			return this.#eventInit.data;
		}
		get origin() {
			webidl$18.brandCheck(this, MessageEvent$3);
			return this.#eventInit.origin;
		}
		get lastEventId() {
			webidl$18.brandCheck(this, MessageEvent$3);
			return this.#eventInit.lastEventId;
		}
		get source() {
			webidl$18.brandCheck(this, MessageEvent$3);
			return this.#eventInit.source;
		}
		get ports() {
			webidl$18.brandCheck(this, MessageEvent$3);
			if (!Object.isFrozen(this.#eventInit.ports)) Object.freeze(this.#eventInit.ports);
			return this.#eventInit.ports;
		}
		initMessageEvent(type, bubbles = false, cancelable = false, data$1 = null, origin = "", lastEventId = "", source = null, ports = []) {
			webidl$18.brandCheck(this, MessageEvent$3);
			webidl$18.argumentLengthCheck(arguments, 1, { header: "MessageEvent.initMessageEvent" });
			return new MessageEvent$3(type, {
				bubbles,
				cancelable,
				data: data$1,
				origin,
				lastEventId,
				source,
				ports
			});
		}
	};
	/**
	* @see https://websockets.spec.whatwg.org/#the-closeevent-interface
	*/
	var CloseEvent$4 = class CloseEvent$4 extends Event {
		#eventInit;
		constructor(type, eventInitDict = {}) {
			webidl$18.argumentLengthCheck(arguments, 1, { header: "CloseEvent constructor" });
			type = webidl$18.converters.DOMString(type);
			eventInitDict = webidl$18.converters.CloseEventInit(eventInitDict);
			super(type, eventInitDict);
			this.#eventInit = eventInitDict;
		}
		get wasClean() {
			webidl$18.brandCheck(this, CloseEvent$4);
			return this.#eventInit.wasClean;
		}
		get code() {
			webidl$18.brandCheck(this, CloseEvent$4);
			return this.#eventInit.code;
		}
		get reason() {
			webidl$18.brandCheck(this, CloseEvent$4);
			return this.#eventInit.reason;
		}
	};
	var ErrorEvent$4 = class ErrorEvent$4 extends Event {
		#eventInit;
		constructor(type, eventInitDict) {
			webidl$18.argumentLengthCheck(arguments, 1, { header: "ErrorEvent constructor" });
			super(type, eventInitDict);
			type = webidl$18.converters.DOMString(type);
			eventInitDict = webidl$18.converters.ErrorEventInit(eventInitDict ?? {});
			this.#eventInit = eventInitDict;
		}
		get message() {
			webidl$18.brandCheck(this, ErrorEvent$4);
			return this.#eventInit.message;
		}
		get filename() {
			webidl$18.brandCheck(this, ErrorEvent$4);
			return this.#eventInit.filename;
		}
		get lineno() {
			webidl$18.brandCheck(this, ErrorEvent$4);
			return this.#eventInit.lineno;
		}
		get colno() {
			webidl$18.brandCheck(this, ErrorEvent$4);
			return this.#eventInit.colno;
		}
		get error() {
			webidl$18.brandCheck(this, ErrorEvent$4);
			return this.#eventInit.error;
		}
	};
	Object.defineProperties(MessageEvent$3.prototype, {
		[Symbol.toStringTag]: {
			value: "MessageEvent",
			configurable: true
		},
		data: kEnumerableProperty$13,
		origin: kEnumerableProperty$13,
		lastEventId: kEnumerableProperty$13,
		source: kEnumerableProperty$13,
		ports: kEnumerableProperty$13,
		initMessageEvent: kEnumerableProperty$13
	});
	Object.defineProperties(CloseEvent$4.prototype, {
		[Symbol.toStringTag]: {
			value: "CloseEvent",
			configurable: true
		},
		reason: kEnumerableProperty$13,
		code: kEnumerableProperty$13,
		wasClean: kEnumerableProperty$13
	});
	Object.defineProperties(ErrorEvent$4.prototype, {
		[Symbol.toStringTag]: {
			value: "ErrorEvent",
			configurable: true
		},
		message: kEnumerableProperty$13,
		filename: kEnumerableProperty$13,
		lineno: kEnumerableProperty$13,
		colno: kEnumerableProperty$13,
		error: kEnumerableProperty$13
	});
	webidl$18.converters.MessagePort = webidl$18.interfaceConverter(MessagePort$1);
	webidl$18.converters["sequence<MessagePort>"] = webidl$18.sequenceConverter(webidl$18.converters.MessagePort);
	const eventInit$1 = [
		{
			key: "bubbles",
			converter: webidl$18.converters.boolean,
			defaultValue: false
		},
		{
			key: "cancelable",
			converter: webidl$18.converters.boolean,
			defaultValue: false
		},
		{
			key: "composed",
			converter: webidl$18.converters.boolean,
			defaultValue: false
		}
	];
	webidl$18.converters.MessageEventInit = webidl$18.dictionaryConverter([
		...eventInit$1,
		{
			key: "data",
			converter: webidl$18.converters.any,
			defaultValue: null
		},
		{
			key: "origin",
			converter: webidl$18.converters.USVString,
			defaultValue: ""
		},
		{
			key: "lastEventId",
			converter: webidl$18.converters.DOMString,
			defaultValue: ""
		},
		{
			key: "source",
			converter: webidl$18.nullableConverter(webidl$18.converters.MessagePort),
			defaultValue: null
		},
		{
			key: "ports",
			converter: webidl$18.converters["sequence<MessagePort>"],
			get defaultValue() {
				return [];
			}
		}
	]);
	webidl$18.converters.CloseEventInit = webidl$18.dictionaryConverter([
		...eventInit$1,
		{
			key: "wasClean",
			converter: webidl$18.converters.boolean,
			defaultValue: false
		},
		{
			key: "code",
			converter: webidl$18.converters["unsigned short"],
			defaultValue: 0
		},
		{
			key: "reason",
			converter: webidl$18.converters.USVString,
			defaultValue: ""
		}
	]);
	webidl$18.converters.ErrorEventInit = webidl$18.dictionaryConverter([
		...eventInit$1,
		{
			key: "message",
			converter: webidl$18.converters.DOMString,
			defaultValue: ""
		},
		{
			key: "filename",
			converter: webidl$18.converters.USVString,
			defaultValue: ""
		},
		{
			key: "lineno",
			converter: webidl$18.converters["unsigned long"],
			defaultValue: 0
		},
		{
			key: "colno",
			converter: webidl$18.converters["unsigned long"],
			defaultValue: 0
		},
		{
			key: "error",
			converter: webidl$18.converters.any
		}
	]);
	module.exports = {
		MessageEvent: MessageEvent$3,
		CloseEvent: CloseEvent$4,
		ErrorEvent: ErrorEvent$4
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/util.js
var require_util$6 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/util.js"(exports, module) {
	const { kReadyState: kReadyState$3, kController: kController$1, kResponse: kResponse$2, kBinaryType: kBinaryType$1, kWebSocketURL: kWebSocketURL$1 } = require_symbols$1();
	const { states: states$9, opcodes: opcodes$10 } = require_constants$5();
	const { MessageEvent: MessageEvent$2, ErrorEvent: ErrorEvent$3 } = require_events$1();
	/**
	* @param {import('./websocket').WebSocket} ws
	*/
	function isEstablished$5(ws) {
		return ws[kReadyState$3] === states$9.OPEN;
	}
	/**
	* @param {import('./websocket').WebSocket} ws
	*/
	function isClosing$4(ws) {
		return ws[kReadyState$3] === states$9.CLOSING;
	}
	/**
	* @param {import('./websocket').WebSocket} ws
	*/
	function isClosed$3(ws) {
		return ws[kReadyState$3] === states$9.CLOSED;
	}
	/**
	* @see https://dom.spec.whatwg.org/#concept-event-fire
	* @param {string} e
	* @param {EventTarget} target
	* @param {EventInit | undefined} eventInitDict
	*/
	function fireEvent$4(e, target, eventConstructor = Event, eventInitDict) {
		const event = new eventConstructor(e, eventInitDict);
		target.dispatchEvent(event);
	}
	/**
	* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
	* @param {import('./websocket').WebSocket} ws
	* @param {number} type Opcode
	* @param {Buffer} data application data
	*/
	function websocketMessageReceived$3(ws, type, data$1) {
		if (ws[kReadyState$3] !== states$9.OPEN) return;
		let dataForEvent;
		if (type === opcodes$10.TEXT) try {
			dataForEvent = new TextDecoder("utf-8", { fatal: true }).decode(data$1);
		} catch {
			failWebsocketConnection$7(ws, "Received invalid UTF-8 in text frame.");
			return;
		}
		else if (type === opcodes$10.BINARY) if (ws[kBinaryType$1] === "blob") dataForEvent = new Blob([data$1]);
		else dataForEvent = new Uint8Array(data$1).buffer;
		fireEvent$4("message", ws, MessageEvent$2, {
			origin: ws[kWebSocketURL$1].origin,
			data: dataForEvent
		});
	}
	/**
	* @see https://datatracker.ietf.org/doc/html/rfc6455
	* @see https://datatracker.ietf.org/doc/html/rfc2616
	* @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
	* @param {string} protocol
	*/
	function isValidSubprotocol$4(protocol) {
		if (protocol.length === 0) return false;
		for (const char of protocol) {
			const code = char.charCodeAt(0);
			if (code < 33 || code > 126 || char === "(" || char === ")" || char === "<" || char === ">" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === "\"" || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}" || code === 32 || code === 9) return false;
		}
		return true;
	}
	/**
	* @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
	* @param {number} code
	*/
	function isValidStatusCode$3(code) {
		if (code >= 1e3 && code < 1015) return code !== 1004 && code !== 1005 && code !== 1006;
		return code >= 3e3 && code <= 4999;
	}
	/**
	* @param {import('./websocket').WebSocket} ws
	* @param {string|undefined} reason
	*/
	function failWebsocketConnection$7(ws, reason) {
		const { [kController$1]: controller, [kResponse$2]: response } = ws;
		controller.abort();
		if (response?.socket && !response.socket.destroyed) response.socket.destroy();
		if (reason) fireEvent$4("error", ws, ErrorEvent$3, { error: new Error(reason) });
	}
	module.exports = {
		isEstablished: isEstablished$5,
		isClosing: isClosing$4,
		isClosed: isClosed$3,
		fireEvent: fireEvent$4,
		isValidSubprotocol: isValidSubprotocol$4,
		isValidStatusCode: isValidStatusCode$3,
		failWebsocketConnection: failWebsocketConnection$7,
		websocketMessageReceived: websocketMessageReceived$3
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/connection.js
var require_connection$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/connection.js"(exports, module) {
	const diagnosticsChannel$2 = __require("diagnostics_channel");
	const { uid: uid$4, states: states$8 } = require_constants$5();
	const { kReadyState: kReadyState$2, kSentClose: kSentClose$2, kByteParser: kByteParser$1, kReceivedClose: kReceivedClose$1 } = require_symbols$1();
	const { fireEvent: fireEvent$3, failWebsocketConnection: failWebsocketConnection$6 } = require_util$6();
	const { CloseEvent: CloseEvent$3 } = require_events$1();
	const { makeRequest: makeRequest$3 } = require_request$2();
	const { fetching: fetching$4 } = require_fetch$1();
	const { Headers: Headers$7 } = require_headers$1();
	const { getGlobalDispatcher: getGlobalDispatcher$6 } = require_global$2();
	const { kHeadersList } = require_symbols$5();
	const channels$8 = {};
	channels$8.open = diagnosticsChannel$2.channel("undici:websocket:open");
	channels$8.close = diagnosticsChannel$2.channel("undici:websocket:close");
	channels$8.socketError = diagnosticsChannel$2.channel("undici:websocket:socket_error");
	/** @type {import('crypto')} */
	let crypto$4;
	try {
		crypto$4 = __require("crypto");
	} catch {}
	/**
	* @see https://websockets.spec.whatwg.org/#concept-websocket-establish
	* @param {URL} url
	* @param {string|string[]} protocols
	* @param {import('./websocket').WebSocket} ws
	* @param {(response: any) => void} onEstablish
	* @param {Partial<import('../../types/websocket').WebSocketInit>} options
	*/
	function establishWebSocketConnection$4(url, protocols, ws, onEstablish, options) {
		const requestURL = url;
		requestURL.protocol = url.protocol === "ws:" ? "http:" : "https:";
		const request$3 = makeRequest$3({
			urlList: [requestURL],
			serviceWorkers: "none",
			referrer: "no-referrer",
			mode: "websocket",
			credentials: "include",
			cache: "no-store",
			redirect: "error"
		});
		if (options.headers) {
			const headersList = new Headers$7(options.headers)[kHeadersList];
			request$3.headersList = headersList;
		}
		const keyValue = crypto$4.randomBytes(16).toString("base64");
		request$3.headersList.append("sec-websocket-key", keyValue);
		request$3.headersList.append("sec-websocket-version", "13");
		for (const protocol of protocols) request$3.headersList.append("sec-websocket-protocol", protocol);
		const permessageDeflate = "";
		const controller = fetching$4({
			request: request$3,
			useParallelQueue: true,
			dispatcher: options.dispatcher ?? getGlobalDispatcher$6(),
			processResponse(response) {
				if (response.type === "error" || response.status !== 101) {
					failWebsocketConnection$6(ws, "Received network error or non-101 status code.");
					return;
				}
				if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
					failWebsocketConnection$6(ws, "Server did not respond with sent protocols.");
					return;
				}
				if (response.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
					failWebsocketConnection$6(ws, "Server did not set Upgrade header to \"websocket\".");
					return;
				}
				if (response.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
					failWebsocketConnection$6(ws, "Server did not set Connection header to \"upgrade\".");
					return;
				}
				const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
				const digest = crypto$4.createHash("sha1").update(keyValue + uid$4).digest("base64");
				if (secWSAccept !== digest) {
					failWebsocketConnection$6(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
					return;
				}
				const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
				if (secExtension !== null && secExtension !== permessageDeflate) {
					failWebsocketConnection$6(ws, "Received different permessage-deflate than the one set.");
					return;
				}
				const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
				if (secProtocol !== null && secProtocol !== request$3.headersList.get("Sec-WebSocket-Protocol")) {
					failWebsocketConnection$6(ws, "Protocol was not set in the opening handshake.");
					return;
				}
				response.socket.on("data", onSocketData);
				response.socket.on("close", onSocketClose$2);
				response.socket.on("error", onSocketError);
				if (channels$8.open.hasSubscribers) channels$8.open.publish({
					address: response.socket.address(),
					protocol: secProtocol,
					extensions: secExtension
				});
				onEstablish(response);
			}
		});
		return controller;
	}
	/**
	* @param {Buffer} chunk
	*/
	function onSocketData(chunk) {
		if (!this.ws[kByteParser$1].write(chunk)) this.pause();
	}
	/**
	* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
	* @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
	*/
	function onSocketClose$2() {
		const { ws } = this;
		const wasClean = ws[kSentClose$2] && ws[kReceivedClose$1];
		let code = 1005;
		let reason = "";
		const result = ws[kByteParser$1].closingInfo;
		if (result) {
			code = result.code ?? 1005;
			reason = result.reason;
		} else if (!ws[kSentClose$2]) code = 1006;
		ws[kReadyState$2] = states$8.CLOSED;
		fireEvent$3("close", ws, CloseEvent$3, {
			wasClean,
			code,
			reason
		});
		if (channels$8.close.hasSubscribers) channels$8.close.publish({
			websocket: ws,
			code,
			reason
		});
	}
	function onSocketError(error$1) {
		const { ws } = this;
		ws[kReadyState$2] = states$8.CLOSING;
		if (channels$8.socketError.hasSubscribers) channels$8.socketError.publish(error$1);
		this.destroy();
	}
	module.exports = { establishWebSocketConnection: establishWebSocketConnection$4 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/frame.js
var require_frame$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/frame.js"(exports, module) {
	const { maxUnsigned16Bit: maxUnsigned16Bit$2 } = require_constants$5();
	/** @type {import('crypto')} */
	let crypto$3;
	try {
		crypto$3 = __require("crypto");
	} catch {}
	var WebsocketFrameSend$8 = class {
		/**
		* @param {Buffer|undefined} data
		*/
		constructor(data$1) {
			this.frameData = data$1;
			this.maskKey = crypto$3.randomBytes(4);
		}
		createFrame(opcode) {
			const bodyLength$2 = this.frameData?.byteLength ?? 0;
			/** @type {number} */
			let payloadLength = bodyLength$2;
			let offset = 6;
			if (bodyLength$2 > maxUnsigned16Bit$2) {
				offset += 8;
				payloadLength = 127;
			} else if (bodyLength$2 > 125) {
				offset += 2;
				payloadLength = 126;
			}
			const buffer$1 = Buffer.allocUnsafe(bodyLength$2 + offset);
			buffer$1[0] = buffer$1[1] = 0;
			buffer$1[0] |= 128;
			buffer$1[0] = (buffer$1[0] & 240) + opcode;
			/*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
			buffer$1[offset - 4] = this.maskKey[0];
			buffer$1[offset - 3] = this.maskKey[1];
			buffer$1[offset - 2] = this.maskKey[2];
			buffer$1[offset - 1] = this.maskKey[3];
			buffer$1[1] = payloadLength;
			if (payloadLength === 126) buffer$1.writeUInt16BE(bodyLength$2, 2);
			else if (payloadLength === 127) {
				buffer$1[2] = buffer$1[3] = 0;
				buffer$1.writeUIntBE(bodyLength$2, 4, 6);
			}
			buffer$1[1] |= 128;
			for (let i$1 = 0; i$1 < bodyLength$2; i$1++) buffer$1[offset + i$1] = this.frameData[i$1] ^ this.maskKey[i$1 % 4];
			return buffer$1;
		}
	};
	module.exports = { WebsocketFrameSend: WebsocketFrameSend$8 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/receiver.js
var require_receiver$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/receiver.js"(exports, module) {
	const { Writable: Writable$4 } = __require("stream");
	const diagnosticsChannel$1 = __require("diagnostics_channel");
	const { parserStates: parserStates$2, opcodes: opcodes$9, states: states$7, emptyBuffer: emptyBuffer$4 } = require_constants$5();
	const { kReadyState: kReadyState$1, kSentClose: kSentClose$1, kResponse: kResponse$1, kReceivedClose } = require_symbols$1();
	const { isValidStatusCode: isValidStatusCode$2, failWebsocketConnection: failWebsocketConnection$5, websocketMessageReceived: websocketMessageReceived$2 } = require_util$6();
	const { WebsocketFrameSend: WebsocketFrameSend$7 } = require_frame$1();
	const channels$7 = {};
	channels$7.ping = diagnosticsChannel$1.channel("undici:websocket:ping");
	channels$7.pong = diagnosticsChannel$1.channel("undici:websocket:pong");
	var ByteParser$4 = class extends Writable$4 {
		#buffers = [];
		#byteOffset = 0;
		#state = parserStates$2.INFO;
		#info = {};
		#fragments = [];
		constructor(ws) {
			super();
			this.ws = ws;
		}
		/**
		* @param {Buffer} chunk
		* @param {() => void} callback
		*/
		_write(chunk, _, callback) {
			this.#buffers.push(chunk);
			this.#byteOffset += chunk.length;
			this.run(callback);
		}
		/**
		* Runs whenever a new chunk is received.
		* Callback is called whenever there are no more chunks buffering,
		* or not enough bytes are buffered to parse.
		*/
		run(callback) {
			while (true) {
				if (this.#state === parserStates$2.INFO) {
					if (this.#byteOffset < 2) return callback();
					const buffer$1 = this.consume(2);
					this.#info.fin = (buffer$1[0] & 128) !== 0;
					this.#info.opcode = buffer$1[0] & 15;
					this.#info.originalOpcode ??= this.#info.opcode;
					this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes$9.CONTINUATION;
					if (this.#info.fragmented && this.#info.opcode !== opcodes$9.BINARY && this.#info.opcode !== opcodes$9.TEXT) {
						failWebsocketConnection$5(this.ws, "Invalid frame type was fragmented.");
						return;
					}
					const payloadLength = buffer$1[1] & 127;
					if (payloadLength <= 125) {
						this.#info.payloadLength = payloadLength;
						this.#state = parserStates$2.READ_DATA;
					} else if (payloadLength === 126) this.#state = parserStates$2.PAYLOADLENGTH_16;
					else if (payloadLength === 127) this.#state = parserStates$2.PAYLOADLENGTH_64;
					if (this.#info.fragmented && payloadLength > 125) {
						failWebsocketConnection$5(this.ws, "Fragmented frame exceeded 125 bytes.");
						return;
					} else if ((this.#info.opcode === opcodes$9.PING || this.#info.opcode === opcodes$9.PONG || this.#info.opcode === opcodes$9.CLOSE) && payloadLength > 125) {
						failWebsocketConnection$5(this.ws, "Payload length for control frame exceeded 125 bytes.");
						return;
					} else if (this.#info.opcode === opcodes$9.CLOSE) {
						if (payloadLength === 1) {
							failWebsocketConnection$5(this.ws, "Received close frame with a 1-byte body.");
							return;
						}
						const body = this.consume(payloadLength);
						this.#info.closeInfo = this.parseCloseBody(false, body);
						if (!this.ws[kSentClose$1]) {
							const body$1 = Buffer.allocUnsafe(2);
							body$1.writeUInt16BE(this.#info.closeInfo.code, 0);
							const closeFrame = new WebsocketFrameSend$7(body$1);
							this.ws[kResponse$1].socket.write(closeFrame.createFrame(opcodes$9.CLOSE), (err) => {
								if (!err) this.ws[kSentClose$1] = true;
							});
						}
						this.ws[kReadyState$1] = states$7.CLOSING;
						this.ws[kReceivedClose] = true;
						this.end();
						return;
					} else if (this.#info.opcode === opcodes$9.PING) {
						const body = this.consume(payloadLength);
						if (!this.ws[kReceivedClose]) {
							const frame = new WebsocketFrameSend$7(body);
							this.ws[kResponse$1].socket.write(frame.createFrame(opcodes$9.PONG));
							if (channels$7.ping.hasSubscribers) channels$7.ping.publish({ payload: body });
						}
						this.#state = parserStates$2.INFO;
						if (this.#byteOffset > 0) continue;
						else {
							callback();
							return;
						}
					} else if (this.#info.opcode === opcodes$9.PONG) {
						const body = this.consume(payloadLength);
						if (channels$7.pong.hasSubscribers) channels$7.pong.publish({ payload: body });
						if (this.#byteOffset > 0) continue;
						else {
							callback();
							return;
						}
					}
				} else if (this.#state === parserStates$2.PAYLOADLENGTH_16) {
					if (this.#byteOffset < 2) return callback();
					const buffer$1 = this.consume(2);
					this.#info.payloadLength = buffer$1.readUInt16BE(0);
					this.#state = parserStates$2.READ_DATA;
				} else if (this.#state === parserStates$2.PAYLOADLENGTH_64) {
					if (this.#byteOffset < 8) return callback();
					const buffer$1 = this.consume(8);
					const upper = buffer$1.readUInt32BE(0);
					if (upper > 2 ** 31 - 1) {
						failWebsocketConnection$5(this.ws, "Received payload length > 2^31 bytes.");
						return;
					}
					const lower = buffer$1.readUInt32BE(4);
					this.#info.payloadLength = (upper << 8) + lower;
					this.#state = parserStates$2.READ_DATA;
				} else if (this.#state === parserStates$2.READ_DATA) {
					if (this.#byteOffset < this.#info.payloadLength) return callback();
					else if (this.#byteOffset >= this.#info.payloadLength) {
						const body = this.consume(this.#info.payloadLength);
						this.#fragments.push(body);
						if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes$9.CONTINUATION) {
							const fullMessage = Buffer.concat(this.#fragments);
							websocketMessageReceived$2(this.ws, this.#info.originalOpcode, fullMessage);
							this.#info = {};
							this.#fragments.length = 0;
						}
						this.#state = parserStates$2.INFO;
					}
				}
				if (this.#byteOffset > 0) continue;
				else {
					callback();
					break;
				}
			}
		}
		/**
		* Take n bytes from the buffered Buffers
		* @param {number} n
		* @returns {Buffer|null}
		*/
		consume(n$1) {
			if (n$1 > this.#byteOffset) return null;
			else if (n$1 === 0) return emptyBuffer$4;
			if (this.#buffers[0].length === n$1) {
				this.#byteOffset -= this.#buffers[0].length;
				return this.#buffers.shift();
			}
			const buffer$1 = Buffer.allocUnsafe(n$1);
			let offset = 0;
			while (offset !== n$1) {
				const next = this.#buffers[0];
				const { length } = next;
				if (length + offset === n$1) {
					buffer$1.set(this.#buffers.shift(), offset);
					break;
				} else if (length + offset > n$1) {
					buffer$1.set(next.subarray(0, n$1 - offset), offset);
					this.#buffers[0] = next.subarray(n$1 - offset);
					break;
				} else {
					buffer$1.set(this.#buffers.shift(), offset);
					offset += next.length;
				}
			}
			this.#byteOffset -= n$1;
			return buffer$1;
		}
		parseCloseBody(onlyCode, data$1) {
			/** @type {number|undefined} */
			let code;
			if (data$1.length >= 2) code = data$1.readUInt16BE(0);
			if (onlyCode) {
				if (!isValidStatusCode$2(code)) return null;
				return { code };
			}
			/** @type {Buffer} */
			let reason = data$1.subarray(2);
			if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) reason = reason.subarray(3);
			if (code !== void 0 && !isValidStatusCode$2(code)) return null;
			try {
				reason = new TextDecoder("utf-8", { fatal: true }).decode(reason);
			} catch {
				return null;
			}
			return {
				code,
				reason
			};
		}
		get closingInfo() {
			return this.#info.closeInfo;
		}
	};
	module.exports = { ByteParser: ByteParser$4 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/websocket.js
var require_websocket$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/websocket.js"(exports, module) {
	const { webidl: webidl$17 } = require_webidl$1();
	const { DOMException: DOMException$1 } = require_constants$8();
	const { URLSerializer: URLSerializer$5 } = require_dataURL();
	const { getGlobalOrigin: getGlobalOrigin$3 } = require_global$3();
	const { staticPropertyDescriptors: staticPropertyDescriptors$2, states: states$6, opcodes: opcodes$8, emptyBuffer: emptyBuffer$3 } = require_constants$5();
	const { kWebSocketURL, kReadyState, kController, kBinaryType, kResponse, kSentClose, kByteParser } = require_symbols$1();
	const { isEstablished: isEstablished$4, isClosing: isClosing$3, isValidSubprotocol: isValidSubprotocol$3, failWebsocketConnection: failWebsocketConnection$4, fireEvent: fireEvent$2 } = require_util$6();
	const { establishWebSocketConnection: establishWebSocketConnection$3 } = require_connection$1();
	const { WebsocketFrameSend: WebsocketFrameSend$6 } = require_frame$1();
	const { ByteParser: ByteParser$3 } = require_receiver$1();
	const { kEnumerableProperty: kEnumerableProperty$12, isBlobLike: isBlobLike$2 } = require_util$12();
	const { getGlobalDispatcher: getGlobalDispatcher$5 } = require_global$2();
	const { types: types$4 } = __require("util");
	let experimentalWarned$1 = false;
	var WebSocket$2 = class WebSocket$2 extends EventTarget {
		#events = {
			open: null,
			error: null,
			close: null,
			message: null
		};
		#bufferedAmount = 0;
		#protocol = "";
		#extensions = "";
		/**
		* @param {string} url
		* @param {string|string[]} protocols
		*/
		constructor(url, protocols = []) {
			super();
			webidl$17.argumentLengthCheck(arguments, 1, { header: "WebSocket constructor" });
			if (!experimentalWarned$1) {
				experimentalWarned$1 = true;
				process.emitWarning("WebSockets are experimental, expect them to change at any time.", { code: "UNDICI-WS" });
			}
			const options = webidl$17.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols);
			url = webidl$17.converters.USVString(url);
			protocols = options.protocols;
			const baseURL = getGlobalOrigin$3();
			let urlRecord;
			try {
				urlRecord = new URL(url, baseURL);
			} catch (e) {
				throw new DOMException$1(e, "SyntaxError");
			}
			if (urlRecord.protocol === "http:") urlRecord.protocol = "ws:";
			else if (urlRecord.protocol === "https:") urlRecord.protocol = "wss:";
			if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") throw new DOMException$1(`Expected a ws: or wss: protocol, got ${urlRecord.protocol}`, "SyntaxError");
			if (urlRecord.hash || urlRecord.href.endsWith("#")) throw new DOMException$1("Got fragment", "SyntaxError");
			if (typeof protocols === "string") protocols = [protocols];
			if (protocols.length !== new Set(protocols.map((p) => p.toLowerCase())).size) throw new DOMException$1("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
			if (protocols.length > 0 && !protocols.every((p) => isValidSubprotocol$3(p))) throw new DOMException$1("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
			this[kWebSocketURL] = new URL(urlRecord.href);
			this[kController] = establishWebSocketConnection$3(urlRecord, protocols, this, (response) => this.#onConnectionEstablished(response), options);
			this[kReadyState] = WebSocket$2.CONNECTING;
			this[kBinaryType] = "blob";
		}
		/**
		* @see https://websockets.spec.whatwg.org/#dom-websocket-close
		* @param {number|undefined} code
		* @param {string|undefined} reason
		*/
		close(code = void 0, reason = void 0) {
			webidl$17.brandCheck(this, WebSocket$2);
			if (code !== void 0) code = webidl$17.converters["unsigned short"](code, { clamp: true });
			if (reason !== void 0) reason = webidl$17.converters.USVString(reason);
			if (code !== void 0) {
				if (code !== 1e3 && (code < 3e3 || code > 4999)) throw new DOMException$1("invalid code", "InvalidAccessError");
			}
			let reasonByteLength = 0;
			if (reason !== void 0) {
				reasonByteLength = Buffer.byteLength(reason);
				if (reasonByteLength > 123) throw new DOMException$1(`Reason must be less than 123 bytes; received ${reasonByteLength}`, "SyntaxError");
			}
			if (this[kReadyState] === WebSocket$2.CLOSING || this[kReadyState] === WebSocket$2.CLOSED) {} else if (!isEstablished$4(this)) {
				failWebsocketConnection$4(this, "Connection was closed before it was established.");
				this[kReadyState] = WebSocket$2.CLOSING;
			} else if (!isClosing$3(this)) {
				const frame = new WebsocketFrameSend$6();
				if (code !== void 0 && reason === void 0) {
					frame.frameData = Buffer.allocUnsafe(2);
					frame.frameData.writeUInt16BE(code, 0);
				} else if (code !== void 0 && reason !== void 0) {
					frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
					frame.frameData.writeUInt16BE(code, 0);
					frame.frameData.write(reason, 2, "utf-8");
				} else frame.frameData = emptyBuffer$3;
				/** @type {import('stream').Duplex} */
				const socket = this[kResponse].socket;
				socket.write(frame.createFrame(opcodes$8.CLOSE), (err) => {
					if (!err) this[kSentClose] = true;
				});
				this[kReadyState] = states$6.CLOSING;
			} else this[kReadyState] = WebSocket$2.CLOSING;
		}
		/**
		* @see https://websockets.spec.whatwg.org/#dom-websocket-send
		* @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
		*/
		send(data$1) {
			webidl$17.brandCheck(this, WebSocket$2);
			webidl$17.argumentLengthCheck(arguments, 1, { header: "WebSocket.send" });
			data$1 = webidl$17.converters.WebSocketSendData(data$1);
			if (this[kReadyState] === WebSocket$2.CONNECTING) throw new DOMException$1("Sent before connected.", "InvalidStateError");
			if (!isEstablished$4(this) || isClosing$3(this)) return;
			/** @type {import('stream').Duplex} */
			const socket = this[kResponse].socket;
			if (typeof data$1 === "string") {
				const value = Buffer.from(data$1);
				const frame = new WebsocketFrameSend$6(value);
				const buffer$1 = frame.createFrame(opcodes$8.TEXT);
				this.#bufferedAmount += value.byteLength;
				socket.write(buffer$1, () => {
					this.#bufferedAmount -= value.byteLength;
				});
			} else if (types$4.isArrayBuffer(data$1)) {
				const value = Buffer.from(data$1);
				const frame = new WebsocketFrameSend$6(value);
				const buffer$1 = frame.createFrame(opcodes$8.BINARY);
				this.#bufferedAmount += value.byteLength;
				socket.write(buffer$1, () => {
					this.#bufferedAmount -= value.byteLength;
				});
			} else if (ArrayBuffer.isView(data$1)) {
				const ab = Buffer.from(data$1, data$1.byteOffset, data$1.byteLength);
				const frame = new WebsocketFrameSend$6(ab);
				const buffer$1 = frame.createFrame(opcodes$8.BINARY);
				this.#bufferedAmount += ab.byteLength;
				socket.write(buffer$1, () => {
					this.#bufferedAmount -= ab.byteLength;
				});
			} else if (isBlobLike$2(data$1)) {
				const frame = new WebsocketFrameSend$6();
				data$1.arrayBuffer().then((ab) => {
					const value = Buffer.from(ab);
					frame.frameData = value;
					const buffer$1 = frame.createFrame(opcodes$8.BINARY);
					this.#bufferedAmount += value.byteLength;
					socket.write(buffer$1, () => {
						this.#bufferedAmount -= value.byteLength;
					});
				});
			}
		}
		get readyState() {
			webidl$17.brandCheck(this, WebSocket$2);
			return this[kReadyState];
		}
		get bufferedAmount() {
			webidl$17.brandCheck(this, WebSocket$2);
			return this.#bufferedAmount;
		}
		get url() {
			webidl$17.brandCheck(this, WebSocket$2);
			return URLSerializer$5(this[kWebSocketURL]);
		}
		get extensions() {
			webidl$17.brandCheck(this, WebSocket$2);
			return this.#extensions;
		}
		get protocol() {
			webidl$17.brandCheck(this, WebSocket$2);
			return this.#protocol;
		}
		get onopen() {
			webidl$17.brandCheck(this, WebSocket$2);
			return this.#events.open;
		}
		set onopen(fn) {
			webidl$17.brandCheck(this, WebSocket$2);
			if (this.#events.open) this.removeEventListener("open", this.#events.open);
			if (typeof fn === "function") {
				this.#events.open = fn;
				this.addEventListener("open", fn);
			} else this.#events.open = null;
		}
		get onerror() {
			webidl$17.brandCheck(this, WebSocket$2);
			return this.#events.error;
		}
		set onerror(fn) {
			webidl$17.brandCheck(this, WebSocket$2);
			if (this.#events.error) this.removeEventListener("error", this.#events.error);
			if (typeof fn === "function") {
				this.#events.error = fn;
				this.addEventListener("error", fn);
			} else this.#events.error = null;
		}
		get onclose() {
			webidl$17.brandCheck(this, WebSocket$2);
			return this.#events.close;
		}
		set onclose(fn) {
			webidl$17.brandCheck(this, WebSocket$2);
			if (this.#events.close) this.removeEventListener("close", this.#events.close);
			if (typeof fn === "function") {
				this.#events.close = fn;
				this.addEventListener("close", fn);
			} else this.#events.close = null;
		}
		get onmessage() {
			webidl$17.brandCheck(this, WebSocket$2);
			return this.#events.message;
		}
		set onmessage(fn) {
			webidl$17.brandCheck(this, WebSocket$2);
			if (this.#events.message) this.removeEventListener("message", this.#events.message);
			if (typeof fn === "function") {
				this.#events.message = fn;
				this.addEventListener("message", fn);
			} else this.#events.message = null;
		}
		get binaryType() {
			webidl$17.brandCheck(this, WebSocket$2);
			return this[kBinaryType];
		}
		set binaryType(type) {
			webidl$17.brandCheck(this, WebSocket$2);
			if (type !== "blob" && type !== "arraybuffer") this[kBinaryType] = "blob";
			else this[kBinaryType] = type;
		}
		/**
		* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
		*/
		#onConnectionEstablished(response) {
			this[kResponse] = response;
			const parser = new ByteParser$3(this);
			parser.on("drain", function onParserDrain() {
				this.ws[kResponse].socket.resume();
			});
			response.socket.ws = this;
			this[kByteParser] = parser;
			this[kReadyState] = states$6.OPEN;
			const extensions = response.headersList.get("sec-websocket-extensions");
			if (extensions !== null) this.#extensions = extensions;
			const protocol = response.headersList.get("sec-websocket-protocol");
			if (protocol !== null) this.#protocol = protocol;
			fireEvent$2("open", this);
		}
	};
	WebSocket$2.CONNECTING = WebSocket$2.prototype.CONNECTING = states$6.CONNECTING;
	WebSocket$2.OPEN = WebSocket$2.prototype.OPEN = states$6.OPEN;
	WebSocket$2.CLOSING = WebSocket$2.prototype.CLOSING = states$6.CLOSING;
	WebSocket$2.CLOSED = WebSocket$2.prototype.CLOSED = states$6.CLOSED;
	Object.defineProperties(WebSocket$2.prototype, {
		CONNECTING: staticPropertyDescriptors$2,
		OPEN: staticPropertyDescriptors$2,
		CLOSING: staticPropertyDescriptors$2,
		CLOSED: staticPropertyDescriptors$2,
		url: kEnumerableProperty$12,
		readyState: kEnumerableProperty$12,
		bufferedAmount: kEnumerableProperty$12,
		onopen: kEnumerableProperty$12,
		onerror: kEnumerableProperty$12,
		onclose: kEnumerableProperty$12,
		close: kEnumerableProperty$12,
		onmessage: kEnumerableProperty$12,
		binaryType: kEnumerableProperty$12,
		send: kEnumerableProperty$12,
		extensions: kEnumerableProperty$12,
		protocol: kEnumerableProperty$12,
		[Symbol.toStringTag]: {
			value: "WebSocket",
			writable: false,
			enumerable: false,
			configurable: true
		}
	});
	Object.defineProperties(WebSocket$2, {
		CONNECTING: staticPropertyDescriptors$2,
		OPEN: staticPropertyDescriptors$2,
		CLOSING: staticPropertyDescriptors$2,
		CLOSED: staticPropertyDescriptors$2
	});
	webidl$17.converters["sequence<DOMString>"] = webidl$17.sequenceConverter(webidl$17.converters.DOMString);
	webidl$17.converters["DOMString or sequence<DOMString>"] = function(V) {
		if (webidl$17.util.Type(V) === "Object" && Symbol.iterator in V) return webidl$17.converters["sequence<DOMString>"](V);
		return webidl$17.converters.DOMString(V);
	};
	webidl$17.converters.WebSocketInit = webidl$17.dictionaryConverter([
		{
			key: "protocols",
			converter: webidl$17.converters["DOMString or sequence<DOMString>"],
			get defaultValue() {
				return [];
			}
		},
		{
			key: "dispatcher",
			converter: (V) => V,
			get defaultValue() {
				return getGlobalDispatcher$5();
			}
		},
		{
			key: "headers",
			converter: webidl$17.nullableConverter(webidl$17.converters.HeadersInit)
		}
	]);
	webidl$17.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
		if (webidl$17.util.Type(V) === "Object" && !(Symbol.iterator in V)) return webidl$17.converters.WebSocketInit(V);
		return { protocols: webidl$17.converters["DOMString or sequence<DOMString>"](V) };
	};
	webidl$17.converters.WebSocketSendData = function(V) {
		if (webidl$17.util.Type(V) === "Object") {
			if (isBlobLike$2(V)) return webidl$17.converters.Blob(V, { strict: false });
			if (ArrayBuffer.isView(V) || types$4.isAnyArrayBuffer(V)) return webidl$17.converters.BufferSource(V);
		}
		return webidl$17.converters.USVString(V);
	};
	module.exports = { WebSocket: WebSocket$2 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.28.5/node_modules/undici/index.js
var require_undici$1 = __commonJS({ "node_modules/.pnpm/undici@5.28.5/node_modules/undici/index.js"(exports, module) {
	const Client$7 = require_client$1();
	const Dispatcher$5 = require_dispatcher$1();
	const errors$1 = require_errors$1();
	const Pool$6 = require_pool$1();
	const BalancedPool$2 = require_balanced_pool$1();
	const Agent$6 = require_agent$1();
	const util$23 = require_util$12();
	const { InvalidArgumentError: InvalidArgumentError$32 } = errors$1;
	const api$1 = require_api$1();
	const buildConnector$5 = require_connect$1();
	const MockClient$3 = require_mock_client$1();
	const MockAgent$2 = require_mock_agent$1();
	const MockPool$3 = require_mock_pool$1();
	const mockErrors$1 = require_mock_errors$1();
	const ProxyAgent$4 = require_proxy_agent$1();
	const RetryHandler$4 = require_RetryHandler();
	const { getGlobalDispatcher: getGlobalDispatcher$4, setGlobalDispatcher: setGlobalDispatcher$2 } = require_global$2();
	const DecoratorHandler$4 = require_DecoratorHandler();
	const RedirectHandler$3 = require_RedirectHandler();
	const createRedirectInterceptor$1 = require_redirectInterceptor();
	let hasCrypto;
	try {
		__require("crypto");
		hasCrypto = true;
	} catch {
		hasCrypto = false;
	}
	Object.assign(Dispatcher$5.prototype, api$1);
	module.exports.Dispatcher = Dispatcher$5;
	module.exports.Client = Client$7;
	module.exports.Pool = Pool$6;
	module.exports.BalancedPool = BalancedPool$2;
	module.exports.Agent = Agent$6;
	module.exports.ProxyAgent = ProxyAgent$4;
	module.exports.RetryHandler = RetryHandler$4;
	module.exports.DecoratorHandler = DecoratorHandler$4;
	module.exports.RedirectHandler = RedirectHandler$3;
	module.exports.createRedirectInterceptor = createRedirectInterceptor$1;
	module.exports.buildConnector = buildConnector$5;
	module.exports.errors = errors$1;
	function makeDispatcher$1(fn) {
		return (url, opts, handler$1) => {
			if (typeof opts === "function") {
				handler$1 = opts;
				opts = null;
			}
			if (!url || typeof url !== "string" && typeof url !== "object" && !(url instanceof URL)) throw new InvalidArgumentError$32("invalid url");
			if (opts != null && typeof opts !== "object") throw new InvalidArgumentError$32("invalid opts");
			if (opts && opts.path != null) {
				if (typeof opts.path !== "string") throw new InvalidArgumentError$32("invalid opts.path");
				let path$9 = opts.path;
				if (!opts.path.startsWith("/")) path$9 = `/${path$9}`;
				url = new URL(util$23.parseOrigin(url).origin + path$9);
			} else {
				if (!opts) opts = typeof url === "object" ? url : {};
				url = util$23.parseURL(url);
			}
			const { agent, dispatcher = getGlobalDispatcher$4() } = opts;
			if (agent) throw new InvalidArgumentError$32("unsupported opts.agent. Did you mean opts.client?");
			return fn.call(dispatcher, {
				...opts,
				origin: url.origin,
				path: url.search ? `${url.pathname}${url.search}` : url.pathname,
				method: opts.method || (opts.body ? "PUT" : "GET")
			}, handler$1);
		};
	}
	module.exports.setGlobalDispatcher = setGlobalDispatcher$2;
	module.exports.getGlobalDispatcher = getGlobalDispatcher$4;
	if (util$23.nodeMajor > 16 || util$23.nodeMajor === 16 && util$23.nodeMinor >= 8) {
		let fetchImpl$1 = null;
		module.exports.fetch = async function fetch$4(resource) {
			if (!fetchImpl$1) fetchImpl$1 = require_fetch$1().fetch;
			try {
				return await fetchImpl$1(...arguments);
			} catch (err) {
				if (typeof err === "object") Error.captureStackTrace(err, this);
				throw err;
			}
		};
		module.exports.Headers = require_headers$1().Headers;
		module.exports.Response = require_response$1().Response;
		module.exports.Request = require_request$2().Request;
		module.exports.FormData = require_formdata$1().FormData;
		module.exports.File = require_file().File;
		module.exports.FileReader = require_filereader().FileReader;
		const { setGlobalOrigin: setGlobalOrigin$3, getGlobalOrigin: getGlobalOrigin$8 } = require_global$3();
		module.exports.setGlobalOrigin = setGlobalOrigin$3;
		module.exports.getGlobalOrigin = getGlobalOrigin$8;
		const { CacheStorage: CacheStorage$3 } = require_cachestorage$1();
		const { kConstruct: kConstruct$13 } = require_symbols$2();
		module.exports.caches = new CacheStorage$3(kConstruct$13);
	}
	if (util$23.nodeMajor >= 16) {
		const { deleteCookie: deleteCookie$3, getCookies: getCookies$3, getSetCookies: getSetCookies$3, setCookie: setCookie$3 } = require_cookies$1();
		module.exports.deleteCookie = deleteCookie$3;
		module.exports.getCookies = getCookies$3;
		module.exports.getSetCookies = getSetCookies$3;
		module.exports.setCookie = setCookie$3;
		const { parseMIMEType: parseMIMEType$8, serializeAMimeType: serializeAMimeType$9 } = require_dataURL();
		module.exports.parseMIMEType = parseMIMEType$8;
		module.exports.serializeAMimeType = serializeAMimeType$9;
	}
	if (util$23.nodeMajor >= 18 && hasCrypto) {
		const { WebSocket: WebSocket$3 } = require_websocket$1();
		module.exports.WebSocket = WebSocket$3;
	}
	module.exports.request = makeDispatcher$1(api$1.request);
	module.exports.stream = makeDispatcher$1(api$1.stream);
	module.exports.pipeline = makeDispatcher$1(api$1.pipeline);
	module.exports.connect = makeDispatcher$1(api$1.connect);
	module.exports.upgrade = makeDispatcher$1(api$1.upgrade);
	module.exports.MockClient = MockClient$3;
	module.exports.MockPool = MockPool$3;
	module.exports.MockAgent = MockAgent$2;
	module.exports.mockErrors = mockErrors$1;
} });

//#endregion
//#region node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/index.js
var require_lib = __commonJS({ "node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/index.js"(exports) {
	var __createBinding$10 = exports && exports.__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __setModuleDefault$10 = exports && exports.__setModuleDefault || (Object.create ? function(o$1, v) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v
		});
	} : function(o$1, v) {
		o$1["default"] = v;
	});
	var __importStar$10 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$10(result, mod, k);
		}
		__setModuleDefault$10(result, mod);
		return result;
	};
	var __awaiter$10 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
	const http$1 = __importStar$10(__require("http"));
	const https = __importStar$10(__require("https"));
	const pm = __importStar$10(require_proxy());
	const tunnel = __importStar$10(require_tunnel());
	const undici_1$1 = require_undici$1();
	var HttpCodes;
	(function(HttpCodes$1) {
		HttpCodes$1[HttpCodes$1["OK"] = 200] = "OK";
		HttpCodes$1[HttpCodes$1["MultipleChoices"] = 300] = "MultipleChoices";
		HttpCodes$1[HttpCodes$1["MovedPermanently"] = 301] = "MovedPermanently";
		HttpCodes$1[HttpCodes$1["ResourceMoved"] = 302] = "ResourceMoved";
		HttpCodes$1[HttpCodes$1["SeeOther"] = 303] = "SeeOther";
		HttpCodes$1[HttpCodes$1["NotModified"] = 304] = "NotModified";
		HttpCodes$1[HttpCodes$1["UseProxy"] = 305] = "UseProxy";
		HttpCodes$1[HttpCodes$1["SwitchProxy"] = 306] = "SwitchProxy";
		HttpCodes$1[HttpCodes$1["TemporaryRedirect"] = 307] = "TemporaryRedirect";
		HttpCodes$1[HttpCodes$1["PermanentRedirect"] = 308] = "PermanentRedirect";
		HttpCodes$1[HttpCodes$1["BadRequest"] = 400] = "BadRequest";
		HttpCodes$1[HttpCodes$1["Unauthorized"] = 401] = "Unauthorized";
		HttpCodes$1[HttpCodes$1["PaymentRequired"] = 402] = "PaymentRequired";
		HttpCodes$1[HttpCodes$1["Forbidden"] = 403] = "Forbidden";
		HttpCodes$1[HttpCodes$1["NotFound"] = 404] = "NotFound";
		HttpCodes$1[HttpCodes$1["MethodNotAllowed"] = 405] = "MethodNotAllowed";
		HttpCodes$1[HttpCodes$1["NotAcceptable"] = 406] = "NotAcceptable";
		HttpCodes$1[HttpCodes$1["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
		HttpCodes$1[HttpCodes$1["RequestTimeout"] = 408] = "RequestTimeout";
		HttpCodes$1[HttpCodes$1["Conflict"] = 409] = "Conflict";
		HttpCodes$1[HttpCodes$1["Gone"] = 410] = "Gone";
		HttpCodes$1[HttpCodes$1["TooManyRequests"] = 429] = "TooManyRequests";
		HttpCodes$1[HttpCodes$1["InternalServerError"] = 500] = "InternalServerError";
		HttpCodes$1[HttpCodes$1["NotImplemented"] = 501] = "NotImplemented";
		HttpCodes$1[HttpCodes$1["BadGateway"] = 502] = "BadGateway";
		HttpCodes$1[HttpCodes$1["ServiceUnavailable"] = 503] = "ServiceUnavailable";
		HttpCodes$1[HttpCodes$1["GatewayTimeout"] = 504] = "GatewayTimeout";
	})(HttpCodes || (exports.HttpCodes = HttpCodes = {}));
	var Headers$6;
	(function(Headers$13) {
		Headers$13["Accept"] = "accept";
		Headers$13["ContentType"] = "content-type";
	})(Headers$6 || (exports.Headers = Headers$6 = {}));
	var MediaTypes;
	(function(MediaTypes$1) {
		MediaTypes$1["ApplicationJson"] = "application/json";
	})(MediaTypes || (exports.MediaTypes = MediaTypes = {}));
	/**
	* Returns the proxy URL, depending upon the supplied url and proxy environment variables.
	* @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
	*/
	function getProxyUrl(serverUrl) {
		const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
		return proxyUrl ? proxyUrl.href : "";
	}
	exports.getProxyUrl = getProxyUrl;
	const HttpRedirectCodes = [
		HttpCodes.MovedPermanently,
		HttpCodes.ResourceMoved,
		HttpCodes.SeeOther,
		HttpCodes.TemporaryRedirect,
		HttpCodes.PermanentRedirect
	];
	const HttpResponseRetryCodes = [
		HttpCodes.BadGateway,
		HttpCodes.ServiceUnavailable,
		HttpCodes.GatewayTimeout
	];
	const RetryableHttpVerbs = [
		"OPTIONS",
		"GET",
		"DELETE",
		"HEAD"
	];
	const ExponentialBackoffCeiling = 10;
	const ExponentialBackoffTimeSlice = 5;
	var HttpClientError = class HttpClientError extends Error {
		constructor(message, statusCode) {
			super(message);
			this.name = "HttpClientError";
			this.statusCode = statusCode;
			Object.setPrototypeOf(this, HttpClientError.prototype);
		}
	};
	exports.HttpClientError = HttpClientError;
	var HttpClientResponse = class {
		constructor(message) {
			this.message = message;
		}
		readBody() {
			return __awaiter$10(this, void 0, void 0, function* () {
				return new Promise((resolve$1) => __awaiter$10(this, void 0, void 0, function* () {
					let output = Buffer.alloc(0);
					this.message.on("data", (chunk) => {
						output = Buffer.concat([output, chunk]);
					});
					this.message.on("end", () => {
						resolve$1(output.toString());
					});
				}));
			});
		}
		readBodyBuffer() {
			return __awaiter$10(this, void 0, void 0, function* () {
				return new Promise((resolve$1) => __awaiter$10(this, void 0, void 0, function* () {
					const chunks = [];
					this.message.on("data", (chunk) => {
						chunks.push(chunk);
					});
					this.message.on("end", () => {
						resolve$1(Buffer.concat(chunks));
					});
				}));
			});
		}
	};
	exports.HttpClientResponse = HttpClientResponse;
	function isHttps(requestUrl) {
		const parsedUrl = new URL(requestUrl);
		return parsedUrl.protocol === "https:";
	}
	exports.isHttps = isHttps;
	var HttpClient = class {
		constructor(userAgent$3, handlers, requestOptions) {
			this._ignoreSslError = false;
			this._allowRedirects = true;
			this._allowRedirectDowngrade = false;
			this._maxRedirects = 50;
			this._allowRetries = false;
			this._maxRetries = 1;
			this._keepAlive = false;
			this._disposed = false;
			this.userAgent = userAgent$3;
			this.handlers = handlers || [];
			this.requestOptions = requestOptions;
			if (requestOptions) {
				if (requestOptions.ignoreSslError != null) this._ignoreSslError = requestOptions.ignoreSslError;
				this._socketTimeout = requestOptions.socketTimeout;
				if (requestOptions.allowRedirects != null) this._allowRedirects = requestOptions.allowRedirects;
				if (requestOptions.allowRedirectDowngrade != null) this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
				if (requestOptions.maxRedirects != null) this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
				if (requestOptions.keepAlive != null) this._keepAlive = requestOptions.keepAlive;
				if (requestOptions.allowRetries != null) this._allowRetries = requestOptions.allowRetries;
				if (requestOptions.maxRetries != null) this._maxRetries = requestOptions.maxRetries;
			}
		}
		options(requestUrl, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
			});
		}
		get(requestUrl, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("GET", requestUrl, null, additionalHeaders || {});
			});
		}
		del(requestUrl, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("DELETE", requestUrl, null, additionalHeaders || {});
			});
		}
		post(requestUrl, data$1, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("POST", requestUrl, data$1, additionalHeaders || {});
			});
		}
		patch(requestUrl, data$1, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("PATCH", requestUrl, data$1, additionalHeaders || {});
			});
		}
		put(requestUrl, data$1, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("PUT", requestUrl, data$1, additionalHeaders || {});
			});
		}
		head(requestUrl, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request("HEAD", requestUrl, null, additionalHeaders || {});
			});
		}
		sendStream(verb, requestUrl, stream$4, additionalHeaders) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return this.request(verb, requestUrl, stream$4, additionalHeaders);
			});
		}
		/**
		* Gets a typed object from an endpoint
		* Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
		*/
		getJson(requestUrl, additionalHeaders = {}) {
			return __awaiter$10(this, void 0, void 0, function* () {
				additionalHeaders[Headers$6.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers$6.Accept, MediaTypes.ApplicationJson);
				const res = yield this.get(requestUrl, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		postJson(requestUrl, obj, additionalHeaders = {}) {
			return __awaiter$10(this, void 0, void 0, function* () {
				const data$1 = JSON.stringify(obj, null, 2);
				additionalHeaders[Headers$6.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers$6.Accept, MediaTypes.ApplicationJson);
				additionalHeaders[Headers$6.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers$6.ContentType, MediaTypes.ApplicationJson);
				const res = yield this.post(requestUrl, data$1, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		putJson(requestUrl, obj, additionalHeaders = {}) {
			return __awaiter$10(this, void 0, void 0, function* () {
				const data$1 = JSON.stringify(obj, null, 2);
				additionalHeaders[Headers$6.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers$6.Accept, MediaTypes.ApplicationJson);
				additionalHeaders[Headers$6.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers$6.ContentType, MediaTypes.ApplicationJson);
				const res = yield this.put(requestUrl, data$1, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		patchJson(requestUrl, obj, additionalHeaders = {}) {
			return __awaiter$10(this, void 0, void 0, function* () {
				const data$1 = JSON.stringify(obj, null, 2);
				additionalHeaders[Headers$6.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers$6.Accept, MediaTypes.ApplicationJson);
				additionalHeaders[Headers$6.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers$6.ContentType, MediaTypes.ApplicationJson);
				const res = yield this.patch(requestUrl, data$1, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		/**
		* Makes a raw http request.
		* All other methods such as get, post, patch, and request ultimately call this.
		* Prefer get, del, post and patch
		*/
		request(verb, requestUrl, data$1, headers) {
			return __awaiter$10(this, void 0, void 0, function* () {
				if (this._disposed) throw new Error("Client has already been disposed.");
				const parsedUrl = new URL(requestUrl);
				let info$1 = this._prepareRequest(verb, parsedUrl, headers);
				const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
				let numTries = 0;
				let response;
				do {
					response = yield this.requestRaw(info$1, data$1);
					if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
						let authenticationHandler;
						for (const handler$1 of this.handlers) if (handler$1.canHandleAuthentication(response)) {
							authenticationHandler = handler$1;
							break;
						}
						if (authenticationHandler) return authenticationHandler.handleAuthentication(this, info$1, data$1);
						else return response;
					}
					let redirectsRemaining = this._maxRedirects;
					while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
						const redirectUrl = response.message.headers["location"];
						if (!redirectUrl) break;
						const parsedRedirectUrl = new URL(redirectUrl);
						if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
						yield response.readBody();
						if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
							for (const header in headers) if (header.toLowerCase() === "authorization") delete headers[header];
						}
						info$1 = this._prepareRequest(verb, parsedRedirectUrl, headers);
						response = yield this.requestRaw(info$1, data$1);
						redirectsRemaining--;
					}
					if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) return response;
					numTries += 1;
					if (numTries < maxTries) {
						yield response.readBody();
						yield this._performExponentialBackoff(numTries);
					}
				} while (numTries < maxTries);
				return response;
			});
		}
		/**
		* Needs to be called if keepAlive is set to true in request options.
		*/
		dispose() {
			if (this._agent) this._agent.destroy();
			this._disposed = true;
		}
		/**
		* Raw request.
		* @param info
		* @param data
		*/
		requestRaw(info$1, data$1) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return new Promise((resolve$1, reject) => {
					function callbackForResult(err, res) {
						if (err) reject(err);
						else if (!res) reject(/* @__PURE__ */ new Error("Unknown error"));
						else resolve$1(res);
					}
					this.requestRawWithCallback(info$1, data$1, callbackForResult);
				});
			});
		}
		/**
		* Raw request with callback.
		* @param info
		* @param data
		* @param onResult
		*/
		requestRawWithCallback(info$1, data$1, onResult) {
			if (typeof data$1 === "string") {
				if (!info$1.options.headers) info$1.options.headers = {};
				info$1.options.headers["Content-Length"] = Buffer.byteLength(data$1, "utf8");
			}
			let callbackCalled = false;
			function handleResult$3(err, res) {
				if (!callbackCalled) {
					callbackCalled = true;
					onResult(err, res);
				}
			}
			const req = info$1.httpModule.request(info$1.options, (msg) => {
				const res = new HttpClientResponse(msg);
				handleResult$3(void 0, res);
			});
			let socket;
			req.on("socket", (sock) => {
				socket = sock;
			});
			req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
				if (socket) socket.end();
				handleResult$3(/* @__PURE__ */ new Error(`Request timeout: ${info$1.options.path}`));
			});
			req.on("error", function(err) {
				handleResult$3(err);
			});
			if (data$1 && typeof data$1 === "string") req.write(data$1, "utf8");
			if (data$1 && typeof data$1 !== "string") {
				data$1.on("close", function() {
					req.end();
				});
				data$1.pipe(req);
			} else req.end();
		}
		/**
		* Gets an http agent. This function is useful when you need an http agent that handles
		* routing through a proxy server - depending upon the url and proxy environment variables.
		* @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
		*/
		getAgent(serverUrl) {
			const parsedUrl = new URL(serverUrl);
			return this._getAgent(parsedUrl);
		}
		getAgentDispatcher(serverUrl) {
			const parsedUrl = new URL(serverUrl);
			const proxyUrl = pm.getProxyUrl(parsedUrl);
			const useProxy = proxyUrl && proxyUrl.hostname;
			if (!useProxy) return;
			return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
		}
		_prepareRequest(method, requestUrl, headers) {
			const info$1 = {};
			info$1.parsedUrl = requestUrl;
			const usingSsl = info$1.parsedUrl.protocol === "https:";
			info$1.httpModule = usingSsl ? https : http$1;
			const defaultPort = usingSsl ? 443 : 80;
			info$1.options = {};
			info$1.options.host = info$1.parsedUrl.hostname;
			info$1.options.port = info$1.parsedUrl.port ? parseInt(info$1.parsedUrl.port) : defaultPort;
			info$1.options.path = (info$1.parsedUrl.pathname || "") + (info$1.parsedUrl.search || "");
			info$1.options.method = method;
			info$1.options.headers = this._mergeHeaders(headers);
			if (this.userAgent != null) info$1.options.headers["user-agent"] = this.userAgent;
			info$1.options.agent = this._getAgent(info$1.parsedUrl);
			if (this.handlers) for (const handler$1 of this.handlers) handler$1.prepareRequest(info$1.options);
			return info$1;
		}
		_mergeHeaders(headers) {
			if (this.requestOptions && this.requestOptions.headers) return Object.assign({}, lowercaseKeys$1(this.requestOptions.headers), lowercaseKeys$1(headers || {}));
			return lowercaseKeys$1(headers || {});
		}
		_getExistingOrDefaultHeader(additionalHeaders, header, _default) {
			let clientHeader;
			if (this.requestOptions && this.requestOptions.headers) clientHeader = lowercaseKeys$1(this.requestOptions.headers)[header];
			return additionalHeaders[header] || clientHeader || _default;
		}
		_getAgent(parsedUrl) {
			let agent;
			const proxyUrl = pm.getProxyUrl(parsedUrl);
			const useProxy = proxyUrl && proxyUrl.hostname;
			if (this._keepAlive && useProxy) agent = this._proxyAgent;
			if (!useProxy) agent = this._agent;
			if (agent) return agent;
			const usingSsl = parsedUrl.protocol === "https:";
			let maxSockets = 100;
			if (this.requestOptions) maxSockets = this.requestOptions.maxSockets || http$1.globalAgent.maxSockets;
			if (proxyUrl && proxyUrl.hostname) {
				const agentOptions = {
					maxSockets,
					keepAlive: this._keepAlive,
					proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && { proxyAuth: `${proxyUrl.username}:${proxyUrl.password}` }), {
						host: proxyUrl.hostname,
						port: proxyUrl.port
					})
				};
				let tunnelAgent;
				const overHttps = proxyUrl.protocol === "https:";
				if (usingSsl) tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
				else tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
				agent = tunnelAgent(agentOptions);
				this._proxyAgent = agent;
			}
			if (!agent) {
				const options = {
					keepAlive: this._keepAlive,
					maxSockets
				};
				agent = usingSsl ? new https.Agent(options) : new http$1.Agent(options);
				this._agent = agent;
			}
			if (usingSsl && this._ignoreSslError) agent.options = Object.assign(agent.options || {}, { rejectUnauthorized: false });
			return agent;
		}
		_getProxyAgentDispatcher(parsedUrl, proxyUrl) {
			let proxyAgent;
			if (this._keepAlive) proxyAgent = this._proxyAgentDispatcher;
			if (proxyAgent) return proxyAgent;
			const usingSsl = parsedUrl.protocol === "https:";
			proxyAgent = new undici_1$1.ProxyAgent(Object.assign({
				uri: proxyUrl.href,
				pipelining: !this._keepAlive ? 0 : 1
			}, (proxyUrl.username || proxyUrl.password) && { token: `Basic ${Buffer.from(`${proxyUrl.username}:${proxyUrl.password}`).toString("base64")}` }));
			this._proxyAgentDispatcher = proxyAgent;
			if (usingSsl && this._ignoreSslError) proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, { rejectUnauthorized: false });
			return proxyAgent;
		}
		_performExponentialBackoff(retryNumber) {
			return __awaiter$10(this, void 0, void 0, function* () {
				retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
				const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
				return new Promise((resolve$1) => setTimeout(() => resolve$1(), ms));
			});
		}
		_processResponse(res, options) {
			return __awaiter$10(this, void 0, void 0, function* () {
				return new Promise((resolve$1, reject) => __awaiter$10(this, void 0, void 0, function* () {
					const statusCode = res.message.statusCode || 0;
					const response = {
						statusCode,
						result: null,
						headers: {}
					};
					if (statusCode === HttpCodes.NotFound) resolve$1(response);
					function dateTimeDeserializer(key, value) {
						if (typeof value === "string") {
							const a$1 = new Date(value);
							if (!isNaN(a$1.valueOf())) return a$1;
						}
						return value;
					}
					let obj;
					let contents;
					try {
						contents = yield res.readBody();
						if (contents && contents.length > 0) {
							if (options && options.deserializeDates) obj = JSON.parse(contents, dateTimeDeserializer);
							else obj = JSON.parse(contents);
							response.result = obj;
						}
						response.headers = res.message.headers;
					} catch (err) {}
					if (statusCode > 299) {
						let msg;
						if (obj && obj.message) msg = obj.message;
						else if (contents && contents.length > 0) msg = contents;
						else msg = `Failed request: (${statusCode})`;
						const err = new HttpClientError(msg, statusCode);
						err.result = response.result;
						reject(err);
					} else resolve$1(response);
				}));
			});
		}
	};
	exports.HttpClient = HttpClient;
	const lowercaseKeys$1 = (obj) => Object.keys(obj).reduce((c$1, k) => (c$1[k.toLowerCase()] = obj[k], c$1), {});
} });

//#endregion
//#region node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/auth.js
var require_auth = __commonJS({ "node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/auth.js"(exports) {
	var __awaiter$9 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
	var BasicCredentialHandler = class {
		constructor(username, password) {
			this.username = username;
			this.password = password;
		}
		prepareRequest(options) {
			if (!options.headers) throw Error("The request has no headers");
			options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
		}
		canHandleAuthentication() {
			return false;
		}
		handleAuthentication() {
			return __awaiter$9(this, void 0, void 0, function* () {
				throw new Error("not implemented");
			});
		}
	};
	exports.BasicCredentialHandler = BasicCredentialHandler;
	var BearerCredentialHandler = class {
		constructor(token) {
			this.token = token;
		}
		prepareRequest(options) {
			if (!options.headers) throw Error("The request has no headers");
			options.headers["Authorization"] = `Bearer ${this.token}`;
		}
		canHandleAuthentication() {
			return false;
		}
		handleAuthentication() {
			return __awaiter$9(this, void 0, void 0, function* () {
				throw new Error("not implemented");
			});
		}
	};
	exports.BearerCredentialHandler = BearerCredentialHandler;
	var PersonalAccessTokenCredentialHandler = class {
		constructor(token) {
			this.token = token;
		}
		prepareRequest(options) {
			if (!options.headers) throw Error("The request has no headers");
			options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
		}
		canHandleAuthentication() {
			return false;
		}
		handleAuthentication() {
			return __awaiter$9(this, void 0, void 0, function* () {
				throw new Error("not implemented");
			});
		}
	};
	exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/oidc-utils.js"(exports) {
	var __awaiter$8 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.OidcClient = void 0;
	const http_client_1 = require_lib();
	const auth_1 = require_auth();
	const core_1$1 = require_core();
	var OidcClient = class OidcClient {
		static createHttpClient(allowRetry = true, maxRetry = 10) {
			const requestOptions = {
				allowRetries: allowRetry,
				maxRetries: maxRetry
			};
			return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
		}
		static getRequestToken() {
			const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
			if (!token) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
			return token;
		}
		static getIDTokenUrl() {
			const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
			if (!runtimeUrl) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
			return runtimeUrl;
		}
		static getCall(id_token_url) {
			var _a$3;
			return __awaiter$8(this, void 0, void 0, function* () {
				const httpclient = OidcClient.createHttpClient();
				const res = yield httpclient.getJson(id_token_url).catch((error$1) => {
					throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error$1.statusCode}\n 
        Error Message: ${error$1.message}`);
				});
				const id_token = (_a$3 = res.result) === null || _a$3 === void 0 ? void 0 : _a$3.value;
				if (!id_token) throw new Error("Response json body do not have ID Token field");
				return id_token;
			});
		}
		static getIDToken(audience) {
			return __awaiter$8(this, void 0, void 0, function* () {
				try {
					let id_token_url = OidcClient.getIDTokenUrl();
					if (audience) {
						const encodedAudience = encodeURIComponent(audience);
						id_token_url = `${id_token_url}&audience=${encodedAudience}`;
					}
					(0, core_1$1.debug)(`ID token url is ${id_token_url}`);
					const id_token = yield OidcClient.getCall(id_token_url);
					(0, core_1$1.setSecret)(id_token);
					return id_token;
				} catch (error$1) {
					throw new Error(`Error message: ${error$1.message}`);
				}
			});
		}
	};
	exports.OidcClient = OidcClient;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/summary.js
var require_summary = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/summary.js"(exports) {
	var __awaiter$7 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
	const os_1$2 = __require("os");
	const fs_1$1 = __require("fs");
	const { access, appendFile, writeFile: writeFile$1 } = fs_1$1.promises;
	exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
	exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
	var Summary = class {
		constructor() {
			this._buffer = "";
		}
		/**
		* Finds the summary file path from the environment, rejects if env var is not found or file does not exist
		* Also checks r/w permissions.
		*
		* @returns step summary file path
		*/
		filePath() {
			return __awaiter$7(this, void 0, void 0, function* () {
				if (this._filePath) return this._filePath;
				const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
				if (!pathFromEnv) throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
				try {
					yield access(pathFromEnv, fs_1$1.constants.R_OK | fs_1$1.constants.W_OK);
				} catch (_a$3) {
					throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
				}
				this._filePath = pathFromEnv;
				return this._filePath;
			});
		}
		/**
		* Wraps content in an HTML tag, adding any HTML attributes
		*
		* @param {string} tag HTML tag to wrap
		* @param {string | null} content content within the tag
		* @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
		*
		* @returns {string} content wrapped in HTML element
		*/
		wrap(tag, content, attrs = {}) {
			const htmlAttrs = Object.entries(attrs).map(([key, value]) => ` ${key}="${value}"`).join("");
			if (!content) return `<${tag}${htmlAttrs}>`;
			return `<${tag}${htmlAttrs}>${content}</${tag}>`;
		}
		/**
		* Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
		*
		* @param {SummaryWriteOptions} [options] (optional) options for write operation
		*
		* @returns {Promise<Summary>} summary instance
		*/
		write(options) {
			return __awaiter$7(this, void 0, void 0, function* () {
				const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
				const filePath = yield this.filePath();
				const writeFunc = overwrite ? writeFile$1 : appendFile;
				yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
				return this.emptyBuffer();
			});
		}
		/**
		* Clears the summary buffer and wipes the summary file
		*
		* @returns {Summary} summary instance
		*/
		clear() {
			return __awaiter$7(this, void 0, void 0, function* () {
				return this.emptyBuffer().write({ overwrite: true });
			});
		}
		/**
		* Returns the current summary buffer as a string
		*
		* @returns {string} string of summary buffer
		*/
		stringify() {
			return this._buffer;
		}
		/**
		* If the summary buffer is empty
		*
		* @returns {boolen} true if the buffer is empty
		*/
		isEmptyBuffer() {
			return this._buffer.length === 0;
		}
		/**
		* Resets the summary buffer without writing to summary file
		*
		* @returns {Summary} summary instance
		*/
		emptyBuffer() {
			this._buffer = "";
			return this;
		}
		/**
		* Adds raw text to the summary buffer
		*
		* @param {string} text content to add
		* @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
		*
		* @returns {Summary} summary instance
		*/
		addRaw(text$1, addEOL = false) {
			this._buffer += text$1;
			return addEOL ? this.addEOL() : this;
		}
		/**
		* Adds the operating system-specific end-of-line marker to the buffer
		*
		* @returns {Summary} summary instance
		*/
		addEOL() {
			return this.addRaw(os_1$2.EOL);
		}
		/**
		* Adds an HTML codeblock to the summary buffer
		*
		* @param {string} code content to render within fenced code block
		* @param {string} lang (optional) language to syntax highlight code
		*
		* @returns {Summary} summary instance
		*/
		addCodeBlock(code, lang) {
			const attrs = Object.assign({}, lang && { lang });
			const element = this.wrap("pre", this.wrap("code", code), attrs);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML list to the summary buffer
		*
		* @param {string[]} items list of items to render
		* @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
		*
		* @returns {Summary} summary instance
		*/
		addList(items, ordered = false) {
			const tag = ordered ? "ol" : "ul";
			const listItems = items.map((item) => this.wrap("li", item)).join("");
			const element = this.wrap(tag, listItems);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML table to the summary buffer
		*
		* @param {SummaryTableCell[]} rows table rows
		*
		* @returns {Summary} summary instance
		*/
		addTable(rows) {
			const tableBody = rows.map((row) => {
				const cells = row.map((cell) => {
					if (typeof cell === "string") return this.wrap("td", cell);
					const { header, data: data$1, colspan, rowspan } = cell;
					const tag = header ? "th" : "td";
					const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
					return this.wrap(tag, data$1, attrs);
				}).join("");
				return this.wrap("tr", cells);
			}).join("");
			const element = this.wrap("table", tableBody);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds a collapsable HTML details element to the summary buffer
		*
		* @param {string} label text for the closed state
		* @param {string} content collapsable content
		*
		* @returns {Summary} summary instance
		*/
		addDetails(label, content) {
			const element = this.wrap("details", this.wrap("summary", label) + content);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML image tag to the summary buffer
		*
		* @param {string} src path to the image you to embed
		* @param {string} alt text description of the image
		* @param {SummaryImageOptions} options (optional) addition image attributes
		*
		* @returns {Summary} summary instance
		*/
		addImage(src, alt, options) {
			const { width, height } = options || {};
			const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
			const element = this.wrap("img", null, Object.assign({
				src,
				alt
			}, attrs));
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML section heading element
		*
		* @param {string} text heading text
		* @param {number | string} [level=1] (optional) the heading level, default: 1
		*
		* @returns {Summary} summary instance
		*/
		addHeading(text$1, level) {
			const tag = `h${level}`;
			const allowedTag = [
				"h1",
				"h2",
				"h3",
				"h4",
				"h5",
				"h6"
			].includes(tag) ? tag : "h1";
			const element = this.wrap(allowedTag, text$1);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML thematic break (<hr>) to the summary buffer
		*
		* @returns {Summary} summary instance
		*/
		addSeparator() {
			const element = this.wrap("hr", null);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML line break (<br>) to the summary buffer
		*
		* @returns {Summary} summary instance
		*/
		addBreak() {
			const element = this.wrap("br", null);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML blockquote to the summary buffer
		*
		* @param {string} text quote text
		* @param {string} cite (optional) citation url
		*
		* @returns {Summary} summary instance
		*/
		addQuote(text$1, cite) {
			const attrs = Object.assign({}, cite && { cite });
			const element = this.wrap("blockquote", text$1, attrs);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML anchor tag to the summary buffer
		*
		* @param {string} text link text/content
		* @param {string} href hyperlink
		*
		* @returns {Summary} summary instance
		*/
		addLink(text$1, href) {
			const element = this.wrap("a", text$1, { href });
			return this.addRaw(element).addEOL();
		}
	};
	const _summary = new Summary();
	/**
	* @deprecated use `core.summary`
	*/
	exports.markdownSummary = _summary;
	exports.summary = _summary;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/path-utils.js
var require_path_utils = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/path-utils.js"(exports) {
	var __createBinding$9 = exports && exports.__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __setModuleDefault$9 = exports && exports.__setModuleDefault || (Object.create ? function(o$1, v) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v
		});
	} : function(o$1, v) {
		o$1["default"] = v;
	});
	var __importStar$9 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$9(result, mod, k);
		}
		__setModuleDefault$9(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
	const path$8 = __importStar$9(__require("path"));
	/**
	* toPosixPath converts the given path to the posix form. On Windows, \\ will be
	* replaced with /.
	*
	* @param pth. Path to transform.
	* @return string Posix path.
	*/
	function toPosixPath(pth) {
		return pth.replace(/[\\]/g, "/");
	}
	exports.toPosixPath = toPosixPath;
	/**
	* toWin32Path converts the given path to the win32 form. On Linux, / will be
	* replaced with \\.
	*
	* @param pth. Path to transform.
	* @return string Win32 path.
	*/
	function toWin32Path(pth) {
		return pth.replace(/[/]/g, "\\");
	}
	exports.toWin32Path = toWin32Path;
	/**
	* toPlatformPath converts the given path to a platform-specific path. It does
	* this by replacing instances of / and \ with the platform-specific path
	* separator.
	*
	* @param pth The path to platformize.
	* @return string The platform-specific path.
	*/
	function toPlatformPath(pth) {
		return pth.replace(/[/\\]/g, path$8.sep);
	}
	exports.toPlatformPath = toPlatformPath;
} });

//#endregion
//#region node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io-util.js
var require_io_util = __commonJS({ "node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io-util.js"(exports) {
	var __createBinding$8 = exports && exports.__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		Object.defineProperty(o$1, k2, {
			enumerable: true,
			get: function() {
				return m[k];
			}
		});
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __setModuleDefault$8 = exports && exports.__setModuleDefault || (Object.create ? function(o$1, v) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v
		});
	} : function(o$1, v) {
		o$1["default"] = v;
	});
	var __importStar$8 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$8(result, mod, k);
		}
		__setModuleDefault$8(result, mod);
		return result;
	};
	var __awaiter$6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var _a$2;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getCmdPath = exports.tryGetExecutablePath = exports.isRooted = exports.isDirectory = exports.exists = exports.READONLY = exports.UV_FS_O_EXLOCK = exports.IS_WINDOWS = exports.unlink = exports.symlink = exports.stat = exports.rmdir = exports.rm = exports.rename = exports.readlink = exports.readdir = exports.open = exports.mkdir = exports.lstat = exports.copyFile = exports.chmod = void 0;
	const fs$4 = __importStar$8(__require("fs"));
	const path$7 = __importStar$8(__require("path"));
	_a$2 = fs$4.promises, exports.chmod = _a$2.chmod, exports.copyFile = _a$2.copyFile, exports.lstat = _a$2.lstat, exports.mkdir = _a$2.mkdir, exports.open = _a$2.open, exports.readdir = _a$2.readdir, exports.readlink = _a$2.readlink, exports.rename = _a$2.rename, exports.rm = _a$2.rm, exports.rmdir = _a$2.rmdir, exports.stat = _a$2.stat, exports.symlink = _a$2.symlink, exports.unlink = _a$2.unlink;
	exports.IS_WINDOWS = process.platform === "win32";
	exports.UV_FS_O_EXLOCK = 268435456;
	exports.READONLY = fs$4.constants.O_RDONLY;
	function exists(fsPath) {
		return __awaiter$6(this, void 0, void 0, function* () {
			try {
				yield exports.stat(fsPath);
			} catch (err) {
				if (err.code === "ENOENT") return false;
				throw err;
			}
			return true;
		});
	}
	exports.exists = exists;
	function isDirectory(fsPath, useStat = false) {
		return __awaiter$6(this, void 0, void 0, function* () {
			const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);
			return stats.isDirectory();
		});
	}
	exports.isDirectory = isDirectory;
	/**
	* On OSX/Linux, true if path starts with '/'. On Windows, true for paths like:
	* \, \hello, \\hello\share, C:, and C:\hello (and corresponding alternate separator cases).
	*/
	function isRooted(p) {
		p = normalizeSeparators(p);
		if (!p) throw new Error("isRooted() parameter \"p\" cannot be empty");
		if (exports.IS_WINDOWS) return p.startsWith("\\") || /^[A-Z]:/i.test(p);
		return p.startsWith("/");
	}
	exports.isRooted = isRooted;
	/**
	* Best effort attempt to determine whether a file exists and is executable.
	* @param filePath    file path to check
	* @param extensions  additional file extensions to try
	* @return if file exists and is executable, returns the file path. otherwise empty string.
	*/
	function tryGetExecutablePath(filePath, extensions) {
		return __awaiter$6(this, void 0, void 0, function* () {
			let stats = void 0;
			try {
				stats = yield exports.stat(filePath);
			} catch (err) {
				if (err.code !== "ENOENT") console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
			}
			if (stats && stats.isFile()) {
				if (exports.IS_WINDOWS) {
					const upperExt = path$7.extname(filePath).toUpperCase();
					if (extensions.some((validExt) => validExt.toUpperCase() === upperExt)) return filePath;
				} else if (isUnixExecutable(stats)) return filePath;
			}
			const originalFilePath = filePath;
			for (const extension of extensions) {
				filePath = originalFilePath + extension;
				stats = void 0;
				try {
					stats = yield exports.stat(filePath);
				} catch (err) {
					if (err.code !== "ENOENT") console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
				}
				if (stats && stats.isFile()) {
					if (exports.IS_WINDOWS) {
						try {
							const directory = path$7.dirname(filePath);
							const upperName = path$7.basename(filePath).toUpperCase();
							for (const actualName of yield exports.readdir(directory)) if (upperName === actualName.toUpperCase()) {
								filePath = path$7.join(directory, actualName);
								break;
							}
						} catch (err) {
							console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
						}
						return filePath;
					} else if (isUnixExecutable(stats)) return filePath;
				}
			}
			return "";
		});
	}
	exports.tryGetExecutablePath = tryGetExecutablePath;
	function normalizeSeparators(p) {
		p = p || "";
		if (exports.IS_WINDOWS) {
			p = p.replace(/\//g, "\\");
			return p.replace(/\\\\+/g, "\\");
		}
		return p.replace(/\/\/+/g, "/");
	}
	function isUnixExecutable(stats) {
		return (stats.mode & 1) > 0 || (stats.mode & 8) > 0 && stats.gid === process.getgid() || (stats.mode & 64) > 0 && stats.uid === process.getuid();
	}
	function getCmdPath() {
		var _a$3;
		return (_a$3 = process.env["COMSPEC"]) !== null && _a$3 !== void 0 ? _a$3 : `cmd.exe`;
	}
	exports.getCmdPath = getCmdPath;
} });

//#endregion
//#region node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io.js
var require_io = __commonJS({ "node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io.js"(exports) {
	var __createBinding$7 = exports && exports.__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		Object.defineProperty(o$1, k2, {
			enumerable: true,
			get: function() {
				return m[k];
			}
		});
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __setModuleDefault$7 = exports && exports.__setModuleDefault || (Object.create ? function(o$1, v) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v
		});
	} : function(o$1, v) {
		o$1["default"] = v;
	});
	var __importStar$7 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$7(result, mod, k);
		}
		__setModuleDefault$7(result, mod);
		return result;
	};
	var __awaiter$5 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.findInPath = exports.which = exports.mkdirP = exports.rmRF = exports.mv = exports.cp = void 0;
	const assert_1 = __require("assert");
	const path$6 = __importStar$7(__require("path"));
	const ioUtil$1 = __importStar$7(require_io_util());
	/**
	* Copies a file or folder.
	* Based off of shelljs - https://github.com/shelljs/shelljs/blob/9237f66c52e5daa40458f94f9565e18e8132f5a6/src/cp.js
	*
	* @param     source    source path
	* @param     dest      destination path
	* @param     options   optional. See CopyOptions.
	*/
	function cp$1(source, dest, options = {}) {
		return __awaiter$5(this, void 0, void 0, function* () {
			const { force, recursive, copySourceDirectory } = readCopyOptions(options);
			const destStat = (yield ioUtil$1.exists(dest)) ? yield ioUtil$1.stat(dest) : null;
			if (destStat && destStat.isFile() && !force) return;
			const newDest = destStat && destStat.isDirectory() && copySourceDirectory ? path$6.join(dest, path$6.basename(source)) : dest;
			if (!(yield ioUtil$1.exists(source))) throw new Error(`no such file or directory: ${source}`);
			const sourceStat = yield ioUtil$1.stat(source);
			if (sourceStat.isDirectory()) if (!recursive) throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
			else yield cpDirRecursive(source, newDest, 0, force);
			else {
				if (path$6.relative(source, newDest) === "") throw new Error(`'${newDest}' and '${source}' are the same file`);
				yield copyFile(source, newDest, force);
			}
		});
	}
	exports.cp = cp$1;
	/**
	* Moves a path.
	*
	* @param     source    source path
	* @param     dest      destination path
	* @param     options   optional. See MoveOptions.
	*/
	function mv(source, dest, options = {}) {
		return __awaiter$5(this, void 0, void 0, function* () {
			if (yield ioUtil$1.exists(dest)) {
				let destExists = true;
				if (yield ioUtil$1.isDirectory(dest)) {
					dest = path$6.join(dest, path$6.basename(source));
					destExists = yield ioUtil$1.exists(dest);
				}
				if (destExists) if (options.force == null || options.force) yield rmRF(dest);
				else throw new Error("Destination already exists");
			}
			yield mkdirP(path$6.dirname(dest));
			yield ioUtil$1.rename(source, dest);
		});
	}
	exports.mv = mv;
	/**
	* Remove a path recursively with force
	*
	* @param inputPath path to remove
	*/
	function rmRF(inputPath) {
		return __awaiter$5(this, void 0, void 0, function* () {
			if (ioUtil$1.IS_WINDOWS) {
				if (/[*"<>|]/.test(inputPath)) throw new Error("File path must not contain `*`, `\"`, `<`, `>` or `|` on Windows");
			}
			try {
				yield ioUtil$1.rm(inputPath, {
					force: true,
					maxRetries: 3,
					recursive: true,
					retryDelay: 300
				});
			} catch (err) {
				throw new Error(`File was unable to be removed ${err}`);
			}
		});
	}
	exports.rmRF = rmRF;
	/**
	* Make a directory.  Creates the full path with folders in between
	* Will throw if it fails
	*
	* @param   fsPath        path to create
	* @returns Promise<void>
	*/
	function mkdirP(fsPath) {
		return __awaiter$5(this, void 0, void 0, function* () {
			assert_1.ok(fsPath, "a path argument must be provided");
			yield ioUtil$1.mkdir(fsPath, { recursive: true });
		});
	}
	exports.mkdirP = mkdirP;
	/**
	* Returns path of a tool had the tool actually been invoked.  Resolves via paths.
	* If you check and the tool does not exist, it will throw.
	*
	* @param     tool              name of the tool
	* @param     check             whether to check if tool exists
	* @returns   Promise<string>   path to tool
	*/
	function which$2(tool$1, check$1) {
		return __awaiter$5(this, void 0, void 0, function* () {
			if (!tool$1) throw new Error("parameter 'tool' is required");
			if (check$1) {
				const result = yield which$2(tool$1, false);
				if (!result) if (ioUtil$1.IS_WINDOWS) throw new Error(`Unable to locate executable file: ${tool$1}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);
				else throw new Error(`Unable to locate executable file: ${tool$1}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
				return result;
			}
			const matches = yield findInPath(tool$1);
			if (matches && matches.length > 0) return matches[0];
			return "";
		});
	}
	exports.which = which$2;
	/**
	* Returns a list of all occurrences of the given tool on the system path.
	*
	* @returns   Promise<string[]>  the paths of the tool
	*/
	function findInPath(tool$1) {
		return __awaiter$5(this, void 0, void 0, function* () {
			if (!tool$1) throw new Error("parameter 'tool' is required");
			const extensions = [];
			if (ioUtil$1.IS_WINDOWS && process.env["PATHEXT"]) {
				for (const extension of process.env["PATHEXT"].split(path$6.delimiter)) if (extension) extensions.push(extension);
			}
			if (ioUtil$1.isRooted(tool$1)) {
				const filePath = yield ioUtil$1.tryGetExecutablePath(tool$1, extensions);
				if (filePath) return [filePath];
				return [];
			}
			if (tool$1.includes(path$6.sep)) return [];
			const directories = [];
			if (process.env.PATH) {
				for (const p of process.env.PATH.split(path$6.delimiter)) if (p) directories.push(p);
			}
			const matches = [];
			for (const directory of directories) {
				const filePath = yield ioUtil$1.tryGetExecutablePath(path$6.join(directory, tool$1), extensions);
				if (filePath) matches.push(filePath);
			}
			return matches;
		});
	}
	exports.findInPath = findInPath;
	function readCopyOptions(options) {
		const force = options.force == null ? true : options.force;
		const recursive = Boolean(options.recursive);
		const copySourceDirectory = options.copySourceDirectory == null ? true : Boolean(options.copySourceDirectory);
		return {
			force,
			recursive,
			copySourceDirectory
		};
	}
	function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
		return __awaiter$5(this, void 0, void 0, function* () {
			if (currentDepth >= 255) return;
			currentDepth++;
			yield mkdirP(destDir);
			const files = yield ioUtil$1.readdir(sourceDir);
			for (const fileName of files) {
				const srcFile = `${sourceDir}/${fileName}`;
				const destFile = `${destDir}/${fileName}`;
				const srcFileStat = yield ioUtil$1.lstat(srcFile);
				if (srcFileStat.isDirectory()) yield cpDirRecursive(srcFile, destFile, currentDepth, force);
				else yield copyFile(srcFile, destFile, force);
			}
			yield ioUtil$1.chmod(destDir, (yield ioUtil$1.stat(sourceDir)).mode);
		});
	}
	function copyFile(srcFile, destFile, force) {
		return __awaiter$5(this, void 0, void 0, function* () {
			if ((yield ioUtil$1.lstat(srcFile)).isSymbolicLink()) {
				try {
					yield ioUtil$1.lstat(destFile);
					yield ioUtil$1.unlink(destFile);
				} catch (e) {
					if (e.code === "EPERM") {
						yield ioUtil$1.chmod(destFile, "0666");
						yield ioUtil$1.unlink(destFile);
					}
				}
				const symlinkFull = yield ioUtil$1.readlink(srcFile);
				yield ioUtil$1.symlink(symlinkFull, destFile, ioUtil$1.IS_WINDOWS ? "junction" : null);
			} else if (!(yield ioUtil$1.exists(destFile)) || force) yield ioUtil$1.copyFile(srcFile, destFile);
		});
	}
} });

//#endregion
//#region node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/toolrunner.js
var require_toolrunner = __commonJS({ "node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/toolrunner.js"(exports) {
	var __createBinding$6 = exports && exports.__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		Object.defineProperty(o$1, k2, {
			enumerable: true,
			get: function() {
				return m[k];
			}
		});
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __setModuleDefault$6 = exports && exports.__setModuleDefault || (Object.create ? function(o$1, v) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v
		});
	} : function(o$1, v) {
		o$1["default"] = v;
	});
	var __importStar$6 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$6(result, mod, k);
		}
		__setModuleDefault$6(result, mod);
		return result;
	};
	var __awaiter$4 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.argStringToArray = exports.ToolRunner = void 0;
	const os$1 = __importStar$6(__require("os"));
	const events = __importStar$6(__require("events"));
	const child = __importStar$6(__require("child_process"));
	const path$5 = __importStar$6(__require("path"));
	const io = __importStar$6(require_io());
	const ioUtil = __importStar$6(require_io_util());
	const timers_1 = __require("timers");
	const IS_WINDOWS = process.platform === "win32";
	var ToolRunner = class extends events.EventEmitter {
		constructor(toolPath, args, options) {
			super();
			if (!toolPath) throw new Error("Parameter 'toolPath' cannot be null or empty.");
			this.toolPath = toolPath;
			this.args = args || [];
			this.options = options || {};
		}
		_debug(message) {
			if (this.options.listeners && this.options.listeners.debug) this.options.listeners.debug(message);
		}
		_getCommandString(options, noPrefix) {
			const toolPath = this._getSpawnFileName();
			const args = this._getSpawnArgs(options);
			let cmd = noPrefix ? "" : "[command]";
			if (IS_WINDOWS) if (this._isCmdFile()) {
				cmd += toolPath;
				for (const a$1 of args) cmd += ` ${a$1}`;
			} else if (options.windowsVerbatimArguments) {
				cmd += `"${toolPath}"`;
				for (const a$1 of args) cmd += ` ${a$1}`;
			} else {
				cmd += this._windowsQuoteCmdArg(toolPath);
				for (const a$1 of args) cmd += ` ${this._windowsQuoteCmdArg(a$1)}`;
			}
			else {
				cmd += toolPath;
				for (const a$1 of args) cmd += ` ${a$1}`;
			}
			return cmd;
		}
		_processLineBuffer(data$1, strBuffer, onLine) {
			try {
				let s = strBuffer + data$1.toString();
				let n$1 = s.indexOf(os$1.EOL);
				while (n$1 > -1) {
					const line = s.substring(0, n$1);
					onLine(line);
					s = s.substring(n$1 + os$1.EOL.length);
					n$1 = s.indexOf(os$1.EOL);
				}
				return s;
			} catch (err) {
				this._debug(`error processing line. Failed with error ${err}`);
				return "";
			}
		}
		_getSpawnFileName() {
			if (IS_WINDOWS) {
				if (this._isCmdFile()) return process.env["COMSPEC"] || "cmd.exe";
			}
			return this.toolPath;
		}
		_getSpawnArgs(options) {
			if (IS_WINDOWS) {
				if (this._isCmdFile()) {
					let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
					for (const a$1 of this.args) {
						argline += " ";
						argline += options.windowsVerbatimArguments ? a$1 : this._windowsQuoteCmdArg(a$1);
					}
					argline += "\"";
					return [argline];
				}
			}
			return this.args;
		}
		_endsWith(str, end) {
			return str.endsWith(end);
		}
		_isCmdFile() {
			const upperToolPath = this.toolPath.toUpperCase();
			return this._endsWith(upperToolPath, ".CMD") || this._endsWith(upperToolPath, ".BAT");
		}
		_windowsQuoteCmdArg(arg) {
			if (!this._isCmdFile()) return this._uvQuoteCmdArg(arg);
			if (!arg) return "\"\"";
			const cmdSpecialChars = [
				" ",
				"	",
				"&",
				"(",
				")",
				"[",
				"]",
				"{",
				"}",
				"^",
				"=",
				";",
				"!",
				"'",
				"+",
				",",
				"`",
				"~",
				"|",
				"<",
				">",
				"\""
			];
			let needsQuotes = false;
			for (const char of arg) if (cmdSpecialChars.some((x) => x === char)) {
				needsQuotes = true;
				break;
			}
			if (!needsQuotes) return arg;
			let reverse = "\"";
			let quoteHit = true;
			for (let i$1 = arg.length; i$1 > 0; i$1--) {
				reverse += arg[i$1 - 1];
				if (quoteHit && arg[i$1 - 1] === "\\") reverse += "\\";
				else if (arg[i$1 - 1] === "\"") {
					quoteHit = true;
					reverse += "\"";
				} else quoteHit = false;
			}
			reverse += "\"";
			return reverse.split("").reverse().join("");
		}
		_uvQuoteCmdArg(arg) {
			if (!arg) return "\"\"";
			if (!arg.includes(" ") && !arg.includes("	") && !arg.includes("\"")) return arg;
			if (!arg.includes("\"") && !arg.includes("\\")) return `"${arg}"`;
			let reverse = "\"";
			let quoteHit = true;
			for (let i$1 = arg.length; i$1 > 0; i$1--) {
				reverse += arg[i$1 - 1];
				if (quoteHit && arg[i$1 - 1] === "\\") reverse += "\\";
				else if (arg[i$1 - 1] === "\"") {
					quoteHit = true;
					reverse += "\\";
				} else quoteHit = false;
			}
			reverse += "\"";
			return reverse.split("").reverse().join("");
		}
		_cloneExecOptions(options) {
			options = options || {};
			const result = {
				cwd: options.cwd || process.cwd(),
				env: options.env || process.env,
				silent: options.silent || false,
				windowsVerbatimArguments: options.windowsVerbatimArguments || false,
				failOnStdErr: options.failOnStdErr || false,
				ignoreReturnCode: options.ignoreReturnCode || false,
				delay: options.delay || 1e4
			};
			result.outStream = options.outStream || process.stdout;
			result.errStream = options.errStream || process.stderr;
			return result;
		}
		_getSpawnOptions(options, toolPath) {
			options = options || {};
			const result = {};
			result.cwd = options.cwd;
			result.env = options.env;
			result["windowsVerbatimArguments"] = options.windowsVerbatimArguments || this._isCmdFile();
			if (options.windowsVerbatimArguments) result.argv0 = `"${toolPath}"`;
			return result;
		}
		/**
		* Exec a tool.
		* Output will be streamed to the live console.
		* Returns promise with return code
		*
		* @param     tool     path to tool to exec
		* @param     options  optional exec options.  See ExecOptions
		* @returns   number
		*/
		exec() {
			return __awaiter$4(this, void 0, void 0, function* () {
				if (!ioUtil.isRooted(this.toolPath) && (this.toolPath.includes("/") || IS_WINDOWS && this.toolPath.includes("\\"))) this.toolPath = path$5.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
				this.toolPath = yield io.which(this.toolPath, true);
				return new Promise((resolve$1, reject) => __awaiter$4(this, void 0, void 0, function* () {
					this._debug(`exec tool: ${this.toolPath}`);
					this._debug("arguments:");
					for (const arg of this.args) this._debug(`   ${arg}`);
					const optionsNonNull = this._cloneExecOptions(this.options);
					if (!optionsNonNull.silent && optionsNonNull.outStream) optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os$1.EOL);
					const state = new ExecState(optionsNonNull, this.toolPath);
					state.on("debug", (message) => {
						this._debug(message);
					});
					if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) return reject(/* @__PURE__ */ new Error(`The cwd: ${this.options.cwd} does not exist!`));
					const fileName = this._getSpawnFileName();
					const cp$2 = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
					let stdbuffer = "";
					if (cp$2.stdout) cp$2.stdout.on("data", (data$1) => {
						if (this.options.listeners && this.options.listeners.stdout) this.options.listeners.stdout(data$1);
						if (!optionsNonNull.silent && optionsNonNull.outStream) optionsNonNull.outStream.write(data$1);
						stdbuffer = this._processLineBuffer(data$1, stdbuffer, (line) => {
							if (this.options.listeners && this.options.listeners.stdline) this.options.listeners.stdline(line);
						});
					});
					let errbuffer = "";
					if (cp$2.stderr) cp$2.stderr.on("data", (data$1) => {
						state.processStderr = true;
						if (this.options.listeners && this.options.listeners.stderr) this.options.listeners.stderr(data$1);
						if (!optionsNonNull.silent && optionsNonNull.errStream && optionsNonNull.outStream) {
							const s = optionsNonNull.failOnStdErr ? optionsNonNull.errStream : optionsNonNull.outStream;
							s.write(data$1);
						}
						errbuffer = this._processLineBuffer(data$1, errbuffer, (line) => {
							if (this.options.listeners && this.options.listeners.errline) this.options.listeners.errline(line);
						});
					});
					cp$2.on("error", (err) => {
						state.processError = err.message;
						state.processExited = true;
						state.processClosed = true;
						state.CheckComplete();
					});
					cp$2.on("exit", (code) => {
						state.processExitCode = code;
						state.processExited = true;
						this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);
						state.CheckComplete();
					});
					cp$2.on("close", (code) => {
						state.processExitCode = code;
						state.processExited = true;
						state.processClosed = true;
						this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
						state.CheckComplete();
					});
					state.on("done", (error$1, exitCode) => {
						if (stdbuffer.length > 0) this.emit("stdline", stdbuffer);
						if (errbuffer.length > 0) this.emit("errline", errbuffer);
						cp$2.removeAllListeners();
						if (error$1) reject(error$1);
						else resolve$1(exitCode);
					});
					if (this.options.input) {
						if (!cp$2.stdin) throw new Error("child process missing stdin");
						cp$2.stdin.end(this.options.input);
					}
				}));
			});
		}
	};
	exports.ToolRunner = ToolRunner;
	/**
	* Convert an arg string to an array of args. Handles escaping
	*
	* @param    argString   string of arguments
	* @returns  string[]    array of arguments
	*/
	function argStringToArray(argString) {
		const args = [];
		let inQuotes = false;
		let escaped = false;
		let arg = "";
		function append(c$1) {
			if (escaped && c$1 !== "\"") arg += "\\";
			arg += c$1;
			escaped = false;
		}
		for (let i$1 = 0; i$1 < argString.length; i$1++) {
			const c$1 = argString.charAt(i$1);
			if (c$1 === "\"") {
				if (!escaped) inQuotes = !inQuotes;
				else append(c$1);
				continue;
			}
			if (c$1 === "\\" && escaped) {
				append(c$1);
				continue;
			}
			if (c$1 === "\\" && inQuotes) {
				escaped = true;
				continue;
			}
			if (c$1 === " " && !inQuotes) {
				if (arg.length > 0) {
					args.push(arg);
					arg = "";
				}
				continue;
			}
			append(c$1);
		}
		if (arg.length > 0) args.push(arg.trim());
		return args;
	}
	exports.argStringToArray = argStringToArray;
	var ExecState = class ExecState extends events.EventEmitter {
		constructor(options, toolPath) {
			super();
			this.processClosed = false;
			this.processError = "";
			this.processExitCode = 0;
			this.processExited = false;
			this.processStderr = false;
			this.delay = 1e4;
			this.done = false;
			this.timeout = null;
			if (!toolPath) throw new Error("toolPath must not be empty");
			this.options = options;
			this.toolPath = toolPath;
			if (options.delay) this.delay = options.delay;
		}
		CheckComplete() {
			if (this.done) return;
			if (this.processClosed) this._setResult();
			else if (this.processExited) this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this);
		}
		_debug(message) {
			this.emit("debug", message);
		}
		_setResult() {
			let error$1;
			if (this.processExited) {
				if (this.processError) error$1 = /* @__PURE__ */ new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);
				else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) error$1 = /* @__PURE__ */ new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
				else if (this.processStderr && this.options.failOnStdErr) error$1 = /* @__PURE__ */ new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);
			}
			if (this.timeout) {
				clearTimeout(this.timeout);
				this.timeout = null;
			}
			this.done = true;
			this.emit("done", error$1, this.processExitCode);
		}
		static HandleTimeout(state) {
			if (state.done) return;
			if (!state.processClosed && state.processExited) {
				const message = `The STDIO streams did not close within ${state.delay / 1e3} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
				state._debug(message);
			}
			state._setResult();
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/exec.js
var require_exec = __commonJS({ "node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/exec.js"(exports) {
	var __createBinding$5 = exports && exports.__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		Object.defineProperty(o$1, k2, {
			enumerable: true,
			get: function() {
				return m[k];
			}
		});
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __setModuleDefault$5 = exports && exports.__setModuleDefault || (Object.create ? function(o$1, v) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v
		});
	} : function(o$1, v) {
		o$1["default"] = v;
	});
	var __importStar$5 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$5(result, mod, k);
		}
		__setModuleDefault$5(result, mod);
		return result;
	};
	var __awaiter$3 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getExecOutput = exports.exec = void 0;
	const string_decoder_1 = __require("string_decoder");
	const tr = __importStar$5(require_toolrunner());
	/**
	* Exec a command.
	* Output will be streamed to the live console.
	* Returns promise with return code
	*
	* @param     commandLine        command to execute (can include additional args). Must be correctly escaped.
	* @param     args               optional arguments for tool. Escaping is handled by the lib.
	* @param     options            optional exec options.  See ExecOptions
	* @returns   Promise<number>    exit code
	*/
	function exec$2(commandLine, args, options) {
		return __awaiter$3(this, void 0, void 0, function* () {
			const commandArgs = tr.argStringToArray(commandLine);
			if (commandArgs.length === 0) throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
			const toolPath = commandArgs[0];
			args = commandArgs.slice(1).concat(args || []);
			const runner = new tr.ToolRunner(toolPath, args, options);
			return runner.exec();
		});
	}
	exports.exec = exec$2;
	/**
	* Exec a command and get the output.
	* Output will be streamed to the live console.
	* Returns promise with the exit code and collected stdout and stderr
	*
	* @param     commandLine           command to execute (can include additional args). Must be correctly escaped.
	* @param     args                  optional arguments for tool. Escaping is handled by the lib.
	* @param     options               optional exec options.  See ExecOptions
	* @returns   Promise<ExecOutput>   exit code, stdout, and stderr
	*/
	function getExecOutput(commandLine, args, options) {
		var _a$3, _b;
		return __awaiter$3(this, void 0, void 0, function* () {
			let stdout$1 = "";
			let stderr = "";
			const stdoutDecoder = new string_decoder_1.StringDecoder("utf8");
			const stderrDecoder = new string_decoder_1.StringDecoder("utf8");
			const originalStdoutListener = (_a$3 = options === null || options === void 0 ? void 0 : options.listeners) === null || _a$3 === void 0 ? void 0 : _a$3.stdout;
			const originalStdErrListener = (_b = options === null || options === void 0 ? void 0 : options.listeners) === null || _b === void 0 ? void 0 : _b.stderr;
			const stdErrListener = (data$1) => {
				stderr += stderrDecoder.write(data$1);
				if (originalStdErrListener) originalStdErrListener(data$1);
			};
			const stdOutListener = (data$1) => {
				stdout$1 += stdoutDecoder.write(data$1);
				if (originalStdoutListener) originalStdoutListener(data$1);
			};
			const listeners = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners), {
				stdout: stdOutListener,
				stderr: stdErrListener
			});
			const exitCode = yield exec$2(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));
			stdout$1 += stdoutDecoder.end();
			stderr += stderrDecoder.end();
			return {
				exitCode,
				stdout: stdout$1,
				stderr
			};
		});
	}
	exports.getExecOutput = getExecOutput;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/platform.js
var require_platform = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/platform.js"(exports) {
	var __createBinding$4 = exports && exports.__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __setModuleDefault$4 = exports && exports.__setModuleDefault || (Object.create ? function(o$1, v) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v
		});
	} : function(o$1, v) {
		o$1["default"] = v;
	});
	var __importStar$4 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$4(result, mod, k);
		}
		__setModuleDefault$4(result, mod);
		return result;
	};
	var __awaiter$2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var __importDefault = exports && exports.__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getDetails = exports.isLinux = exports.isMacOS = exports.isWindows = exports.arch = exports.platform = void 0;
	const os_1$1 = __importDefault(__require("os"));
	const exec$1 = __importStar$4(require_exec());
	const getWindowsInfo = () => __awaiter$2(void 0, void 0, void 0, function* () {
		const { stdout: version$1 } = yield exec$1.getExecOutput("powershell -command \"(Get-CimInstance -ClassName Win32_OperatingSystem).Version\"", void 0, { silent: true });
		const { stdout: name$2 } = yield exec$1.getExecOutput("powershell -command \"(Get-CimInstance -ClassName Win32_OperatingSystem).Caption\"", void 0, { silent: true });
		return {
			name: name$2.trim(),
			version: version$1.trim()
		};
	});
	const getMacOsInfo = () => __awaiter$2(void 0, void 0, void 0, function* () {
		var _a$3, _b, _c, _d;
		const { stdout: stdout$1 } = yield exec$1.getExecOutput("sw_vers", void 0, { silent: true });
		const version$1 = (_b = (_a$3 = stdout$1.match(/ProductVersion:\s*(.+)/)) === null || _a$3 === void 0 ? void 0 : _a$3[1]) !== null && _b !== void 0 ? _b : "";
		const name$2 = (_d = (_c = stdout$1.match(/ProductName:\s*(.+)/)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : "";
		return {
			name: name$2,
			version: version$1
		};
	});
	const getLinuxInfo = () => __awaiter$2(void 0, void 0, void 0, function* () {
		const { stdout: stdout$1 } = yield exec$1.getExecOutput("lsb_release", [
			"-i",
			"-r",
			"-s"
		], { silent: true });
		const [name$2, version$1] = stdout$1.trim().split("\n");
		return {
			name: name$2,
			version: version$1
		};
	});
	exports.platform = os_1$1.default.platform();
	exports.arch = os_1$1.default.arch();
	exports.isWindows = exports.platform === "win32";
	exports.isMacOS = exports.platform === "darwin";
	exports.isLinux = exports.platform === "linux";
	function getDetails() {
		return __awaiter$2(this, void 0, void 0, function* () {
			return Object.assign(Object.assign({}, yield exports.isWindows ? getWindowsInfo() : exports.isMacOS ? getMacOsInfo() : getLinuxInfo()), {
				platform: exports.platform,
				arch: exports.arch,
				isWindows: exports.isWindows,
				isMacOS: exports.isMacOS,
				isLinux: exports.isLinux
			});
		});
	}
	exports.getDetails = getDetails;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/core.js
var require_core = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/core.js"(exports) {
	var __createBinding$3 = exports && exports.__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __setModuleDefault$3 = exports && exports.__setModuleDefault || (Object.create ? function(o$1, v) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v
		});
	} : function(o$1, v) {
		o$1["default"] = v;
	});
	var __importStar$3 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
		}
		__setModuleDefault$3(result, mod);
		return result;
	};
	var __awaiter$1 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.platform = exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = exports.markdownSummary = exports.summary = exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
	const command_1 = require_command();
	const file_command_1 = require_file_command();
	const utils_1$2 = require_utils$4();
	const os = __importStar$3(__require("os"));
	const path$4 = __importStar$3(__require("path"));
	const oidc_utils_1 = require_oidc_utils();
	/**
	* The code to exit an action
	*/
	var ExitCode;
	(function(ExitCode$1) {
		/**
		* A code indicating that the action was successful
		*/
		ExitCode$1[ExitCode$1["Success"] = 0] = "Success";
		/**
		* A code indicating that the action was a failure
		*/
		ExitCode$1[ExitCode$1["Failure"] = 1] = "Failure";
	})(ExitCode || (exports.ExitCode = ExitCode = {}));
	/**
	* Sets env variable for this action and future actions in the job
	* @param name the name of the variable to set
	* @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
	*/
	function exportVariable(name$2, val) {
		const convertedVal = (0, utils_1$2.toCommandValue)(val);
		process.env[name$2] = convertedVal;
		const filePath = process.env["GITHUB_ENV"] || "";
		if (filePath) return (0, file_command_1.issueFileCommand)("ENV", (0, file_command_1.prepareKeyValueMessage)(name$2, val));
		(0, command_1.issueCommand)("set-env", { name: name$2 }, convertedVal);
	}
	exports.exportVariable = exportVariable;
	/**
	* Registers a secret which will get masked from logs
	* @param secret value of the secret
	*/
	function setSecret(secret) {
		(0, command_1.issueCommand)("add-mask", {}, secret);
	}
	exports.setSecret = setSecret;
	/**
	* Prepends inputPath to the PATH (for this action and future actions)
	* @param inputPath
	*/
	function addPath(inputPath) {
		const filePath = process.env["GITHUB_PATH"] || "";
		if (filePath) (0, file_command_1.issueFileCommand)("PATH", inputPath);
		else (0, command_1.issueCommand)("add-path", {}, inputPath);
		process.env["PATH"] = `${inputPath}${path$4.delimiter}${process.env["PATH"]}`;
	}
	exports.addPath = addPath;
	/**
	* Gets the value of an input.
	* Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
	* Returns an empty string if the value is not defined.
	*
	* @param     name     name of the input to get
	* @param     options  optional. See InputOptions.
	* @returns   string
	*/
	function getInput(name$2, options) {
		const val = process.env[`INPUT_${name$2.replace(/ /g, "_").toUpperCase()}`] || "";
		if (options && options.required && !val) throw new Error(`Input required and not supplied: ${name$2}`);
		if (options && options.trimWhitespace === false) return val;
		return val.trim();
	}
	exports.getInput = getInput;
	/**
	* Gets the values of an multiline input.  Each value is also trimmed.
	*
	* @param     name     name of the input to get
	* @param     options  optional. See InputOptions.
	* @returns   string[]
	*
	*/
	function getMultilineInput(name$2, options) {
		const inputs = getInput(name$2, options).split("\n").filter((x) => x !== "");
		if (options && options.trimWhitespace === false) return inputs;
		return inputs.map((input) => input.trim());
	}
	exports.getMultilineInput = getMultilineInput;
	/**
	* Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
	* Support boolean input list: `true | True | TRUE | false | False | FALSE` .
	* The return value is also in boolean type.
	* ref: https://yaml.org/spec/1.2/spec.html#id2804923
	*
	* @param     name     name of the input to get
	* @param     options  optional. See InputOptions.
	* @returns   boolean
	*/
	function getBooleanInput(name$2, options) {
		const trueValue = [
			"true",
			"True",
			"TRUE"
		];
		const falseValue = [
			"false",
			"False",
			"FALSE"
		];
		const val = getInput(name$2, options);
		if (trueValue.includes(val)) return true;
		if (falseValue.includes(val)) return false;
		throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name$2}\nSupport boolean input list: \`true | True | TRUE | false | False | FALSE\``);
	}
	exports.getBooleanInput = getBooleanInput;
	/**
	* Sets the value of an output.
	*
	* @param     name     name of the output to set
	* @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
	*/
	function setOutput(name$2, value) {
		const filePath = process.env["GITHUB_OUTPUT"] || "";
		if (filePath) return (0, file_command_1.issueFileCommand)("OUTPUT", (0, file_command_1.prepareKeyValueMessage)(name$2, value));
		process.stdout.write(os.EOL);
		(0, command_1.issueCommand)("set-output", { name: name$2 }, (0, utils_1$2.toCommandValue)(value));
	}
	exports.setOutput = setOutput;
	/**
	* Enables or disables the echoing of commands into stdout for the rest of the step.
	* Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
	*
	*/
	function setCommandEcho(enabled) {
		(0, command_1.issue)("echo", enabled ? "on" : "off");
	}
	exports.setCommandEcho = setCommandEcho;
	/**
	* Sets the action status to failed.
	* When the action exits it will be with an exit code of 1
	* @param message add error issue message
	*/
	function setFailed(message) {
		process.exitCode = ExitCode.Failure;
		error(message);
	}
	exports.setFailed = setFailed;
	/**
	* Gets whether Actions Step Debug is on or not
	*/
	function isDebug() {
		return process.env["RUNNER_DEBUG"] === "1";
	}
	exports.isDebug = isDebug;
	/**
	* Writes debug message to user log
	* @param message debug message
	*/
	function debug(message) {
		(0, command_1.issueCommand)("debug", {}, message);
	}
	exports.debug = debug;
	/**
	* Adds an error issue
	* @param message error issue message. Errors will be converted to string via toString()
	* @param properties optional properties to add to the annotation.
	*/
	function error(message, properties = {}) {
		(0, command_1.issueCommand)("error", (0, utils_1$2.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
	}
	exports.error = error;
	/**
	* Adds a warning issue
	* @param message warning issue message. Errors will be converted to string via toString()
	* @param properties optional properties to add to the annotation.
	*/
	function warning(message, properties = {}) {
		(0, command_1.issueCommand)("warning", (0, utils_1$2.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
	}
	exports.warning = warning;
	/**
	* Adds a notice issue
	* @param message notice issue message. Errors will be converted to string via toString()
	* @param properties optional properties to add to the annotation.
	*/
	function notice(message, properties = {}) {
		(0, command_1.issueCommand)("notice", (0, utils_1$2.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
	}
	exports.notice = notice;
	/**
	* Writes info to log with console.log.
	* @param message info message
	*/
	function info(message) {
		process.stdout.write(message + os.EOL);
	}
	exports.info = info;
	/**
	* Begin an output group.
	*
	* Output until the next `groupEnd` will be foldable in this group
	*
	* @param name The name of the output group
	*/
	function startGroup(name$2) {
		(0, command_1.issue)("group", name$2);
	}
	exports.startGroup = startGroup;
	/**
	* End an output group.
	*/
	function endGroup() {
		(0, command_1.issue)("endgroup");
	}
	exports.endGroup = endGroup;
	/**
	* Wrap an asynchronous function call in a group.
	*
	* Returns the same type as the function itself.
	*
	* @param name The name of the group
	* @param fn The function to wrap in the group
	*/
	function group(name$2, fn) {
		return __awaiter$1(this, void 0, void 0, function* () {
			startGroup(name$2);
			let result;
			try {
				result = yield fn();
			} finally {
				endGroup();
			}
			return result;
		});
	}
	exports.group = group;
	/**
	* Saves state for current action, the state can only be retrieved by this action's post job execution.
	*
	* @param     name     name of the state to store
	* @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
	*/
	function saveState(name$2, value) {
		const filePath = process.env["GITHUB_STATE"] || "";
		if (filePath) return (0, file_command_1.issueFileCommand)("STATE", (0, file_command_1.prepareKeyValueMessage)(name$2, value));
		(0, command_1.issueCommand)("save-state", { name: name$2 }, (0, utils_1$2.toCommandValue)(value));
	}
	exports.saveState = saveState;
	/**
	* Gets the value of an state set by this action's main execution.
	*
	* @param     name     name of the state to get
	* @returns   string
	*/
	function getState(name$2) {
		return process.env[`STATE_${name$2}`] || "";
	}
	exports.getState = getState;
	function getIDToken(aud) {
		return __awaiter$1(this, void 0, void 0, function* () {
			return yield oidc_utils_1.OidcClient.getIDToken(aud);
		});
	}
	exports.getIDToken = getIDToken;
	/**
	* Summary exports
	*/
	var summary_1 = require_summary();
	Object.defineProperty(exports, "summary", {
		enumerable: true,
		get: function() {
			return summary_1.summary;
		}
	});
	/**
	* @deprecated use core.summary
	*/
	var summary_2 = require_summary();
	Object.defineProperty(exports, "markdownSummary", {
		enumerable: true,
		get: function() {
			return summary_2.markdownSummary;
		}
	});
	/**
	* Path exports
	*/
	var path_utils_1 = require_path_utils();
	Object.defineProperty(exports, "toPosixPath", {
		enumerable: true,
		get: function() {
			return path_utils_1.toPosixPath;
		}
	});
	Object.defineProperty(exports, "toWin32Path", {
		enumerable: true,
		get: function() {
			return path_utils_1.toWin32Path;
		}
	});
	Object.defineProperty(exports, "toPlatformPath", {
		enumerable: true,
		get: function() {
			return path_utils_1.toPlatformPath;
		}
	});
	/**
	* Platform utilities exports
	*/
	exports.platform = __importStar$3(require_platform());
} });

//#endregion
//#region node_modules/.pnpm/@actions+github@6.0.1/node_modules/@actions/github/lib/context.js
var require_context = __commonJS({ "node_modules/.pnpm/@actions+github@6.0.1/node_modules/@actions/github/lib/context.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Context = void 0;
	const fs_1 = __require("fs");
	const os_1 = __require("os");
	var Context$2 = class {
		/**
		* Hydrate the context from the environment
		*/
		constructor() {
			var _a$3, _b, _c;
			this.payload = {};
			if (process.env.GITHUB_EVENT_PATH) if ((0, fs_1.existsSync)(process.env.GITHUB_EVENT_PATH)) this.payload = JSON.parse((0, fs_1.readFileSync)(process.env.GITHUB_EVENT_PATH, { encoding: "utf8" }));
			else {
				const path$9 = process.env.GITHUB_EVENT_PATH;
				process.stdout.write(`GITHUB_EVENT_PATH ${path$9} does not exist${os_1.EOL}`);
			}
			this.eventName = process.env.GITHUB_EVENT_NAME;
			this.sha = process.env.GITHUB_SHA;
			this.ref = process.env.GITHUB_REF;
			this.workflow = process.env.GITHUB_WORKFLOW;
			this.action = process.env.GITHUB_ACTION;
			this.actor = process.env.GITHUB_ACTOR;
			this.job = process.env.GITHUB_JOB;
			this.runAttempt = parseInt(process.env.GITHUB_RUN_ATTEMPT, 10);
			this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
			this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
			this.apiUrl = (_a$3 = process.env.GITHUB_API_URL) !== null && _a$3 !== void 0 ? _a$3 : `https://api.github.com`;
			this.serverUrl = (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0 ? _b : `https://github.com`;
			this.graphqlUrl = (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0 ? _c : `https://api.github.com/graphql`;
		}
		get issue() {
			const payload = this.payload;
			return Object.assign(Object.assign({}, this.repo), { number: (payload.issue || payload.pull_request || payload).number });
		}
		get repo() {
			if (process.env.GITHUB_REPOSITORY) {
				const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
				return {
					owner,
					repo
				};
			}
			if (this.payload.repository) return {
				owner: this.payload.repository.owner.login,
				repo: this.payload.repository.name
			};
			throw new Error("context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'");
		}
	};
	exports.Context = Context$2;
} });

//#endregion
//#region node_modules/.pnpm/@actions+github@6.0.1/node_modules/@actions/github/lib/internal/utils.js
var require_utils$2 = __commonJS({ "node_modules/.pnpm/@actions+github@6.0.1/node_modules/@actions/github/lib/internal/utils.js"(exports) {
	var __createBinding$2 = exports && exports.__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __setModuleDefault$2 = exports && exports.__setModuleDefault || (Object.create ? function(o$1, v) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v
		});
	} : function(o$1, v) {
		o$1["default"] = v;
	});
	var __importStar$2 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
		}
		__setModuleDefault$2(result, mod);
		return result;
	};
	var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve$1) {
				resolve$1(value);
			});
		}
		return new (P || (P = Promise))(function(resolve$1, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve$1(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getApiBaseUrl = exports.getProxyFetch = exports.getProxyAgentDispatcher = exports.getProxyAgent = exports.getAuthString = void 0;
	const httpClient = __importStar$2(require_lib());
	const undici_1 = require_undici$1();
	function getAuthString(token, options) {
		if (!token && !options.auth) throw new Error("Parameter token or opts.auth is required");
		else if (token && options.auth) throw new Error("Parameters token and opts.auth may not both be specified");
		return typeof options.auth === "string" ? options.auth : `token ${token}`;
	}
	exports.getAuthString = getAuthString;
	function getProxyAgent(destinationUrl) {
		const hc = new httpClient.HttpClient();
		return hc.getAgent(destinationUrl);
	}
	exports.getProxyAgent = getProxyAgent;
	function getProxyAgentDispatcher(destinationUrl) {
		const hc = new httpClient.HttpClient();
		return hc.getAgentDispatcher(destinationUrl);
	}
	exports.getProxyAgentDispatcher = getProxyAgentDispatcher;
	function getProxyFetch(destinationUrl) {
		const httpDispatcher = getProxyAgentDispatcher(destinationUrl);
		const proxyFetch = (url, opts) => __awaiter(this, void 0, void 0, function* () {
			return (0, undici_1.fetch)(url, Object.assign(Object.assign({}, opts), { dispatcher: httpDispatcher }));
		});
		return proxyFetch;
	}
	exports.getProxyFetch = getProxyFetch;
	function getApiBaseUrl() {
		return process.env["GITHUB_API_URL"] || "https://api.github.com";
	}
	exports.getApiBaseUrl = getApiBaseUrl;
} });

//#endregion
//#region node_modules/.pnpm/universal-user-agent@6.0.1/node_modules/universal-user-agent/dist-node/index.js
var require_dist_node$9 = __commonJS({ "node_modules/.pnpm/universal-user-agent@6.0.1/node_modules/universal-user-agent/dist-node/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	function getUserAgent() {
		if (typeof navigator === "object" && "userAgent" in navigator) return navigator.userAgent;
		if (typeof process === "object" && process.version !== void 0) return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
		return "<environment undetectable>";
	}
	exports.getUserAgent = getUserAgent;
} });

//#endregion
//#region node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/register.js
var require_register = __commonJS({ "node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/register.js"(exports, module) {
	module.exports = register$1;
	function register$1(state, name$2, method, options) {
		if (typeof method !== "function") throw new Error("method for before hook must be a function");
		if (!options) options = {};
		if (Array.isArray(name$2)) return name$2.reverse().reduce(function(callback, name$3) {
			return register$1.bind(null, state, name$3, callback, options);
		}, method)();
		return Promise.resolve().then(function() {
			if (!state.registry[name$2]) return method(options);
			return state.registry[name$2].reduce(function(method$1, registered) {
				return registered.hook.bind(null, method$1, options);
			}, method)();
		});
	}
} });

//#endregion
//#region node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/add.js
var require_add = __commonJS({ "node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/add.js"(exports, module) {
	module.exports = addHook$1;
	function addHook$1(state, kind, name$2, hook$1) {
		var orig = hook$1;
		if (!state.registry[name$2]) state.registry[name$2] = [];
		if (kind === "before") hook$1 = function(method, options) {
			return Promise.resolve().then(orig.bind(null, options)).then(method.bind(null, options));
		};
		if (kind === "after") hook$1 = function(method, options) {
			var result;
			return Promise.resolve().then(method.bind(null, options)).then(function(result_) {
				result = result_;
				return orig(result, options);
			}).then(function() {
				return result;
			});
		};
		if (kind === "error") hook$1 = function(method, options) {
			return Promise.resolve().then(method.bind(null, options)).catch(function(error$1) {
				return orig(error$1, options);
			});
		};
		state.registry[name$2].push({
			hook: hook$1,
			orig
		});
	}
} });

//#endregion
//#region node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/remove.js
var require_remove = __commonJS({ "node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/remove.js"(exports, module) {
	module.exports = removeHook$1;
	function removeHook$1(state, name$2, method) {
		if (!state.registry[name$2]) return;
		var index = state.registry[name$2].map(function(registered) {
			return registered.orig;
		}).indexOf(method);
		if (index === -1) return;
		state.registry[name$2].splice(index, 1);
	}
} });

//#endregion
//#region node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/index.js
var require_before_after_hook = __commonJS({ "node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/index.js"(exports, module) {
	var register = require_register();
	var addHook = require_add();
	var removeHook = require_remove();
	var bind = Function.bind;
	var bindable = bind.bind(bind);
	function bindApi(hook$1, state, name$2) {
		var removeHookRef = bindable(removeHook, null).apply(null, name$2 ? [state, name$2] : [state]);
		hook$1.api = { remove: removeHookRef };
		hook$1.remove = removeHookRef;
		[
			"before",
			"error",
			"after",
			"wrap"
		].forEach(function(kind) {
			var args = name$2 ? [
				state,
				kind,
				name$2
			] : [state, kind];
			hook$1[kind] = hook$1.api[kind] = bindable(addHook, null).apply(null, args);
		});
	}
	function HookSingular() {
		var singularHookName = "h";
		var singularHookState = { registry: {} };
		var singularHook = register.bind(null, singularHookState, singularHookName);
		bindApi(singularHook, singularHookState, singularHookName);
		return singularHook;
	}
	function HookCollection() {
		var state = { registry: {} };
		var hook$1 = register.bind(null, state);
		bindApi(hook$1, state);
		return hook$1;
	}
	var collectionHookDeprecationMessageDisplayed = false;
	function Hook() {
		if (!collectionHookDeprecationMessageDisplayed) {
			console.warn("[before-after-hook]: \"Hook()\" repurposing warning, use \"Hook.Collection()\". Read more: https://git.io/upgrade-before-after-hook-to-1.4");
			collectionHookDeprecationMessageDisplayed = true;
		}
		return HookCollection();
	}
	Hook.Singular = HookSingular.bind();
	Hook.Collection = HookCollection.bind();
	module.exports = Hook;
	module.exports.Hook = Hook;
	module.exports.Singular = Hook.Singular;
	module.exports.Collection = Hook.Collection;
} });

//#endregion
//#region node_modules/.pnpm/@octokit+endpoint@9.0.6/node_modules/@octokit/endpoint/dist-node/index.js
var require_dist_node$8 = __commonJS({ "node_modules/.pnpm/@octokit+endpoint@9.0.6/node_modules/@octokit/endpoint/dist-node/index.js"(exports, module) {
	var __defProp$8 = Object.defineProperty;
	var __getOwnPropDesc$7 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$7 = Object.getOwnPropertyNames;
	var __hasOwnProp$7 = Object.prototype.hasOwnProperty;
	var __export$8 = (target, all) => {
		for (var name$2 in all) __defProp$8(target, name$2, {
			get: all[name$2],
			enumerable: true
		});
	};
	var __copyProps$7 = (to$1, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$7(from)) if (!__hasOwnProp$7.call(to$1, key) && key !== except) __defProp$8(to$1, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$7(from, key)) || desc.enumerable
			});
		}
		return to$1;
	};
	var __toCommonJS$7 = (mod) => __copyProps$7(__defProp$8({}, "__esModule", { value: true }), mod);
	var dist_src_exports$6 = {};
	__export$8(dist_src_exports$6, { endpoint: () => endpoint });
	module.exports = __toCommonJS$7(dist_src_exports$6);
	var import_universal_user_agent$3 = require_dist_node$9();
	var VERSION$7 = "9.0.6";
	var userAgent$2 = `octokit-endpoint.js/${VERSION$7} ${(0, import_universal_user_agent$3.getUserAgent)()}`;
	var DEFAULTS = {
		method: "GET",
		baseUrl: "https://api.github.com",
		headers: {
			accept: "application/vnd.github.v3+json",
			"user-agent": userAgent$2
		},
		mediaType: { format: "" }
	};
	function lowercaseKeys(object$1) {
		if (!object$1) return {};
		return Object.keys(object$1).reduce((newObj, key) => {
			newObj[key.toLowerCase()] = object$1[key];
			return newObj;
		}, {});
	}
	function isPlainObject$2(value) {
		if (typeof value !== "object" || value === null) return false;
		if (Object.prototype.toString.call(value) !== "[object Object]") return false;
		const proto = Object.getPrototypeOf(value);
		if (proto === null) return true;
		const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
		return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
	}
	function mergeDeep(defaults, options) {
		const result = Object.assign({}, defaults);
		Object.keys(options).forEach((key) => {
			if (isPlainObject$2(options[key])) if (!(key in defaults)) Object.assign(result, { [key]: options[key] });
			else result[key] = mergeDeep(defaults[key], options[key]);
			else Object.assign(result, { [key]: options[key] });
		});
		return result;
	}
	function removeUndefinedProperties(obj) {
		for (const key in obj) if (obj[key] === void 0) delete obj[key];
		return obj;
	}
	function merge(defaults, route, options) {
		if (typeof route === "string") {
			let [method, url] = route.split(" ");
			options = Object.assign(url ? {
				method,
				url
			} : { url: method }, options);
		} else options = Object.assign({}, route);
		options.headers = lowercaseKeys(options.headers);
		removeUndefinedProperties(options);
		removeUndefinedProperties(options.headers);
		const mergedOptions = mergeDeep(defaults || {}, options);
		if (options.url === "/graphql") {
			if (defaults && defaults.mediaType.previews?.length) mergedOptions.mediaType.previews = defaults.mediaType.previews.filter((preview) => !mergedOptions.mediaType.previews.includes(preview)).concat(mergedOptions.mediaType.previews);
			mergedOptions.mediaType.previews = (mergedOptions.mediaType.previews || []).map((preview) => preview.replace(/-preview/, ""));
		}
		return mergedOptions;
	}
	function addQueryParameters(url, parameters) {
		const separator = /\?/.test(url) ? "&" : "?";
		const names = Object.keys(parameters);
		if (names.length === 0) return url;
		return url + separator + names.map((name$2) => {
			if (name$2 === "q") return "q=" + parameters.q.split("+").map(encodeURIComponent).join("+");
			return `${name$2}=${encodeURIComponent(parameters[name$2])}`;
		}).join("&");
	}
	var urlVariableRegex = /\{[^{}}]+\}/g;
	function removeNonChars(variableName) {
		return variableName.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g, "").split(/,/);
	}
	function extractUrlVariableNames(url) {
		const matches = url.match(urlVariableRegex);
		if (!matches) return [];
		return matches.map(removeNonChars).reduce((a$1, b) => a$1.concat(b), []);
	}
	function omit(object$1, keysToOmit) {
		const result = { __proto__: null };
		for (const key of Object.keys(object$1)) if (keysToOmit.indexOf(key) === -1) result[key] = object$1[key];
		return result;
	}
	function encodeReserved(str) {
		return str.split(/(%[0-9A-Fa-f]{2})/g).map(function(part) {
			if (!/%[0-9A-Fa-f]/.test(part)) part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
			return part;
		}).join("");
	}
	function encodeUnreserved(str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function(c$1) {
			return "%" + c$1.charCodeAt(0).toString(16).toUpperCase();
		});
	}
	function encodeValue(operator, value, key) {
		value = operator === "+" || operator === "#" ? encodeReserved(value) : encodeUnreserved(value);
		if (key) return encodeUnreserved(key) + "=" + value;
		else return value;
	}
	function isDefined(value) {
		return value !== void 0 && value !== null;
	}
	function isKeyOperator(operator) {
		return operator === ";" || operator === "&" || operator === "?";
	}
	function getValues(context$1, operator, key, modifier) {
		var value = context$1[key], result = [];
		if (isDefined(value) && value !== "") if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
			value = value.toString();
			if (modifier && modifier !== "*") value = value.substring(0, parseInt(modifier, 10));
			result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : ""));
		} else if (modifier === "*") if (Array.isArray(value)) value.filter(isDefined).forEach(function(value2) {
			result.push(encodeValue(operator, value2, isKeyOperator(operator) ? key : ""));
		});
		else Object.keys(value).forEach(function(k) {
			if (isDefined(value[k])) result.push(encodeValue(operator, value[k], k));
		});
		else {
			const tmp = [];
			if (Array.isArray(value)) value.filter(isDefined).forEach(function(value2) {
				tmp.push(encodeValue(operator, value2));
			});
			else Object.keys(value).forEach(function(k) {
				if (isDefined(value[k])) {
					tmp.push(encodeUnreserved(k));
					tmp.push(encodeValue(operator, value[k].toString()));
				}
			});
			if (isKeyOperator(operator)) result.push(encodeUnreserved(key) + "=" + tmp.join(","));
			else if (tmp.length !== 0) result.push(tmp.join(","));
		}
		else if (operator === ";") {
			if (isDefined(value)) result.push(encodeUnreserved(key));
		} else if (value === "" && (operator === "&" || operator === "?")) result.push(encodeUnreserved(key) + "=");
		else if (value === "") result.push("");
		return result;
	}
	function parseUrl(template) {
		return { expand: expand.bind(null, template) };
	}
	function expand(template, context$1) {
		var operators = [
			"+",
			"#",
			".",
			"/",
			";",
			"?",
			"&"
		];
		template = template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function(_, expression, literal) {
			if (expression) {
				let operator = "";
				const values = [];
				if (operators.indexOf(expression.charAt(0)) !== -1) {
					operator = expression.charAt(0);
					expression = expression.substr(1);
				}
				expression.split(/,/g).forEach(function(variable) {
					var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
					values.push(getValues(context$1, operator, tmp[1], tmp[2] || tmp[3]));
				});
				if (operator && operator !== "+") {
					var separator = ",";
					if (operator === "?") separator = "&";
					else if (operator !== "#") separator = operator;
					return (values.length !== 0 ? operator : "") + values.join(separator);
				} else return values.join(",");
			} else return encodeReserved(literal);
		});
		if (template === "/") return template;
		else return template.replace(/\/$/, "");
	}
	function parse$3(options) {
		let method = options.method.toUpperCase();
		let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
		let headers = Object.assign({}, options.headers);
		let body;
		let parameters = omit(options, [
			"method",
			"baseUrl",
			"url",
			"headers",
			"request",
			"mediaType"
		]);
		const urlVariableNames = extractUrlVariableNames(url);
		url = parseUrl(url).expand(parameters);
		if (!/^http/.test(url)) url = options.baseUrl + url;
		const omittedParameters = Object.keys(options).filter((option) => urlVariableNames.includes(option)).concat("baseUrl");
		const remainingParameters = omit(parameters, omittedParameters);
		const isBinaryRequest = /application\/octet-stream/i.test(headers.accept);
		if (!isBinaryRequest) {
			if (options.mediaType.format) headers.accept = headers.accept.split(/,/).map((format$1) => format$1.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/, `application/vnd$1$2.${options.mediaType.format}`)).join(",");
			if (url.endsWith("/graphql")) {
				if (options.mediaType.previews?.length) {
					const previewsFromAcceptHeader = headers.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g) || [];
					headers.accept = previewsFromAcceptHeader.concat(options.mediaType.previews).map((preview) => {
						const format$1 = options.mediaType.format ? `.${options.mediaType.format}` : "+json";
						return `application/vnd.github.${preview}-preview${format$1}`;
					}).join(",");
				}
			}
		}
		if (["GET", "HEAD"].includes(method)) url = addQueryParameters(url, remainingParameters);
		else if ("data" in remainingParameters) body = remainingParameters.data;
		else if (Object.keys(remainingParameters).length) body = remainingParameters;
		if (!headers["content-type"] && typeof body !== "undefined") headers["content-type"] = "application/json; charset=utf-8";
		if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") body = "";
		return Object.assign({
			method,
			url,
			headers
		}, typeof body !== "undefined" ? { body } : null, options.request ? { request: options.request } : null);
	}
	function endpointWithDefaults(defaults, route, options) {
		return parse$3(merge(defaults, route, options));
	}
	function withDefaults$2(oldDefaults, newDefaults) {
		const DEFAULTS2 = merge(oldDefaults, newDefaults);
		const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
		return Object.assign(endpoint2, {
			DEFAULTS: DEFAULTS2,
			defaults: withDefaults$2.bind(null, DEFAULTS2),
			merge: merge.bind(null, DEFAULTS2),
			parse: parse$3
		});
	}
	var endpoint = withDefaults$2(null, DEFAULTS);
} });

//#endregion
//#region node_modules/.pnpm/deprecation@2.3.1/node_modules/deprecation/dist-node/index.js
var require_dist_node$7 = __commonJS({ "node_modules/.pnpm/deprecation@2.3.1/node_modules/deprecation/dist-node/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var Deprecation = class extends Error {
		constructor(message) {
			super(message);
			/* istanbul ignore next */
			if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
			this.name = "Deprecation";
		}
	};
	exports.Deprecation = Deprecation;
} });

//#endregion
//#region node_modules/.pnpm/wrappy@1.0.2/node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({ "node_modules/.pnpm/wrappy@1.0.2/node_modules/wrappy/wrappy.js"(exports, module) {
	module.exports = wrappy$1;
	function wrappy$1(fn, cb) {
		if (fn && cb) return wrappy$1(fn)(cb);
		if (typeof fn !== "function") throw new TypeError("need wrapper function");
		Object.keys(fn).forEach(function(k) {
			wrapper[k] = fn[k];
		});
		return wrapper;
		function wrapper() {
			var args = new Array(arguments.length);
			for (var i$1 = 0; i$1 < args.length; i$1++) args[i$1] = arguments[i$1];
			var ret = fn.apply(this, args);
			var cb$1 = args[args.length - 1];
			if (typeof ret === "function" && ret !== cb$1) Object.keys(cb$1).forEach(function(k) {
				ret[k] = cb$1[k];
			});
			return ret;
		}
	}
} });

//#endregion
//#region node_modules/.pnpm/once@1.4.0/node_modules/once/once.js
var require_once = __commonJS({ "node_modules/.pnpm/once@1.4.0/node_modules/once/once.js"(exports, module) {
	var wrappy = require_wrappy();
	module.exports = wrappy(once$1);
	module.exports.strict = wrappy(onceStrict);
	once$1.proto = once$1(function() {
		Object.defineProperty(Function.prototype, "once", {
			value: function() {
				return once$1(this);
			},
			configurable: true
		});
		Object.defineProperty(Function.prototype, "onceStrict", {
			value: function() {
				return onceStrict(this);
			},
			configurable: true
		});
	});
	function once$1(fn) {
		var f = function() {
			if (f.called) return f.value;
			f.called = true;
			return f.value = fn.apply(this, arguments);
		};
		f.called = false;
		return f;
	}
	function onceStrict(fn) {
		var f = function() {
			if (f.called) throw new Error(f.onceError);
			f.called = true;
			return f.value = fn.apply(this, arguments);
		};
		var name$2 = fn.name || "Function wrapped with `once`";
		f.onceError = name$2 + " shouldn't be called more than once";
		f.called = false;
		return f;
	}
} });

//#endregion
//#region node_modules/.pnpm/@octokit+request-error@5.1.1/node_modules/@octokit/request-error/dist-node/index.js
var require_dist_node$6 = __commonJS({ "node_modules/.pnpm/@octokit+request-error@5.1.1/node_modules/@octokit/request-error/dist-node/index.js"(exports, module) {
	var __create = Object.create;
	var __defProp$7 = Object.defineProperty;
	var __getOwnPropDesc$6 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$6 = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp$6 = Object.prototype.hasOwnProperty;
	var __export$7 = (target, all) => {
		for (var name$2 in all) __defProp$7(target, name$2, {
			get: all[name$2],
			enumerable: true
		});
	};
	var __copyProps$6 = (to$1, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$6(from)) if (!__hasOwnProp$6.call(to$1, key) && key !== except) __defProp$7(to$1, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$6(from, key)) || desc.enumerable
			});
		}
		return to$1;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps$6(isNodeMode || !mod || !mod.__esModule ? __defProp$7(target, "default", {
		value: mod,
		enumerable: true
	}) : target, mod));
	var __toCommonJS$6 = (mod) => __copyProps$6(__defProp$7({}, "__esModule", { value: true }), mod);
	var dist_src_exports$5 = {};
	__export$7(dist_src_exports$5, { RequestError: () => RequestError });
	module.exports = __toCommonJS$6(dist_src_exports$5);
	var import_deprecation = require_dist_node$7();
	var import_once = __toESM(require_once());
	var logOnceCode = (0, import_once.default)((deprecation) => console.warn(deprecation));
	var logOnceHeaders = (0, import_once.default)((deprecation) => console.warn(deprecation));
	var RequestError = class extends Error {
		constructor(message, statusCode, options) {
			super(message);
			if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
			this.name = "HttpError";
			this.status = statusCode;
			let headers;
			if ("headers" in options && typeof options.headers !== "undefined") headers = options.headers;
			if ("response" in options) {
				this.response = options.response;
				headers = options.response.headers;
			}
			const requestCopy = Object.assign({}, options.request);
			if (options.request.headers.authorization) requestCopy.headers = Object.assign({}, options.request.headers, { authorization: options.request.headers.authorization.replace(/(?<! ) .*$/, " [REDACTED]") });
			requestCopy.url = requestCopy.url.replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]").replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
			this.request = requestCopy;
			Object.defineProperty(this, "code", { get() {
				logOnceCode(new import_deprecation.Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`."));
				return statusCode;
			} });
			Object.defineProperty(this, "headers", { get() {
				logOnceHeaders(new import_deprecation.Deprecation("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`."));
				return headers || {};
			} });
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/@octokit+request@8.4.1/node_modules/@octokit/request/dist-node/index.js
var require_dist_node$5 = __commonJS({ "node_modules/.pnpm/@octokit+request@8.4.1/node_modules/@octokit/request/dist-node/index.js"(exports, module) {
	var __defProp$6 = Object.defineProperty;
	var __getOwnPropDesc$5 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$5 = Object.getOwnPropertyNames;
	var __hasOwnProp$5 = Object.prototype.hasOwnProperty;
	var __export$6 = (target, all) => {
		for (var name$2 in all) __defProp$6(target, name$2, {
			get: all[name$2],
			enumerable: true
		});
	};
	var __copyProps$5 = (to$1, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$5(from)) if (!__hasOwnProp$5.call(to$1, key) && key !== except) __defProp$6(to$1, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$5(from, key)) || desc.enumerable
			});
		}
		return to$1;
	};
	var __toCommonJS$5 = (mod) => __copyProps$5(__defProp$6({}, "__esModule", { value: true }), mod);
	var dist_src_exports$4 = {};
	__export$6(dist_src_exports$4, { request: () => request$1 });
	module.exports = __toCommonJS$5(dist_src_exports$4);
	var import_endpoint = require_dist_node$8();
	var import_universal_user_agent$2 = require_dist_node$9();
	var VERSION$6 = "8.4.1";
	function isPlainObject$1(value) {
		if (typeof value !== "object" || value === null) return false;
		if (Object.prototype.toString.call(value) !== "[object Object]") return false;
		const proto = Object.getPrototypeOf(value);
		if (proto === null) return true;
		const Ctor = Object.prototype.hasOwnProperty.call(proto, "constructor") && proto.constructor;
		return typeof Ctor === "function" && Ctor instanceof Ctor && Function.prototype.call(Ctor) === Function.prototype.call(value);
	}
	var import_request_error = require_dist_node$6();
	function getBufferResponse(response) {
		return response.arrayBuffer();
	}
	function fetchWrapper(requestOptions) {
		var _a$3, _b, _c, _d;
		const log = requestOptions.request && requestOptions.request.log ? requestOptions.request.log : console;
		const parseSuccessResponseBody = ((_a$3 = requestOptions.request) == null ? void 0 : _a$3.parseSuccessResponseBody) !== false;
		if (isPlainObject$1(requestOptions.body) || Array.isArray(requestOptions.body)) requestOptions.body = JSON.stringify(requestOptions.body);
		let headers = {};
		let status;
		let url;
		let { fetch: fetch$4 } = globalThis;
		if ((_b = requestOptions.request) == null ? void 0 : _b.fetch) fetch$4 = requestOptions.request.fetch;
		if (!fetch$4) throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");
		return fetch$4(requestOptions.url, {
			method: requestOptions.method,
			body: requestOptions.body,
			redirect: (_c = requestOptions.request) == null ? void 0 : _c.redirect,
			headers: requestOptions.headers,
			signal: (_d = requestOptions.request) == null ? void 0 : _d.signal,
			...requestOptions.body && { duplex: "half" }
		}).then(async (response) => {
			url = response.url;
			status = response.status;
			for (const keyAndValue of response.headers) headers[keyAndValue[0]] = keyAndValue[1];
			if ("deprecation" in headers) {
				const matches = headers.link && headers.link.match(/<([^<>]+)>; rel="deprecation"/);
				const deprecationLink = matches && matches.pop();
				log.warn(`[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`);
			}
			if (status === 204 || status === 205) return;
			if (requestOptions.method === "HEAD") {
				if (status < 400) return;
				throw new import_request_error.RequestError(response.statusText, status, {
					response: {
						url,
						status,
						headers,
						data: void 0
					},
					request: requestOptions
				});
			}
			if (status === 304) throw new import_request_error.RequestError("Not modified", status, {
				response: {
					url,
					status,
					headers,
					data: await getResponseData$2(response)
				},
				request: requestOptions
			});
			if (status >= 400) {
				const data$1 = await getResponseData$2(response);
				const error$1 = new import_request_error.RequestError(toErrorMessage(data$1), status, {
					response: {
						url,
						status,
						headers,
						data: data$1
					},
					request: requestOptions
				});
				throw error$1;
			}
			return parseSuccessResponseBody ? await getResponseData$2(response) : response.body;
		}).then((data$1) => {
			return {
				status,
				url,
				headers,
				data: data$1
			};
		}).catch((error$1) => {
			if (error$1 instanceof import_request_error.RequestError) throw error$1;
			else if (error$1.name === "AbortError") throw error$1;
			let message = error$1.message;
			if (error$1.name === "TypeError" && "cause" in error$1) {
				if (error$1.cause instanceof Error) message = error$1.cause.message;
				else if (typeof error$1.cause === "string") message = error$1.cause;
			}
			throw new import_request_error.RequestError(message, 500, { request: requestOptions });
		});
	}
	async function getResponseData$2(response) {
		const contentType = response.headers.get("content-type");
		if (/application\/json/.test(contentType)) return response.json().catch(() => response.text()).catch(() => "");
		if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) return response.text();
		return getBufferResponse(response);
	}
	function toErrorMessage(data$1) {
		if (typeof data$1 === "string") return data$1;
		let suffix;
		if ("documentation_url" in data$1) suffix = ` - ${data$1.documentation_url}`;
		else suffix = "";
		if ("message" in data$1) {
			if (Array.isArray(data$1.errors)) return `${data$1.message}: ${data$1.errors.map(JSON.stringify).join(", ")}${suffix}`;
			return `${data$1.message}${suffix}`;
		}
		return `Unknown error: ${JSON.stringify(data$1)}`;
	}
	function withDefaults$1(oldEndpoint, newDefaults) {
		const endpoint2 = oldEndpoint.defaults(newDefaults);
		const newApi = function(route, parameters) {
			const endpointOptions = endpoint2.merge(route, parameters);
			if (!endpointOptions.request || !endpointOptions.request.hook) return fetchWrapper(endpoint2.parse(endpointOptions));
			const request2 = (route2, parameters2) => {
				return fetchWrapper(endpoint2.parse(endpoint2.merge(route2, parameters2)));
			};
			Object.assign(request2, {
				endpoint: endpoint2,
				defaults: withDefaults$1.bind(null, endpoint2)
			});
			return endpointOptions.request.hook(request2, endpointOptions);
		};
		return Object.assign(newApi, {
			endpoint: endpoint2,
			defaults: withDefaults$1.bind(null, endpoint2)
		});
	}
	var request$1 = withDefaults$1(import_endpoint.endpoint, { headers: { "user-agent": `octokit-request.js/${VERSION$6} ${(0, import_universal_user_agent$2.getUserAgent)()}` } });
} });

//#endregion
//#region node_modules/.pnpm/@octokit+graphql@7.1.1/node_modules/@octokit/graphql/dist-node/index.js
var require_dist_node$4 = __commonJS({ "node_modules/.pnpm/@octokit+graphql@7.1.1/node_modules/@octokit/graphql/dist-node/index.js"(exports, module) {
	var __defProp$5 = Object.defineProperty;
	var __getOwnPropDesc$4 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$4 = Object.getOwnPropertyNames;
	var __hasOwnProp$4 = Object.prototype.hasOwnProperty;
	var __export$5 = (target, all) => {
		for (var name$2 in all) __defProp$5(target, name$2, {
			get: all[name$2],
			enumerable: true
		});
	};
	var __copyProps$4 = (to$1, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$4(from)) if (!__hasOwnProp$4.call(to$1, key) && key !== except) __defProp$5(to$1, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$4(from, key)) || desc.enumerable
			});
		}
		return to$1;
	};
	var __toCommonJS$4 = (mod) => __copyProps$4(__defProp$5({}, "__esModule", { value: true }), mod);
	var index_exports = {};
	__export$5(index_exports, {
		GraphqlResponseError: () => GraphqlResponseError,
		graphql: () => graphql2,
		withCustomRequest: () => withCustomRequest
	});
	module.exports = __toCommonJS$4(index_exports);
	var import_request3 = require_dist_node$5();
	var import_universal_user_agent$1 = require_dist_node$9();
	var VERSION$5 = "7.1.1";
	var import_request2 = require_dist_node$5();
	var import_request$1 = require_dist_node$5();
	function _buildMessageForResponseErrors(data$1) {
		return `Request failed due to following response errors:
` + data$1.errors.map((e) => ` - ${e.message}`).join("\n");
	}
	var GraphqlResponseError = class extends Error {
		constructor(request2, headers, response) {
			super(_buildMessageForResponseErrors(response));
			this.request = request2;
			this.headers = headers;
			this.response = response;
			this.name = "GraphqlResponseError";
			this.errors = response.errors;
			this.data = response.data;
			if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
		}
	};
	var NON_VARIABLE_OPTIONS = [
		"method",
		"baseUrl",
		"url",
		"headers",
		"request",
		"query",
		"mediaType"
	];
	var FORBIDDEN_VARIABLE_OPTIONS = [
		"query",
		"method",
		"url"
	];
	var GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
	function graphql(request2, query, options) {
		if (options) {
			if (typeof query === "string" && "query" in options) return Promise.reject(/* @__PURE__ */ new Error(`[@octokit/graphql] "query" cannot be used as variable name`));
			for (const key in options) {
				if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key)) continue;
				return Promise.reject(/* @__PURE__ */ new Error(`[@octokit/graphql] "${key}" cannot be used as variable name`));
			}
		}
		const parsedOptions = typeof query === "string" ? Object.assign({ query }, options) : query;
		const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {
			if (NON_VARIABLE_OPTIONS.includes(key)) {
				result[key] = parsedOptions[key];
				return result;
			}
			if (!result.variables) result.variables = {};
			result.variables[key] = parsedOptions[key];
			return result;
		}, {});
		const baseUrl$1 = parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
		if (GHES_V3_SUFFIX_REGEX.test(baseUrl$1)) requestOptions.url = baseUrl$1.replace(GHES_V3_SUFFIX_REGEX, "/api/graphql");
		return request2(requestOptions).then((response) => {
			if (response.data.errors) {
				const headers = {};
				for (const key of Object.keys(response.headers)) headers[key] = response.headers[key];
				throw new GraphqlResponseError(requestOptions, headers, response.data);
			}
			return response.data.data;
		});
	}
	function withDefaults(request2, newDefaults) {
		const newRequest = request2.defaults(newDefaults);
		const newApi = (query, options) => {
			return graphql(newRequest, query, options);
		};
		return Object.assign(newApi, {
			defaults: withDefaults.bind(null, newRequest),
			endpoint: newRequest.endpoint
		});
	}
	var graphql2 = withDefaults(import_request3.request, {
		headers: { "user-agent": `octokit-graphql.js/${VERSION$5} ${(0, import_universal_user_agent$1.getUserAgent)()}` },
		method: "POST",
		url: "/graphql"
	});
	function withCustomRequest(customRequest) {
		return withDefaults(customRequest, {
			method: "POST",
			url: "/graphql"
		});
	}
} });

//#endregion
//#region node_modules/.pnpm/@octokit+auth-token@4.0.0/node_modules/@octokit/auth-token/dist-node/index.js
var require_dist_node$3 = __commonJS({ "node_modules/.pnpm/@octokit+auth-token@4.0.0/node_modules/@octokit/auth-token/dist-node/index.js"(exports, module) {
	var __defProp$4 = Object.defineProperty;
	var __getOwnPropDesc$3 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$3 = Object.getOwnPropertyNames;
	var __hasOwnProp$3 = Object.prototype.hasOwnProperty;
	var __export$4 = (target, all) => {
		for (var name$2 in all) __defProp$4(target, name$2, {
			get: all[name$2],
			enumerable: true
		});
	};
	var __copyProps$3 = (to$1, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$3(from)) if (!__hasOwnProp$3.call(to$1, key) && key !== except) __defProp$4(to$1, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$3(from, key)) || desc.enumerable
			});
		}
		return to$1;
	};
	var __toCommonJS$3 = (mod) => __copyProps$3(__defProp$4({}, "__esModule", { value: true }), mod);
	var dist_src_exports$3 = {};
	__export$4(dist_src_exports$3, { createTokenAuth: () => createTokenAuth });
	module.exports = __toCommonJS$3(dist_src_exports$3);
	var REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
	var REGEX_IS_INSTALLATION = /^ghs_/;
	var REGEX_IS_USER_TO_SERVER = /^ghu_/;
	async function auth(token) {
		const isApp = token.split(/\./).length === 3;
		const isInstallation = REGEX_IS_INSTALLATION_LEGACY.test(token) || REGEX_IS_INSTALLATION.test(token);
		const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
		const tokenType = isApp ? "app" : isInstallation ? "installation" : isUserToServer ? "user-to-server" : "oauth";
		return {
			type: "token",
			token,
			tokenType
		};
	}
	function withAuthorizationPrefix(token) {
		if (token.split(/\./).length === 3) return `bearer ${token}`;
		return `token ${token}`;
	}
	async function hook(token, request$3, route, parameters) {
		const endpoint$1 = request$3.endpoint.merge(route, parameters);
		endpoint$1.headers.authorization = withAuthorizationPrefix(token);
		return request$3(endpoint$1);
	}
	var createTokenAuth = function createTokenAuth2(token) {
		if (!token) throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");
		if (typeof token !== "string") throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");
		token = token.replace(/^(token|bearer) +/i, "");
		return Object.assign(auth.bind(null, token), { hook: hook.bind(null, token) });
	};
} });

//#endregion
//#region node_modules/.pnpm/@octokit+core@5.2.0/node_modules/@octokit/core/dist-node/index.js
var require_dist_node$2 = __commonJS({ "node_modules/.pnpm/@octokit+core@5.2.0/node_modules/@octokit/core/dist-node/index.js"(exports, module) {
	var __defProp$3 = Object.defineProperty;
	var __getOwnPropDesc$2 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$2 = Object.getOwnPropertyNames;
	var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
	var __export$3 = (target, all) => {
		for (var name$2 in all) __defProp$3(target, name$2, {
			get: all[name$2],
			enumerable: true
		});
	};
	var __copyProps$2 = (to$1, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$2(from)) if (!__hasOwnProp$2.call(to$1, key) && key !== except) __defProp$3(to$1, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$2(from, key)) || desc.enumerable
			});
		}
		return to$1;
	};
	var __toCommonJS$2 = (mod) => __copyProps$2(__defProp$3({}, "__esModule", { value: true }), mod);
	var dist_src_exports$2 = {};
	__export$3(dist_src_exports$2, { Octokit: () => Octokit });
	module.exports = __toCommonJS$2(dist_src_exports$2);
	var import_universal_user_agent = require_dist_node$9();
	var import_before_after_hook = require_before_after_hook();
	var import_request = require_dist_node$5();
	var import_graphql = require_dist_node$4();
	var import_auth_token = require_dist_node$3();
	var VERSION$4 = "5.2.0";
	var noop$12 = () => {};
	var consoleWarn = console.warn.bind(console);
	var consoleError = console.error.bind(console);
	var userAgentTrail = `octokit-core.js/${VERSION$4} ${(0, import_universal_user_agent.getUserAgent)()}`;
	var Octokit = class {
		static {
			this.VERSION = VERSION$4;
		}
		static defaults(defaults) {
			const OctokitWithDefaults = class extends this {
				constructor(...args) {
					const options = args[0] || {};
					if (typeof defaults === "function") {
						super(defaults(options));
						return;
					}
					super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? { userAgent: `${options.userAgent} ${defaults.userAgent}` } : null));
				}
			};
			return OctokitWithDefaults;
		}
		static {
			this.plugins = [];
		}
		/**
		* Attach a plugin (or many) to your Octokit instance.
		*
		* @example
		* const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
		*/
		static plugin(...newPlugins) {
			const currentPlugins = this.plugins;
			const NewOctokit = class extends this {
				static {
					this.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin)));
				}
			};
			return NewOctokit;
		}
		constructor(options = {}) {
			const hook$1 = new import_before_after_hook.Collection();
			const requestDefaults = {
				baseUrl: import_request.request.endpoint.DEFAULTS.baseUrl,
				headers: {},
				request: Object.assign({}, options.request, { hook: hook$1.bind(null, "request") }),
				mediaType: {
					previews: [],
					format: ""
				}
			};
			requestDefaults.headers["user-agent"] = options.userAgent ? `${options.userAgent} ${userAgentTrail}` : userAgentTrail;
			if (options.baseUrl) requestDefaults.baseUrl = options.baseUrl;
			if (options.previews) requestDefaults.mediaType.previews = options.previews;
			if (options.timeZone) requestDefaults.headers["time-zone"] = options.timeZone;
			this.request = import_request.request.defaults(requestDefaults);
			this.graphql = (0, import_graphql.withCustomRequest)(this.request).defaults(requestDefaults);
			this.log = Object.assign({
				debug: noop$12,
				info: noop$12,
				warn: consoleWarn,
				error: consoleError
			}, options.log);
			this.hook = hook$1;
			if (!options.authStrategy) if (!options.auth) this.auth = async () => ({ type: "unauthenticated" });
			else {
				const auth$1 = (0, import_auth_token.createTokenAuth)(options.auth);
				hook$1.wrap("request", auth$1.hook);
				this.auth = auth$1;
			}
			else {
				const { authStrategy,...otherOptions } = options;
				const auth$1 = authStrategy(Object.assign({
					request: this.request,
					log: this.log,
					octokit: this,
					octokitOptions: otherOptions
				}, options.auth));
				hook$1.wrap("request", auth$1.hook);
				this.auth = auth$1;
			}
			const classConstructor = this.constructor;
			for (let i$1 = 0; i$1 < classConstructor.plugins.length; ++i$1) Object.assign(this, classConstructor.plugins[i$1](this, options));
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/@octokit+plugin-rest-endpoint-methods@10.4.1_@octokit+core@5.2.0/node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js
var require_dist_node$1 = __commonJS({ "node_modules/.pnpm/@octokit+plugin-rest-endpoint-methods@10.4.1_@octokit+core@5.2.0/node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js"(exports, module) {
	var __defProp$2 = Object.defineProperty;
	var __getOwnPropDesc$1 = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames$1 = Object.getOwnPropertyNames;
	var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
	var __export$2 = (target, all) => {
		for (var name$2 in all) __defProp$2(target, name$2, {
			get: all[name$2],
			enumerable: true
		});
	};
	var __copyProps$1 = (to$1, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames$1(from)) if (!__hasOwnProp$1.call(to$1, key) && key !== except) __defProp$2(to$1, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc$1(from, key)) || desc.enumerable
			});
		}
		return to$1;
	};
	var __toCommonJS$1 = (mod) => __copyProps$1(__defProp$2({}, "__esModule", { value: true }), mod);
	var dist_src_exports$1 = {};
	__export$2(dist_src_exports$1, {
		legacyRestEndpointMethods: () => legacyRestEndpointMethods,
		restEndpointMethods: () => restEndpointMethods
	});
	module.exports = __toCommonJS$1(dist_src_exports$1);
	var VERSION$3 = "10.4.1";
	var Endpoints = {
		actions: {
			addCustomLabelsToSelfHostedRunnerForOrg: ["POST /orgs/{org}/actions/runners/{runner_id}/labels"],
			addCustomLabelsToSelfHostedRunnerForRepo: ["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],
			addSelectedRepoToOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],
			addSelectedRepoToOrgVariable: ["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],
			approveWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],
			cancelWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],
			createEnvironmentVariable: ["POST /repositories/{repository_id}/environments/{environment_name}/variables"],
			createOrUpdateEnvironmentSecret: ["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
			createOrUpdateOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}"],
			createOrUpdateRepoSecret: ["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
			createOrgVariable: ["POST /orgs/{org}/actions/variables"],
			createRegistrationTokenForOrg: ["POST /orgs/{org}/actions/runners/registration-token"],
			createRegistrationTokenForRepo: ["POST /repos/{owner}/{repo}/actions/runners/registration-token"],
			createRemoveTokenForOrg: ["POST /orgs/{org}/actions/runners/remove-token"],
			createRemoveTokenForRepo: ["POST /repos/{owner}/{repo}/actions/runners/remove-token"],
			createRepoVariable: ["POST /repos/{owner}/{repo}/actions/variables"],
			createWorkflowDispatch: ["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],
			deleteActionsCacheById: ["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],
			deleteActionsCacheByKey: ["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],
			deleteArtifact: ["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
			deleteEnvironmentSecret: ["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
			deleteEnvironmentVariable: ["DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],
			deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
			deleteOrgVariable: ["DELETE /orgs/{org}/actions/variables/{name}"],
			deleteRepoSecret: ["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
			deleteRepoVariable: ["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],
			deleteSelfHostedRunnerFromOrg: ["DELETE /orgs/{org}/actions/runners/{runner_id}"],
			deleteSelfHostedRunnerFromRepo: ["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],
			deleteWorkflowRun: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],
			deleteWorkflowRunLogs: ["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
			disableSelectedRepositoryGithubActionsOrganization: ["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],
			disableWorkflow: ["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],
			downloadArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],
			downloadJobLogsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],
			downloadWorkflowRunAttemptLogs: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],
			downloadWorkflowRunLogs: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],
			enableSelectedRepositoryGithubActionsOrganization: ["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],
			enableWorkflow: ["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],
			forceCancelWorkflowRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],
			generateRunnerJitconfigForOrg: ["POST /orgs/{org}/actions/runners/generate-jitconfig"],
			generateRunnerJitconfigForRepo: ["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],
			getActionsCacheList: ["GET /repos/{owner}/{repo}/actions/caches"],
			getActionsCacheUsage: ["GET /repos/{owner}/{repo}/actions/cache/usage"],
			getActionsCacheUsageByRepoForOrg: ["GET /orgs/{org}/actions/cache/usage-by-repository"],
			getActionsCacheUsageForOrg: ["GET /orgs/{org}/actions/cache/usage"],
			getAllowedActionsOrganization: ["GET /orgs/{org}/actions/permissions/selected-actions"],
			getAllowedActionsRepository: ["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],
			getArtifact: ["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],
			getCustomOidcSubClaimForRepo: ["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],
			getEnvironmentPublicKey: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],
			getEnvironmentSecret: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],
			getEnvironmentVariable: ["GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],
			getGithubActionsDefaultWorkflowPermissionsOrganization: ["GET /orgs/{org}/actions/permissions/workflow"],
			getGithubActionsDefaultWorkflowPermissionsRepository: ["GET /repos/{owner}/{repo}/actions/permissions/workflow"],
			getGithubActionsPermissionsOrganization: ["GET /orgs/{org}/actions/permissions"],
			getGithubActionsPermissionsRepository: ["GET /repos/{owner}/{repo}/actions/permissions"],
			getJobForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],
			getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
			getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
			getOrgVariable: ["GET /orgs/{org}/actions/variables/{name}"],
			getPendingDeploymentsForRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],
			getRepoPermissions: [
				"GET /repos/{owner}/{repo}/actions/permissions",
				{},
				{ renamed: ["actions", "getGithubActionsPermissionsRepository"] }
			],
			getRepoPublicKey: ["GET /repos/{owner}/{repo}/actions/secrets/public-key"],
			getRepoSecret: ["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],
			getRepoVariable: ["GET /repos/{owner}/{repo}/actions/variables/{name}"],
			getReviewsForRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],
			getSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}"],
			getSelfHostedRunnerForRepo: ["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],
			getWorkflow: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],
			getWorkflowAccessToRepository: ["GET /repos/{owner}/{repo}/actions/permissions/access"],
			getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
			getWorkflowRunAttempt: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],
			getWorkflowRunUsage: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],
			getWorkflowUsage: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],
			listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
			listEnvironmentSecrets: ["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],
			listEnvironmentVariables: ["GET /repositories/{repository_id}/environments/{environment_name}/variables"],
			listJobsForWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],
			listJobsForWorkflowRunAttempt: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],
			listLabelsForSelfHostedRunnerForOrg: ["GET /orgs/{org}/actions/runners/{runner_id}/labels"],
			listLabelsForSelfHostedRunnerForRepo: ["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],
			listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
			listOrgVariables: ["GET /orgs/{org}/actions/variables"],
			listRepoOrganizationSecrets: ["GET /repos/{owner}/{repo}/actions/organization-secrets"],
			listRepoOrganizationVariables: ["GET /repos/{owner}/{repo}/actions/organization-variables"],
			listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
			listRepoVariables: ["GET /repos/{owner}/{repo}/actions/variables"],
			listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
			listRunnerApplicationsForOrg: ["GET /orgs/{org}/actions/runners/downloads"],
			listRunnerApplicationsForRepo: ["GET /repos/{owner}/{repo}/actions/runners/downloads"],
			listSelectedReposForOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],
			listSelectedReposForOrgVariable: ["GET /orgs/{org}/actions/variables/{name}/repositories"],
			listSelectedRepositoriesEnabledGithubActionsOrganization: ["GET /orgs/{org}/actions/permissions/repositories"],
			listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
			listSelfHostedRunnersForRepo: ["GET /repos/{owner}/{repo}/actions/runners"],
			listWorkflowRunArtifacts: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],
			listWorkflowRuns: ["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],
			listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
			reRunJobForWorkflowRun: ["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],
			reRunWorkflow: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],
			reRunWorkflowFailedJobs: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],
			removeAllCustomLabelsFromSelfHostedRunnerForOrg: ["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],
			removeAllCustomLabelsFromSelfHostedRunnerForRepo: ["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],
			removeCustomLabelFromSelfHostedRunnerForOrg: ["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],
			removeCustomLabelFromSelfHostedRunnerForRepo: ["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],
			removeSelectedRepoFromOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],
			removeSelectedRepoFromOrgVariable: ["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],
			reviewCustomGatesForRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],
			reviewPendingDeploymentsForRun: ["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],
			setAllowedActionsOrganization: ["PUT /orgs/{org}/actions/permissions/selected-actions"],
			setAllowedActionsRepository: ["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],
			setCustomLabelsForSelfHostedRunnerForOrg: ["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],
			setCustomLabelsForSelfHostedRunnerForRepo: ["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],
			setCustomOidcSubClaimForRepo: ["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],
			setGithubActionsDefaultWorkflowPermissionsOrganization: ["PUT /orgs/{org}/actions/permissions/workflow"],
			setGithubActionsDefaultWorkflowPermissionsRepository: ["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],
			setGithubActionsPermissionsOrganization: ["PUT /orgs/{org}/actions/permissions"],
			setGithubActionsPermissionsRepository: ["PUT /repos/{owner}/{repo}/actions/permissions"],
			setSelectedReposForOrgSecret: ["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],
			setSelectedReposForOrgVariable: ["PUT /orgs/{org}/actions/variables/{name}/repositories"],
			setSelectedRepositoriesEnabledGithubActionsOrganization: ["PUT /orgs/{org}/actions/permissions/repositories"],
			setWorkflowAccessToRepository: ["PUT /repos/{owner}/{repo}/actions/permissions/access"],
			updateEnvironmentVariable: ["PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],
			updateOrgVariable: ["PATCH /orgs/{org}/actions/variables/{name}"],
			updateRepoVariable: ["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]
		},
		activity: {
			checkRepoIsStarredByAuthenticatedUser: ["GET /user/starred/{owner}/{repo}"],
			deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
			deleteThreadSubscription: ["DELETE /notifications/threads/{thread_id}/subscription"],
			getFeeds: ["GET /feeds"],
			getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
			getThread: ["GET /notifications/threads/{thread_id}"],
			getThreadSubscriptionForAuthenticatedUser: ["GET /notifications/threads/{thread_id}/subscription"],
			listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
			listNotificationsForAuthenticatedUser: ["GET /notifications"],
			listOrgEventsForAuthenticatedUser: ["GET /users/{username}/events/orgs/{org}"],
			listPublicEvents: ["GET /events"],
			listPublicEventsForRepoNetwork: ["GET /networks/{owner}/{repo}/events"],
			listPublicEventsForUser: ["GET /users/{username}/events/public"],
			listPublicOrgEvents: ["GET /orgs/{org}/events"],
			listReceivedEventsForUser: ["GET /users/{username}/received_events"],
			listReceivedPublicEventsForUser: ["GET /users/{username}/received_events/public"],
			listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
			listRepoNotificationsForAuthenticatedUser: ["GET /repos/{owner}/{repo}/notifications"],
			listReposStarredByAuthenticatedUser: ["GET /user/starred"],
			listReposStarredByUser: ["GET /users/{username}/starred"],
			listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
			listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
			listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
			listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
			markNotificationsAsRead: ["PUT /notifications"],
			markRepoNotificationsAsRead: ["PUT /repos/{owner}/{repo}/notifications"],
			markThreadAsDone: ["DELETE /notifications/threads/{thread_id}"],
			markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
			setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
			setThreadSubscription: ["PUT /notifications/threads/{thread_id}/subscription"],
			starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
			unstarRepoForAuthenticatedUser: ["DELETE /user/starred/{owner}/{repo}"]
		},
		apps: {
			addRepoToInstallation: [
				"PUT /user/installations/{installation_id}/repositories/{repository_id}",
				{},
				{ renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] }
			],
			addRepoToInstallationForAuthenticatedUser: ["PUT /user/installations/{installation_id}/repositories/{repository_id}"],
			checkToken: ["POST /applications/{client_id}/token"],
			createFromManifest: ["POST /app-manifests/{code}/conversions"],
			createInstallationAccessToken: ["POST /app/installations/{installation_id}/access_tokens"],
			deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
			deleteInstallation: ["DELETE /app/installations/{installation_id}"],
			deleteToken: ["DELETE /applications/{client_id}/token"],
			getAuthenticated: ["GET /app"],
			getBySlug: ["GET /apps/{app_slug}"],
			getInstallation: ["GET /app/installations/{installation_id}"],
			getOrgInstallation: ["GET /orgs/{org}/installation"],
			getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
			getSubscriptionPlanForAccount: ["GET /marketplace_listing/accounts/{account_id}"],
			getSubscriptionPlanForAccountStubbed: ["GET /marketplace_listing/stubbed/accounts/{account_id}"],
			getUserInstallation: ["GET /users/{username}/installation"],
			getWebhookConfigForApp: ["GET /app/hook/config"],
			getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
			listAccountsForPlan: ["GET /marketplace_listing/plans/{plan_id}/accounts"],
			listAccountsForPlanStubbed: ["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],
			listInstallationReposForAuthenticatedUser: ["GET /user/installations/{installation_id}/repositories"],
			listInstallationRequestsForAuthenticatedApp: ["GET /app/installation-requests"],
			listInstallations: ["GET /app/installations"],
			listInstallationsForAuthenticatedUser: ["GET /user/installations"],
			listPlans: ["GET /marketplace_listing/plans"],
			listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
			listReposAccessibleToInstallation: ["GET /installation/repositories"],
			listSubscriptionsForAuthenticatedUser: ["GET /user/marketplace_purchases"],
			listSubscriptionsForAuthenticatedUserStubbed: ["GET /user/marketplace_purchases/stubbed"],
			listWebhookDeliveries: ["GET /app/hook/deliveries"],
			redeliverWebhookDelivery: ["POST /app/hook/deliveries/{delivery_id}/attempts"],
			removeRepoFromInstallation: [
				"DELETE /user/installations/{installation_id}/repositories/{repository_id}",
				{},
				{ renamed: ["apps", "removeRepoFromInstallationForAuthenticatedUser"] }
			],
			removeRepoFromInstallationForAuthenticatedUser: ["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],
			resetToken: ["PATCH /applications/{client_id}/token"],
			revokeInstallationAccessToken: ["DELETE /installation/token"],
			scopeToken: ["POST /applications/{client_id}/token/scoped"],
			suspendInstallation: ["PUT /app/installations/{installation_id}/suspended"],
			unsuspendInstallation: ["DELETE /app/installations/{installation_id}/suspended"],
			updateWebhookConfigForApp: ["PATCH /app/hook/config"]
		},
		billing: {
			getGithubActionsBillingOrg: ["GET /orgs/{org}/settings/billing/actions"],
			getGithubActionsBillingUser: ["GET /users/{username}/settings/billing/actions"],
			getGithubPackagesBillingOrg: ["GET /orgs/{org}/settings/billing/packages"],
			getGithubPackagesBillingUser: ["GET /users/{username}/settings/billing/packages"],
			getSharedStorageBillingOrg: ["GET /orgs/{org}/settings/billing/shared-storage"],
			getSharedStorageBillingUser: ["GET /users/{username}/settings/billing/shared-storage"]
		},
		checks: {
			create: ["POST /repos/{owner}/{repo}/check-runs"],
			createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
			get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
			getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
			listAnnotations: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],
			listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
			listForSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],
			listSuitesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],
			rerequestRun: ["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],
			rerequestSuite: ["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],
			setSuitesPreferences: ["PATCH /repos/{owner}/{repo}/check-suites/preferences"],
			update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]
		},
		codeScanning: {
			deleteAnalysis: ["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],
			getAlert: [
				"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
				{},
				{ renamedParameters: { alert_id: "alert_number" } }
			],
			getAnalysis: ["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],
			getCodeqlDatabase: ["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],
			getDefaultSetup: ["GET /repos/{owner}/{repo}/code-scanning/default-setup"],
			getSarif: ["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],
			listAlertInstances: ["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],
			listAlertsForOrg: ["GET /orgs/{org}/code-scanning/alerts"],
			listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
			listAlertsInstances: [
				"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
				{},
				{ renamed: ["codeScanning", "listAlertInstances"] }
			],
			listCodeqlDatabases: ["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],
			listRecentAnalyses: ["GET /repos/{owner}/{repo}/code-scanning/analyses"],
			updateAlert: ["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],
			updateDefaultSetup: ["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],
			uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"]
		},
		codesOfConduct: {
			getAllCodesOfConduct: ["GET /codes_of_conduct"],
			getConductCode: ["GET /codes_of_conduct/{key}"]
		},
		codespaces: {
			addRepositoryForSecretForAuthenticatedUser: ["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],
			addSelectedRepoToOrgSecret: ["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],
			checkPermissionsForDevcontainer: ["GET /repos/{owner}/{repo}/codespaces/permissions_check"],
			codespaceMachinesForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}/machines"],
			createForAuthenticatedUser: ["POST /user/codespaces"],
			createOrUpdateOrgSecret: ["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],
			createOrUpdateRepoSecret: ["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],
			createOrUpdateSecretForAuthenticatedUser: ["PUT /user/codespaces/secrets/{secret_name}"],
			createWithPrForAuthenticatedUser: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],
			createWithRepoForAuthenticatedUser: ["POST /repos/{owner}/{repo}/codespaces"],
			deleteForAuthenticatedUser: ["DELETE /user/codespaces/{codespace_name}"],
			deleteFromOrganization: ["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],
			deleteOrgSecret: ["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],
			deleteRepoSecret: ["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],
			deleteSecretForAuthenticatedUser: ["DELETE /user/codespaces/secrets/{secret_name}"],
			exportForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/exports"],
			getCodespacesForUserInOrg: ["GET /orgs/{org}/members/{username}/codespaces"],
			getExportDetailsForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}/exports/{export_id}"],
			getForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}"],
			getOrgPublicKey: ["GET /orgs/{org}/codespaces/secrets/public-key"],
			getOrgSecret: ["GET /orgs/{org}/codespaces/secrets/{secret_name}"],
			getPublicKeyForAuthenticatedUser: ["GET /user/codespaces/secrets/public-key"],
			getRepoPublicKey: ["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],
			getRepoSecret: ["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],
			getSecretForAuthenticatedUser: ["GET /user/codespaces/secrets/{secret_name}"],
			listDevcontainersInRepositoryForAuthenticatedUser: ["GET /repos/{owner}/{repo}/codespaces/devcontainers"],
			listForAuthenticatedUser: ["GET /user/codespaces"],
			listInOrganization: [
				"GET /orgs/{org}/codespaces",
				{},
				{ renamedParameters: { org_id: "org" } }
			],
			listInRepositoryForAuthenticatedUser: ["GET /repos/{owner}/{repo}/codespaces"],
			listOrgSecrets: ["GET /orgs/{org}/codespaces/secrets"],
			listRepoSecrets: ["GET /repos/{owner}/{repo}/codespaces/secrets"],
			listRepositoriesForSecretForAuthenticatedUser: ["GET /user/codespaces/secrets/{secret_name}/repositories"],
			listSecretsForAuthenticatedUser: ["GET /user/codespaces/secrets"],
			listSelectedReposForOrgSecret: ["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],
			preFlightWithRepoForAuthenticatedUser: ["GET /repos/{owner}/{repo}/codespaces/new"],
			publishForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/publish"],
			removeRepositoryForSecretForAuthenticatedUser: ["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],
			removeSelectedRepoFromOrgSecret: ["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],
			repoMachinesForAuthenticatedUser: ["GET /repos/{owner}/{repo}/codespaces/machines"],
			setRepositoriesForSecretForAuthenticatedUser: ["PUT /user/codespaces/secrets/{secret_name}/repositories"],
			setSelectedReposForOrgSecret: ["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],
			startForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/start"],
			stopForAuthenticatedUser: ["POST /user/codespaces/{codespace_name}/stop"],
			stopInOrganization: ["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],
			updateForAuthenticatedUser: ["PATCH /user/codespaces/{codespace_name}"]
		},
		copilot: {
			addCopilotSeatsForTeams: ["POST /orgs/{org}/copilot/billing/selected_teams"],
			addCopilotSeatsForUsers: ["POST /orgs/{org}/copilot/billing/selected_users"],
			cancelCopilotSeatAssignmentForTeams: ["DELETE /orgs/{org}/copilot/billing/selected_teams"],
			cancelCopilotSeatAssignmentForUsers: ["DELETE /orgs/{org}/copilot/billing/selected_users"],
			getCopilotOrganizationDetails: ["GET /orgs/{org}/copilot/billing"],
			getCopilotSeatDetailsForUser: ["GET /orgs/{org}/members/{username}/copilot"],
			listCopilotSeats: ["GET /orgs/{org}/copilot/billing/seats"]
		},
		dependabot: {
			addSelectedRepoToOrgSecret: ["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],
			createOrUpdateOrgSecret: ["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],
			createOrUpdateRepoSecret: ["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],
			deleteOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],
			deleteRepoSecret: ["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],
			getAlert: ["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],
			getOrgPublicKey: ["GET /orgs/{org}/dependabot/secrets/public-key"],
			getOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}"],
			getRepoPublicKey: ["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],
			getRepoSecret: ["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],
			listAlertsForEnterprise: ["GET /enterprises/{enterprise}/dependabot/alerts"],
			listAlertsForOrg: ["GET /orgs/{org}/dependabot/alerts"],
			listAlertsForRepo: ["GET /repos/{owner}/{repo}/dependabot/alerts"],
			listOrgSecrets: ["GET /orgs/{org}/dependabot/secrets"],
			listRepoSecrets: ["GET /repos/{owner}/{repo}/dependabot/secrets"],
			listSelectedReposForOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],
			removeSelectedRepoFromOrgSecret: ["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],
			setSelectedReposForOrgSecret: ["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],
			updateAlert: ["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]
		},
		dependencyGraph: {
			createRepositorySnapshot: ["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],
			diffRange: ["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],
			exportSbom: ["GET /repos/{owner}/{repo}/dependency-graph/sbom"]
		},
		emojis: { get: ["GET /emojis"] },
		gists: {
			checkIsStarred: ["GET /gists/{gist_id}/star"],
			create: ["POST /gists"],
			createComment: ["POST /gists/{gist_id}/comments"],
			delete: ["DELETE /gists/{gist_id}"],
			deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
			fork: ["POST /gists/{gist_id}/forks"],
			get: ["GET /gists/{gist_id}"],
			getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
			getRevision: ["GET /gists/{gist_id}/{sha}"],
			list: ["GET /gists"],
			listComments: ["GET /gists/{gist_id}/comments"],
			listCommits: ["GET /gists/{gist_id}/commits"],
			listForUser: ["GET /users/{username}/gists"],
			listForks: ["GET /gists/{gist_id}/forks"],
			listPublic: ["GET /gists/public"],
			listStarred: ["GET /gists/starred"],
			star: ["PUT /gists/{gist_id}/star"],
			unstar: ["DELETE /gists/{gist_id}/star"],
			update: ["PATCH /gists/{gist_id}"],
			updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"]
		},
		git: {
			createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
			createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
			createRef: ["POST /repos/{owner}/{repo}/git/refs"],
			createTag: ["POST /repos/{owner}/{repo}/git/tags"],
			createTree: ["POST /repos/{owner}/{repo}/git/trees"],
			deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
			getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
			getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
			getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
			getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
			getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
			listMatchingRefs: ["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],
			updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]
		},
		gitignore: {
			getAllTemplates: ["GET /gitignore/templates"],
			getTemplate: ["GET /gitignore/templates/{name}"]
		},
		interactions: {
			getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
			getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
			getRestrictionsForRepo: ["GET /repos/{owner}/{repo}/interaction-limits"],
			getRestrictionsForYourPublicRepos: [
				"GET /user/interaction-limits",
				{},
				{ renamed: ["interactions", "getRestrictionsForAuthenticatedUser"] }
			],
			removeRestrictionsForAuthenticatedUser: ["DELETE /user/interaction-limits"],
			removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
			removeRestrictionsForRepo: ["DELETE /repos/{owner}/{repo}/interaction-limits"],
			removeRestrictionsForYourPublicRepos: [
				"DELETE /user/interaction-limits",
				{},
				{ renamed: ["interactions", "removeRestrictionsForAuthenticatedUser"] }
			],
			setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
			setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
			setRestrictionsForRepo: ["PUT /repos/{owner}/{repo}/interaction-limits"],
			setRestrictionsForYourPublicRepos: [
				"PUT /user/interaction-limits",
				{},
				{ renamed: ["interactions", "setRestrictionsForAuthenticatedUser"] }
			]
		},
		issues: {
			addAssignees: ["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
			addLabels: ["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],
			checkUserCanBeAssigned: ["GET /repos/{owner}/{repo}/assignees/{assignee}"],
			checkUserCanBeAssignedToIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],
			create: ["POST /repos/{owner}/{repo}/issues"],
			createComment: ["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],
			createLabel: ["POST /repos/{owner}/{repo}/labels"],
			createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
			deleteComment: ["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],
			deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
			deleteMilestone: ["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],
			get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
			getComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],
			getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
			getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
			getMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],
			list: ["GET /issues"],
			listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
			listComments: ["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],
			listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
			listEvents: ["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],
			listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
			listEventsForTimeline: ["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],
			listForAuthenticatedUser: ["GET /user/issues"],
			listForOrg: ["GET /orgs/{org}/issues"],
			listForRepo: ["GET /repos/{owner}/{repo}/issues"],
			listLabelsForMilestone: ["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],
			listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
			listLabelsOnIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],
			listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
			lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
			removeAllLabels: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],
			removeAssignees: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],
			removeLabel: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],
			setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
			unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
			update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
			updateComment: ["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],
			updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
			updateMilestone: ["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]
		},
		licenses: {
			get: ["GET /licenses/{license}"],
			getAllCommonlyUsed: ["GET /licenses"],
			getForRepo: ["GET /repos/{owner}/{repo}/license"]
		},
		markdown: {
			render: ["POST /markdown"],
			renderRaw: ["POST /markdown/raw", { headers: { "content-type": "text/plain; charset=utf-8" } }]
		},
		meta: {
			get: ["GET /meta"],
			getAllVersions: ["GET /versions"],
			getOctocat: ["GET /octocat"],
			getZen: ["GET /zen"],
			root: ["GET /"]
		},
		migrations: {
			cancelImport: [
				"DELETE /repos/{owner}/{repo}/import",
				{},
				{ deprecated: "octokit.rest.migrations.cancelImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#cancel-an-import" }
			],
			deleteArchiveForAuthenticatedUser: ["DELETE /user/migrations/{migration_id}/archive"],
			deleteArchiveForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/archive"],
			downloadArchiveForOrg: ["GET /orgs/{org}/migrations/{migration_id}/archive"],
			getArchiveForAuthenticatedUser: ["GET /user/migrations/{migration_id}/archive"],
			getCommitAuthors: [
				"GET /repos/{owner}/{repo}/import/authors",
				{},
				{ deprecated: "octokit.rest.migrations.getCommitAuthors() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-commit-authors" }
			],
			getImportStatus: [
				"GET /repos/{owner}/{repo}/import",
				{},
				{ deprecated: "octokit.rest.migrations.getImportStatus() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-an-import-status" }
			],
			getLargeFiles: [
				"GET /repos/{owner}/{repo}/import/large_files",
				{},
				{ deprecated: "octokit.rest.migrations.getLargeFiles() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-large-files" }
			],
			getStatusForAuthenticatedUser: ["GET /user/migrations/{migration_id}"],
			getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
			listForAuthenticatedUser: ["GET /user/migrations"],
			listForOrg: ["GET /orgs/{org}/migrations"],
			listReposForAuthenticatedUser: ["GET /user/migrations/{migration_id}/repositories"],
			listReposForOrg: ["GET /orgs/{org}/migrations/{migration_id}/repositories"],
			listReposForUser: [
				"GET /user/migrations/{migration_id}/repositories",
				{},
				{ renamed: ["migrations", "listReposForAuthenticatedUser"] }
			],
			mapCommitAuthor: [
				"PATCH /repos/{owner}/{repo}/import/authors/{author_id}",
				{},
				{ deprecated: "octokit.rest.migrations.mapCommitAuthor() is deprecated, see https://docs.github.com/rest/migrations/source-imports#map-a-commit-author" }
			],
			setLfsPreference: [
				"PATCH /repos/{owner}/{repo}/import/lfs",
				{},
				{ deprecated: "octokit.rest.migrations.setLfsPreference() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference" }
			],
			startForAuthenticatedUser: ["POST /user/migrations"],
			startForOrg: ["POST /orgs/{org}/migrations"],
			startImport: [
				"PUT /repos/{owner}/{repo}/import",
				{},
				{ deprecated: "octokit.rest.migrations.startImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#start-an-import" }
			],
			unlockRepoForAuthenticatedUser: ["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],
			unlockRepoForOrg: ["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],
			updateImport: [
				"PATCH /repos/{owner}/{repo}/import",
				{},
				{ deprecated: "octokit.rest.migrations.updateImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-an-import" }
			]
		},
		oidc: {
			getOidcCustomSubTemplateForOrg: ["GET /orgs/{org}/actions/oidc/customization/sub"],
			updateOidcCustomSubTemplateForOrg: ["PUT /orgs/{org}/actions/oidc/customization/sub"]
		},
		orgs: {
			addSecurityManagerTeam: ["PUT /orgs/{org}/security-managers/teams/{team_slug}"],
			assignTeamToOrgRole: ["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],
			assignUserToOrgRole: ["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],
			blockUser: ["PUT /orgs/{org}/blocks/{username}"],
			cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
			checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
			checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
			checkPublicMembershipForUser: ["GET /orgs/{org}/public_members/{username}"],
			convertMemberToOutsideCollaborator: ["PUT /orgs/{org}/outside_collaborators/{username}"],
			createCustomOrganizationRole: ["POST /orgs/{org}/organization-roles"],
			createInvitation: ["POST /orgs/{org}/invitations"],
			createOrUpdateCustomProperties: ["PATCH /orgs/{org}/properties/schema"],
			createOrUpdateCustomPropertiesValuesForRepos: ["PATCH /orgs/{org}/properties/values"],
			createOrUpdateCustomProperty: ["PUT /orgs/{org}/properties/schema/{custom_property_name}"],
			createWebhook: ["POST /orgs/{org}/hooks"],
			delete: ["DELETE /orgs/{org}"],
			deleteCustomOrganizationRole: ["DELETE /orgs/{org}/organization-roles/{role_id}"],
			deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
			enableOrDisableSecurityProductOnAllOrgRepos: ["POST /orgs/{org}/{security_product}/{enablement}"],
			get: ["GET /orgs/{org}"],
			getAllCustomProperties: ["GET /orgs/{org}/properties/schema"],
			getCustomProperty: ["GET /orgs/{org}/properties/schema/{custom_property_name}"],
			getMembershipForAuthenticatedUser: ["GET /user/memberships/orgs/{org}"],
			getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
			getOrgRole: ["GET /orgs/{org}/organization-roles/{role_id}"],
			getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
			getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
			getWebhookDelivery: ["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],
			list: ["GET /organizations"],
			listAppInstallations: ["GET /orgs/{org}/installations"],
			listBlockedUsers: ["GET /orgs/{org}/blocks"],
			listCustomPropertiesValuesForRepos: ["GET /orgs/{org}/properties/values"],
			listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
			listForAuthenticatedUser: ["GET /user/orgs"],
			listForUser: ["GET /users/{username}/orgs"],
			listInvitationTeams: ["GET /orgs/{org}/invitations/{invitation_id}/teams"],
			listMembers: ["GET /orgs/{org}/members"],
			listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
			listOrgRoleTeams: ["GET /orgs/{org}/organization-roles/{role_id}/teams"],
			listOrgRoleUsers: ["GET /orgs/{org}/organization-roles/{role_id}/users"],
			listOrgRoles: ["GET /orgs/{org}/organization-roles"],
			listOrganizationFineGrainedPermissions: ["GET /orgs/{org}/organization-fine-grained-permissions"],
			listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
			listPatGrantRepositories: ["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],
			listPatGrantRequestRepositories: ["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],
			listPatGrantRequests: ["GET /orgs/{org}/personal-access-token-requests"],
			listPatGrants: ["GET /orgs/{org}/personal-access-tokens"],
			listPendingInvitations: ["GET /orgs/{org}/invitations"],
			listPublicMembers: ["GET /orgs/{org}/public_members"],
			listSecurityManagerTeams: ["GET /orgs/{org}/security-managers"],
			listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
			listWebhooks: ["GET /orgs/{org}/hooks"],
			patchCustomOrganizationRole: ["PATCH /orgs/{org}/organization-roles/{role_id}"],
			pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
			redeliverWebhookDelivery: ["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],
			removeCustomProperty: ["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],
			removeMember: ["DELETE /orgs/{org}/members/{username}"],
			removeMembershipForUser: ["DELETE /orgs/{org}/memberships/{username}"],
			removeOutsideCollaborator: ["DELETE /orgs/{org}/outside_collaborators/{username}"],
			removePublicMembershipForAuthenticatedUser: ["DELETE /orgs/{org}/public_members/{username}"],
			removeSecurityManagerTeam: ["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],
			reviewPatGrantRequest: ["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],
			reviewPatGrantRequestsInBulk: ["POST /orgs/{org}/personal-access-token-requests"],
			revokeAllOrgRolesTeam: ["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],
			revokeAllOrgRolesUser: ["DELETE /orgs/{org}/organization-roles/users/{username}"],
			revokeOrgRoleTeam: ["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],
			revokeOrgRoleUser: ["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],
			setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
			setPublicMembershipForAuthenticatedUser: ["PUT /orgs/{org}/public_members/{username}"],
			unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
			update: ["PATCH /orgs/{org}"],
			updateMembershipForAuthenticatedUser: ["PATCH /user/memberships/orgs/{org}"],
			updatePatAccess: ["POST /orgs/{org}/personal-access-tokens/{pat_id}"],
			updatePatAccesses: ["POST /orgs/{org}/personal-access-tokens"],
			updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
			updateWebhookConfigForOrg: ["PATCH /orgs/{org}/hooks/{hook_id}/config"]
		},
		packages: {
			deletePackageForAuthenticatedUser: ["DELETE /user/packages/{package_type}/{package_name}"],
			deletePackageForOrg: ["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],
			deletePackageForUser: ["DELETE /users/{username}/packages/{package_type}/{package_name}"],
			deletePackageVersionForAuthenticatedUser: ["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],
			deletePackageVersionForOrg: ["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
			deletePackageVersionForUser: ["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
			getAllPackageVersionsForAPackageOwnedByAnOrg: [
				"GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
				{},
				{ renamed: ["packages", "getAllPackageVersionsForPackageOwnedByOrg"] }
			],
			getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
				"GET /user/packages/{package_type}/{package_name}/versions",
				{},
				{ renamed: ["packages", "getAllPackageVersionsForPackageOwnedByAuthenticatedUser"] }
			],
			getAllPackageVersionsForPackageOwnedByAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}/versions"],
			getAllPackageVersionsForPackageOwnedByOrg: ["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],
			getAllPackageVersionsForPackageOwnedByUser: ["GET /users/{username}/packages/{package_type}/{package_name}/versions"],
			getPackageForAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}"],
			getPackageForOrganization: ["GET /orgs/{org}/packages/{package_type}/{package_name}"],
			getPackageForUser: ["GET /users/{username}/packages/{package_type}/{package_name}"],
			getPackageVersionForAuthenticatedUser: ["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],
			getPackageVersionForOrganization: ["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
			getPackageVersionForUser: ["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],
			listDockerMigrationConflictingPackagesForAuthenticatedUser: ["GET /user/docker/conflicts"],
			listDockerMigrationConflictingPackagesForOrganization: ["GET /orgs/{org}/docker/conflicts"],
			listDockerMigrationConflictingPackagesForUser: ["GET /users/{username}/docker/conflicts"],
			listPackagesForAuthenticatedUser: ["GET /user/packages"],
			listPackagesForOrganization: ["GET /orgs/{org}/packages"],
			listPackagesForUser: ["GET /users/{username}/packages"],
			restorePackageForAuthenticatedUser: ["POST /user/packages/{package_type}/{package_name}/restore{?token}"],
			restorePackageForOrg: ["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],
			restorePackageForUser: ["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],
			restorePackageVersionForAuthenticatedUser: ["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],
			restorePackageVersionForOrg: ["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],
			restorePackageVersionForUser: ["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]
		},
		projects: {
			addCollaborator: ["PUT /projects/{project_id}/collaborators/{username}"],
			createCard: ["POST /projects/columns/{column_id}/cards"],
			createColumn: ["POST /projects/{project_id}/columns"],
			createForAuthenticatedUser: ["POST /user/projects"],
			createForOrg: ["POST /orgs/{org}/projects"],
			createForRepo: ["POST /repos/{owner}/{repo}/projects"],
			delete: ["DELETE /projects/{project_id}"],
			deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
			deleteColumn: ["DELETE /projects/columns/{column_id}"],
			get: ["GET /projects/{project_id}"],
			getCard: ["GET /projects/columns/cards/{card_id}"],
			getColumn: ["GET /projects/columns/{column_id}"],
			getPermissionForUser: ["GET /projects/{project_id}/collaborators/{username}/permission"],
			listCards: ["GET /projects/columns/{column_id}/cards"],
			listCollaborators: ["GET /projects/{project_id}/collaborators"],
			listColumns: ["GET /projects/{project_id}/columns"],
			listForOrg: ["GET /orgs/{org}/projects"],
			listForRepo: ["GET /repos/{owner}/{repo}/projects"],
			listForUser: ["GET /users/{username}/projects"],
			moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
			moveColumn: ["POST /projects/columns/{column_id}/moves"],
			removeCollaborator: ["DELETE /projects/{project_id}/collaborators/{username}"],
			update: ["PATCH /projects/{project_id}"],
			updateCard: ["PATCH /projects/columns/cards/{card_id}"],
			updateColumn: ["PATCH /projects/columns/{column_id}"]
		},
		pulls: {
			checkIfMerged: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
			create: ["POST /repos/{owner}/{repo}/pulls"],
			createReplyForReviewComment: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],
			createReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
			createReviewComment: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
			deletePendingReview: ["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
			deleteReviewComment: ["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
			dismissReview: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],
			get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
			getReview: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
			getReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],
			list: ["GET /repos/{owner}/{repo}/pulls"],
			listCommentsForReview: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],
			listCommits: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],
			listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
			listRequestedReviewers: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
			listReviewComments: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],
			listReviewCommentsForRepo: ["GET /repos/{owner}/{repo}/pulls/comments"],
			listReviews: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],
			merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
			removeRequestedReviewers: ["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
			requestReviewers: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],
			submitReview: ["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],
			update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
			updateBranch: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],
			updateReview: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],
			updateReviewComment: ["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]
		},
		rateLimit: { get: ["GET /rate_limit"] },
		reactions: {
			createForCommitComment: ["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],
			createForIssue: ["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
			createForIssueComment: ["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],
			createForPullRequestReviewComment: ["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],
			createForRelease: ["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],
			createForTeamDiscussionCommentInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],
			createForTeamDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],
			deleteForCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],
			deleteForIssue: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],
			deleteForIssueComment: ["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],
			deleteForPullRequestComment: ["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],
			deleteForRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],
			deleteForTeamDiscussion: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],
			deleteForTeamDiscussionComment: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],
			listForCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],
			listForIssue: ["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],
			listForIssueComment: ["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],
			listForPullRequestReviewComment: ["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],
			listForRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],
			listForTeamDiscussionCommentInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],
			listForTeamDiscussionInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]
		},
		repos: {
			acceptInvitation: [
				"PATCH /user/repository_invitations/{invitation_id}",
				{},
				{ renamed: ["repos", "acceptInvitationForAuthenticatedUser"] }
			],
			acceptInvitationForAuthenticatedUser: ["PATCH /user/repository_invitations/{invitation_id}"],
			addAppAccessRestrictions: [
				"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
				{},
				{ mapToData: "apps" }
			],
			addCollaborator: ["PUT /repos/{owner}/{repo}/collaborators/{username}"],
			addStatusCheckContexts: [
				"POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
				{},
				{ mapToData: "contexts" }
			],
			addTeamAccessRestrictions: [
				"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
				{},
				{ mapToData: "teams" }
			],
			addUserAccessRestrictions: [
				"POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
				{},
				{ mapToData: "users" }
			],
			cancelPagesDeployment: ["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],
			checkAutomatedSecurityFixes: ["GET /repos/{owner}/{repo}/automated-security-fixes"],
			checkCollaborator: ["GET /repos/{owner}/{repo}/collaborators/{username}"],
			checkVulnerabilityAlerts: ["GET /repos/{owner}/{repo}/vulnerability-alerts"],
			codeownersErrors: ["GET /repos/{owner}/{repo}/codeowners/errors"],
			compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
			compareCommitsWithBasehead: ["GET /repos/{owner}/{repo}/compare/{basehead}"],
			createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
			createCommitComment: ["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
			createCommitSignatureProtection: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
			createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
			createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
			createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
			createDeploymentBranchPolicy: ["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],
			createDeploymentProtectionRule: ["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],
			createDeploymentStatus: ["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],
			createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
			createForAuthenticatedUser: ["POST /user/repos"],
			createFork: ["POST /repos/{owner}/{repo}/forks"],
			createInOrg: ["POST /orgs/{org}/repos"],
			createOrUpdateCustomPropertiesValues: ["PATCH /repos/{owner}/{repo}/properties/values"],
			createOrUpdateEnvironment: ["PUT /repos/{owner}/{repo}/environments/{environment_name}"],
			createOrUpdateFileContents: ["PUT /repos/{owner}/{repo}/contents/{path}"],
			createOrgRuleset: ["POST /orgs/{org}/rulesets"],
			createPagesDeployment: ["POST /repos/{owner}/{repo}/pages/deployments"],
			createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
			createRelease: ["POST /repos/{owner}/{repo}/releases"],
			createRepoRuleset: ["POST /repos/{owner}/{repo}/rulesets"],
			createTagProtection: ["POST /repos/{owner}/{repo}/tags/protection"],
			createUsingTemplate: ["POST /repos/{template_owner}/{template_repo}/generate"],
			createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
			declineInvitation: [
				"DELETE /user/repository_invitations/{invitation_id}",
				{},
				{ renamed: ["repos", "declineInvitationForAuthenticatedUser"] }
			],
			declineInvitationForAuthenticatedUser: ["DELETE /user/repository_invitations/{invitation_id}"],
			delete: ["DELETE /repos/{owner}/{repo}"],
			deleteAccessRestrictions: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],
			deleteAdminBranchProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
			deleteAnEnvironment: ["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],
			deleteAutolink: ["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],
			deleteBranchProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],
			deleteCommitComment: ["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],
			deleteCommitSignatureProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
			deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
			deleteDeployment: ["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],
			deleteDeploymentBranchPolicy: ["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],
			deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
			deleteInvitation: ["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],
			deleteOrgRuleset: ["DELETE /orgs/{org}/rulesets/{ruleset_id}"],
			deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
			deletePullRequestReviewProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
			deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
			deleteReleaseAsset: ["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],
			deleteRepoRuleset: ["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
			deleteTagProtection: ["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],
			deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
			disableAutomatedSecurityFixes: ["DELETE /repos/{owner}/{repo}/automated-security-fixes"],
			disableDeploymentProtectionRule: ["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],
			disablePrivateVulnerabilityReporting: ["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],
			disableVulnerabilityAlerts: ["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],
			downloadArchive: [
				"GET /repos/{owner}/{repo}/zipball/{ref}",
				{},
				{ renamed: ["repos", "downloadZipballArchive"] }
			],
			downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
			downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
			enableAutomatedSecurityFixes: ["PUT /repos/{owner}/{repo}/automated-security-fixes"],
			enablePrivateVulnerabilityReporting: ["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],
			enableVulnerabilityAlerts: ["PUT /repos/{owner}/{repo}/vulnerability-alerts"],
			generateReleaseNotes: ["POST /repos/{owner}/{repo}/releases/generate-notes"],
			get: ["GET /repos/{owner}/{repo}"],
			getAccessRestrictions: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],
			getAdminBranchProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
			getAllDeploymentProtectionRules: ["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],
			getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
			getAllStatusCheckContexts: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],
			getAllTopics: ["GET /repos/{owner}/{repo}/topics"],
			getAppsWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],
			getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
			getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
			getBranchProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection"],
			getBranchRules: ["GET /repos/{owner}/{repo}/rules/branches/{branch}"],
			getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
			getCodeFrequencyStats: ["GET /repos/{owner}/{repo}/stats/code_frequency"],
			getCollaboratorPermissionLevel: ["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],
			getCombinedStatusForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/status"],
			getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
			getCommitActivityStats: ["GET /repos/{owner}/{repo}/stats/commit_activity"],
			getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
			getCommitSignatureProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],
			getCommunityProfileMetrics: ["GET /repos/{owner}/{repo}/community/profile"],
			getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
			getContributorsStats: ["GET /repos/{owner}/{repo}/stats/contributors"],
			getCustomDeploymentProtectionRule: ["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],
			getCustomPropertiesValues: ["GET /repos/{owner}/{repo}/properties/values"],
			getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
			getDeployment: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],
			getDeploymentBranchPolicy: ["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],
			getDeploymentStatus: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],
			getEnvironment: ["GET /repos/{owner}/{repo}/environments/{environment_name}"],
			getLatestPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/latest"],
			getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
			getOrgRuleSuite: ["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],
			getOrgRuleSuites: ["GET /orgs/{org}/rulesets/rule-suites"],
			getOrgRuleset: ["GET /orgs/{org}/rulesets/{ruleset_id}"],
			getOrgRulesets: ["GET /orgs/{org}/rulesets"],
			getPages: ["GET /repos/{owner}/{repo}/pages"],
			getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
			getPagesDeployment: ["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],
			getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
			getParticipationStats: ["GET /repos/{owner}/{repo}/stats/participation"],
			getPullRequestReviewProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
			getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
			getReadme: ["GET /repos/{owner}/{repo}/readme"],
			getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
			getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
			getReleaseAsset: ["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],
			getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
			getRepoRuleSuite: ["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],
			getRepoRuleSuites: ["GET /repos/{owner}/{repo}/rulesets/rule-suites"],
			getRepoRuleset: ["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
			getRepoRulesets: ["GET /repos/{owner}/{repo}/rulesets"],
			getStatusChecksProtection: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
			getTeamsWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],
			getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
			getTopReferrers: ["GET /repos/{owner}/{repo}/traffic/popular/referrers"],
			getUsersWithAccessToProtectedBranch: ["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],
			getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
			getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
			getWebhookConfigForRepo: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],
			getWebhookDelivery: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],
			listActivities: ["GET /repos/{owner}/{repo}/activity"],
			listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
			listBranches: ["GET /repos/{owner}/{repo}/branches"],
			listBranchesForHeadCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],
			listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
			listCommentsForCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],
			listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
			listCommitStatusesForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],
			listCommits: ["GET /repos/{owner}/{repo}/commits"],
			listContributors: ["GET /repos/{owner}/{repo}/contributors"],
			listCustomDeploymentRuleIntegrations: ["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],
			listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
			listDeploymentBranchPolicies: ["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],
			listDeploymentStatuses: ["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],
			listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
			listForAuthenticatedUser: ["GET /user/repos"],
			listForOrg: ["GET /orgs/{org}/repos"],
			listForUser: ["GET /users/{username}/repos"],
			listForks: ["GET /repos/{owner}/{repo}/forks"],
			listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
			listInvitationsForAuthenticatedUser: ["GET /user/repository_invitations"],
			listLanguages: ["GET /repos/{owner}/{repo}/languages"],
			listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
			listPublic: ["GET /repositories"],
			listPullRequestsAssociatedWithCommit: ["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],
			listReleaseAssets: ["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],
			listReleases: ["GET /repos/{owner}/{repo}/releases"],
			listTagProtection: ["GET /repos/{owner}/{repo}/tags/protection"],
			listTags: ["GET /repos/{owner}/{repo}/tags"],
			listTeams: ["GET /repos/{owner}/{repo}/teams"],
			listWebhookDeliveries: ["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],
			listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
			merge: ["POST /repos/{owner}/{repo}/merges"],
			mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
			pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
			redeliverWebhookDelivery: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],
			removeAppAccessRestrictions: [
				"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
				{},
				{ mapToData: "apps" }
			],
			removeCollaborator: ["DELETE /repos/{owner}/{repo}/collaborators/{username}"],
			removeStatusCheckContexts: [
				"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
				{},
				{ mapToData: "contexts" }
			],
			removeStatusCheckProtection: ["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
			removeTeamAccessRestrictions: [
				"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
				{},
				{ mapToData: "teams" }
			],
			removeUserAccessRestrictions: [
				"DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
				{},
				{ mapToData: "users" }
			],
			renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
			replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics"],
			requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
			setAdminBranchProtection: ["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],
			setAppAccessRestrictions: [
				"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
				{},
				{ mapToData: "apps" }
			],
			setStatusCheckContexts: [
				"PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
				{},
				{ mapToData: "contexts" }
			],
			setTeamAccessRestrictions: [
				"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
				{},
				{ mapToData: "teams" }
			],
			setUserAccessRestrictions: [
				"PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
				{},
				{ mapToData: "users" }
			],
			testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
			transfer: ["POST /repos/{owner}/{repo}/transfer"],
			update: ["PATCH /repos/{owner}/{repo}"],
			updateBranchProtection: ["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],
			updateCommitComment: ["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],
			updateDeploymentBranchPolicy: ["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],
			updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
			updateInvitation: ["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],
			updateOrgRuleset: ["PUT /orgs/{org}/rulesets/{ruleset_id}"],
			updatePullRequestReviewProtection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],
			updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
			updateReleaseAsset: ["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],
			updateRepoRuleset: ["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
			updateStatusCheckPotection: [
				"PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
				{},
				{ renamed: ["repos", "updateStatusCheckProtection"] }
			],
			updateStatusCheckProtection: ["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],
			updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
			updateWebhookConfigForRepo: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],
			uploadReleaseAsset: ["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}", { baseUrl: "https://uploads.github.com" }]
		},
		search: {
			code: ["GET /search/code"],
			commits: ["GET /search/commits"],
			issuesAndPullRequests: ["GET /search/issues"],
			labels: ["GET /search/labels"],
			repos: ["GET /search/repositories"],
			topics: ["GET /search/topics"],
			users: ["GET /search/users"]
		},
		secretScanning: {
			getAlert: ["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],
			listAlertsForEnterprise: ["GET /enterprises/{enterprise}/secret-scanning/alerts"],
			listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
			listAlertsForRepo: ["GET /repos/{owner}/{repo}/secret-scanning/alerts"],
			listLocationsForAlert: ["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],
			updateAlert: ["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]
		},
		securityAdvisories: {
			createFork: ["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],
			createPrivateVulnerabilityReport: ["POST /repos/{owner}/{repo}/security-advisories/reports"],
			createRepositoryAdvisory: ["POST /repos/{owner}/{repo}/security-advisories"],
			createRepositoryAdvisoryCveRequest: ["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],
			getGlobalAdvisory: ["GET /advisories/{ghsa_id}"],
			getRepositoryAdvisory: ["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],
			listGlobalAdvisories: ["GET /advisories"],
			listOrgRepositoryAdvisories: ["GET /orgs/{org}/security-advisories"],
			listRepositoryAdvisories: ["GET /repos/{owner}/{repo}/security-advisories"],
			updateRepositoryAdvisory: ["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]
		},
		teams: {
			addOrUpdateMembershipForUserInOrg: ["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],
			addOrUpdateProjectPermissionsInOrg: ["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
			addOrUpdateRepoPermissionsInOrg: ["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
			checkPermissionsForProjectInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
			checkPermissionsForRepoInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
			create: ["POST /orgs/{org}/teams"],
			createDiscussionCommentInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],
			createDiscussionInOrg: ["POST /orgs/{org}/teams/{team_slug}/discussions"],
			deleteDiscussionCommentInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
			deleteDiscussionInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
			deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
			getByName: ["GET /orgs/{org}/teams/{team_slug}"],
			getDiscussionCommentInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
			getDiscussionInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
			getMembershipForUserInOrg: ["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],
			list: ["GET /orgs/{org}/teams"],
			listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
			listDiscussionCommentsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],
			listDiscussionsInOrg: ["GET /orgs/{org}/teams/{team_slug}/discussions"],
			listForAuthenticatedUser: ["GET /user/teams"],
			listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
			listPendingInvitationsInOrg: ["GET /orgs/{org}/teams/{team_slug}/invitations"],
			listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
			listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
			removeMembershipForUserInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],
			removeProjectInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],
			removeRepoInOrg: ["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],
			updateDiscussionCommentInOrg: ["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],
			updateDiscussionInOrg: ["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],
			updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"]
		},
		users: {
			addEmailForAuthenticated: [
				"POST /user/emails",
				{},
				{ renamed: ["users", "addEmailForAuthenticatedUser"] }
			],
			addEmailForAuthenticatedUser: ["POST /user/emails"],
			addSocialAccountForAuthenticatedUser: ["POST /user/social_accounts"],
			block: ["PUT /user/blocks/{username}"],
			checkBlocked: ["GET /user/blocks/{username}"],
			checkFollowingForUser: ["GET /users/{username}/following/{target_user}"],
			checkPersonIsFollowedByAuthenticated: ["GET /user/following/{username}"],
			createGpgKeyForAuthenticated: [
				"POST /user/gpg_keys",
				{},
				{ renamed: ["users", "createGpgKeyForAuthenticatedUser"] }
			],
			createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
			createPublicSshKeyForAuthenticated: [
				"POST /user/keys",
				{},
				{ renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] }
			],
			createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
			createSshSigningKeyForAuthenticatedUser: ["POST /user/ssh_signing_keys"],
			deleteEmailForAuthenticated: [
				"DELETE /user/emails",
				{},
				{ renamed: ["users", "deleteEmailForAuthenticatedUser"] }
			],
			deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
			deleteGpgKeyForAuthenticated: [
				"DELETE /user/gpg_keys/{gpg_key_id}",
				{},
				{ renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] }
			],
			deleteGpgKeyForAuthenticatedUser: ["DELETE /user/gpg_keys/{gpg_key_id}"],
			deletePublicSshKeyForAuthenticated: [
				"DELETE /user/keys/{key_id}",
				{},
				{ renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] }
			],
			deletePublicSshKeyForAuthenticatedUser: ["DELETE /user/keys/{key_id}"],
			deleteSocialAccountForAuthenticatedUser: ["DELETE /user/social_accounts"],
			deleteSshSigningKeyForAuthenticatedUser: ["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],
			follow: ["PUT /user/following/{username}"],
			getAuthenticated: ["GET /user"],
			getByUsername: ["GET /users/{username}"],
			getContextForUser: ["GET /users/{username}/hovercard"],
			getGpgKeyForAuthenticated: [
				"GET /user/gpg_keys/{gpg_key_id}",
				{},
				{ renamed: ["users", "getGpgKeyForAuthenticatedUser"] }
			],
			getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
			getPublicSshKeyForAuthenticated: [
				"GET /user/keys/{key_id}",
				{},
				{ renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] }
			],
			getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
			getSshSigningKeyForAuthenticatedUser: ["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],
			list: ["GET /users"],
			listBlockedByAuthenticated: [
				"GET /user/blocks",
				{},
				{ renamed: ["users", "listBlockedByAuthenticatedUser"] }
			],
			listBlockedByAuthenticatedUser: ["GET /user/blocks"],
			listEmailsForAuthenticated: [
				"GET /user/emails",
				{},
				{ renamed: ["users", "listEmailsForAuthenticatedUser"] }
			],
			listEmailsForAuthenticatedUser: ["GET /user/emails"],
			listFollowedByAuthenticated: [
				"GET /user/following",
				{},
				{ renamed: ["users", "listFollowedByAuthenticatedUser"] }
			],
			listFollowedByAuthenticatedUser: ["GET /user/following"],
			listFollowersForAuthenticatedUser: ["GET /user/followers"],
			listFollowersForUser: ["GET /users/{username}/followers"],
			listFollowingForUser: ["GET /users/{username}/following"],
			listGpgKeysForAuthenticated: [
				"GET /user/gpg_keys",
				{},
				{ renamed: ["users", "listGpgKeysForAuthenticatedUser"] }
			],
			listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
			listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
			listPublicEmailsForAuthenticated: [
				"GET /user/public_emails",
				{},
				{ renamed: ["users", "listPublicEmailsForAuthenticatedUser"] }
			],
			listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
			listPublicKeysForUser: ["GET /users/{username}/keys"],
			listPublicSshKeysForAuthenticated: [
				"GET /user/keys",
				{},
				{ renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] }
			],
			listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
			listSocialAccountsForAuthenticatedUser: ["GET /user/social_accounts"],
			listSocialAccountsForUser: ["GET /users/{username}/social_accounts"],
			listSshSigningKeysForAuthenticatedUser: ["GET /user/ssh_signing_keys"],
			listSshSigningKeysForUser: ["GET /users/{username}/ssh_signing_keys"],
			setPrimaryEmailVisibilityForAuthenticated: [
				"PATCH /user/email/visibility",
				{},
				{ renamed: ["users", "setPrimaryEmailVisibilityForAuthenticatedUser"] }
			],
			setPrimaryEmailVisibilityForAuthenticatedUser: ["PATCH /user/email/visibility"],
			unblock: ["DELETE /user/blocks/{username}"],
			unfollow: ["DELETE /user/following/{username}"],
			updateAuthenticated: ["PATCH /user"]
		}
	};
	var endpoints_default = Endpoints;
	var endpointMethodsMap = /* @__PURE__ */ new Map();
	for (const [scope, endpoints] of Object.entries(endpoints_default)) for (const [methodName, endpoint$1] of Object.entries(endpoints)) {
		const [route, defaults, decorations] = endpoint$1;
		const [method, url] = route.split(/ /);
		const endpointDefaults = Object.assign({
			method,
			url
		}, defaults);
		if (!endpointMethodsMap.has(scope)) endpointMethodsMap.set(scope, /* @__PURE__ */ new Map());
		endpointMethodsMap.get(scope).set(methodName, {
			scope,
			methodName,
			endpointDefaults,
			decorations
		});
	}
	var handler = {
		has({ scope }, methodName) {
			return endpointMethodsMap.get(scope).has(methodName);
		},
		getOwnPropertyDescriptor(target, methodName) {
			return {
				value: this.get(target, methodName),
				configurable: true,
				writable: true,
				enumerable: true
			};
		},
		defineProperty(target, methodName, descriptor) {
			Object.defineProperty(target.cache, methodName, descriptor);
			return true;
		},
		deleteProperty(target, methodName) {
			delete target.cache[methodName];
			return true;
		},
		ownKeys({ scope }) {
			return [...endpointMethodsMap.get(scope).keys()];
		},
		set(target, methodName, value) {
			return target.cache[methodName] = value;
		},
		get({ octokit, scope, cache }, methodName) {
			if (cache[methodName]) return cache[methodName];
			const method = endpointMethodsMap.get(scope).get(methodName);
			if (!method) return void 0;
			const { endpointDefaults, decorations } = method;
			if (decorations) cache[methodName] = decorate(octokit, scope, methodName, endpointDefaults, decorations);
			else cache[methodName] = octokit.request.defaults(endpointDefaults);
			return cache[methodName];
		}
	};
	function endpointsToMethods(octokit) {
		const newMethods = {};
		for (const scope of endpointMethodsMap.keys()) newMethods[scope] = new Proxy({
			octokit,
			scope,
			cache: {}
		}, handler);
		return newMethods;
	}
	function decorate(octokit, scope, methodName, defaults, decorations) {
		const requestWithDefaults = octokit.request.defaults(defaults);
		function withDecorations(...args) {
			let options = requestWithDefaults.endpoint.merge(...args);
			if (decorations.mapToData) {
				options = Object.assign({}, options, {
					data: options[decorations.mapToData],
					[decorations.mapToData]: void 0
				});
				return requestWithDefaults(options);
			}
			if (decorations.renamed) {
				const [newScope, newMethodName] = decorations.renamed;
				octokit.log.warn(`octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`);
			}
			if (decorations.deprecated) octokit.log.warn(decorations.deprecated);
			if (decorations.renamedParameters) {
				const options2 = requestWithDefaults.endpoint.merge(...args);
				for (const [name$2, alias] of Object.entries(decorations.renamedParameters)) if (name$2 in options2) {
					octokit.log.warn(`"${name$2}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`);
					if (!(alias in options2)) options2[alias] = options2[name$2];
					delete options2[name$2];
				}
				return requestWithDefaults(options2);
			}
			return requestWithDefaults(...args);
		}
		return Object.assign(withDecorations, requestWithDefaults);
	}
	function restEndpointMethods(octokit) {
		const api$2 = endpointsToMethods(octokit);
		return { rest: api$2 };
	}
	restEndpointMethods.VERSION = VERSION$3;
	function legacyRestEndpointMethods(octokit) {
		const api$2 = endpointsToMethods(octokit);
		return {
			...api$2,
			rest: api$2
		};
	}
	legacyRestEndpointMethods.VERSION = VERSION$3;
} });

//#endregion
//#region node_modules/.pnpm/@octokit+plugin-paginate-rest@9.2.2_@octokit+core@5.2.0/node_modules/@octokit/plugin-paginate-rest/dist-node/index.js
var require_dist_node = __commonJS({ "node_modules/.pnpm/@octokit+plugin-paginate-rest@9.2.2_@octokit+core@5.2.0/node_modules/@octokit/plugin-paginate-rest/dist-node/index.js"(exports, module) {
	var __defProp$1 = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export$1 = (target, all) => {
		for (var name$2 in all) __defProp$1(target, name$2, {
			get: all[name$2],
			enumerable: true
		});
	};
	var __copyProps = (to$1, from, except, desc) => {
		if (from && typeof from === "object" || typeof from === "function") {
			for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to$1, key) && key !== except) __defProp$1(to$1, key, {
				get: () => from[key],
				enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
			});
		}
		return to$1;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp$1({}, "__esModule", { value: true }), mod);
	var dist_src_exports = {};
	__export$1(dist_src_exports, {
		composePaginateRest: () => composePaginateRest,
		isPaginatingEndpoint: () => isPaginatingEndpoint,
		paginateRest: () => paginateRest,
		paginatingEndpoints: () => paginatingEndpoints
	});
	module.exports = __toCommonJS(dist_src_exports);
	var VERSION$2 = "9.2.2";
	function normalizePaginatedListResponse(response) {
		if (!response.data) return {
			...response,
			data: []
		};
		const responseNeedsNormalization = "total_count" in response.data && !("url" in response.data);
		if (!responseNeedsNormalization) return response;
		const incompleteResults = response.data.incomplete_results;
		const repositorySelection = response.data.repository_selection;
		const totalCount = response.data.total_count;
		delete response.data.incomplete_results;
		delete response.data.repository_selection;
		delete response.data.total_count;
		const namespaceKey = Object.keys(response.data)[0];
		const data$1 = response.data[namespaceKey];
		response.data = data$1;
		if (typeof incompleteResults !== "undefined") response.data.incomplete_results = incompleteResults;
		if (typeof repositorySelection !== "undefined") response.data.repository_selection = repositorySelection;
		response.data.total_count = totalCount;
		return response;
	}
	function iterator(octokit, route, parameters) {
		const options = typeof route === "function" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);
		const requestMethod = typeof route === "function" ? route : octokit.request;
		const method = options.method;
		const headers = options.headers;
		let url = options.url;
		return { [Symbol.asyncIterator]: () => ({ async next() {
			if (!url) return { done: true };
			try {
				const response = await requestMethod({
					method,
					url,
					headers
				});
				const normalizedResponse = normalizePaginatedListResponse(response);
				url = ((normalizedResponse.headers.link || "").match(/<([^<>]+)>;\s*rel="next"/) || [])[1];
				return { value: normalizedResponse };
			} catch (error$1) {
				if (error$1.status !== 409) throw error$1;
				url = "";
				return { value: {
					status: 200,
					headers: {},
					data: []
				} };
			}
		} }) };
	}
	function paginate(octokit, route, parameters, mapFn) {
		if (typeof parameters === "function") {
			mapFn = parameters;
			parameters = void 0;
		}
		return gather(octokit, [], iterator(octokit, route, parameters)[Symbol.asyncIterator](), mapFn);
	}
	function gather(octokit, results, iterator2, mapFn) {
		return iterator2.next().then((result) => {
			if (result.done) return results;
			let earlyExit = false;
			function done() {
				earlyExit = true;
			}
			results = results.concat(mapFn ? mapFn(result.value, done) : result.value.data);
			if (earlyExit) return results;
			return gather(octokit, results, iterator2, mapFn);
		});
	}
	var composePaginateRest = Object.assign(paginate, { iterator });
	var paginatingEndpoints = [
		"GET /advisories",
		"GET /app/hook/deliveries",
		"GET /app/installation-requests",
		"GET /app/installations",
		"GET /assignments/{assignment_id}/accepted_assignments",
		"GET /classrooms",
		"GET /classrooms/{classroom_id}/assignments",
		"GET /enterprises/{enterprise}/dependabot/alerts",
		"GET /enterprises/{enterprise}/secret-scanning/alerts",
		"GET /events",
		"GET /gists",
		"GET /gists/public",
		"GET /gists/starred",
		"GET /gists/{gist_id}/comments",
		"GET /gists/{gist_id}/commits",
		"GET /gists/{gist_id}/forks",
		"GET /installation/repositories",
		"GET /issues",
		"GET /licenses",
		"GET /marketplace_listing/plans",
		"GET /marketplace_listing/plans/{plan_id}/accounts",
		"GET /marketplace_listing/stubbed/plans",
		"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
		"GET /networks/{owner}/{repo}/events",
		"GET /notifications",
		"GET /organizations",
		"GET /orgs/{org}/actions/cache/usage-by-repository",
		"GET /orgs/{org}/actions/permissions/repositories",
		"GET /orgs/{org}/actions/runners",
		"GET /orgs/{org}/actions/secrets",
		"GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
		"GET /orgs/{org}/actions/variables",
		"GET /orgs/{org}/actions/variables/{name}/repositories",
		"GET /orgs/{org}/blocks",
		"GET /orgs/{org}/code-scanning/alerts",
		"GET /orgs/{org}/codespaces",
		"GET /orgs/{org}/codespaces/secrets",
		"GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories",
		"GET /orgs/{org}/copilot/billing/seats",
		"GET /orgs/{org}/dependabot/alerts",
		"GET /orgs/{org}/dependabot/secrets",
		"GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
		"GET /orgs/{org}/events",
		"GET /orgs/{org}/failed_invitations",
		"GET /orgs/{org}/hooks",
		"GET /orgs/{org}/hooks/{hook_id}/deliveries",
		"GET /orgs/{org}/installations",
		"GET /orgs/{org}/invitations",
		"GET /orgs/{org}/invitations/{invitation_id}/teams",
		"GET /orgs/{org}/issues",
		"GET /orgs/{org}/members",
		"GET /orgs/{org}/members/{username}/codespaces",
		"GET /orgs/{org}/migrations",
		"GET /orgs/{org}/migrations/{migration_id}/repositories",
		"GET /orgs/{org}/organization-roles/{role_id}/teams",
		"GET /orgs/{org}/organization-roles/{role_id}/users",
		"GET /orgs/{org}/outside_collaborators",
		"GET /orgs/{org}/packages",
		"GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
		"GET /orgs/{org}/personal-access-token-requests",
		"GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
		"GET /orgs/{org}/personal-access-tokens",
		"GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories",
		"GET /orgs/{org}/projects",
		"GET /orgs/{org}/properties/values",
		"GET /orgs/{org}/public_members",
		"GET /orgs/{org}/repos",
		"GET /orgs/{org}/rulesets",
		"GET /orgs/{org}/rulesets/rule-suites",
		"GET /orgs/{org}/secret-scanning/alerts",
		"GET /orgs/{org}/security-advisories",
		"GET /orgs/{org}/teams",
		"GET /orgs/{org}/teams/{team_slug}/discussions",
		"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
		"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
		"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
		"GET /orgs/{org}/teams/{team_slug}/invitations",
		"GET /orgs/{org}/teams/{team_slug}/members",
		"GET /orgs/{org}/teams/{team_slug}/projects",
		"GET /orgs/{org}/teams/{team_slug}/repos",
		"GET /orgs/{org}/teams/{team_slug}/teams",
		"GET /projects/columns/{column_id}/cards",
		"GET /projects/{project_id}/collaborators",
		"GET /projects/{project_id}/columns",
		"GET /repos/{owner}/{repo}/actions/artifacts",
		"GET /repos/{owner}/{repo}/actions/caches",
		"GET /repos/{owner}/{repo}/actions/organization-secrets",
		"GET /repos/{owner}/{repo}/actions/organization-variables",
		"GET /repos/{owner}/{repo}/actions/runners",
		"GET /repos/{owner}/{repo}/actions/runs",
		"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
		"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
		"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
		"GET /repos/{owner}/{repo}/actions/secrets",
		"GET /repos/{owner}/{repo}/actions/variables",
		"GET /repos/{owner}/{repo}/actions/workflows",
		"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
		"GET /repos/{owner}/{repo}/activity",
		"GET /repos/{owner}/{repo}/assignees",
		"GET /repos/{owner}/{repo}/branches",
		"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
		"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
		"GET /repos/{owner}/{repo}/code-scanning/alerts",
		"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
		"GET /repos/{owner}/{repo}/code-scanning/analyses",
		"GET /repos/{owner}/{repo}/codespaces",
		"GET /repos/{owner}/{repo}/codespaces/devcontainers",
		"GET /repos/{owner}/{repo}/codespaces/secrets",
		"GET /repos/{owner}/{repo}/collaborators",
		"GET /repos/{owner}/{repo}/comments",
		"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
		"GET /repos/{owner}/{repo}/commits",
		"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
		"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
		"GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
		"GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
		"GET /repos/{owner}/{repo}/commits/{ref}/status",
		"GET /repos/{owner}/{repo}/commits/{ref}/statuses",
		"GET /repos/{owner}/{repo}/contributors",
		"GET /repos/{owner}/{repo}/dependabot/alerts",
		"GET /repos/{owner}/{repo}/dependabot/secrets",
		"GET /repos/{owner}/{repo}/deployments",
		"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
		"GET /repos/{owner}/{repo}/environments",
		"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
		"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
		"GET /repos/{owner}/{repo}/events",
		"GET /repos/{owner}/{repo}/forks",
		"GET /repos/{owner}/{repo}/hooks",
		"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
		"GET /repos/{owner}/{repo}/invitations",
		"GET /repos/{owner}/{repo}/issues",
		"GET /repos/{owner}/{repo}/issues/comments",
		"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
		"GET /repos/{owner}/{repo}/issues/events",
		"GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
		"GET /repos/{owner}/{repo}/issues/{issue_number}/events",
		"GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
		"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
		"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
		"GET /repos/{owner}/{repo}/keys",
		"GET /repos/{owner}/{repo}/labels",
		"GET /repos/{owner}/{repo}/milestones",
		"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
		"GET /repos/{owner}/{repo}/notifications",
		"GET /repos/{owner}/{repo}/pages/builds",
		"GET /repos/{owner}/{repo}/projects",
		"GET /repos/{owner}/{repo}/pulls",
		"GET /repos/{owner}/{repo}/pulls/comments",
		"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
		"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
		"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
		"GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
		"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
		"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
		"GET /repos/{owner}/{repo}/releases",
		"GET /repos/{owner}/{repo}/releases/{release_id}/assets",
		"GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
		"GET /repos/{owner}/{repo}/rules/branches/{branch}",
		"GET /repos/{owner}/{repo}/rulesets",
		"GET /repos/{owner}/{repo}/rulesets/rule-suites",
		"GET /repos/{owner}/{repo}/secret-scanning/alerts",
		"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
		"GET /repos/{owner}/{repo}/security-advisories",
		"GET /repos/{owner}/{repo}/stargazers",
		"GET /repos/{owner}/{repo}/subscribers",
		"GET /repos/{owner}/{repo}/tags",
		"GET /repos/{owner}/{repo}/teams",
		"GET /repos/{owner}/{repo}/topics",
		"GET /repositories",
		"GET /repositories/{repository_id}/environments/{environment_name}/secrets",
		"GET /repositories/{repository_id}/environments/{environment_name}/variables",
		"GET /search/code",
		"GET /search/commits",
		"GET /search/issues",
		"GET /search/labels",
		"GET /search/repositories",
		"GET /search/topics",
		"GET /search/users",
		"GET /teams/{team_id}/discussions",
		"GET /teams/{team_id}/discussions/{discussion_number}/comments",
		"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
		"GET /teams/{team_id}/discussions/{discussion_number}/reactions",
		"GET /teams/{team_id}/invitations",
		"GET /teams/{team_id}/members",
		"GET /teams/{team_id}/projects",
		"GET /teams/{team_id}/repos",
		"GET /teams/{team_id}/teams",
		"GET /user/blocks",
		"GET /user/codespaces",
		"GET /user/codespaces/secrets",
		"GET /user/emails",
		"GET /user/followers",
		"GET /user/following",
		"GET /user/gpg_keys",
		"GET /user/installations",
		"GET /user/installations/{installation_id}/repositories",
		"GET /user/issues",
		"GET /user/keys",
		"GET /user/marketplace_purchases",
		"GET /user/marketplace_purchases/stubbed",
		"GET /user/memberships/orgs",
		"GET /user/migrations",
		"GET /user/migrations/{migration_id}/repositories",
		"GET /user/orgs",
		"GET /user/packages",
		"GET /user/packages/{package_type}/{package_name}/versions",
		"GET /user/public_emails",
		"GET /user/repos",
		"GET /user/repository_invitations",
		"GET /user/social_accounts",
		"GET /user/ssh_signing_keys",
		"GET /user/starred",
		"GET /user/subscriptions",
		"GET /user/teams",
		"GET /users",
		"GET /users/{username}/events",
		"GET /users/{username}/events/orgs/{org}",
		"GET /users/{username}/events/public",
		"GET /users/{username}/followers",
		"GET /users/{username}/following",
		"GET /users/{username}/gists",
		"GET /users/{username}/gpg_keys",
		"GET /users/{username}/keys",
		"GET /users/{username}/orgs",
		"GET /users/{username}/packages",
		"GET /users/{username}/projects",
		"GET /users/{username}/received_events",
		"GET /users/{username}/received_events/public",
		"GET /users/{username}/repos",
		"GET /users/{username}/social_accounts",
		"GET /users/{username}/ssh_signing_keys",
		"GET /users/{username}/starred",
		"GET /users/{username}/subscriptions"
	];
	function isPaginatingEndpoint(arg) {
		if (typeof arg === "string") return paginatingEndpoints.includes(arg);
		else return false;
	}
	function paginateRest(octokit) {
		return { paginate: Object.assign(paginate.bind(null, octokit), { iterator: iterator.bind(null, octokit) }) };
	}
	paginateRest.VERSION = VERSION$2;
} });

//#endregion
//#region node_modules/.pnpm/@actions+github@6.0.1/node_modules/@actions/github/lib/utils.js
var require_utils$1 = __commonJS({ "node_modules/.pnpm/@actions+github@6.0.1/node_modules/@actions/github/lib/utils.js"(exports) {
	var __createBinding$1 = exports && exports.__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __setModuleDefault$1 = exports && exports.__setModuleDefault || (Object.create ? function(o$1, v) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v
		});
	} : function(o$1, v) {
		o$1["default"] = v;
	});
	var __importStar$1 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
		}
		__setModuleDefault$1(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getOctokitOptions = exports.GitHub = exports.defaults = exports.context = void 0;
	const Context$1 = __importStar$1(require_context());
	const Utils = __importStar$1(require_utils$2());
	const core_1 = require_dist_node$2();
	const plugin_rest_endpoint_methods_1 = require_dist_node$1();
	const plugin_paginate_rest_1 = require_dist_node();
	exports.context = new Context$1.Context();
	const baseUrl = Utils.getApiBaseUrl();
	exports.defaults = {
		baseUrl,
		request: {
			agent: Utils.getProxyAgent(baseUrl),
			fetch: Utils.getProxyFetch(baseUrl)
		}
	};
	exports.GitHub = core_1.Octokit.plugin(plugin_rest_endpoint_methods_1.restEndpointMethods, plugin_paginate_rest_1.paginateRest).defaults(exports.defaults);
	/**
	* Convience function to correctly format Octokit Options to pass into the constructor.
	*
	* @param     token    the repo PAT or GITHUB_TOKEN
	* @param     options  other options to set
	*/
	function getOctokitOptions(token, options) {
		const opts = Object.assign({}, options || {});
		const auth$1 = Utils.getAuthString(token, opts);
		if (auth$1) opts.auth = auth$1;
		return opts;
	}
	exports.getOctokitOptions = getOctokitOptions;
} });

//#endregion
//#region node_modules/.pnpm/@actions+github@6.0.1/node_modules/@actions/github/lib/github.js
var require_github = __commonJS({ "node_modules/.pnpm/@actions+github@6.0.1/node_modules/@actions/github/lib/github.js"(exports) {
	var __createBinding = exports && exports.__createBinding || (Object.create ? function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
			enumerable: true,
			get: function() {
				return m[k];
			}
		};
		Object.defineProperty(o$1, k2, desc);
	} : function(o$1, m, k, k2) {
		if (k2 === void 0) k2 = k;
		o$1[k2] = m[k];
	});
	var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o$1, v) {
		Object.defineProperty(o$1, "default", {
			enumerable: true,
			value: v
		});
	} : function(o$1, v) {
		o$1["default"] = v;
	});
	var __importStar = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		}
		__setModuleDefault(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getOctokit = exports.context = void 0;
	const Context = __importStar(require_context());
	const utils_1$1 = require_utils$1();
	exports.context = new Context.Context();
	/**
	* Returns a hydrated octokit ready to use for GitHub Actions
	*
	* @param     token    the repo PAT or GITHUB_TOKEN
	* @param     options  other options to set
	*/
	function getOctokit$1(token, options, ...additionalPlugins) {
		const GitHubWithPlugins = utils_1$1.GitHub.plugin(...additionalPlugins);
		return new GitHubWithPlugins((0, utils_1$1.getOctokitOptions)(token, options));
	}
	exports.getOctokit = getOctokit$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/symbols.js
var require_symbols = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/symbols.js"(exports, module) {
	module.exports = {
		kClose: Symbol("close"),
		kDestroy: Symbol("destroy"),
		kDispatch: Symbol("dispatch"),
		kUrl: Symbol("url"),
		kWriting: Symbol("writing"),
		kResuming: Symbol("resuming"),
		kQueue: Symbol("queue"),
		kConnect: Symbol("connect"),
		kConnecting: Symbol("connecting"),
		kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
		kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
		kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
		kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
		kKeepAlive: Symbol("keep alive"),
		kHeadersTimeout: Symbol("headers timeout"),
		kBodyTimeout: Symbol("body timeout"),
		kServerName: Symbol("server name"),
		kLocalAddress: Symbol("local address"),
		kHost: Symbol("host"),
		kNoRef: Symbol("no ref"),
		kBodyUsed: Symbol("used"),
		kBody: Symbol("abstracted request body"),
		kRunning: Symbol("running"),
		kBlocking: Symbol("blocking"),
		kPending: Symbol("pending"),
		kSize: Symbol("size"),
		kBusy: Symbol("busy"),
		kQueued: Symbol("queued"),
		kFree: Symbol("free"),
		kConnected: Symbol("connected"),
		kClosed: Symbol("closed"),
		kNeedDrain: Symbol("need drain"),
		kReset: Symbol("reset"),
		kDestroyed: Symbol.for("nodejs.stream.destroyed"),
		kResume: Symbol("resume"),
		kOnError: Symbol("on error"),
		kMaxHeadersSize: Symbol("max headers size"),
		kRunningIdx: Symbol("running index"),
		kPendingIdx: Symbol("pending index"),
		kError: Symbol("error"),
		kClients: Symbol("clients"),
		kClient: Symbol("client"),
		kParser: Symbol("parser"),
		kOnDestroyed: Symbol("destroy callbacks"),
		kPipelining: Symbol("pipelining"),
		kSocket: Symbol("socket"),
		kHostHeader: Symbol("host header"),
		kConnector: Symbol("connector"),
		kStrictContentLength: Symbol("strict content length"),
		kMaxRedirections: Symbol("maxRedirections"),
		kMaxRequests: Symbol("maxRequestsPerClient"),
		kProxy: Symbol("proxy agent options"),
		kCounter: Symbol("socket request counter"),
		kMaxResponseSize: Symbol("max response size"),
		kHTTP2Session: Symbol("http2Session"),
		kHTTP2SessionState: Symbol("http2Session state"),
		kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
		kConstruct: Symbol("constructable"),
		kListeners: Symbol("listeners"),
		kHTTPContext: Symbol("http context"),
		kMaxConcurrentStreams: Symbol("max concurrent streams"),
		kNoProxyAgent: Symbol("no proxy agent"),
		kHttpProxyAgent: Symbol("http proxy agent"),
		kHttpsProxyAgent: Symbol("https proxy agent")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/util/timers.js
var require_timers = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/util/timers.js"(exports, module) {
	/**
	* This module offers an optimized timer implementation designed for scenarios
	* where high precision is not critical.
	*
	* The timer achieves faster performance by using a low-resolution approach,
	* with an accuracy target of within 500ms. This makes it particularly useful
	* for timers with delays of 1 second or more, where exact timing is less
	* crucial.
	*
	* It's important to note that Node.js timers are inherently imprecise, as
	* delays can occur due to the event loop being blocked by other operations.
	* Consequently, timers may trigger later than their scheduled time.
	*/
	/**
	* The fastNow variable contains the internal fast timer clock value.
	*
	* @type {number}
	*/
	let fastNow = 0;
	/**
	* RESOLUTION_MS represents the target resolution time in milliseconds.
	*
	* @type {number}
	* @default 1000
	*/
	const RESOLUTION_MS = 1e3;
	/**
	* TICK_MS defines the desired interval in milliseconds between each tick.
	* The target value is set to half the resolution time, minus 1 ms, to account
	* for potential event loop overhead.
	*
	* @type {number}
	* @default 499
	*/
	const TICK_MS = (RESOLUTION_MS >> 1) - 1;
	/**
	* fastNowTimeout is a Node.js timer used to manage and process
	* the FastTimers stored in the `fastTimers` array.
	*
	* @type {NodeJS.Timeout}
	*/
	let fastNowTimeout;
	/**
	* The kFastTimer symbol is used to identify FastTimer instances.
	*
	* @type {Symbol}
	*/
	const kFastTimer = Symbol("kFastTimer");
	/**
	* The fastTimers array contains all active FastTimers.
	*
	* @type {FastTimer[]}
	*/
	const fastTimers = [];
	/**
	* These constants represent the various states of a FastTimer.
	*/
	/**
	* The `NOT_IN_LIST` constant indicates that the FastTimer is not included
	* in the `fastTimers` array. Timers with this status will not be processed
	* during the next tick by the `onTick` function.
	*
	* A FastTimer can be re-added to the `fastTimers` array by invoking the
	* `refresh` method on the FastTimer instance.
	*
	* @type {-2}
	*/
	const NOT_IN_LIST = -2;
	/**
	* The `TO_BE_CLEARED` constant indicates that the FastTimer is scheduled
	* for removal from the `fastTimers` array. A FastTimer in this state will
	* be removed in the next tick by the `onTick` function and will no longer
	* be processed.
	*
	* This status is also set when the `clear` method is called on the FastTimer instance.
	*
	* @type {-1}
	*/
	const TO_BE_CLEARED = -1;
	/**
	* The `PENDING` constant signifies that the FastTimer is awaiting processing
	* in the next tick by the `onTick` function. Timers with this status will have
	* their `_idleStart` value set and their status updated to `ACTIVE` in the next tick.
	*
	* @type {0}
	*/
	const PENDING = 0;
	/**
	* The `ACTIVE` constant indicates that the FastTimer is active and waiting
	* for its timer to expire. During the next tick, the `onTick` function will
	* check if the timer has expired, and if so, it will execute the associated callback.
	*
	* @type {1}
	*/
	const ACTIVE = 1;
	/**
	* The onTick function processes the fastTimers array.
	*
	* @returns {void}
	*/
	function onTick() {
		/**
		* Increment the fastNow value by the TICK_MS value, despite the actual time
		* that has passed since the last tick. This approach ensures independence
		* from the system clock and delays caused by a blocked event loop.
		*
		* @type {number}
		*/
		fastNow += TICK_MS;
		/**
		* The `idx` variable is used to iterate over the `fastTimers` array.
		* Expired timers are removed by replacing them with the last element in the array.
		* Consequently, `idx` is only incremented when the current element is not removed.
		*
		* @type {number}
		*/
		let idx = 0;
		/**
		* The len variable will contain the length of the fastTimers array
		* and will be decremented when a FastTimer should be removed from the
		* fastTimers array.
		*
		* @type {number}
		*/
		let len = fastTimers.length;
		while (idx < len) {
			/**
			* @type {FastTimer}
			*/
			const timer = fastTimers[idx];
			if (timer._state === PENDING) {
				timer._idleStart = fastNow - TICK_MS;
				timer._state = ACTIVE;
			} else if (timer._state === ACTIVE && fastNow >= timer._idleStart + timer._idleTimeout) {
				timer._state = TO_BE_CLEARED;
				timer._idleStart = -1;
				timer._onTimeout(timer._timerArg);
			}
			if (timer._state === TO_BE_CLEARED) {
				timer._state = NOT_IN_LIST;
				if (--len !== 0) fastTimers[idx] = fastTimers[len];
			} else ++idx;
		}
		fastTimers.length = len;
		if (fastTimers.length !== 0) refreshTimeout();
	}
	function refreshTimeout() {
		if (fastNowTimeout?.refresh) fastNowTimeout.refresh();
		else {
			clearTimeout(fastNowTimeout);
			fastNowTimeout = setTimeout(onTick, TICK_MS);
			fastNowTimeout?.unref();
		}
	}
	/**
	* The `FastTimer` class is a data structure designed to store and manage
	* timer information.
	*/
	var FastTimer = class {
		[kFastTimer] = true;
		/**
		* The state of the timer, which can be one of the following:
		* - NOT_IN_LIST (-2)
		* - TO_BE_CLEARED (-1)
		* - PENDING (0)
		* - ACTIVE (1)
		*
		* @type {-2|-1|0|1}
		* @private
		*/
		_state = NOT_IN_LIST;
		/**
		* The number of milliseconds to wait before calling the callback.
		*
		* @type {number}
		* @private
		*/
		_idleTimeout = -1;
		/**
		* The time in milliseconds when the timer was started. This value is used to
		* calculate when the timer should expire.
		*
		* @type {number}
		* @default -1
		* @private
		*/
		_idleStart = -1;
		/**
		* The function to be executed when the timer expires.
		* @type {Function}
		* @private
		*/
		_onTimeout;
		/**
		* The argument to be passed to the callback when the timer expires.
		*
		* @type {*}
		* @private
		*/
		_timerArg;
		/**
		* @constructor
		* @param {Function} callback A function to be executed after the timer
		* expires.
		* @param {number} delay The time, in milliseconds that the timer should wait
		* before the specified function or code is executed.
		* @param {*} arg
		*/
		constructor(callback, delay$3, arg) {
			this._onTimeout = callback;
			this._idleTimeout = delay$3;
			this._timerArg = arg;
			this.refresh();
		}
		/**
		* Sets the timer's start time to the current time, and reschedules the timer
		* to call its callback at the previously specified duration adjusted to the
		* current time.
		* Using this on a timer that has already called its callback will reactivate
		* the timer.
		*
		* @returns {void}
		*/
		refresh() {
			if (this._state === NOT_IN_LIST) fastTimers.push(this);
			if (!fastNowTimeout || fastTimers.length === 1) refreshTimeout();
			this._state = PENDING;
		}
		/**
		* The `clear` method cancels the timer, preventing it from executing.
		*
		* @returns {void}
		* @private
		*/
		clear() {
			this._state = TO_BE_CLEARED;
			this._idleStart = -1;
		}
	};
	/**
	* This module exports a setTimeout and clearTimeout function that can be
	* used as a drop-in replacement for the native functions.
	*/
	module.exports = {
		setTimeout(callback, delay$3, arg) {
			return delay$3 <= RESOLUTION_MS ? setTimeout(callback, delay$3, arg) : new FastTimer(callback, delay$3, arg);
		},
		clearTimeout(timeout) {
			if (timeout[kFastTimer])
 /**
			* @type {FastTimer}
			*/
			timeout.clear();
			else clearTimeout(timeout);
		},
		setFastTimeout(callback, delay$3, arg) {
			return new FastTimer(callback, delay$3, arg);
		},
		clearFastTimeout(timeout) {
			timeout.clear();
		},
		now() {
			return fastNow;
		},
		tick(delay$3 = 0) {
			fastNow += delay$3 - RESOLUTION_MS + 1;
			onTick();
			onTick();
		},
		reset() {
			fastNow = 0;
			fastTimers.length = 0;
			clearTimeout(fastNowTimeout);
			fastNowTimeout = null;
		},
		kFastTimer
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/errors.js
var require_errors = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/errors.js"(exports, module) {
	var UndiciError$2 = class extends Error {
		constructor(message, options) {
			super(message, options);
			this.name = "UndiciError";
			this.code = "UND_ERR";
		}
	};
	var ConnectTimeoutError$1 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "ConnectTimeoutError";
			this.message = message || "Connect Timeout Error";
			this.code = "UND_ERR_CONNECT_TIMEOUT";
		}
	};
	var HeadersTimeoutError$1 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "HeadersTimeoutError";
			this.message = message || "Headers Timeout Error";
			this.code = "UND_ERR_HEADERS_TIMEOUT";
		}
	};
	var HeadersOverflowError$1 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "HeadersOverflowError";
			this.message = message || "Headers Overflow Error";
			this.code = "UND_ERR_HEADERS_OVERFLOW";
		}
	};
	var BodyTimeoutError$1 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "BodyTimeoutError";
			this.message = message || "Body Timeout Error";
			this.code = "UND_ERR_BODY_TIMEOUT";
		}
	};
	var ResponseStatusCodeError = class extends UndiciError$2 {
		constructor(message, statusCode, headers, body) {
			super(message);
			this.name = "ResponseStatusCodeError";
			this.message = message || "Response Status Code Error";
			this.code = "UND_ERR_RESPONSE_STATUS_CODE";
			this.body = body;
			this.status = statusCode;
			this.statusCode = statusCode;
			this.headers = headers;
		}
	};
	var InvalidArgumentError$31 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "InvalidArgumentError";
			this.message = message || "Invalid Argument Error";
			this.code = "UND_ERR_INVALID_ARG";
		}
	};
	var InvalidReturnValueError$2 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "InvalidReturnValueError";
			this.message = message || "Invalid Return Value Error";
			this.code = "UND_ERR_INVALID_RETURN_VALUE";
		}
	};
	var AbortError$2 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "AbortError";
			this.message = message || "The operation was aborted";
		}
	};
	var RequestAbortedError$8 = class extends AbortError$2 {
		constructor(message) {
			super(message);
			this.name = "AbortError";
			this.message = message || "Request aborted";
			this.code = "UND_ERR_ABORTED";
		}
	};
	var InformationalError$4 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "InformationalError";
			this.message = message || "Request information";
			this.code = "UND_ERR_INFO";
		}
	};
	var RequestContentLengthMismatchError$2 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "RequestContentLengthMismatchError";
			this.message = message || "Request body length does not match content-length header";
			this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
		}
	};
	var ResponseContentLengthMismatchError$1 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "ResponseContentLengthMismatchError";
			this.message = message || "Response body length does not match content-length header";
			this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
		}
	};
	var ClientDestroyedError$2 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "ClientDestroyedError";
			this.message = message || "The client is destroyed";
			this.code = "UND_ERR_DESTROYED";
		}
	};
	var ClientClosedError$1 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "ClientClosedError";
			this.message = message || "The client is closed";
			this.code = "UND_ERR_CLOSED";
		}
	};
	var SocketError$4 = class extends UndiciError$2 {
		constructor(message, socket) {
			super(message);
			this.name = "SocketError";
			this.message = message || "Socket error";
			this.code = "UND_ERR_SOCKET";
			this.socket = socket;
		}
	};
	var NotSupportedError$2 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "NotSupportedError";
			this.message = message || "Not supported error";
			this.code = "UND_ERR_NOT_SUPPORTED";
		}
	};
	var BalancedPoolMissingUpstreamError$1 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "MissingUpstreamError";
			this.message = message || "No upstream has been added to the BalancedPool";
			this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
		}
	};
	var HTTPParserError$1 = class extends Error {
		constructor(message, code, data$1) {
			super(message);
			this.name = "HTTPParserError";
			this.code = code ? `HPE_${code}` : void 0;
			this.data = data$1 ? data$1.toString() : void 0;
		}
	};
	var ResponseExceededMaxSizeError$1 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			this.name = "ResponseExceededMaxSizeError";
			this.message = message || "Response content exceeded max size";
			this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
		}
	};
	var RequestRetryError$1 = class extends UndiciError$2 {
		constructor(message, code, { headers, data: data$1 }) {
			super(message);
			this.name = "RequestRetryError";
			this.message = message || "Request retry error";
			this.code = "UND_ERR_REQ_RETRY";
			this.statusCode = code;
			this.data = data$1;
			this.headers = headers;
		}
	};
	var ResponseError$1 = class extends UndiciError$2 {
		constructor(message, code, { headers, body }) {
			super(message);
			this.name = "ResponseError";
			this.message = message || "Response error";
			this.code = "UND_ERR_RESPONSE";
			this.statusCode = code;
			this.body = body;
			this.headers = headers;
		}
	};
	var SecureProxyConnectionError$1 = class extends UndiciError$2 {
		constructor(cause, message, options = {}) {
			super(message, {
				cause,
				...options
			});
			this.name = "SecureProxyConnectionError";
			this.message = message || "Secure Proxy Connection failed";
			this.code = "UND_ERR_PRX_TLS";
			this.cause = cause;
		}
	};
	module.exports = {
		AbortError: AbortError$2,
		HTTPParserError: HTTPParserError$1,
		UndiciError: UndiciError$2,
		HeadersTimeoutError: HeadersTimeoutError$1,
		HeadersOverflowError: HeadersOverflowError$1,
		BodyTimeoutError: BodyTimeoutError$1,
		RequestContentLengthMismatchError: RequestContentLengthMismatchError$2,
		ConnectTimeoutError: ConnectTimeoutError$1,
		ResponseStatusCodeError,
		InvalidArgumentError: InvalidArgumentError$31,
		InvalidReturnValueError: InvalidReturnValueError$2,
		RequestAbortedError: RequestAbortedError$8,
		ClientDestroyedError: ClientDestroyedError$2,
		ClientClosedError: ClientClosedError$1,
		InformationalError: InformationalError$4,
		SocketError: SocketError$4,
		NotSupportedError: NotSupportedError$2,
		ResponseContentLengthMismatchError: ResponseContentLengthMismatchError$1,
		BalancedPoolMissingUpstreamError: BalancedPoolMissingUpstreamError$1,
		ResponseExceededMaxSizeError: ResponseExceededMaxSizeError$1,
		RequestRetryError: RequestRetryError$1,
		ResponseError: ResponseError$1,
		SecureProxyConnectionError: SecureProxyConnectionError$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/constants.js
var require_constants$4 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/constants.js"(exports, module) {
	/**
	* @see https://developer.mozilla.org/docs/Web/HTTP/Headers
	*/
	const wellknownHeaderNames$1 = [
		"Accept",
		"Accept-Encoding",
		"Accept-Language",
		"Accept-Ranges",
		"Access-Control-Allow-Credentials",
		"Access-Control-Allow-Headers",
		"Access-Control-Allow-Methods",
		"Access-Control-Allow-Origin",
		"Access-Control-Expose-Headers",
		"Access-Control-Max-Age",
		"Access-Control-Request-Headers",
		"Access-Control-Request-Method",
		"Age",
		"Allow",
		"Alt-Svc",
		"Alt-Used",
		"Authorization",
		"Cache-Control",
		"Clear-Site-Data",
		"Connection",
		"Content-Disposition",
		"Content-Encoding",
		"Content-Language",
		"Content-Length",
		"Content-Location",
		"Content-Range",
		"Content-Security-Policy",
		"Content-Security-Policy-Report-Only",
		"Content-Type",
		"Cookie",
		"Cross-Origin-Embedder-Policy",
		"Cross-Origin-Opener-Policy",
		"Cross-Origin-Resource-Policy",
		"Date",
		"Device-Memory",
		"Downlink",
		"ECT",
		"ETag",
		"Expect",
		"Expect-CT",
		"Expires",
		"Forwarded",
		"From",
		"Host",
		"If-Match",
		"If-Modified-Since",
		"If-None-Match",
		"If-Range",
		"If-Unmodified-Since",
		"Keep-Alive",
		"Last-Modified",
		"Link",
		"Location",
		"Max-Forwards",
		"Origin",
		"Permissions-Policy",
		"Pragma",
		"Proxy-Authenticate",
		"Proxy-Authorization",
		"RTT",
		"Range",
		"Referer",
		"Referrer-Policy",
		"Refresh",
		"Retry-After",
		"Sec-WebSocket-Accept",
		"Sec-WebSocket-Extensions",
		"Sec-WebSocket-Key",
		"Sec-WebSocket-Protocol",
		"Sec-WebSocket-Version",
		"Server",
		"Server-Timing",
		"Service-Worker-Allowed",
		"Service-Worker-Navigation-Preload",
		"Set-Cookie",
		"SourceMap",
		"Strict-Transport-Security",
		"Supports-Loading-Mode",
		"TE",
		"Timing-Allow-Origin",
		"Trailer",
		"Transfer-Encoding",
		"Upgrade",
		"Upgrade-Insecure-Requests",
		"User-Agent",
		"Vary",
		"Via",
		"WWW-Authenticate",
		"X-Content-Type-Options",
		"X-DNS-Prefetch-Control",
		"X-Frame-Options",
		"X-Permitted-Cross-Domain-Policies",
		"X-Powered-By",
		"X-Requested-With",
		"X-XSS-Protection"
	];
	/** @type {Record<typeof wellknownHeaderNames[number]|Lowercase<typeof wellknownHeaderNames[number]>, string>} */
	const headerNameLowerCasedRecord$3 = {};
	Object.setPrototypeOf(headerNameLowerCasedRecord$3, null);
	/**
	* @type {Record<Lowercase<typeof wellknownHeaderNames[number]>, Buffer>}
	*/
	const wellknownHeaderNameBuffers = {};
	Object.setPrototypeOf(wellknownHeaderNameBuffers, null);
	/**
	* @param {string} header Lowercased header
	* @returns {Buffer}
	*/
	function getHeaderNameAsBuffer(header) {
		let buffer$1 = wellknownHeaderNameBuffers[header];
		if (buffer$1 === void 0) buffer$1 = Buffer.from(header);
		return buffer$1;
	}
	for (let i$1 = 0; i$1 < wellknownHeaderNames$1.length; ++i$1) {
		const key = wellknownHeaderNames$1[i$1];
		const lowerCasedKey = key.toLowerCase();
		headerNameLowerCasedRecord$3[key] = headerNameLowerCasedRecord$3[lowerCasedKey] = lowerCasedKey;
	}
	module.exports = {
		wellknownHeaderNames: wellknownHeaderNames$1,
		headerNameLowerCasedRecord: headerNameLowerCasedRecord$3,
		getHeaderNameAsBuffer
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/tree.js
var require_tree = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/tree.js"(exports, module) {
	const { wellknownHeaderNames, headerNameLowerCasedRecord: headerNameLowerCasedRecord$2 } = require_constants$4();
	var TstNode = class TstNode {
		/** @type {any} */
		value = null;
		/** @type {null | TstNode} */
		left = null;
		/** @type {null | TstNode} */
		middle = null;
		/** @type {null | TstNode} */
		right = null;
		/** @type {number} */
		code;
		/**
		* @param {string} key
		* @param {any} value
		* @param {number} index
		*/
		constructor(key, value, index) {
			if (index === void 0 || index >= key.length) throw new TypeError("Unreachable");
			const code = this.code = key.charCodeAt(index);
			if (code > 127) throw new TypeError("key must be ascii string");
			if (key.length !== ++index) this.middle = new TstNode(key, value, index);
			else this.value = value;
		}
		/**
		* @param {string} key
		* @param {any} value
		* @returns {void}
		*/
		add(key, value) {
			const length = key.length;
			if (length === 0) throw new TypeError("Unreachable");
			let index = 0;
			/**
			* @type {TstNode}
			*/
			let node = this;
			while (true) {
				const code = key.charCodeAt(index);
				if (code > 127) throw new TypeError("key must be ascii string");
				if (node.code === code) if (length === ++index) {
					node.value = value;
					break;
				} else if (node.middle !== null) node = node.middle;
				else {
					node.middle = new TstNode(key, value, index);
					break;
				}
				else if (node.code < code) if (node.left !== null) node = node.left;
				else {
					node.left = new TstNode(key, value, index);
					break;
				}
				else if (node.right !== null) node = node.right;
				else {
					node.right = new TstNode(key, value, index);
					break;
				}
			}
		}
		/**
		* @param {Uint8Array} key
		* @returns {TstNode | null}
		*/
		search(key) {
			const keylength = key.length;
			let index = 0;
			/**
			* @type {TstNode|null}
			*/
			let node = this;
			while (node !== null && index < keylength) {
				let code = key[index];
				if (code <= 90 && code >= 65) code |= 32;
				while (node !== null) {
					if (code === node.code) {
						if (keylength === ++index) return node;
						node = node.middle;
						break;
					}
					node = node.code < code ? node.left : node.right;
				}
			}
			return null;
		}
	};
	var TernarySearchTree = class {
		/** @type {TstNode | null} */
		node = null;
		/**
		* @param {string} key
		* @param {any} value
		* @returns {void}
		* */
		insert(key, value) {
			if (this.node === null) this.node = new TstNode(key, value, 0);
			else this.node.add(key, value);
		}
		/**
		* @param {Uint8Array} key
		* @returns {any}
		*/
		lookup(key) {
			return this.node?.search(key)?.value ?? null;
		}
	};
	const tree$1 = new TernarySearchTree();
	for (let i$1 = 0; i$1 < wellknownHeaderNames.length; ++i$1) {
		const key = headerNameLowerCasedRecord$2[wellknownHeaderNames[i$1]];
		tree$1.insert(key, key);
	}
	module.exports = {
		TernarySearchTree,
		tree: tree$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/util.js
var require_util$5 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/util.js"(exports, module) {
	const assert$29 = __require("node:assert");
	const { kDestroyed: kDestroyed$2, kBodyUsed: kBodyUsed$1, kListeners, kBody: kBody$2 } = require_symbols();
	const { IncomingMessage } = __require("node:http");
	const stream$1 = __require("node:stream");
	const net$2 = __require("node:net");
	const { Blob: Blob$2 } = __require("node:buffer");
	const { stringify: stringify$2 } = __require("node:querystring");
	const { EventEmitter: EE$2 } = __require("node:events");
	const timers$1 = require_timers();
	const { InvalidArgumentError: InvalidArgumentError$30, ConnectTimeoutError } = require_errors();
	const { headerNameLowerCasedRecord: headerNameLowerCasedRecord$1 } = require_constants$4();
	const { tree } = require_tree();
	const [nodeMajor, nodeMinor] = process.versions.node.split(".", 2).map((v) => Number(v));
	var BodyAsyncIterable$1 = class {
		constructor(body) {
			this[kBody$2] = body;
			this[kBodyUsed$1] = false;
		}
		async *[Symbol.asyncIterator]() {
			assert$29(!this[kBodyUsed$1], "disturbed");
			this[kBodyUsed$1] = true;
			yield* this[kBody$2];
		}
	};
	function noop$11() {}
	/**
	* @param {*} body
	* @returns {*}
	*/
	function wrapRequestBody$1(body) {
		if (isStream$2(body)) {
			if (bodyLength(body) === 0) body.on("data", function() {
				assert$29(false);
			});
			if (typeof body.readableDidRead !== "boolean") {
				body[kBodyUsed$1] = false;
				EE$2.prototype.on.call(body, "data", function() {
					this[kBodyUsed$1] = true;
				});
			}
			return body;
		} else if (body && typeof body.pipeTo === "function") return new BodyAsyncIterable$1(body);
		else if (body && typeof body !== "string" && !ArrayBuffer.isView(body) && isIterable$1(body)) return new BodyAsyncIterable$1(body);
		else return body;
	}
	/**
	* @param {*} obj
	* @returns {obj is import('node:stream').Stream}
	*/
	function isStream$2(obj) {
		return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
	}
	/**
	* @param {*} object
	* @returns {object is Blob}
	* based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)
	*/
	function isBlobLike$1(object$1) {
		if (object$1 === null) return false;
		else if (object$1 instanceof Blob$2) return true;
		else if (typeof object$1 !== "object") return false;
		else {
			const sTag = object$1[Symbol.toStringTag];
			return (sTag === "Blob" || sTag === "File") && ("stream" in object$1 && typeof object$1.stream === "function" || "arrayBuffer" in object$1 && typeof object$1.arrayBuffer === "function");
		}
	}
	/**
	* @param {string} url The URL to add the query params to
	* @param {import('node:querystring').ParsedUrlQueryInput} queryParams The object to serialize into a URL query string
	* @returns {string} The URL with the query params added
	*/
	function serializePathWithQuery$4(url, queryParams) {
		if (url.includes("?") || url.includes("#")) throw new Error("Query params cannot be passed when url already contains \"?\" or \"#\".");
		const stringified = stringify$2(queryParams);
		if (stringified) url += "?" + stringified;
		return url;
	}
	/**
	* @param {number|string|undefined} port
	* @returns {boolean}
	*/
	function isValidPort(port) {
		const value = parseInt(port, 10);
		return value === Number(port) && value >= 0 && value <= 65535;
	}
	/**
	* Check if the value is a valid http or https prefixed string.
	*
	* @param {string} value
	* @returns {boolean}
	*/
	function isHttpOrHttpsPrefixed(value) {
		return value != null && value[0] === "h" && value[1] === "t" && value[2] === "t" && value[3] === "p" && (value[4] === ":" || value[4] === "s" && value[5] === ":");
	}
	/**
	* @param {string|URL|Record<string,string>} url
	* @returns {URL}
	*/
	function parseURL(url) {
		if (typeof url === "string") {
			/**
			* @type {URL}
			*/
			url = new URL(url);
			if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) throw new InvalidArgumentError$30("Invalid URL protocol: the URL must start with `http:` or `https:`.");
			return url;
		}
		if (!url || typeof url !== "object") throw new InvalidArgumentError$30("Invalid URL: The URL argument must be a non-null object.");
		if (!(url instanceof URL)) {
			if (url.port != null && url.port !== "" && isValidPort(url.port) === false) throw new InvalidArgumentError$30("Invalid URL: port must be a valid integer or a string representation of an integer.");
			if (url.path != null && typeof url.path !== "string") throw new InvalidArgumentError$30("Invalid URL path: the path must be a string or null/undefined.");
			if (url.pathname != null && typeof url.pathname !== "string") throw new InvalidArgumentError$30("Invalid URL pathname: the pathname must be a string or null/undefined.");
			if (url.hostname != null && typeof url.hostname !== "string") throw new InvalidArgumentError$30("Invalid URL hostname: the hostname must be a string or null/undefined.");
			if (url.origin != null && typeof url.origin !== "string") throw new InvalidArgumentError$30("Invalid URL origin: the origin must be a string or null/undefined.");
			if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) throw new InvalidArgumentError$30("Invalid URL protocol: the URL must start with `http:` or `https:`.");
			const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
			let origin = url.origin != null ? url.origin : `${url.protocol || ""}//${url.hostname || ""}:${port}`;
			let path$9 = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;
			if (origin[origin.length - 1] === "/") origin = origin.slice(0, origin.length - 1);
			if (path$9 && path$9[0] !== "/") path$9 = `/${path$9}`;
			return new URL(`${origin}${path$9}`);
		}
		if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) throw new InvalidArgumentError$30("Invalid URL protocol: the URL must start with `http:` or `https:`.");
		return url;
	}
	/**
	* @param {string|URL|Record<string, string>} url
	* @returns {URL}
	*/
	function parseOrigin$1(url) {
		url = parseURL(url);
		if (url.pathname !== "/" || url.search || url.hash) throw new InvalidArgumentError$30("invalid url");
		return url;
	}
	/**
	* @param {string} host
	* @returns {string}
	*/
	function getHostname(host) {
		if (host[0] === "[") {
			const idx$1 = host.indexOf("]");
			assert$29(idx$1 !== -1);
			return host.substring(1, idx$1);
		}
		const idx = host.indexOf(":");
		if (idx === -1) return host;
		return host.substring(0, idx);
	}
	/**
	* IP addresses are not valid server names per RFC6066
	* Currently, the only server names supported are DNS hostnames
	* @param {string|null} host
	* @returns {string|null}
	*/
	function getServerName$1(host) {
		if (!host) return null;
		assert$29(typeof host === "string");
		const servername = getHostname(host);
		if (net$2.isIP(servername)) return "";
		return servername;
	}
	/**
	* @function
	* @template T
	* @param {T} obj
	* @returns {T}
	*/
	function deepClone(obj) {
		return JSON.parse(JSON.stringify(obj));
	}
	/**
	* @param {*} obj
	* @returns {obj is AsyncIterable}
	*/
	function isAsyncIterable(obj) {
		return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
	}
	/**
	* @param {*} obj
	* @returns {obj is Iterable}
	*/
	function isIterable$1(obj) {
		return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
	}
	/**
	* @param {Blob|Buffer|import ('stream').Stream} body
	* @returns {number|null}
	*/
	function bodyLength(body) {
		if (body == null) return 0;
		else if (isStream$2(body)) {
			const state = body._readableState;
			return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;
		} else if (isBlobLike$1(body)) return body.size != null ? body.size : null;
		else if (isBuffer$1(body)) return body.byteLength;
		return null;
	}
	/**
	* @param {import ('stream').Stream} body
	* @returns {boolean}
	*/
	function isDestroyed(body) {
		return body && !!(body.destroyed || body[kDestroyed$2] || stream$1.isDestroyed?.(body));
	}
	/**
	* @param {import ('stream').Stream} stream
	* @param {Error} [err]
	* @returns {void}
	*/
	function destroy$1(stream$4, err) {
		if (stream$4 == null || !isStream$2(stream$4) || isDestroyed(stream$4)) return;
		if (typeof stream$4.destroy === "function") {
			if (Object.getPrototypeOf(stream$4).constructor === IncomingMessage) stream$4.socket = null;
			stream$4.destroy(err);
		} else if (err) queueMicrotask(() => {
			stream$4.emit("error", err);
		});
		if (stream$4.destroyed !== true) stream$4[kDestroyed$2] = true;
	}
	const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
	/**
	* @param {string} val
	* @returns {number | null}
	*/
	function parseKeepAliveTimeout(val) {
		const m = val.match(KEEPALIVE_TIMEOUT_EXPR);
		return m ? parseInt(m[1], 10) * 1e3 : null;
	}
	/**
	* Retrieves a header name and returns its lowercase value.
	* @param {string | Buffer} value Header name
	* @returns {string}
	*/
	function headerNameToString(value) {
		return typeof value === "string" ? headerNameLowerCasedRecord$1[value] ?? value.toLowerCase() : tree.lookup(value) ?? value.toString("latin1").toLowerCase();
	}
	/**
	* Receive the buffer as a string and return its lowercase value.
	* @param {Buffer} value Header name
	* @returns {string}
	*/
	function bufferToLowerCasedHeaderName$2(value) {
		return tree.lookup(value) ?? value.toString("latin1").toLowerCase();
	}
	/**
	* @param {(Buffer | string)[]} headers
	* @param {Record<string, string | string[]>} [obj]
	* @returns {Record<string, string | string[]>}
	*/
	function parseHeaders$1(headers, obj) {
		if (obj === void 0) obj = {};
		for (let i$1 = 0; i$1 < headers.length; i$1 += 2) {
			const key = headerNameToString(headers[i$1]);
			let val = obj[key];
			if (val) {
				if (typeof val === "string") {
					val = [val];
					obj[key] = val;
				}
				val.push(headers[i$1 + 1].toString("utf8"));
			} else {
				const headersValue = headers[i$1 + 1];
				if (typeof headersValue === "string") obj[key] = headersValue;
				else obj[key] = Array.isArray(headersValue) ? headersValue.map((x) => x.toString("utf8")) : headersValue.toString("utf8");
			}
		}
		if ("content-length" in obj && "content-disposition" in obj) obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
		return obj;
	}
	/**
	* @param {Buffer[]} headers
	* @returns {string[]}
	*/
	function parseRawHeaders(headers) {
		const headersLength = headers.length;
		/**
		* @type {string[]}
		*/
		const ret = new Array(headersLength);
		let hasContentLength = false;
		let contentDispositionIdx = -1;
		let key;
		let val;
		let kLen = 0;
		for (let n$1 = 0; n$1 < headersLength; n$1 += 2) {
			key = headers[n$1];
			val = headers[n$1 + 1];
			typeof key !== "string" && (key = key.toString());
			typeof val !== "string" && (val = val.toString("utf8"));
			kLen = key.length;
			if (kLen === 14 && key[7] === "-" && (key === "content-length" || key.toLowerCase() === "content-length")) hasContentLength = true;
			else if (kLen === 19 && key[7] === "-" && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) contentDispositionIdx = n$1 + 1;
			ret[n$1] = key;
			ret[n$1 + 1] = val;
		}
		if (hasContentLength && contentDispositionIdx !== -1) ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
		return ret;
	}
	/**
	* @param {string[]} headers
	* @param {Buffer[]} headers
	*/
	function encodeRawHeaders(headers) {
		if (!Array.isArray(headers)) throw new TypeError("expected headers to be an array");
		return headers.map((x) => Buffer.from(x));
	}
	/**
	* @param {*} buffer
	* @returns {buffer is Buffer}
	*/
	function isBuffer$1(buffer$1) {
		return buffer$1 instanceof Uint8Array || Buffer.isBuffer(buffer$1);
	}
	/**
	* Asserts that the handler object is a request handler.
	*
	* @param {object} handler
	* @param {string} method
	* @param {string} [upgrade]
	* @returns {asserts handler is import('../api/api-request').RequestHandler}
	*/
	function assertRequestHandler$1(handler$1, method, upgrade$2) {
		if (!handler$1 || typeof handler$1 !== "object") throw new InvalidArgumentError$30("handler must be an object");
		if (typeof handler$1.onRequestStart === "function") return;
		if (typeof handler$1.onConnect !== "function") throw new InvalidArgumentError$30("invalid onConnect method");
		if (typeof handler$1.onError !== "function") throw new InvalidArgumentError$30("invalid onError method");
		if (typeof handler$1.onBodySent !== "function" && handler$1.onBodySent !== void 0) throw new InvalidArgumentError$30("invalid onBodySent method");
		if (upgrade$2 || method === "CONNECT") {
			if (typeof handler$1.onUpgrade !== "function") throw new InvalidArgumentError$30("invalid onUpgrade method");
		} else {
			if (typeof handler$1.onHeaders !== "function") throw new InvalidArgumentError$30("invalid onHeaders method");
			if (typeof handler$1.onData !== "function") throw new InvalidArgumentError$30("invalid onData method");
			if (typeof handler$1.onComplete !== "function") throw new InvalidArgumentError$30("invalid onComplete method");
		}
	}
	/**
	* A body is disturbed if it has been read from and it cannot be re-used without
	* losing state or data.
	* @param {import('node:stream').Readable} body
	* @returns {boolean}
	*/
	function isDisturbed$3(body) {
		return !!(body && (stream$1.isDisturbed(body) || body[kBodyUsed$1]));
	}
	/**
	* @typedef {object} SocketInfo
	* @property {string} [localAddress]
	* @property {number} [localPort]
	* @property {string} [remoteAddress]
	* @property {number} [remotePort]
	* @property {string} [remoteFamily]
	* @property {number} [timeout]
	* @property {number} bytesWritten
	* @property {number} bytesRead
	*/
	/**
	* @param {import('net').Socket} socket
	* @returns {SocketInfo}
	*/
	function getSocketInfo(socket) {
		return {
			localAddress: socket.localAddress,
			localPort: socket.localPort,
			remoteAddress: socket.remoteAddress,
			remotePort: socket.remotePort,
			remoteFamily: socket.remoteFamily,
			timeout: socket.timeout,
			bytesWritten: socket.bytesWritten,
			bytesRead: socket.bytesRead
		};
	}
	/**
	* @param {Iterable} iterable
	* @returns {ReadableStream}
	*/
	function ReadableStreamFrom$3(iterable) {
		let iterator$1;
		return new ReadableStream({
			async start() {
				iterator$1 = iterable[Symbol.asyncIterator]();
			},
			pull(controller) {
				async function pull() {
					const { done, value } = await iterator$1.next();
					if (done) queueMicrotask(() => {
						controller.close();
						controller.byobRequest?.respond(0);
					});
					else {
						const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
						if (buf.byteLength) controller.enqueue(new Uint8Array(buf));
						else return await pull();
					}
				}
				return pull();
			},
			async cancel() {
				await iterator$1.return();
			},
			type: "bytes"
		});
	}
	/**
	* The object should be a FormData instance and contains all the required
	* methods.
	* @param {*} object
	* @returns {object is FormData}
	*/
	function isFormDataLike$1(object$1) {
		return object$1 && typeof object$1 === "object" && typeof object$1.append === "function" && typeof object$1.delete === "function" && typeof object$1.get === "function" && typeof object$1.getAll === "function" && typeof object$1.has === "function" && typeof object$1.set === "function" && object$1[Symbol.toStringTag] === "FormData";
	}
	function addAbortListener$3(signal, listener) {
		if ("addEventListener" in signal) {
			signal.addEventListener("abort", listener, { once: true });
			return () => signal.removeEventListener("abort", listener);
		}
		signal.once("abort", listener);
		return () => signal.removeListener("abort", listener);
	}
	/**
	* @see https://tools.ietf.org/html/rfc7230#section-3.2.6
	* @param {number} c
	* @returns {boolean}
	*/
	function isTokenCharCode(c$1) {
		switch (c$1) {
			case 34:
			case 40:
			case 41:
			case 44:
			case 47:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 91:
			case 92:
			case 93:
			case 123:
			case 125: return false;
			default: return c$1 >= 33 && c$1 <= 126;
		}
	}
	/**
	* @param {string} characters
	* @returns {boolean}
	*/
	function isValidHTTPToken$3(characters) {
		if (characters.length === 0) return false;
		for (let i$1 = 0; i$1 < characters.length; ++i$1) if (!isTokenCharCode(characters.charCodeAt(i$1))) return false;
		return true;
	}
	/**
	* Matches if val contains an invalid field-vchar
	*  field-value    = *( field-content / obs-fold )
	*  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
	*  field-vchar    = VCHAR / obs-text
	*/
	const headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
	/**
	* @param {string} characters
	* @returns {boolean}
	*/
	function isValidHeaderValue$3(characters) {
		return !headerCharRegex.test(characters);
	}
	const rangeHeaderRegex = /^bytes (\d+)-(\d+)\/(\d+)?$/;
	/**
	* @typedef {object} RangeHeader
	* @property {number} start
	* @property {number | null} end
	* @property {number | null} size
	*/
	/**
	* Parse accordingly to RFC 9110
	* @see https://www.rfc-editor.org/rfc/rfc9110#field.content-range
	* @param {string} [range]
	* @returns {RangeHeader|null}
	*/
	function parseRangeHeader$1(range) {
		if (range == null || range === "") return {
			start: 0,
			end: null,
			size: null
		};
		const m = range ? range.match(rangeHeaderRegex) : null;
		return m ? {
			start: parseInt(m[1]),
			end: m[2] ? parseInt(m[2]) : null,
			size: m[3] ? parseInt(m[3]) : null
		} : null;
	}
	/**
	* @template {import("events").EventEmitter} T
	* @param {T} obj
	* @param {string} name
	* @param {(...args: any[]) => void} listener
	* @returns {T}
	*/
	function addListener(obj, name$2, listener) {
		const listeners = obj[kListeners] ??= [];
		listeners.push([name$2, listener]);
		obj.on(name$2, listener);
		return obj;
	}
	/**
	* @template {import("events").EventEmitter} T
	* @param {T} obj
	* @returns {T}
	*/
	function removeAllListeners$1(obj) {
		if (obj[kListeners] != null) {
			for (const [name$2, listener] of obj[kListeners]) obj.removeListener(name$2, listener);
			obj[kListeners] = null;
		}
		return obj;
	}
	/**
	* @param {import ('../dispatcher/client')} client
	* @param {import ('../core/request')} request
	* @param {Error} err
	*/
	function errorRequest(client, request$3, err) {
		try {
			request$3.onError(err);
			assert$29(request$3.aborted);
		} catch (err$1) {
			client.emit("error", err$1);
		}
	}
	/**
	* @param {WeakRef<net.Socket>} socketWeakRef
	* @param {object} opts
	* @param {number} opts.timeout
	* @param {string} opts.hostname
	* @param {number} opts.port
	* @returns {() => void}
	*/
	const setupConnectTimeout = process.platform === "win32" ? (socketWeakRef, opts) => {
		if (!opts.timeout) return noop$11;
		let s1 = null;
		let s2 = null;
		const fastTimer = timers$1.setFastTimeout(() => {
			s1 = setImmediate(() => {
				s2 = setImmediate(() => onConnectTimeout(socketWeakRef.deref(), opts));
			});
		}, opts.timeout);
		return () => {
			timers$1.clearFastTimeout(fastTimer);
			clearImmediate(s1);
			clearImmediate(s2);
		};
	} : (socketWeakRef, opts) => {
		if (!opts.timeout) return noop$11;
		let s1 = null;
		const fastTimer = timers$1.setFastTimeout(() => {
			s1 = setImmediate(() => {
				onConnectTimeout(socketWeakRef.deref(), opts);
			});
		}, opts.timeout);
		return () => {
			timers$1.clearFastTimeout(fastTimer);
			clearImmediate(s1);
		};
	};
	/**
	* @param {net.Socket} socket
	* @param {object} opts
	* @param {number} opts.timeout
	* @param {string} opts.hostname
	* @param {number} opts.port
	*/
	function onConnectTimeout(socket, opts) {
		if (socket == null) return;
		let message = "Connect Timeout Error";
		if (Array.isArray(socket.autoSelectFamilyAttemptedAddresses)) message += ` (attempted addresses: ${socket.autoSelectFamilyAttemptedAddresses.join(", ")},`;
		else message += ` (attempted address: ${opts.hostname}:${opts.port},`;
		message += ` timeout: ${opts.timeout}ms)`;
		destroy$1(socket, new ConnectTimeoutError(message));
	}
	const kEnumerableProperty$11 = Object.create(null);
	kEnumerableProperty$11.enumerable = true;
	const normalizedMethodRecordsBase$2 = {
		delete: "DELETE",
		DELETE: "DELETE",
		get: "GET",
		GET: "GET",
		head: "HEAD",
		HEAD: "HEAD",
		options: "OPTIONS",
		OPTIONS: "OPTIONS",
		post: "POST",
		POST: "POST",
		put: "PUT",
		PUT: "PUT"
	};
	const normalizedMethodRecords$2 = {
		...normalizedMethodRecordsBase$2,
		patch: "patch",
		PATCH: "PATCH"
	};
	Object.setPrototypeOf(normalizedMethodRecordsBase$2, null);
	Object.setPrototypeOf(normalizedMethodRecords$2, null);
	module.exports = {
		kEnumerableProperty: kEnumerableProperty$11,
		isDisturbed: isDisturbed$3,
		isBlobLike: isBlobLike$1,
		parseOrigin: parseOrigin$1,
		parseURL,
		getServerName: getServerName$1,
		isStream: isStream$2,
		isIterable: isIterable$1,
		isAsyncIterable,
		isDestroyed,
		headerNameToString,
		bufferToLowerCasedHeaderName: bufferToLowerCasedHeaderName$2,
		addListener,
		removeAllListeners: removeAllListeners$1,
		errorRequest,
		parseRawHeaders,
		encodeRawHeaders,
		parseHeaders: parseHeaders$1,
		parseKeepAliveTimeout,
		destroy: destroy$1,
		bodyLength,
		deepClone,
		ReadableStreamFrom: ReadableStreamFrom$3,
		isBuffer: isBuffer$1,
		assertRequestHandler: assertRequestHandler$1,
		getSocketInfo,
		isFormDataLike: isFormDataLike$1,
		serializePathWithQuery: serializePathWithQuery$4,
		addAbortListener: addAbortListener$3,
		isValidHTTPToken: isValidHTTPToken$3,
		isValidHeaderValue: isValidHeaderValue$3,
		isTokenCharCode,
		parseRangeHeader: parseRangeHeader$1,
		normalizedMethodRecordsBase: normalizedMethodRecordsBase$2,
		normalizedMethodRecords: normalizedMethodRecords$2,
		isValidPort,
		isHttpOrHttpsPrefixed,
		nodeMajor,
		nodeMinor,
		safeHTTPMethods: Object.freeze([
			"GET",
			"HEAD",
			"OPTIONS",
			"TRACE"
		]),
		wrapRequestBody: wrapRequestBody$1,
		setupConnectTimeout
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/util/stats.js
var require_stats = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/util/stats.js"(exports, module) {
	const { kConnected: kConnected$4, kPending: kPending$4, kRunning: kRunning$5, kSize: kSize$5, kFree: kFree$1, kQueued: kQueued$1 } = require_symbols();
	var ClientStats$1 = class {
		constructor(client) {
			this.connected = client[kConnected$4];
			this.pending = client[kPending$4];
			this.running = client[kRunning$5];
			this.size = client[kSize$5];
		}
	};
	var PoolStats$1 = class {
		constructor(pool) {
			this.connected = pool[kConnected$4];
			this.free = pool[kFree$1];
			this.pending = pool[kPending$4];
			this.queued = pool[kQueued$1];
			this.running = pool[kRunning$5];
			this.size = pool[kSize$5];
		}
	};
	module.exports = {
		ClientStats: ClientStats$1,
		PoolStats: PoolStats$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/diagnostics.js
var require_diagnostics = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/diagnostics.js"(exports, module) {
	const diagnosticsChannel = __require("node:diagnostics_channel");
	const util$22 = __require("node:util");
	const undiciDebugLog = util$22.debuglog("undici");
	const fetchDebuglog = util$22.debuglog("fetch");
	const websocketDebuglog = util$22.debuglog("websocket");
	const channels$6 = {
		beforeConnect: diagnosticsChannel.channel("undici:client:beforeConnect"),
		connected: diagnosticsChannel.channel("undici:client:connected"),
		connectError: diagnosticsChannel.channel("undici:client:connectError"),
		sendHeaders: diagnosticsChannel.channel("undici:client:sendHeaders"),
		create: diagnosticsChannel.channel("undici:request:create"),
		bodySent: diagnosticsChannel.channel("undici:request:bodySent"),
		bodyChunkSent: diagnosticsChannel.channel("undici:request:bodyChunkSent"),
		bodyChunkReceived: diagnosticsChannel.channel("undici:request:bodyChunkReceived"),
		headers: diagnosticsChannel.channel("undici:request:headers"),
		trailers: diagnosticsChannel.channel("undici:request:trailers"),
		error: diagnosticsChannel.channel("undici:request:error"),
		open: diagnosticsChannel.channel("undici:websocket:open"),
		close: diagnosticsChannel.channel("undici:websocket:close"),
		socketError: diagnosticsChannel.channel("undici:websocket:socket_error"),
		ping: diagnosticsChannel.channel("undici:websocket:ping"),
		pong: diagnosticsChannel.channel("undici:websocket:pong")
	};
	let isTrackingClientEvents = false;
	function trackClientEvents(debugLog = undiciDebugLog) {
		if (isTrackingClientEvents) return;
		isTrackingClientEvents = true;
		diagnosticsChannel.subscribe("undici:client:beforeConnect", (evt) => {
			const { connectParams: { version: version$1, protocol, port, host } } = evt;
			debugLog("connecting to %s%s using %s%s", host, port ? `:${port}` : "", protocol, version$1);
		});
		diagnosticsChannel.subscribe("undici:client:connected", (evt) => {
			const { connectParams: { version: version$1, protocol, port, host } } = evt;
			debugLog("connected to %s%s using %s%s", host, port ? `:${port}` : "", protocol, version$1);
		});
		diagnosticsChannel.subscribe("undici:client:connectError", (evt) => {
			const { connectParams: { version: version$1, protocol, port, host }, error: error$1 } = evt;
			debugLog("connection to %s%s using %s%s errored - %s", host, port ? `:${port}` : "", protocol, version$1, error$1.message);
		});
		diagnosticsChannel.subscribe("undici:client:sendHeaders", (evt) => {
			const { request: { method, path: path$9, origin } } = evt;
			debugLog("sending request to %s %s%s", method, origin, path$9);
		});
	}
	let isTrackingRequestEvents = false;
	function trackRequestEvents(debugLog = undiciDebugLog) {
		if (isTrackingRequestEvents) return;
		isTrackingRequestEvents = true;
		diagnosticsChannel.subscribe("undici:request:headers", (evt) => {
			const { request: { method, path: path$9, origin }, response: { statusCode } } = evt;
			debugLog("received response to %s %s%s - HTTP %d", method, origin, path$9, statusCode);
		});
		diagnosticsChannel.subscribe("undici:request:trailers", (evt) => {
			const { request: { method, path: path$9, origin } } = evt;
			debugLog("trailers received from %s %s%s", method, origin, path$9);
		});
		diagnosticsChannel.subscribe("undici:request:error", (evt) => {
			const { request: { method, path: path$9, origin }, error: error$1 } = evt;
			debugLog("request to %s %s%s errored - %s", method, origin, path$9, error$1.message);
		});
	}
	let isTrackingWebSocketEvents = false;
	function trackWebSocketEvents(debugLog = websocketDebuglog) {
		if (isTrackingWebSocketEvents) return;
		isTrackingWebSocketEvents = true;
		diagnosticsChannel.subscribe("undici:websocket:open", (evt) => {
			const { address: { address, port } } = evt;
			debugLog("connection opened %s%s", address, port ? `:${port}` : "");
		});
		diagnosticsChannel.subscribe("undici:websocket:close", (evt) => {
			const { websocket, code, reason } = evt;
			debugLog("closed connection to %s - %s %s", websocket.url, code, reason);
		});
		diagnosticsChannel.subscribe("undici:websocket:socket_error", (err) => {
			debugLog("connection errored - %s", err.message);
		});
		diagnosticsChannel.subscribe("undici:websocket:ping", (evt) => {
			debugLog("ping received");
		});
		diagnosticsChannel.subscribe("undici:websocket:pong", (evt) => {
			debugLog("pong received");
		});
	}
	if (undiciDebugLog.enabled || fetchDebuglog.enabled) {
		trackClientEvents(fetchDebuglog.enabled ? fetchDebuglog : undiciDebugLog);
		trackRequestEvents(fetchDebuglog.enabled ? fetchDebuglog : undiciDebugLog);
	}
	if (websocketDebuglog.enabled) {
		trackClientEvents(undiciDebugLog.enabled ? undiciDebugLog : websocketDebuglog);
		trackWebSocketEvents(websocketDebuglog);
	}
	module.exports = { channels: channels$6 };
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/request.js
var require_request$1 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/request.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$29, NotSupportedError: NotSupportedError$1 } = require_errors();
	const assert$28 = __require("node:assert");
	const { isValidHTTPToken: isValidHTTPToken$2, isValidHeaderValue: isValidHeaderValue$2, isStream: isStream$1, destroy, isBuffer, isFormDataLike, isIterable, isBlobLike, serializePathWithQuery: serializePathWithQuery$3, assertRequestHandler, getServerName, normalizedMethodRecords: normalizedMethodRecords$1 } = require_util$5();
	const { channels: channels$5 } = require_diagnostics();
	const { headerNameLowerCasedRecord } = require_constants$4();
	const invalidPathRegex = /[^\u0021-\u00ff]/;
	const kHandler = Symbol("handler");
	var Request$4 = class {
		constructor(origin, { path: path$9, method, body, headers, query, idempotent, blocking, upgrade: upgrade$2, headersTimeout, bodyTimeout, reset: reset$1, expectContinue, servername, throwOnError, maxRedirections }, handler$1) {
			if (typeof path$9 !== "string") throw new InvalidArgumentError$29("path must be a string");
			else if (path$9[0] !== "/" && !(path$9.startsWith("http://") || path$9.startsWith("https://")) && method !== "CONNECT") throw new InvalidArgumentError$29("path must be an absolute URL or start with a slash");
			else if (invalidPathRegex.test(path$9)) throw new InvalidArgumentError$29("invalid request path");
			if (typeof method !== "string") throw new InvalidArgumentError$29("method must be a string");
			else if (normalizedMethodRecords$1[method] === void 0 && !isValidHTTPToken$2(method)) throw new InvalidArgumentError$29("invalid request method");
			if (upgrade$2 && typeof upgrade$2 !== "string") throw new InvalidArgumentError$29("upgrade must be a string");
			if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) throw new InvalidArgumentError$29("invalid headersTimeout");
			if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) throw new InvalidArgumentError$29("invalid bodyTimeout");
			if (reset$1 != null && typeof reset$1 !== "boolean") throw new InvalidArgumentError$29("invalid reset");
			if (expectContinue != null && typeof expectContinue !== "boolean") throw new InvalidArgumentError$29("invalid expectContinue");
			if (throwOnError != null) throw new InvalidArgumentError$29("invalid throwOnError");
			if (maxRedirections != null && maxRedirections !== 0) throw new InvalidArgumentError$29("maxRedirections is not supported, use the redirect interceptor");
			this.headersTimeout = headersTimeout;
			this.bodyTimeout = bodyTimeout;
			this.method = method;
			this.abort = null;
			if (body == null) this.body = null;
			else if (isStream$1(body)) {
				this.body = body;
				const rState = this.body._readableState;
				if (!rState || !rState.autoDestroy) {
					this.endHandler = function autoDestroy() {
						destroy(this);
					};
					this.body.on("end", this.endHandler);
				}
				this.errorHandler = (err) => {
					if (this.abort) this.abort(err);
					else this.error = err;
				};
				this.body.on("error", this.errorHandler);
			} else if (isBuffer(body)) this.body = body.byteLength ? body : null;
			else if (ArrayBuffer.isView(body)) this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
			else if (body instanceof ArrayBuffer) this.body = body.byteLength ? Buffer.from(body) : null;
			else if (typeof body === "string") this.body = body.length ? Buffer.from(body) : null;
			else if (isFormDataLike(body) || isIterable(body) || isBlobLike(body)) this.body = body;
			else throw new InvalidArgumentError$29("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
			this.completed = false;
			this.aborted = false;
			this.upgrade = upgrade$2 || null;
			this.path = query ? serializePathWithQuery$3(path$9, query) : path$9;
			this.origin = origin;
			this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
			this.blocking = blocking ?? this.method !== "HEAD";
			this.reset = reset$1 == null ? null : reset$1;
			this.host = null;
			this.contentLength = null;
			this.contentType = null;
			this.headers = [];
			this.expectContinue = expectContinue != null ? expectContinue : false;
			if (Array.isArray(headers)) {
				if (headers.length % 2 !== 0) throw new InvalidArgumentError$29("headers array must be even");
				for (let i$1 = 0; i$1 < headers.length; i$1 += 2) processHeader(this, headers[i$1], headers[i$1 + 1]);
			} else if (headers && typeof headers === "object") if (headers[Symbol.iterator]) for (const header of headers) {
				if (!Array.isArray(header) || header.length !== 2) throw new InvalidArgumentError$29("headers must be in key-value pair format");
				processHeader(this, header[0], header[1]);
			}
			else {
				const keys$1 = Object.keys(headers);
				for (let i$1 = 0; i$1 < keys$1.length; ++i$1) processHeader(this, keys$1[i$1], headers[keys$1[i$1]]);
			}
			else if (headers != null) throw new InvalidArgumentError$29("headers must be an object or an array");
			assertRequestHandler(handler$1, method, upgrade$2);
			this.servername = servername || getServerName(this.host) || null;
			this[kHandler] = handler$1;
			if (channels$5.create.hasSubscribers) channels$5.create.publish({ request: this });
		}
		onBodySent(chunk) {
			if (channels$5.bodyChunkSent.hasSubscribers) channels$5.bodyChunkSent.publish({
				request: this,
				chunk
			});
			if (this[kHandler].onBodySent) try {
				return this[kHandler].onBodySent(chunk);
			} catch (err) {
				this.abort(err);
			}
		}
		onRequestSent() {
			if (channels$5.bodySent.hasSubscribers) channels$5.bodySent.publish({ request: this });
			if (this[kHandler].onRequestSent) try {
				return this[kHandler].onRequestSent();
			} catch (err) {
				this.abort(err);
			}
		}
		onConnect(abort$2) {
			assert$28(!this.aborted);
			assert$28(!this.completed);
			if (this.error) abort$2(this.error);
			else {
				this.abort = abort$2;
				return this[kHandler].onConnect(abort$2);
			}
		}
		onResponseStarted() {
			return this[kHandler].onResponseStarted?.();
		}
		onHeaders(statusCode, headers, resume$2, statusText) {
			assert$28(!this.aborted);
			assert$28(!this.completed);
			if (channels$5.headers.hasSubscribers) channels$5.headers.publish({
				request: this,
				response: {
					statusCode,
					headers,
					statusText
				}
			});
			try {
				return this[kHandler].onHeaders(statusCode, headers, resume$2, statusText);
			} catch (err) {
				this.abort(err);
			}
		}
		onData(chunk) {
			assert$28(!this.aborted);
			assert$28(!this.completed);
			if (channels$5.bodyChunkReceived.hasSubscribers) channels$5.bodyChunkReceived.publish({
				request: this,
				chunk
			});
			try {
				return this[kHandler].onData(chunk);
			} catch (err) {
				this.abort(err);
				return false;
			}
		}
		onUpgrade(statusCode, headers, socket) {
			assert$28(!this.aborted);
			assert$28(!this.completed);
			return this[kHandler].onUpgrade(statusCode, headers, socket);
		}
		onComplete(trailers) {
			this.onFinally();
			assert$28(!this.aborted);
			assert$28(!this.completed);
			this.completed = true;
			if (channels$5.trailers.hasSubscribers) channels$5.trailers.publish({
				request: this,
				trailers
			});
			try {
				return this[kHandler].onComplete(trailers);
			} catch (err) {
				this.onError(err);
			}
		}
		onError(error$1) {
			this.onFinally();
			if (channels$5.error.hasSubscribers) channels$5.error.publish({
				request: this,
				error: error$1
			});
			if (this.aborted) return;
			this.aborted = true;
			return this[kHandler].onError(error$1);
		}
		onFinally() {
			if (this.errorHandler) {
				this.body.off("error", this.errorHandler);
				this.errorHandler = null;
			}
			if (this.endHandler) {
				this.body.off("end", this.endHandler);
				this.endHandler = null;
			}
		}
		addHeader(key, value) {
			processHeader(this, key, value);
			return this;
		}
	};
	function processHeader(request$3, key, val) {
		if (val && typeof val === "object" && !Array.isArray(val)) throw new InvalidArgumentError$29(`invalid ${key} header`);
		else if (val === void 0) return;
		let headerName = headerNameLowerCasedRecord[key];
		if (headerName === void 0) {
			headerName = key.toLowerCase();
			if (headerNameLowerCasedRecord[headerName] === void 0 && !isValidHTTPToken$2(headerName)) throw new InvalidArgumentError$29("invalid header key");
		}
		if (Array.isArray(val)) {
			const arr = [];
			for (let i$1 = 0; i$1 < val.length; i$1++) if (typeof val[i$1] === "string") {
				if (!isValidHeaderValue$2(val[i$1])) throw new InvalidArgumentError$29(`invalid ${key} header`);
				arr.push(val[i$1]);
			} else if (val[i$1] === null) arr.push("");
			else if (typeof val[i$1] === "object") throw new InvalidArgumentError$29(`invalid ${key} header`);
			else arr.push(`${val[i$1]}`);
			val = arr;
		} else if (typeof val === "string") {
			if (!isValidHeaderValue$2(val)) throw new InvalidArgumentError$29(`invalid ${key} header`);
		} else if (val === null) val = "";
		else val = `${val}`;
		if (request$3.host === null && headerName === "host") {
			if (typeof val !== "string") throw new InvalidArgumentError$29("invalid host header");
			request$3.host = val;
		} else if (request$3.contentLength === null && headerName === "content-length") {
			request$3.contentLength = parseInt(val, 10);
			if (!Number.isFinite(request$3.contentLength)) throw new InvalidArgumentError$29("invalid content-length header");
		} else if (request$3.contentType === null && headerName === "content-type") {
			request$3.contentType = val;
			request$3.headers.push(key, val);
		} else if (headerName === "transfer-encoding" || headerName === "keep-alive" || headerName === "upgrade") throw new InvalidArgumentError$29(`invalid ${headerName} header`);
		else if (headerName === "connection") {
			const value = typeof val === "string" ? val.toLowerCase() : null;
			if (value !== "close" && value !== "keep-alive") throw new InvalidArgumentError$29("invalid connection header");
			if (value === "close") request$3.reset = true;
		} else if (headerName === "expect") throw new NotSupportedError$1("expect header not supported");
		else request$3.headers.push(key, val);
	}
	module.exports = Request$4;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/wrap-handler.js
var require_wrap_handler = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/wrap-handler.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$28 } = require_errors();
	module.exports = class WrapHandler$3 {
		#handler;
		constructor(handler$1) {
			this.#handler = handler$1;
		}
		static wrap(handler$1) {
			return handler$1.onRequestStart ? handler$1 : new WrapHandler$3(handler$1);
		}
		onConnect(abort$2, context$1) {
			return this.#handler.onConnect?.(abort$2, context$1);
		}
		onHeaders(statusCode, rawHeaders, resume$2, statusMessage) {
			return this.#handler.onHeaders?.(statusCode, rawHeaders, resume$2, statusMessage);
		}
		onUpgrade(statusCode, rawHeaders, socket) {
			return this.#handler.onUpgrade?.(statusCode, rawHeaders, socket);
		}
		onData(data$1) {
			return this.#handler.onData?.(data$1);
		}
		onComplete(trailers) {
			return this.#handler.onComplete?.(trailers);
		}
		onError(err) {
			if (!this.#handler.onError) throw err;
			return this.#handler.onError?.(err);
		}
		onRequestStart(controller, context$1) {
			this.#handler.onConnect?.((reason) => controller.abort(reason), context$1);
		}
		onRequestUpgrade(controller, statusCode, headers, socket) {
			const rawHeaders = [];
			for (const [key, val] of Object.entries(headers)) rawHeaders.push(Buffer.from(key), Array.isArray(val) ? val.map((v) => Buffer.from(v)) : Buffer.from(val));
			this.#handler.onUpgrade?.(statusCode, rawHeaders, socket);
		}
		onResponseStart(controller, statusCode, headers, statusMessage) {
			const rawHeaders = [];
			for (const [key, val] of Object.entries(headers)) rawHeaders.push(Buffer.from(key), Array.isArray(val) ? val.map((v) => Buffer.from(v)) : Buffer.from(val));
			if (this.#handler.onHeaders?.(statusCode, rawHeaders, () => controller.resume(), statusMessage) === false) controller.pause();
		}
		onResponseData(controller, data$1) {
			if (this.#handler.onData?.(data$1) === false) controller.pause();
		}
		onResponseEnd(controller, trailers) {
			const rawTrailers = [];
			for (const [key, val] of Object.entries(trailers)) rawTrailers.push(Buffer.from(key), Array.isArray(val) ? val.map((v) => Buffer.from(v)) : Buffer.from(val));
			this.#handler.onComplete?.(rawTrailers);
		}
		onResponseError(controller, err) {
			if (!this.#handler.onError) throw new InvalidArgumentError$28("invalid onError method");
			this.#handler.onError?.(err);
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/dispatcher.js
var require_dispatcher = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/dispatcher.js"(exports, module) {
	const EventEmitter$2 = __require("node:events");
	const WrapHandler$2 = require_wrap_handler();
	const wrapInterceptor = (dispatch) => (opts, handler$1) => dispatch(opts, WrapHandler$2.wrap(handler$1));
	var Dispatcher$4 = class extends EventEmitter$2 {
		dispatch() {
			throw new Error("not implemented");
		}
		close() {
			throw new Error("not implemented");
		}
		destroy() {
			throw new Error("not implemented");
		}
		compose(...args) {
			const interceptors = Array.isArray(args[0]) ? args[0] : args;
			let dispatch = this.dispatch.bind(this);
			for (const interceptor of interceptors) {
				if (interceptor == null) continue;
				if (typeof interceptor !== "function") throw new TypeError(`invalid interceptor, expected function received ${typeof interceptor}`);
				dispatch = interceptor(dispatch);
				dispatch = wrapInterceptor(dispatch);
				if (dispatch == null || typeof dispatch !== "function" || dispatch.length !== 2) throw new TypeError("invalid interceptor");
			}
			return new Proxy(this, { get: (target, key) => key === "dispatch" ? dispatch : target[key] });
		}
	};
	module.exports = Dispatcher$4;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/unwrap-handler.js
var require_unwrap_handler = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/unwrap-handler.js"(exports, module) {
	const { parseHeaders } = require_util$5();
	const { InvalidArgumentError: InvalidArgumentError$27 } = require_errors();
	const kResume$4 = Symbol("resume");
	var UnwrapController = class {
		#paused = false;
		#reason = null;
		#aborted = false;
		#abort;
		[kResume$4] = null;
		constructor(abort$2) {
			this.#abort = abort$2;
		}
		pause() {
			this.#paused = true;
		}
		resume() {
			if (this.#paused) {
				this.#paused = false;
				this[kResume$4]?.();
			}
		}
		abort(reason) {
			if (!this.#aborted) {
				this.#aborted = true;
				this.#reason = reason;
				this.#abort(reason);
			}
		}
		get aborted() {
			return this.#aborted;
		}
		get reason() {
			return this.#reason;
		}
		get paused() {
			return this.#paused;
		}
	};
	module.exports = class UnwrapHandler$1 {
		#handler;
		#controller;
		constructor(handler$1) {
			this.#handler = handler$1;
		}
		static unwrap(handler$1) {
			return !handler$1.onRequestStart ? handler$1 : new UnwrapHandler$1(handler$1);
		}
		onConnect(abort$2, context$1) {
			this.#controller = new UnwrapController(abort$2);
			this.#handler.onRequestStart?.(this.#controller, context$1);
		}
		onUpgrade(statusCode, rawHeaders, socket) {
			this.#handler.onRequestUpgrade?.(this.#controller, statusCode, parseHeaders(rawHeaders), socket);
		}
		onHeaders(statusCode, rawHeaders, resume$2, statusMessage) {
			this.#controller[kResume$4] = resume$2;
			this.#handler.onResponseStart?.(this.#controller, statusCode, parseHeaders(rawHeaders), statusMessage);
			return !this.#controller.paused;
		}
		onData(data$1) {
			this.#handler.onResponseData?.(this.#controller, data$1);
			return !this.#controller.paused;
		}
		onComplete(rawTrailers) {
			this.#handler.onResponseEnd?.(this.#controller, parseHeaders(rawTrailers));
		}
		onError(err) {
			if (!this.#handler.onResponseError) throw new InvalidArgumentError$27("invalid onError method");
			this.#handler.onResponseError?.(this.#controller, err);
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/dispatcher-base.js
var require_dispatcher_base = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/dispatcher-base.js"(exports, module) {
	const Dispatcher$3 = require_dispatcher();
	const UnwrapHandler = require_unwrap_handler();
	const { ClientDestroyedError: ClientDestroyedError$1, ClientClosedError, InvalidArgumentError: InvalidArgumentError$26 } = require_errors();
	const { kDestroy: kDestroy$6, kClose: kClose$8, kClosed: kClosed$3, kDestroyed: kDestroyed$1, kDispatch: kDispatch$5 } = require_symbols();
	const kOnDestroyed = Symbol("onDestroyed");
	const kOnClosed = Symbol("onClosed");
	var DispatcherBase$6 = class extends Dispatcher$3 {
		constructor() {
			super();
			this[kDestroyed$1] = false;
			this[kOnDestroyed] = null;
			this[kClosed$3] = false;
			this[kOnClosed] = [];
		}
		get destroyed() {
			return this[kDestroyed$1];
		}
		get closed() {
			return this[kClosed$3];
		}
		close(callback) {
			if (callback === void 0) return new Promise((resolve$1, reject) => {
				this.close((err, data$1) => {
					return err ? reject(err) : resolve$1(data$1);
				});
			});
			if (typeof callback !== "function") throw new InvalidArgumentError$26("invalid callback");
			if (this[kDestroyed$1]) {
				queueMicrotask(() => callback(new ClientDestroyedError$1(), null));
				return;
			}
			if (this[kClosed$3]) {
				if (this[kOnClosed]) this[kOnClosed].push(callback);
				else queueMicrotask(() => callback(null, null));
				return;
			}
			this[kClosed$3] = true;
			this[kOnClosed].push(callback);
			const onClosed = () => {
				const callbacks = this[kOnClosed];
				this[kOnClosed] = null;
				for (let i$1 = 0; i$1 < callbacks.length; i$1++) callbacks[i$1](null, null);
			};
			this[kClose$8]().then(() => this.destroy()).then(() => {
				queueMicrotask(onClosed);
			});
		}
		destroy(err, callback) {
			if (typeof err === "function") {
				callback = err;
				err = null;
			}
			if (callback === void 0) return new Promise((resolve$1, reject) => {
				this.destroy(err, (err$1, data$1) => {
					return err$1 ? reject(err$1) : resolve$1(data$1);
				});
			});
			if (typeof callback !== "function") throw new InvalidArgumentError$26("invalid callback");
			if (this[kDestroyed$1]) {
				if (this[kOnDestroyed]) this[kOnDestroyed].push(callback);
				else queueMicrotask(() => callback(null, null));
				return;
			}
			if (!err) err = new ClientDestroyedError$1();
			this[kDestroyed$1] = true;
			this[kOnDestroyed] = this[kOnDestroyed] || [];
			this[kOnDestroyed].push(callback);
			const onDestroyed = () => {
				const callbacks = this[kOnDestroyed];
				this[kOnDestroyed] = null;
				for (let i$1 = 0; i$1 < callbacks.length; i$1++) callbacks[i$1](null, null);
			};
			this[kDestroy$6](err).then(() => {
				queueMicrotask(onDestroyed);
			});
		}
		dispatch(opts, handler$1) {
			if (!handler$1 || typeof handler$1 !== "object") throw new InvalidArgumentError$26("handler must be an object");
			handler$1 = UnwrapHandler.unwrap(handler$1);
			try {
				if (!opts || typeof opts !== "object") throw new InvalidArgumentError$26("opts must be an object.");
				if (this[kDestroyed$1] || this[kOnDestroyed]) throw new ClientDestroyedError$1();
				if (this[kClosed$3]) throw new ClientClosedError();
				return this[kDispatch$5](opts, handler$1);
			} catch (err) {
				if (typeof handler$1.onError !== "function") throw err;
				handler$1.onError(err);
				return false;
			}
		}
	};
	module.exports = DispatcherBase$6;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/connect.js
var require_connect = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/core/connect.js"(exports, module) {
	const net$1 = __require("node:net");
	const assert$27 = __require("node:assert");
	const util$21 = require_util$5();
	const { InvalidArgumentError: InvalidArgumentError$25 } = require_errors();
	let tls;
	const SessionCache = class WeakSessionCache {
		constructor(maxCachedSessions) {
			this._maxCachedSessions = maxCachedSessions;
			this._sessionCache = /* @__PURE__ */ new Map();
			this._sessionRegistry = new FinalizationRegistry((key) => {
				if (this._sessionCache.size < this._maxCachedSessions) return;
				const ref = this._sessionCache.get(key);
				if (ref !== void 0 && ref.deref() === void 0) this._sessionCache.delete(key);
			});
		}
		get(sessionKey) {
			const ref = this._sessionCache.get(sessionKey);
			return ref ? ref.deref() : null;
		}
		set(sessionKey, session) {
			if (this._maxCachedSessions === 0) return;
			this._sessionCache.set(sessionKey, new WeakRef(session));
			this._sessionRegistry.register(session, sessionKey);
		}
	};
	function buildConnector$4({ allowH2, maxCachedSessions, socketPath, timeout, session: customSession,...opts }) {
		if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) throw new InvalidArgumentError$25("maxCachedSessions must be a positive integer or zero");
		const options = {
			path: socketPath,
			...opts
		};
		const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
		timeout = timeout == null ? 1e4 : timeout;
		allowH2 = allowH2 != null ? allowH2 : false;
		return function connect$5({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
			let socket;
			if (protocol === "https:") {
				if (!tls) tls = __require("node:tls");
				servername = servername || options.servername || util$21.getServerName(host) || null;
				const sessionKey = servername || hostname;
				assert$27(sessionKey);
				const session = customSession || sessionCache.get(sessionKey) || null;
				port = port || 443;
				socket = tls.connect({
					highWaterMark: 16384,
					...options,
					servername,
					session,
					localAddress,
					ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
					socket: httpSocket,
					port,
					host: hostname
				});
				socket.on("session", function(session$1) {
					sessionCache.set(sessionKey, session$1);
				});
			} else {
				assert$27(!httpSocket, "httpSocket can only be sent on TLS update");
				port = port || 80;
				socket = net$1.connect({
					highWaterMark: 64 * 1024,
					...options,
					localAddress,
					port,
					host: hostname
				});
			}
			if (options.keepAlive == null || options.keepAlive) {
				const keepAliveInitialDelay = options.keepAliveInitialDelay === void 0 ? 6e4 : options.keepAliveInitialDelay;
				socket.setKeepAlive(true, keepAliveInitialDelay);
			}
			const clearConnectTimeout = util$21.setupConnectTimeout(new WeakRef(socket), {
				timeout,
				hostname,
				port
			});
			socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
				queueMicrotask(clearConnectTimeout);
				if (callback) {
					const cb = callback;
					callback = null;
					cb(null, this);
				}
			}).on("error", function(err) {
				queueMicrotask(clearConnectTimeout);
				if (callback) {
					const cb = callback;
					callback = null;
					cb(err);
				}
			});
			return socket;
		};
	}
	module.exports = buildConnector$4;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/llhttp/utils.js
var require_utils = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/llhttp/utils.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.enumToMap = void 0;
	function enumToMap(obj, filter$1 = [], exceptions = []) {
		var _a$3, _b;
		const emptyFilter = ((_a$3 = filter$1 === null || filter$1 === void 0 ? void 0 : filter$1.length) !== null && _a$3 !== void 0 ? _a$3 : 0) === 0;
		const emptyExceptions = ((_b = exceptions === null || exceptions === void 0 ? void 0 : exceptions.length) !== null && _b !== void 0 ? _b : 0) === 0;
		return Object.fromEntries(Object.entries(obj).filter(([, value]) => {
			return typeof value === "number" && (emptyFilter || filter$1.includes(value)) && (emptyExceptions || !exceptions.includes(value));
		}));
	}
	exports.enumToMap = enumToMap;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/llhttp/constants.js
var require_constants$3 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/llhttp/constants.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SPECIAL_HEADERS = exports.MINOR = exports.MAJOR = exports.HTAB_SP_VCHAR_OBS_TEXT = exports.QUOTED_STRING = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.HEX = exports.URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.STATUSES_HTTP = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.HEADER_STATE = exports.FINISH = exports.STATUSES = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
	const utils_1 = require_utils();
	exports.ERROR = {
		OK: 0,
		INTERNAL: 1,
		STRICT: 2,
		CR_EXPECTED: 25,
		LF_EXPECTED: 3,
		UNEXPECTED_CONTENT_LENGTH: 4,
		UNEXPECTED_SPACE: 30,
		CLOSED_CONNECTION: 5,
		INVALID_METHOD: 6,
		INVALID_URL: 7,
		INVALID_CONSTANT: 8,
		INVALID_VERSION: 9,
		INVALID_HEADER_TOKEN: 10,
		INVALID_CONTENT_LENGTH: 11,
		INVALID_CHUNK_SIZE: 12,
		INVALID_STATUS: 13,
		INVALID_EOF_STATE: 14,
		INVALID_TRANSFER_ENCODING: 15,
		CB_MESSAGE_BEGIN: 16,
		CB_HEADERS_COMPLETE: 17,
		CB_MESSAGE_COMPLETE: 18,
		CB_CHUNK_HEADER: 19,
		CB_CHUNK_COMPLETE: 20,
		PAUSED: 21,
		PAUSED_UPGRADE: 22,
		PAUSED_H2_UPGRADE: 23,
		USER: 24,
		CB_URL_COMPLETE: 26,
		CB_STATUS_COMPLETE: 27,
		CB_METHOD_COMPLETE: 32,
		CB_VERSION_COMPLETE: 33,
		CB_HEADER_FIELD_COMPLETE: 28,
		CB_HEADER_VALUE_COMPLETE: 29,
		CB_CHUNK_EXTENSION_NAME_COMPLETE: 34,
		CB_CHUNK_EXTENSION_VALUE_COMPLETE: 35,
		CB_RESET: 31
	};
	exports.TYPE = {
		BOTH: 0,
		REQUEST: 1,
		RESPONSE: 2
	};
	exports.FLAGS = {
		CONNECTION_KEEP_ALIVE: 1,
		CONNECTION_CLOSE: 2,
		CONNECTION_UPGRADE: 4,
		CHUNKED: 8,
		UPGRADE: 16,
		CONTENT_LENGTH: 32,
		SKIPBODY: 64,
		TRAILING: 128,
		TRANSFER_ENCODING: 512
	};
	exports.LENIENT_FLAGS = {
		HEADERS: 1,
		CHUNKED_LENGTH: 2,
		KEEP_ALIVE: 4,
		TRANSFER_ENCODING: 8,
		VERSION: 16,
		DATA_AFTER_CLOSE: 32,
		OPTIONAL_LF_AFTER_CR: 64,
		OPTIONAL_CRLF_AFTER_CHUNK: 128,
		OPTIONAL_CR_BEFORE_LF: 256,
		SPACES_AFTER_CHUNK_SIZE: 512
	};
	exports.METHODS = {
		"DELETE": 0,
		"GET": 1,
		"HEAD": 2,
		"POST": 3,
		"PUT": 4,
		"CONNECT": 5,
		"OPTIONS": 6,
		"TRACE": 7,
		"COPY": 8,
		"LOCK": 9,
		"MKCOL": 10,
		"MOVE": 11,
		"PROPFIND": 12,
		"PROPPATCH": 13,
		"SEARCH": 14,
		"UNLOCK": 15,
		"BIND": 16,
		"REBIND": 17,
		"UNBIND": 18,
		"ACL": 19,
		"REPORT": 20,
		"MKACTIVITY": 21,
		"CHECKOUT": 22,
		"MERGE": 23,
		"M-SEARCH": 24,
		"NOTIFY": 25,
		"SUBSCRIBE": 26,
		"UNSUBSCRIBE": 27,
		"PATCH": 28,
		"PURGE": 29,
		"MKCALENDAR": 30,
		"LINK": 31,
		"UNLINK": 32,
		"SOURCE": 33,
		"PRI": 34,
		"DESCRIBE": 35,
		"ANNOUNCE": 36,
		"SETUP": 37,
		"PLAY": 38,
		"PAUSE": 39,
		"TEARDOWN": 40,
		"GET_PARAMETER": 41,
		"SET_PARAMETER": 42,
		"REDIRECT": 43,
		"RECORD": 44,
		"FLUSH": 45,
		"QUERY": 46
	};
	exports.STATUSES = {
		CONTINUE: 100,
		SWITCHING_PROTOCOLS: 101,
		PROCESSING: 102,
		EARLY_HINTS: 103,
		RESPONSE_IS_STALE: 110,
		REVALIDATION_FAILED: 111,
		DISCONNECTED_OPERATION: 112,
		HEURISTIC_EXPIRATION: 113,
		MISCELLANEOUS_WARNING: 199,
		OK: 200,
		CREATED: 201,
		ACCEPTED: 202,
		NON_AUTHORITATIVE_INFORMATION: 203,
		NO_CONTENT: 204,
		RESET_CONTENT: 205,
		PARTIAL_CONTENT: 206,
		MULTI_STATUS: 207,
		ALREADY_REPORTED: 208,
		TRANSFORMATION_APPLIED: 214,
		IM_USED: 226,
		MISCELLANEOUS_PERSISTENT_WARNING: 299,
		MULTIPLE_CHOICES: 300,
		MOVED_PERMANENTLY: 301,
		FOUND: 302,
		SEE_OTHER: 303,
		NOT_MODIFIED: 304,
		USE_PROXY: 305,
		SWITCH_PROXY: 306,
		TEMPORARY_REDIRECT: 307,
		PERMANENT_REDIRECT: 308,
		BAD_REQUEST: 400,
		UNAUTHORIZED: 401,
		PAYMENT_REQUIRED: 402,
		FORBIDDEN: 403,
		NOT_FOUND: 404,
		METHOD_NOT_ALLOWED: 405,
		NOT_ACCEPTABLE: 406,
		PROXY_AUTHENTICATION_REQUIRED: 407,
		REQUEST_TIMEOUT: 408,
		CONFLICT: 409,
		GONE: 410,
		LENGTH_REQUIRED: 411,
		PRECONDITION_FAILED: 412,
		PAYLOAD_TOO_LARGE: 413,
		URI_TOO_LONG: 414,
		UNSUPPORTED_MEDIA_TYPE: 415,
		RANGE_NOT_SATISFIABLE: 416,
		EXPECTATION_FAILED: 417,
		IM_A_TEAPOT: 418,
		PAGE_EXPIRED: 419,
		ENHANCE_YOUR_CALM: 420,
		MISDIRECTED_REQUEST: 421,
		UNPROCESSABLE_ENTITY: 422,
		LOCKED: 423,
		FAILED_DEPENDENCY: 424,
		TOO_EARLY: 425,
		UPGRADE_REQUIRED: 426,
		PRECONDITION_REQUIRED: 428,
		TOO_MANY_REQUESTS: 429,
		REQUEST_HEADER_FIELDS_TOO_LARGE_UNOFFICIAL: 430,
		REQUEST_HEADER_FIELDS_TOO_LARGE: 431,
		LOGIN_TIMEOUT: 440,
		NO_RESPONSE: 444,
		RETRY_WITH: 449,
		BLOCKED_BY_PARENTAL_CONTROL: 450,
		UNAVAILABLE_FOR_LEGAL_REASONS: 451,
		CLIENT_CLOSED_LOAD_BALANCED_REQUEST: 460,
		INVALID_X_FORWARDED_FOR: 463,
		REQUEST_HEADER_TOO_LARGE: 494,
		SSL_CERTIFICATE_ERROR: 495,
		SSL_CERTIFICATE_REQUIRED: 496,
		HTTP_REQUEST_SENT_TO_HTTPS_PORT: 497,
		INVALID_TOKEN: 498,
		CLIENT_CLOSED_REQUEST: 499,
		INTERNAL_SERVER_ERROR: 500,
		NOT_IMPLEMENTED: 501,
		BAD_GATEWAY: 502,
		SERVICE_UNAVAILABLE: 503,
		GATEWAY_TIMEOUT: 504,
		HTTP_VERSION_NOT_SUPPORTED: 505,
		VARIANT_ALSO_NEGOTIATES: 506,
		INSUFFICIENT_STORAGE: 507,
		LOOP_DETECTED: 508,
		BANDWIDTH_LIMIT_EXCEEDED: 509,
		NOT_EXTENDED: 510,
		NETWORK_AUTHENTICATION_REQUIRED: 511,
		WEB_SERVER_UNKNOWN_ERROR: 520,
		WEB_SERVER_IS_DOWN: 521,
		CONNECTION_TIMEOUT: 522,
		ORIGIN_IS_UNREACHABLE: 523,
		TIMEOUT_OCCURED: 524,
		SSL_HANDSHAKE_FAILED: 525,
		INVALID_SSL_CERTIFICATE: 526,
		RAILGUN_ERROR: 527,
		SITE_IS_OVERLOADED: 529,
		SITE_IS_FROZEN: 530,
		IDENTITY_PROVIDER_AUTHENTICATION_ERROR: 561,
		NETWORK_READ_TIMEOUT: 598,
		NETWORK_CONNECT_TIMEOUT: 599
	};
	exports.FINISH = {
		SAFE: 0,
		SAFE_WITH_CB: 1,
		UNSAFE: 2
	};
	exports.HEADER_STATE = {
		GENERAL: 0,
		CONNECTION: 1,
		CONTENT_LENGTH: 2,
		TRANSFER_ENCODING: 3,
		UPGRADE: 4,
		CONNECTION_KEEP_ALIVE: 5,
		CONNECTION_CLOSE: 6,
		CONNECTION_UPGRADE: 7,
		TRANSFER_ENCODING_CHUNKED: 8
	};
	exports.METHODS_HTTP = [
		exports.METHODS.DELETE,
		exports.METHODS.GET,
		exports.METHODS.HEAD,
		exports.METHODS.POST,
		exports.METHODS.PUT,
		exports.METHODS.CONNECT,
		exports.METHODS.OPTIONS,
		exports.METHODS.TRACE,
		exports.METHODS.COPY,
		exports.METHODS.LOCK,
		exports.METHODS.MKCOL,
		exports.METHODS.MOVE,
		exports.METHODS.PROPFIND,
		exports.METHODS.PROPPATCH,
		exports.METHODS.SEARCH,
		exports.METHODS.UNLOCK,
		exports.METHODS.BIND,
		exports.METHODS.REBIND,
		exports.METHODS.UNBIND,
		exports.METHODS.ACL,
		exports.METHODS.REPORT,
		exports.METHODS.MKACTIVITY,
		exports.METHODS.CHECKOUT,
		exports.METHODS.MERGE,
		exports.METHODS["M-SEARCH"],
		exports.METHODS.NOTIFY,
		exports.METHODS.SUBSCRIBE,
		exports.METHODS.UNSUBSCRIBE,
		exports.METHODS.PATCH,
		exports.METHODS.PURGE,
		exports.METHODS.MKCALENDAR,
		exports.METHODS.LINK,
		exports.METHODS.UNLINK,
		exports.METHODS.PRI,
		exports.METHODS.SOURCE,
		exports.METHODS.QUERY
	];
	exports.METHODS_ICE = [exports.METHODS.SOURCE];
	exports.METHODS_RTSP = [
		exports.METHODS.OPTIONS,
		exports.METHODS.DESCRIBE,
		exports.METHODS.ANNOUNCE,
		exports.METHODS.SETUP,
		exports.METHODS.PLAY,
		exports.METHODS.PAUSE,
		exports.METHODS.TEARDOWN,
		exports.METHODS.GET_PARAMETER,
		exports.METHODS.SET_PARAMETER,
		exports.METHODS.REDIRECT,
		exports.METHODS.RECORD,
		exports.METHODS.FLUSH,
		exports.METHODS.GET,
		exports.METHODS.POST
	];
	exports.METHOD_MAP = (0, utils_1.enumToMap)(exports.METHODS);
	exports.H_METHOD_MAP = Object.fromEntries(Object.entries(exports.METHODS).filter(([k]) => k.startsWith("H")));
	exports.STATUSES_HTTP = [
		exports.STATUSES.CONTINUE,
		exports.STATUSES.SWITCHING_PROTOCOLS,
		exports.STATUSES.PROCESSING,
		exports.STATUSES.EARLY_HINTS,
		exports.STATUSES.RESPONSE_IS_STALE,
		exports.STATUSES.REVALIDATION_FAILED,
		exports.STATUSES.DISCONNECTED_OPERATION,
		exports.STATUSES.HEURISTIC_EXPIRATION,
		exports.STATUSES.MISCELLANEOUS_WARNING,
		exports.STATUSES.OK,
		exports.STATUSES.CREATED,
		exports.STATUSES.ACCEPTED,
		exports.STATUSES.NON_AUTHORITATIVE_INFORMATION,
		exports.STATUSES.NO_CONTENT,
		exports.STATUSES.RESET_CONTENT,
		exports.STATUSES.PARTIAL_CONTENT,
		exports.STATUSES.MULTI_STATUS,
		exports.STATUSES.ALREADY_REPORTED,
		exports.STATUSES.TRANSFORMATION_APPLIED,
		exports.STATUSES.IM_USED,
		exports.STATUSES.MISCELLANEOUS_PERSISTENT_WARNING,
		exports.STATUSES.MULTIPLE_CHOICES,
		exports.STATUSES.MOVED_PERMANENTLY,
		exports.STATUSES.FOUND,
		exports.STATUSES.SEE_OTHER,
		exports.STATUSES.NOT_MODIFIED,
		exports.STATUSES.USE_PROXY,
		exports.STATUSES.SWITCH_PROXY,
		exports.STATUSES.TEMPORARY_REDIRECT,
		exports.STATUSES.PERMANENT_REDIRECT,
		exports.STATUSES.BAD_REQUEST,
		exports.STATUSES.UNAUTHORIZED,
		exports.STATUSES.PAYMENT_REQUIRED,
		exports.STATUSES.FORBIDDEN,
		exports.STATUSES.NOT_FOUND,
		exports.STATUSES.METHOD_NOT_ALLOWED,
		exports.STATUSES.NOT_ACCEPTABLE,
		exports.STATUSES.PROXY_AUTHENTICATION_REQUIRED,
		exports.STATUSES.REQUEST_TIMEOUT,
		exports.STATUSES.CONFLICT,
		exports.STATUSES.GONE,
		exports.STATUSES.LENGTH_REQUIRED,
		exports.STATUSES.PRECONDITION_FAILED,
		exports.STATUSES.PAYLOAD_TOO_LARGE,
		exports.STATUSES.URI_TOO_LONG,
		exports.STATUSES.UNSUPPORTED_MEDIA_TYPE,
		exports.STATUSES.RANGE_NOT_SATISFIABLE,
		exports.STATUSES.EXPECTATION_FAILED,
		exports.STATUSES.IM_A_TEAPOT,
		exports.STATUSES.PAGE_EXPIRED,
		exports.STATUSES.ENHANCE_YOUR_CALM,
		exports.STATUSES.MISDIRECTED_REQUEST,
		exports.STATUSES.UNPROCESSABLE_ENTITY,
		exports.STATUSES.LOCKED,
		exports.STATUSES.FAILED_DEPENDENCY,
		exports.STATUSES.TOO_EARLY,
		exports.STATUSES.UPGRADE_REQUIRED,
		exports.STATUSES.PRECONDITION_REQUIRED,
		exports.STATUSES.TOO_MANY_REQUESTS,
		exports.STATUSES.REQUEST_HEADER_FIELDS_TOO_LARGE_UNOFFICIAL,
		exports.STATUSES.REQUEST_HEADER_FIELDS_TOO_LARGE,
		exports.STATUSES.LOGIN_TIMEOUT,
		exports.STATUSES.NO_RESPONSE,
		exports.STATUSES.RETRY_WITH,
		exports.STATUSES.BLOCKED_BY_PARENTAL_CONTROL,
		exports.STATUSES.UNAVAILABLE_FOR_LEGAL_REASONS,
		exports.STATUSES.CLIENT_CLOSED_LOAD_BALANCED_REQUEST,
		exports.STATUSES.INVALID_X_FORWARDED_FOR,
		exports.STATUSES.REQUEST_HEADER_TOO_LARGE,
		exports.STATUSES.SSL_CERTIFICATE_ERROR,
		exports.STATUSES.SSL_CERTIFICATE_REQUIRED,
		exports.STATUSES.HTTP_REQUEST_SENT_TO_HTTPS_PORT,
		exports.STATUSES.INVALID_TOKEN,
		exports.STATUSES.CLIENT_CLOSED_REQUEST,
		exports.STATUSES.INTERNAL_SERVER_ERROR,
		exports.STATUSES.NOT_IMPLEMENTED,
		exports.STATUSES.BAD_GATEWAY,
		exports.STATUSES.SERVICE_UNAVAILABLE,
		exports.STATUSES.GATEWAY_TIMEOUT,
		exports.STATUSES.HTTP_VERSION_NOT_SUPPORTED,
		exports.STATUSES.VARIANT_ALSO_NEGOTIATES,
		exports.STATUSES.INSUFFICIENT_STORAGE,
		exports.STATUSES.LOOP_DETECTED,
		exports.STATUSES.BANDWIDTH_LIMIT_EXCEEDED,
		exports.STATUSES.NOT_EXTENDED,
		exports.STATUSES.NETWORK_AUTHENTICATION_REQUIRED,
		exports.STATUSES.WEB_SERVER_UNKNOWN_ERROR,
		exports.STATUSES.WEB_SERVER_IS_DOWN,
		exports.STATUSES.CONNECTION_TIMEOUT,
		exports.STATUSES.ORIGIN_IS_UNREACHABLE,
		exports.STATUSES.TIMEOUT_OCCURED,
		exports.STATUSES.SSL_HANDSHAKE_FAILED,
		exports.STATUSES.INVALID_SSL_CERTIFICATE,
		exports.STATUSES.RAILGUN_ERROR,
		exports.STATUSES.SITE_IS_OVERLOADED,
		exports.STATUSES.SITE_IS_FROZEN,
		exports.STATUSES.IDENTITY_PROVIDER_AUTHENTICATION_ERROR,
		exports.STATUSES.NETWORK_READ_TIMEOUT,
		exports.STATUSES.NETWORK_CONNECT_TIMEOUT
	];
	exports.ALPHA = [];
	for (let i$1 = "A".charCodeAt(0); i$1 <= "Z".charCodeAt(0); i$1++) {
		exports.ALPHA.push(String.fromCharCode(i$1));
		exports.ALPHA.push(String.fromCharCode(i$1 + 32));
	}
	exports.NUM_MAP = {
		0: 0,
		1: 1,
		2: 2,
		3: 3,
		4: 4,
		5: 5,
		6: 6,
		7: 7,
		8: 8,
		9: 9
	};
	exports.HEX_MAP = {
		0: 0,
		1: 1,
		2: 2,
		3: 3,
		4: 4,
		5: 5,
		6: 6,
		7: 7,
		8: 8,
		9: 9,
		A: 10,
		B: 11,
		C: 12,
		D: 13,
		E: 14,
		F: 15,
		a: 10,
		b: 11,
		c: 12,
		d: 13,
		e: 14,
		f: 15
	};
	exports.NUM = [
		"0",
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9"
	];
	exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
	exports.MARK = [
		"-",
		"_",
		".",
		"!",
		"~",
		"*",
		"'",
		"(",
		")"
	];
	exports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat([
		"%",
		";",
		":",
		"&",
		"=",
		"+",
		"$",
		","
	]);
	exports.URL_CHAR = [
		"!",
		"\"",
		"$",
		"%",
		"&",
		"'",
		"(",
		")",
		"*",
		"+",
		",",
		"-",
		".",
		"/",
		":",
		";",
		"<",
		"=",
		">",
		"@",
		"[",
		"\\",
		"]",
		"^",
		"_",
		"`",
		"{",
		"|",
		"}",
		"~"
	].concat(exports.ALPHANUM);
	exports.HEX = exports.NUM.concat([
		"a",
		"b",
		"c",
		"d",
		"e",
		"f",
		"A",
		"B",
		"C",
		"D",
		"E",
		"F"
	]);
	exports.TOKEN = [
		"!",
		"#",
		"$",
		"%",
		"&",
		"'",
		"*",
		"+",
		"-",
		".",
		"^",
		"_",
		"`",
		"|",
		"~"
	].concat(exports.ALPHANUM);
	exports.HEADER_CHARS = ["	"];
	for (let i$1 = 32; i$1 <= 255; i$1++) if (i$1 !== 127) exports.HEADER_CHARS.push(i$1);
	exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c$1) => c$1 !== 44);
	exports.QUOTED_STRING = ["	", " "];
	for (let i$1 = 33; i$1 <= 255; i$1++) if (i$1 !== 34 && i$1 !== 92) exports.QUOTED_STRING.push(i$1);
	exports.HTAB_SP_VCHAR_OBS_TEXT = ["	", " "];
	for (let i$1 = 33; i$1 <= 126; i$1++) exports.HTAB_SP_VCHAR_OBS_TEXT.push(i$1);
	for (let i$1 = 128; i$1 <= 255; i$1++) exports.HTAB_SP_VCHAR_OBS_TEXT.push(i$1);
	exports.MAJOR = exports.NUM_MAP;
	exports.MINOR = exports.MAJOR;
	exports.SPECIAL_HEADERS = {
		"connection": exports.HEADER_STATE.CONNECTION,
		"content-length": exports.HEADER_STATE.CONTENT_LENGTH,
		"proxy-connection": exports.HEADER_STATE.CONNECTION,
		"transfer-encoding": exports.HEADER_STATE.TRANSFER_ENCODING,
		"upgrade": exports.HEADER_STATE.UPGRADE
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/llhttp/llhttp-wasm.js
var require_llhttp_wasm = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/llhttp/llhttp-wasm.js"(exports, module) {
	const { Buffer: Buffer$3 } = __require("node:buffer");
	const wasmBase64$1 = "";
	let wasmBuffer$1;
	Object.defineProperty(module, "exports", { get: () => {
		return wasmBuffer$1 ? wasmBuffer$1 : wasmBuffer$1 = Buffer$3.from(wasmBase64$1, "base64");
	} });
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
var require_llhttp_simd_wasm = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js"(exports, module) {
	const { Buffer: Buffer$2 } = __require("node:buffer");
	const wasmBase64 = "";
	let wasmBuffer;
	Object.defineProperty(module, "exports", { get: () => {
		return wasmBuffer ? wasmBuffer : wasmBuffer = Buffer$2.from(wasmBase64, "base64");
	} });
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/constants.js
var require_constants$2 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/constants.js"(exports, module) {
	const corsSafeListedMethods = [
		"GET",
		"HEAD",
		"POST"
	];
	const corsSafeListedMethodsSet$1 = new Set(corsSafeListedMethods);
	const nullBodyStatus$2 = [
		101,
		204,
		205,
		304
	];
	const redirectStatus = [
		301,
		302,
		303,
		307,
		308
	];
	const redirectStatusSet$3 = new Set(redirectStatus);
	/**
	* @see https://fetch.spec.whatwg.org/#block-bad-port
	*/
	const badPorts = [
		"1",
		"7",
		"9",
		"11",
		"13",
		"15",
		"17",
		"19",
		"20",
		"21",
		"22",
		"23",
		"25",
		"37",
		"42",
		"43",
		"53",
		"69",
		"77",
		"79",
		"87",
		"95",
		"101",
		"102",
		"103",
		"104",
		"109",
		"110",
		"111",
		"113",
		"115",
		"117",
		"119",
		"123",
		"135",
		"137",
		"139",
		"143",
		"161",
		"179",
		"389",
		"427",
		"465",
		"512",
		"513",
		"514",
		"515",
		"526",
		"530",
		"531",
		"532",
		"540",
		"548",
		"554",
		"556",
		"563",
		"587",
		"601",
		"636",
		"989",
		"990",
		"993",
		"995",
		"1719",
		"1720",
		"1723",
		"2049",
		"3659",
		"4045",
		"4190",
		"5060",
		"5061",
		"6000",
		"6566",
		"6665",
		"6666",
		"6667",
		"6668",
		"6669",
		"6679",
		"6697",
		"10080"
	];
	const badPortsSet$1 = new Set(badPorts);
	/**
	* @see https://w3c.github.io/webappsec-referrer-policy/#referrer-policy-header
	*/
	const referrerPolicyTokens$1 = [
		"no-referrer",
		"no-referrer-when-downgrade",
		"same-origin",
		"origin",
		"strict-origin",
		"origin-when-cross-origin",
		"strict-origin-when-cross-origin",
		"unsafe-url"
	];
	/**
	* @see https://w3c.github.io/webappsec-referrer-policy/#referrer-policies
	*/
	const referrerPolicy$1 = ["", ...referrerPolicyTokens$1];
	const referrerPolicyTokensSet = new Set(referrerPolicyTokens$1);
	const requestRedirect$1 = [
		"follow",
		"manual",
		"error"
	];
	const safeMethods = [
		"GET",
		"HEAD",
		"OPTIONS",
		"TRACE"
	];
	const safeMethodsSet$1 = new Set(safeMethods);
	const requestMode$1 = [
		"navigate",
		"same-origin",
		"no-cors",
		"cors"
	];
	const requestCredentials$1 = [
		"omit",
		"same-origin",
		"include"
	];
	const requestCache$1 = [
		"default",
		"no-store",
		"reload",
		"no-cache",
		"force-cache",
		"only-if-cached"
	];
	/**
	* @see https://fetch.spec.whatwg.org/#request-body-header-name
	*/
	const requestBodyHeader$1 = [
		"content-encoding",
		"content-language",
		"content-location",
		"content-type",
		"content-length"
	];
	/**
	* @see https://fetch.spec.whatwg.org/#enumdef-requestduplex
	*/
	const requestDuplex$1 = ["half"];
	/**
	* @see http://fetch.spec.whatwg.org/#forbidden-method
	*/
	const forbiddenMethods = [
		"CONNECT",
		"TRACE",
		"TRACK"
	];
	const forbiddenMethodsSet$1 = new Set(forbiddenMethods);
	const subresource = [
		"audio",
		"audioworklet",
		"font",
		"image",
		"manifest",
		"paintworklet",
		"script",
		"style",
		"track",
		"video",
		"xslt",
		""
	];
	const subresourceSet$1 = new Set(subresource);
	module.exports = {
		subresource,
		forbiddenMethods,
		requestBodyHeader: requestBodyHeader$1,
		referrerPolicy: referrerPolicy$1,
		requestRedirect: requestRedirect$1,
		requestMode: requestMode$1,
		requestCredentials: requestCredentials$1,
		requestCache: requestCache$1,
		redirectStatus,
		corsSafeListedMethods,
		nullBodyStatus: nullBodyStatus$2,
		safeMethods,
		badPorts,
		requestDuplex: requestDuplex$1,
		subresourceSet: subresourceSet$1,
		badPortsSet: badPortsSet$1,
		redirectStatusSet: redirectStatusSet$3,
		corsSafeListedMethodsSet: corsSafeListedMethodsSet$1,
		safeMethodsSet: safeMethodsSet$1,
		forbiddenMethodsSet: forbiddenMethodsSet$1,
		referrerPolicyTokens: referrerPolicyTokensSet
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/global.js
var require_global$1 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/global.js"(exports, module) {
	const globalOrigin = Symbol.for("undici.globalOrigin.1");
	function getGlobalOrigin$2() {
		return globalThis[globalOrigin];
	}
	function setGlobalOrigin$1(newOrigin) {
		if (newOrigin === void 0) {
			Object.defineProperty(globalThis, globalOrigin, {
				value: void 0,
				writable: true,
				enumerable: false,
				configurable: false
			});
			return;
		}
		const parsedURL = new URL(newOrigin);
		if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
		Object.defineProperty(globalThis, globalOrigin, {
			value: parsedURL,
			writable: true,
			enumerable: false,
			configurable: false
		});
	}
	module.exports = {
		getGlobalOrigin: getGlobalOrigin$2,
		setGlobalOrigin: setGlobalOrigin$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/data-url.js
var require_data_url = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/data-url.js"(exports, module) {
	const assert$26 = __require("node:assert");
	const encoder = new TextEncoder();
	/**
	* @see https://mimesniff.spec.whatwg.org/#http-token-code-point
	*/
	const HTTP_TOKEN_CODEPOINTS$1 = /^[!#$%&'*+\-.^_|~A-Za-z0-9]+$/;
	const HTTP_WHITESPACE_REGEX = /[\u000A\u000D\u0009\u0020]/;
	const ASCII_WHITESPACE_REPLACE_REGEX = /[\u0009\u000A\u000C\u000D\u0020]/g;
	/**
	* @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
	*/
	const HTTP_QUOTED_STRING_TOKENS = /^[\u0009\u0020-\u007E\u0080-\u00FF]+$/;
	/** @param {URL} dataURL */
	function dataURLProcessor$1(dataURL) {
		assert$26(dataURL.protocol === "data:");
		let input = URLSerializer$4(dataURL, true);
		input = input.slice(5);
		const position = { position: 0 };
		let mimeType = collectASequenceOfCodePointsFast$2(",", input, position);
		const mimeTypeLength = mimeType.length;
		mimeType = removeASCIIWhitespace(mimeType, true, true);
		if (position.position >= input.length) return "failure";
		position.position++;
		const encodedBody = input.slice(mimeTypeLength + 1);
		let body = stringPercentDecode(encodedBody);
		if (/;(\u0020){0,}base64$/i.test(mimeType)) {
			const stringBody = isomorphicDecode$1(body);
			body = forgivingBase64(stringBody);
			if (body === "failure") return "failure";
			mimeType = mimeType.slice(0, -6);
			mimeType = mimeType.replace(/(\u0020)+$/, "");
			mimeType = mimeType.slice(0, -1);
		}
		if (mimeType.startsWith(";")) mimeType = "text/plain" + mimeType;
		let mimeTypeRecord = parseMIMEType$3(mimeType);
		if (mimeTypeRecord === "failure") mimeTypeRecord = parseMIMEType$3("text/plain;charset=US-ASCII");
		return {
			mimeType: mimeTypeRecord,
			body
		};
	}
	/**
	* @param {URL} url
	* @param {boolean} excludeFragment
	*/
	function URLSerializer$4(url, excludeFragment = false) {
		if (!excludeFragment) return url.href;
		const href = url.href;
		const hashLength = url.hash.length;
		const serialized = hashLength === 0 ? href : href.substring(0, href.length - hashLength);
		if (!hashLength && href.endsWith("#")) return serialized.slice(0, -1);
		return serialized;
	}
	/**
	* @param {(char: string) => boolean} condition
	* @param {string} input
	* @param {{ position: number }} position
	*/
	function collectASequenceOfCodePoints$1(condition, input, position) {
		let result = "";
		while (position.position < input.length && condition(input[position.position])) {
			result += input[position.position];
			position.position++;
		}
		return result;
	}
	/**
	* A faster collectASequenceOfCodePoints that only works when comparing a single character.
	* @param {string} char
	* @param {string} input
	* @param {{ position: number }} position
	*/
	function collectASequenceOfCodePointsFast$2(char, input, position) {
		const idx = input.indexOf(char, position.position);
		const start = position.position;
		if (idx === -1) {
			position.position = input.length;
			return input.slice(start);
		}
		position.position = idx;
		return input.slice(start, position.position);
	}
	/** @param {string} input */
	function stringPercentDecode(input) {
		const bytes = encoder.encode(input);
		return percentDecode(bytes);
	}
	/**
	* @param {number} byte
	*/
	function isHexCharByte(byte) {
		return byte >= 48 && byte <= 57 || byte >= 65 && byte <= 70 || byte >= 97 && byte <= 102;
	}
	/**
	* @param {number} byte
	*/
	function hexByteToNumber(byte) {
		return byte >= 48 && byte <= 57 ? byte - 48 : (byte & 223) - 55;
	}
	/** @param {Uint8Array} input */
	function percentDecode(input) {
		const length = input.length;
		/** @type {Uint8Array} */
		const output = new Uint8Array(length);
		let j = 0;
		for (let i$1 = 0; i$1 < length; ++i$1) {
			const byte = input[i$1];
			if (byte !== 37) output[j++] = byte;
			else if (byte === 37 && !(isHexCharByte(input[i$1 + 1]) && isHexCharByte(input[i$1 + 2]))) output[j++] = 37;
			else {
				output[j++] = hexByteToNumber(input[i$1 + 1]) << 4 | hexByteToNumber(input[i$1 + 2]);
				i$1 += 2;
			}
		}
		return length === j ? output : output.subarray(0, j);
	}
	/** @param {string} input */
	function parseMIMEType$3(input) {
		input = removeHTTPWhitespace$1(input, true, true);
		const position = { position: 0 };
		const type = collectASequenceOfCodePointsFast$2("/", input, position);
		if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS$1.test(type)) return "failure";
		if (position.position >= input.length) return "failure";
		position.position++;
		let subtype = collectASequenceOfCodePointsFast$2(";", input, position);
		subtype = removeHTTPWhitespace$1(subtype, false, true);
		if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS$1.test(subtype)) return "failure";
		const typeLowercase = type.toLowerCase();
		const subtypeLowercase = subtype.toLowerCase();
		const mimeType = {
			type: typeLowercase,
			subtype: subtypeLowercase,
			parameters: /* @__PURE__ */ new Map(),
			essence: `${typeLowercase}/${subtypeLowercase}`
		};
		while (position.position < input.length) {
			position.position++;
			collectASequenceOfCodePoints$1((char) => HTTP_WHITESPACE_REGEX.test(char), input, position);
			let parameterName = collectASequenceOfCodePoints$1((char) => char !== ";" && char !== "=", input, position);
			parameterName = parameterName.toLowerCase();
			if (position.position < input.length) {
				if (input[position.position] === ";") continue;
				position.position++;
			}
			if (position.position >= input.length) break;
			let parameterValue = null;
			if (input[position.position] === "\"") {
				parameterValue = collectAnHTTPQuotedString$1(input, position, true);
				collectASequenceOfCodePointsFast$2(";", input, position);
			} else {
				parameterValue = collectASequenceOfCodePointsFast$2(";", input, position);
				parameterValue = removeHTTPWhitespace$1(parameterValue, false, true);
				if (parameterValue.length === 0) continue;
			}
			if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS$1.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) mimeType.parameters.set(parameterName, parameterValue);
		}
		return mimeType;
	}
	/** @param {string} data */
	function forgivingBase64(data$1) {
		data$1 = data$1.replace(ASCII_WHITESPACE_REPLACE_REGEX, "");
		let dataLength = data$1.length;
		if (dataLength % 4 === 0) {
			if (data$1.charCodeAt(dataLength - 1) === 61) {
				--dataLength;
				if (data$1.charCodeAt(dataLength - 1) === 61) --dataLength;
			}
		}
		if (dataLength % 4 === 1) return "failure";
		if (/[^+/0-9A-Za-z]/.test(data$1.length === dataLength ? data$1 : data$1.substring(0, dataLength))) return "failure";
		const buffer$1 = Buffer.from(data$1, "base64");
		return new Uint8Array(buffer$1.buffer, buffer$1.byteOffset, buffer$1.byteLength);
	}
	/**
	* @param {string} input
	* @param {{ position: number }} position
	* @param {boolean} [extractValue=false]
	*/
	function collectAnHTTPQuotedString$1(input, position, extractValue = false) {
		const positionStart = position.position;
		let value = "";
		assert$26(input[position.position] === "\"");
		position.position++;
		while (true) {
			value += collectASequenceOfCodePoints$1((char) => char !== "\"" && char !== "\\", input, position);
			if (position.position >= input.length) break;
			const quoteOrBackslash = input[position.position];
			position.position++;
			if (quoteOrBackslash === "\\") {
				if (position.position >= input.length) {
					value += "\\";
					break;
				}
				value += input[position.position];
				position.position++;
			} else {
				assert$26(quoteOrBackslash === "\"");
				break;
			}
		}
		if (extractValue) return value;
		return input.slice(positionStart, position.position);
	}
	/**
	* @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
	*/
	function serializeAMimeType$3(mimeType) {
		assert$26(mimeType !== "failure");
		const { parameters, essence } = mimeType;
		let serialization = essence;
		for (let [name$2, value] of parameters.entries()) {
			serialization += ";";
			serialization += name$2;
			serialization += "=";
			if (!HTTP_TOKEN_CODEPOINTS$1.test(value)) {
				value = value.replace(/(\\|")/g, "\\$1");
				value = "\"" + value;
				value += "\"";
			}
			serialization += value;
		}
		return serialization;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-whitespace
	* @param {number} char
	*/
	function isHTTPWhiteSpace(char) {
		return char === 13 || char === 10 || char === 9 || char === 32;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-whitespace
	* @param {string} str
	* @param {boolean} [leading=true]
	* @param {boolean} [trailing=true]
	*/
	function removeHTTPWhitespace$1(str, leading = true, trailing = true) {
		return removeChars$2(str, leading, trailing, isHTTPWhiteSpace);
	}
	/**
	* @see https://infra.spec.whatwg.org/#ascii-whitespace
	* @param {number} char
	*/
	function isASCIIWhitespace(char) {
		return char === 13 || char === 10 || char === 9 || char === 12 || char === 32;
	}
	/**
	* @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
	* @param {string} str
	* @param {boolean} [leading=true]
	* @param {boolean} [trailing=true]
	*/
	function removeASCIIWhitespace(str, leading = true, trailing = true) {
		return removeChars$2(str, leading, trailing, isASCIIWhitespace);
	}
	/**
	* @param {string} str
	* @param {boolean} leading
	* @param {boolean} trailing
	* @param {(charCode: number) => boolean} predicate
	* @returns
	*/
	function removeChars$2(str, leading, trailing, predicate) {
		let lead = 0;
		let trail = str.length - 1;
		if (leading) while (lead < str.length && predicate(str.charCodeAt(lead))) lead++;
		if (trailing) while (trail > 0 && predicate(str.charCodeAt(trail))) trail--;
		return lead === 0 && trail === str.length - 1 ? str : str.slice(lead, trail + 1);
	}
	/**
	* @see https://infra.spec.whatwg.org/#isomorphic-decode
	* @param {Uint8Array} input
	* @returns {string}
	*/
	function isomorphicDecode$1(input) {
		const length = input.length;
		if (65535 > length) return String.fromCharCode.apply(null, input);
		let result = "";
		let i$1 = 0;
		let addition = 65535;
		while (i$1 < length) {
			if (i$1 + addition > length) addition = length - i$1;
			result += String.fromCharCode.apply(null, input.subarray(i$1, i$1 += addition));
		}
		return result;
	}
	/**
	* @see https://mimesniff.spec.whatwg.org/#minimize-a-supported-mime-type
	* @param {Exclude<ReturnType<typeof parseMIMEType>, 'failure'>} mimeType
	*/
	function minimizeSupportedMimeType$1(mimeType) {
		switch (mimeType.essence) {
			case "application/ecmascript":
			case "application/javascript":
			case "application/x-ecmascript":
			case "application/x-javascript":
			case "text/ecmascript":
			case "text/javascript":
			case "text/javascript1.0":
			case "text/javascript1.1":
			case "text/javascript1.2":
			case "text/javascript1.3":
			case "text/javascript1.4":
			case "text/javascript1.5":
			case "text/jscript":
			case "text/livescript":
			case "text/x-ecmascript":
			case "text/x-javascript": return "text/javascript";
			case "application/json":
			case "text/json": return "application/json";
			case "image/svg+xml": return "image/svg+xml";
			case "text/xml":
			case "application/xml": return "application/xml";
		}
		if (mimeType.subtype.endsWith("+json")) return "application/json";
		if (mimeType.subtype.endsWith("+xml")) return "application/xml";
		return "";
	}
	module.exports = {
		dataURLProcessor: dataURLProcessor$1,
		URLSerializer: URLSerializer$4,
		collectASequenceOfCodePoints: collectASequenceOfCodePoints$1,
		collectASequenceOfCodePointsFast: collectASequenceOfCodePointsFast$2,
		stringPercentDecode,
		parseMIMEType: parseMIMEType$3,
		collectAnHTTPQuotedString: collectAnHTTPQuotedString$1,
		serializeAMimeType: serializeAMimeType$3,
		removeChars: removeChars$2,
		removeHTTPWhitespace: removeHTTPWhitespace$1,
		minimizeSupportedMimeType: minimizeSupportedMimeType$1,
		HTTP_TOKEN_CODEPOINTS: HTTP_TOKEN_CODEPOINTS$1,
		isomorphicDecode: isomorphicDecode$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/webidl/index.js
var require_webidl = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/webidl/index.js"(exports, module) {
	const { types: types$3, inspect: inspect$1 } = __require("node:util");
	const { markAsUncloneable } = __require("node:worker_threads");
	const UNDEFINED = 1;
	const BOOLEAN = 2;
	const STRING = 3;
	const SYMBOL = 4;
	const NUMBER = 5;
	const BIGINT = 6;
	const NULL = 7;
	const OBJECT = 8;
	const FunctionPrototypeSymbolHasInstance = Function.call.bind(Function.prototype[Symbol.hasInstance]);
	/** @type {import('../../../types/webidl').Webidl} */
	const webidl$16 = {
		converters: {},
		util: {},
		errors: {},
		is: {}
	};
	/**
	* @description Instantiate an error.
	*
	* @param {Object} opts
	* @param {string} opts.header
	* @param {string} opts.message
	* @returns {TypeError}
	*/
	webidl$16.errors.exception = function(message) {
		return /* @__PURE__ */ new TypeError(`${message.header}: ${message.message}`);
	};
	/**
	* @description Instantiate an error when conversion from one type to another has failed.
	*
	* @param {Object} opts
	* @param {string} opts.prefix
	* @param {string} opts.argument
	* @param {string[]} opts.types
	* @returns {TypeError}
	*/
	webidl$16.errors.conversionFailed = function(opts) {
		const plural = opts.types.length === 1 ? "" : " one of";
		const message = `${opts.argument} could not be converted to${plural}: ${opts.types.join(", ")}.`;
		return webidl$16.errors.exception({
			header: opts.prefix,
			message
		});
	};
	/**
	* @description Instantiate an error when an invalid argument is provided
	*
	* @param {Object} context
	* @param {string} context.prefix
	* @param {string} context.value
	* @param {string} context.type
	* @returns {TypeError}
	*/
	webidl$16.errors.invalidArgument = function(context$1) {
		return webidl$16.errors.exception({
			header: context$1.prefix,
			message: `"${context$1.value}" is an invalid ${context$1.type}.`
		});
	};
	webidl$16.brandCheck = function(V, I) {
		if (!FunctionPrototypeSymbolHasInstance(I, V)) {
			const err = /* @__PURE__ */ new TypeError("Illegal invocation");
			err.code = "ERR_INVALID_THIS";
			throw err;
		}
	};
	webidl$16.brandCheckMultiple = function(List) {
		const prototypes = List.map((c$1) => webidl$16.util.MakeTypeAssertion(c$1));
		return (V) => {
			if (prototypes.every((typeCheck) => !typeCheck(V))) {
				const err = /* @__PURE__ */ new TypeError("Illegal invocation");
				err.code = "ERR_INVALID_THIS";
				throw err;
			}
		};
	};
	webidl$16.argumentLengthCheck = function({ length }, min$2, ctx) {
		if (length < min$2) throw webidl$16.errors.exception({
			message: `${min$2} argument${min$2 !== 1 ? "s" : ""} required, but${length ? " only" : ""} ${length} found.`,
			header: ctx
		});
	};
	webidl$16.illegalConstructor = function() {
		throw webidl$16.errors.exception({
			header: "TypeError",
			message: "Illegal constructor"
		});
	};
	webidl$16.util.MakeTypeAssertion = function(I) {
		return (O) => FunctionPrototypeSymbolHasInstance(I, O);
	};
	webidl$16.util.Type = function(V) {
		switch (typeof V) {
			case "undefined": return UNDEFINED;
			case "boolean": return BOOLEAN;
			case "string": return STRING;
			case "symbol": return SYMBOL;
			case "number": return NUMBER;
			case "bigint": return BIGINT;
			case "function":
			case "object": {
				if (V === null) return NULL;
				return OBJECT;
			}
		}
	};
	webidl$16.util.Types = {
		UNDEFINED,
		BOOLEAN,
		STRING,
		SYMBOL,
		NUMBER,
		BIGINT,
		NULL,
		OBJECT
	};
	webidl$16.util.TypeValueToString = function(o$1) {
		switch (webidl$16.util.Type(o$1)) {
			case UNDEFINED: return "Undefined";
			case BOOLEAN: return "Boolean";
			case STRING: return "String";
			case SYMBOL: return "Symbol";
			case NUMBER: return "Number";
			case BIGINT: return "BigInt";
			case NULL: return "Null";
			case OBJECT: return "Object";
		}
	};
	webidl$16.util.markAsUncloneable = markAsUncloneable || (() => {});
	webidl$16.util.ConvertToInt = function(V, bitLength, signedness, opts) {
		let upperBound;
		let lowerBound;
		if (bitLength === 64) {
			upperBound = Math.pow(2, 53) - 1;
			if (signedness === "unsigned") lowerBound = 0;
			else lowerBound = Math.pow(-2, 53) + 1;
		} else if (signedness === "unsigned") {
			lowerBound = 0;
			upperBound = Math.pow(2, bitLength) - 1;
		} else {
			lowerBound = Math.pow(-2, bitLength) - 1;
			upperBound = Math.pow(2, bitLength - 1) - 1;
		}
		let x = Number(V);
		if (x === 0) x = 0;
		if (opts?.enforceRange === true) {
			if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) throw webidl$16.errors.exception({
				header: "Integer conversion",
				message: `Could not convert ${webidl$16.util.Stringify(V)} to an integer.`
			});
			x = webidl$16.util.IntegerPart(x);
			if (x < lowerBound || x > upperBound) throw webidl$16.errors.exception({
				header: "Integer conversion",
				message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
			});
			return x;
		}
		if (!Number.isNaN(x) && opts?.clamp === true) {
			x = Math.min(Math.max(x, lowerBound), upperBound);
			if (Math.floor(x) % 2 === 0) x = Math.floor(x);
			else x = Math.ceil(x);
			return x;
		}
		if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) return 0;
		x = webidl$16.util.IntegerPart(x);
		x = x % Math.pow(2, bitLength);
		if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) return x - Math.pow(2, bitLength);
		return x;
	};
	webidl$16.util.IntegerPart = function(n$1) {
		const r = Math.floor(Math.abs(n$1));
		if (n$1 < 0) return -1 * r;
		return r;
	};
	webidl$16.util.Stringify = function(V) {
		const type = webidl$16.util.Type(V);
		switch (type) {
			case SYMBOL: return `Symbol(${V.description})`;
			case OBJECT: return inspect$1(V);
			case STRING: return `"${V}"`;
			case BIGINT: return `${V}n`;
			default: return `${V}`;
		}
	};
	webidl$16.sequenceConverter = function(converter) {
		return (V, prefix, argument, Iterable) => {
			if (webidl$16.util.Type(V) !== OBJECT) throw webidl$16.errors.exception({
				header: prefix,
				message: `${argument} (${webidl$16.util.Stringify(V)}) is not iterable.`
			});
			/** @type {Generator} */
			const method = typeof Iterable === "function" ? Iterable() : V?.[Symbol.iterator]?.();
			const seq = [];
			let index = 0;
			if (method === void 0 || typeof method.next !== "function") throw webidl$16.errors.exception({
				header: prefix,
				message: `${argument} is not iterable.`
			});
			while (true) {
				const { done, value } = method.next();
				if (done) break;
				seq.push(converter(value, prefix, `${argument}[${index++}]`));
			}
			return seq;
		};
	};
	webidl$16.recordConverter = function(keyConverter, valueConverter) {
		return (O, prefix, argument) => {
			if (webidl$16.util.Type(O) !== OBJECT) throw webidl$16.errors.exception({
				header: prefix,
				message: `${argument} ("${webidl$16.util.TypeValueToString(O)}") is not an Object.`
			});
			const result = {};
			if (!types$3.isProxy(O)) {
				const keys$2 = [...Object.getOwnPropertyNames(O), ...Object.getOwnPropertySymbols(O)];
				for (const key of keys$2) {
					const keyName = webidl$16.util.Stringify(key);
					const typedKey = keyConverter(key, prefix, `Key ${keyName} in ${argument}`);
					const typedValue = valueConverter(O[key], prefix, `${argument}[${keyName}]`);
					result[typedKey] = typedValue;
				}
				return result;
			}
			const keys$1 = Reflect.ownKeys(O);
			for (const key of keys$1) {
				const desc = Reflect.getOwnPropertyDescriptor(O, key);
				if (desc?.enumerable) {
					const typedKey = keyConverter(key, prefix, argument);
					const typedValue = valueConverter(O[key], prefix, argument);
					result[typedKey] = typedValue;
				}
			}
			return result;
		};
	};
	webidl$16.interfaceConverter = function(TypeCheck, name$2) {
		return (V, prefix, argument) => {
			if (!TypeCheck(V)) throw webidl$16.errors.exception({
				header: prefix,
				message: `Expected ${argument} ("${webidl$16.util.Stringify(V)}") to be an instance of ${name$2}.`
			});
			return V;
		};
	};
	webidl$16.dictionaryConverter = function(converters) {
		return (dictionary, prefix, argument) => {
			const dict = {};
			if (dictionary != null && webidl$16.util.Type(dictionary) !== OBJECT) throw webidl$16.errors.exception({
				header: prefix,
				message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
			});
			for (const options of converters) {
				const { key, defaultValue, required, converter } = options;
				if (required === true) {
					if (dictionary == null || !Object.hasOwn(dictionary, key)) throw webidl$16.errors.exception({
						header: prefix,
						message: `Missing required key "${key}".`
					});
				}
				let value = dictionary?.[key];
				const hasDefault = defaultValue !== void 0;
				if (hasDefault && value === void 0) value = defaultValue();
				if (required || hasDefault || value !== void 0) {
					value = converter(value, prefix, `${argument}.${key}`);
					if (options.allowedValues && !options.allowedValues.includes(value)) throw webidl$16.errors.exception({
						header: prefix,
						message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
					});
					dict[key] = value;
				}
			}
			return dict;
		};
	};
	webidl$16.nullableConverter = function(converter) {
		return (V, prefix, argument) => {
			if (V === null) return V;
			return converter(V, prefix, argument);
		};
	};
	/**
	* @param {*} value
	* @returns {boolean}
	*/
	webidl$16.is.USVString = function(value) {
		return typeof value === "string" && value.isWellFormed();
	};
	webidl$16.is.ReadableStream = webidl$16.util.MakeTypeAssertion(ReadableStream);
	webidl$16.is.Blob = webidl$16.util.MakeTypeAssertion(Blob);
	webidl$16.is.URLSearchParams = webidl$16.util.MakeTypeAssertion(URLSearchParams);
	webidl$16.is.File = webidl$16.util.MakeTypeAssertion(globalThis.File ?? __require("node:buffer").File);
	webidl$16.is.URL = webidl$16.util.MakeTypeAssertion(URL);
	webidl$16.is.AbortSignal = webidl$16.util.MakeTypeAssertion(AbortSignal);
	webidl$16.is.MessagePort = webidl$16.util.MakeTypeAssertion(MessagePort);
	webidl$16.converters.DOMString = function(V, prefix, argument, opts) {
		if (V === null && opts?.legacyNullToEmptyString) return "";
		if (typeof V === "symbol") throw webidl$16.errors.exception({
			header: prefix,
			message: `${argument} is a symbol, which cannot be converted to a DOMString.`
		});
		return String(V);
	};
	webidl$16.converters.ByteString = function(V, prefix, argument) {
		if (typeof V === "symbol") throw webidl$16.errors.exception({
			header: prefix,
			message: `${argument} is a symbol, which cannot be converted to a ByteString.`
		});
		const x = String(V);
		for (let index = 0; index < x.length; index++) if (x.charCodeAt(index) > 255) throw new TypeError(`Cannot convert argument to a ByteString because the character at index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`);
		return x;
	};
	/**
	* @param {unknown} value
	* @returns {string}
	* @see https://webidl.spec.whatwg.org/#es-USVString
	*/
	webidl$16.converters.USVString = function(value) {
		if (typeof value === "string") return value.toWellFormed();
		return `${value}`.toWellFormed();
	};
	webidl$16.converters.boolean = function(V) {
		const x = Boolean(V);
		return x;
	};
	webidl$16.converters.any = function(V) {
		return V;
	};
	webidl$16.converters["long long"] = function(V, prefix, argument) {
		const x = webidl$16.util.ConvertToInt(V, 64, "signed", void 0, prefix, argument);
		return x;
	};
	webidl$16.converters["unsigned long long"] = function(V, prefix, argument) {
		const x = webidl$16.util.ConvertToInt(V, 64, "unsigned", void 0, prefix, argument);
		return x;
	};
	webidl$16.converters["unsigned long"] = function(V, prefix, argument) {
		const x = webidl$16.util.ConvertToInt(V, 32, "unsigned", void 0, prefix, argument);
		return x;
	};
	webidl$16.converters["unsigned short"] = function(V, prefix, argument, opts) {
		const x = webidl$16.util.ConvertToInt(V, 16, "unsigned", opts, prefix, argument);
		return x;
	};
	webidl$16.converters.ArrayBuffer = function(V, prefix, argument, opts) {
		if (webidl$16.util.Type(V) !== OBJECT || !types$3.isAnyArrayBuffer(V)) throw webidl$16.errors.conversionFailed({
			prefix,
			argument: `${argument} ("${webidl$16.util.Stringify(V)}")`,
			types: ["ArrayBuffer"]
		});
		if (opts?.allowShared === false && types$3.isSharedArrayBuffer(V)) throw webidl$16.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		if (V.resizable || V.growable) throw webidl$16.errors.exception({
			header: "ArrayBuffer",
			message: "Received a resizable ArrayBuffer."
		});
		return V;
	};
	webidl$16.converters.TypedArray = function(V, T, prefix, name$2, opts) {
		if (webidl$16.util.Type(V) !== OBJECT || !types$3.isTypedArray(V) || V.constructor.name !== T.name) throw webidl$16.errors.conversionFailed({
			prefix,
			argument: `${name$2} ("${webidl$16.util.Stringify(V)}")`,
			types: [T.name]
		});
		if (opts?.allowShared === false && types$3.isSharedArrayBuffer(V.buffer)) throw webidl$16.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		if (V.buffer.resizable || V.buffer.growable) throw webidl$16.errors.exception({
			header: "ArrayBuffer",
			message: "Received a resizable ArrayBuffer."
		});
		return V;
	};
	webidl$16.converters.DataView = function(V, prefix, name$2, opts) {
		if (webidl$16.util.Type(V) !== OBJECT || !types$3.isDataView(V)) throw webidl$16.errors.exception({
			header: prefix,
			message: `${name$2} is not a DataView.`
		});
		if (opts?.allowShared === false && types$3.isSharedArrayBuffer(V.buffer)) throw webidl$16.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		if (V.buffer.resizable || V.buffer.growable) throw webidl$16.errors.exception({
			header: "ArrayBuffer",
			message: "Received a resizable ArrayBuffer."
		});
		return V;
	};
	webidl$16.converters["sequence<ByteString>"] = webidl$16.sequenceConverter(webidl$16.converters.ByteString);
	webidl$16.converters["sequence<sequence<ByteString>>"] = webidl$16.sequenceConverter(webidl$16.converters["sequence<ByteString>"]);
	webidl$16.converters["record<ByteString, ByteString>"] = webidl$16.recordConverter(webidl$16.converters.ByteString, webidl$16.converters.ByteString);
	webidl$16.converters.Blob = webidl$16.interfaceConverter(webidl$16.is.Blob, "Blob");
	webidl$16.converters.AbortSignal = webidl$16.interfaceConverter(webidl$16.is.AbortSignal, "AbortSignal");
	module.exports = { webidl: webidl$16 };
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/util.js
var require_util$4 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/util.js"(exports, module) {
	const { Transform: Transform$3 } = __require("node:stream");
	const zlib$1 = __require("node:zlib");
	const { redirectStatusSet: redirectStatusSet$2, referrerPolicyTokens, badPortsSet } = require_constants$2();
	const { getGlobalOrigin: getGlobalOrigin$1 } = require_global$1();
	const { collectASequenceOfCodePoints, collectAnHTTPQuotedString, removeChars: removeChars$1, parseMIMEType: parseMIMEType$2 } = require_data_url();
	const { performance: performance$1 } = __require("node:perf_hooks");
	const { ReadableStreamFrom: ReadableStreamFrom$2, isValidHTTPToken: isValidHTTPToken$1, normalizedMethodRecordsBase: normalizedMethodRecordsBase$1 } = require_util$5();
	const assert$25 = __require("node:assert");
	const { isUint8Array: isUint8Array$1 } = __require("node:util/types");
	const { webidl: webidl$15 } = require_webidl();
	let supportedHashes = [];
	/** @type {import('crypto')} */
	let crypto$2;
	try {
		crypto$2 = __require("node:crypto");
		const possibleRelevantHashes = [
			"sha256",
			"sha384",
			"sha512"
		];
		supportedHashes = crypto$2.getHashes().filter((hash) => possibleRelevantHashes.includes(hash));
	} catch {}
	function responseURL(response) {
		const urlList = response.urlList;
		const length = urlList.length;
		return length === 0 ? null : urlList[length - 1].toString();
	}
	function responseLocationURL$1(response, requestFragment) {
		if (!redirectStatusSet$2.has(response.status)) return null;
		let location = response.headersList.get("location", true);
		if (location !== null && isValidHeaderValue$1(location)) {
			if (!isValidEncodedURL(location)) location = normalizeBinaryStringToUtf8(location);
			location = new URL(location, responseURL(response));
		}
		if (location && !location.hash) location.hash = requestFragment;
		return location;
	}
	/**
	* @see https://www.rfc-editor.org/rfc/rfc1738#section-2.2
	* @param {string} url
	* @returns {boolean}
	*/
	function isValidEncodedURL(url) {
		for (let i$1 = 0; i$1 < url.length; ++i$1) {
			const code = url.charCodeAt(i$1);
			if (code > 126 || code < 32) return false;
		}
		return true;
	}
	/**
	* If string contains non-ASCII characters, assumes it's UTF-8 encoded and decodes it.
	* Since UTF-8 is a superset of ASCII, this will work for ASCII strings as well.
	* @param {string} value
	* @returns {string}
	*/
	function normalizeBinaryStringToUtf8(value) {
		return Buffer.from(value, "binary").toString("utf8");
	}
	/** @returns {URL} */
	function requestCurrentURL$1(request$3) {
		return request$3.urlList[request$3.urlList.length - 1];
	}
	function requestBadPort$1(request$3) {
		const url = requestCurrentURL$1(request$3);
		if (urlIsHttpHttpsScheme$2(url) && badPortsSet.has(url.port)) return "blocked";
		return "allowed";
	}
	function isErrorLike$2(object$1) {
		return object$1 instanceof Error || object$1?.constructor?.name === "Error" || object$1?.constructor?.name === "DOMException";
	}
	function isValidReasonPhrase$1(statusText) {
		for (let i$1 = 0; i$1 < statusText.length; ++i$1) {
			const c$1 = statusText.charCodeAt(i$1);
			if (!(c$1 === 9 || c$1 >= 32 && c$1 <= 126 || c$1 >= 128 && c$1 <= 255)) return false;
		}
		return true;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#header-name
	* @param {string} potentialValue
	*/
	const isValidHeaderName$2 = isValidHTTPToken$1;
	/**
	* @see https://fetch.spec.whatwg.org/#header-value
	* @param {string} potentialValue
	*/
	function isValidHeaderValue$1(potentialValue) {
		return (potentialValue[0] === "	" || potentialValue[0] === " " || potentialValue[potentialValue.length - 1] === "	" || potentialValue[potentialValue.length - 1] === " " || potentialValue.includes("\n") || potentialValue.includes("\r") || potentialValue.includes("\0")) === false;
	}
	/**
	* Parse a referrer policy from a Referrer-Policy header
	* @see https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header
	*/
	function parseReferrerPolicy(actualResponse) {
		const policyHeader = (actualResponse.headersList.get("referrer-policy", true) ?? "").split(",");
		let policy = "";
		if (policyHeader.length) for (let i$1 = policyHeader.length; i$1 !== 0; i$1--) {
			const token = policyHeader[i$1 - 1].trim();
			if (referrerPolicyTokens.has(token)) {
				policy = token;
				break;
			}
		}
		return policy;
	}
	/**
	* Given a request request and a response actualResponse, this algorithm
	* updates request’s referrer policy according to the Referrer-Policy
	* header (if any) in actualResponse.
	* @see https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect
	* @param {import('./request').Request} request
	* @param {import('./response').Response} actualResponse
	*/
	function setRequestReferrerPolicyOnRedirect$1(request$3, actualResponse) {
		const policy = parseReferrerPolicy(actualResponse);
		if (policy !== "") request$3.referrerPolicy = policy;
	}
	function crossOriginResourcePolicyCheck$1() {
		return "allowed";
	}
	function corsCheck$1() {
		return "success";
	}
	function TAOCheck$1() {
		return "success";
	}
	function appendFetchMetadata$1(httpRequest) {
		let header = null;
		header = httpRequest.mode;
		httpRequest.headersList.set("sec-fetch-mode", header, true);
	}
	function appendRequestOriginHeader$1(request$3) {
		let serializedOrigin = request$3.origin;
		if (serializedOrigin === "client" || serializedOrigin === void 0) return;
		if (request$3.responseTainting === "cors" || request$3.mode === "websocket") request$3.headersList.append("origin", serializedOrigin, true);
		else if (request$3.method !== "GET" && request$3.method !== "HEAD") {
			switch (request$3.referrerPolicy) {
				case "no-referrer":
					serializedOrigin = null;
					break;
				case "no-referrer-when-downgrade":
				case "strict-origin":
				case "strict-origin-when-cross-origin":
					if (request$3.origin && urlHasHttpsScheme$1(request$3.origin) && !urlHasHttpsScheme$1(requestCurrentURL$1(request$3))) serializedOrigin = null;
					break;
				case "same-origin":
					if (!sameOrigin$2(request$3, requestCurrentURL$1(request$3))) serializedOrigin = null;
					break;
				default:
			}
			request$3.headersList.append("origin", serializedOrigin, true);
		}
	}
	function coarsenTime(timestamp, crossOriginIsolatedCapability) {
		return timestamp;
	}
	function clampAndCoarsenConnectionTimingInfo$1(connectionTimingInfo, defaultStartTime, crossOriginIsolatedCapability) {
		if (!connectionTimingInfo?.startTime || connectionTimingInfo.startTime < defaultStartTime) return {
			domainLookupStartTime: defaultStartTime,
			domainLookupEndTime: defaultStartTime,
			connectionStartTime: defaultStartTime,
			connectionEndTime: defaultStartTime,
			secureConnectionStartTime: defaultStartTime,
			ALPNNegotiatedProtocol: connectionTimingInfo?.ALPNNegotiatedProtocol
		};
		return {
			domainLookupStartTime: coarsenTime(connectionTimingInfo.domainLookupStartTime, crossOriginIsolatedCapability),
			domainLookupEndTime: coarsenTime(connectionTimingInfo.domainLookupEndTime, crossOriginIsolatedCapability),
			connectionStartTime: coarsenTime(connectionTimingInfo.connectionStartTime, crossOriginIsolatedCapability),
			connectionEndTime: coarsenTime(connectionTimingInfo.connectionEndTime, crossOriginIsolatedCapability),
			secureConnectionStartTime: coarsenTime(connectionTimingInfo.secureConnectionStartTime, crossOriginIsolatedCapability),
			ALPNNegotiatedProtocol: connectionTimingInfo.ALPNNegotiatedProtocol
		};
	}
	function coarsenedSharedCurrentTime$1(crossOriginIsolatedCapability) {
		return coarsenTime(performance$1.now(), crossOriginIsolatedCapability);
	}
	function createOpaqueTimingInfo$1(timingInfo) {
		return {
			startTime: timingInfo.startTime ?? 0,
			redirectStartTime: 0,
			redirectEndTime: 0,
			postRedirectStartTime: timingInfo.startTime ?? 0,
			finalServiceWorkerStartTime: 0,
			finalNetworkResponseStartTime: 0,
			finalNetworkRequestStartTime: 0,
			endTime: 0,
			encodedBodySize: 0,
			decodedBodySize: 0,
			finalConnectionTimingInfo: null
		};
	}
	function makePolicyContainer$1() {
		return { referrerPolicy: "strict-origin-when-cross-origin" };
	}
	function clonePolicyContainer$1(policyContainer) {
		return { referrerPolicy: policyContainer.referrerPolicy };
	}
	/**
	* Determine request’s Referrer
	*
	* @see https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer
	*/
	function determineRequestsReferrer$1(request$3) {
		const policy = request$3.referrerPolicy;
		assert$25(policy);
		let referrerSource = null;
		if (request$3.referrer === "client") {
			const globalOrigin$2 = getGlobalOrigin$1();
			if (!globalOrigin$2 || globalOrigin$2.origin === "null") return "no-referrer";
			referrerSource = new URL(globalOrigin$2);
		} else if (webidl$15.is.URL(request$3.referrer)) referrerSource = request$3.referrer;
		let referrerURL = stripURLForReferrer(referrerSource);
		const referrerOrigin = stripURLForReferrer(referrerSource, true);
		if (referrerURL.toString().length > 4096) referrerURL = referrerOrigin;
		switch (policy) {
			case "no-referrer": return "no-referrer";
			case "origin":
				if (referrerOrigin != null) return referrerOrigin;
				return stripURLForReferrer(referrerSource, true);
			case "unsafe-url": return referrerURL;
			case "strict-origin": {
				const currentURL = requestCurrentURL$1(request$3);
				if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) return "no-referrer";
				return referrerOrigin;
			}
			case "strict-origin-when-cross-origin": {
				const currentURL = requestCurrentURL$1(request$3);
				if (sameOrigin$2(referrerURL, currentURL)) return referrerURL;
				if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) return "no-referrer";
				return referrerOrigin;
			}
			case "same-origin":
				if (sameOrigin$2(request$3, referrerURL)) return referrerURL;
				return "no-referrer";
			case "origin-when-cross-origin":
				if (sameOrigin$2(request$3, referrerURL)) return referrerURL;
				return referrerOrigin;
			case "no-referrer-when-downgrade": {
				const currentURL = requestCurrentURL$1(request$3);
				if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) return "no-referrer";
				return referrerOrigin;
			}
		}
	}
	/**
	* Certain portions of URLs must not be included when sending a URL as the
	* value of a `Referer` header: a URLs fragment, username, and password
	* components must be stripped from the URL before it’s sent out. This
	* algorithm accepts a origin-only flag, which defaults to false. If set to
	* true, the algorithm will additionally remove the URL’s path and query
	* components, leaving only the scheme, host, and port.
	*
	* @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
	* @param {URL} url
	* @param {boolean} [originOnly=false]
	*/
	function stripURLForReferrer(url, originOnly = false) {
		assert$25(webidl$15.is.URL(url));
		url = new URL(url);
		if (urlIsLocal$1(url)) return "no-referrer";
		url.username = "";
		url.password = "";
		url.hash = "";
		if (originOnly === true) {
			url.pathname = "";
			url.search = "";
		}
		return url;
	}
	const potentialleTrustworthyIPv4RegExp = /* @__PURE__ */ new RegExp("^(?:(?:127\\.)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){2}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[1-9]))$");
	const potentialleTrustworthyIPv6RegExp = /* @__PURE__ */ new RegExp("^(?:(?:(?:0{1,4}):){7}(?:(?:0{0,3}1))|(?:(?:0{1,4}):){1,6}(?::(?:0{0,3}1))|(?:::(?:0{0,3}1))|)$");
	/**
	* Check if host matches one of the CIDR notations 127.0.0.0/8 or ::1/128.
	*
	* @param {string} origin
	* @returns {boolean}
	*/
	function isOriginIPPotentiallyTrustworthy(origin) {
		if (origin.includes(":")) {
			if (origin[0] === "[" && origin[origin.length - 1] === "]") origin = origin.slice(1, -1);
			return potentialleTrustworthyIPv6RegExp.test(origin);
		}
		return potentialleTrustworthyIPv4RegExp.test(origin);
	}
	/**
	* A potentially trustworthy origin is one which a user agent can generally
	* trust as delivering data securely.
	*
	* Return value `true` means `Potentially Trustworthy`.
	* Return value `false` means `Not Trustworthy`.
	*
	* @see https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy
	* @param {string} origin
	* @returns {boolean}
	*/
	function isOriginPotentiallyTrustworthy(origin) {
		if (origin == null || origin === "null") return false;
		origin = new URL(origin);
		if (origin.protocol === "https:" || origin.protocol === "wss:") return true;
		if (isOriginIPPotentiallyTrustworthy(origin.hostname)) return true;
		if (origin.hostname === "localhost" || origin.hostname === "localhost.") return true;
		if (origin.hostname.endsWith(".localhost") || origin.hostname.endsWith(".localhost.")) return true;
		if (origin.protocol === "file:") return true;
		return false;
	}
	/**
	* A potentially trustworthy URL is one which either inherits context from its
	* creator (about:blank, about:srcdoc, data) or one whose origin is a
	* potentially trustworthy origin.
	*
	* Return value `true` means `Potentially Trustworthy`.
	* Return value `false` means `Not Trustworthy`.
	*
	* @see https://www.w3.org/TR/secure-contexts/#is-url-trustworthy
	* @param {URL} url
	* @returns {boolean}
	*/
	function isURLPotentiallyTrustworthy(url) {
		if (!webidl$15.is.URL(url)) return false;
		if (url.href === "about:blank" || url.href === "about:srcdoc") return true;
		if (url.protocol === "data:") return true;
		if (url.protocol === "blob:") return true;
		return isOriginPotentiallyTrustworthy(url.origin);
	}
	/**
	* @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
	* @param {Uint8Array} bytes
	* @param {string} metadataList
	*/
	function bytesMatch$1(bytes, metadataList) {
		/* istanbul ignore if: only if node is built with --without-ssl */
		if (crypto$2 === void 0) return true;
		const parsedMetadata = parseMetadata(metadataList);
		if (parsedMetadata === "no metadata") return true;
		if (parsedMetadata.length === 0) return true;
		const strongest = getStrongestMetadata(parsedMetadata);
		const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest);
		for (const item of metadata) {
			const algorithm = item.algo;
			const expectedValue = item.hash;
			let actualValue = crypto$2.createHash(algorithm).update(bytes).digest("base64");
			if (actualValue[actualValue.length - 1] === "=") if (actualValue[actualValue.length - 2] === "=") actualValue = actualValue.slice(0, -2);
			else actualValue = actualValue.slice(0, -1);
			if (compareBase64Mixed(actualValue, expectedValue)) return true;
		}
		return false;
	}
	const parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
	/**
	* @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
	* @param {string} metadata
	*/
	function parseMetadata(metadata) {
		/** @type {{ algo: string, hash: string }[]} */
		const result = [];
		let empty = true;
		for (const token of metadata.split(" ")) {
			empty = false;
			const parsedToken = parseHashWithOptions.exec(token);
			if (parsedToken === null || parsedToken.groups === void 0 || parsedToken.groups.algo === void 0) continue;
			const algorithm = parsedToken.groups.algo.toLowerCase();
			if (supportedHashes.includes(algorithm)) result.push(parsedToken.groups);
		}
		if (empty === true) return "no metadata";
		return result;
	}
	/**
	* @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList
	*/
	function getStrongestMetadata(metadataList) {
		let algorithm = metadataList[0].algo;
		if (algorithm[3] === "5") return algorithm;
		for (let i$1 = 1; i$1 < metadataList.length; ++i$1) {
			const metadata = metadataList[i$1];
			if (metadata.algo[3] === "5") {
				algorithm = "sha512";
				break;
			} else if (algorithm[3] === "3") continue;
			else if (metadata.algo[3] === "3") algorithm = "sha384";
		}
		return algorithm;
	}
	function filterMetadataListByAlgorithm(metadataList, algorithm) {
		if (metadataList.length === 1) return metadataList;
		let pos = 0;
		for (let i$1 = 0; i$1 < metadataList.length; ++i$1) if (metadataList[i$1].algo === algorithm) metadataList[pos++] = metadataList[i$1];
		metadataList.length = pos;
		return metadataList;
	}
	/**
	* Compares two base64 strings, allowing for base64url
	* in the second string.
	*
	* @param {string} actualValue always base64
	* @param {string} expectedValue base64 or base64url
	* @returns {boolean}
	*/
	function compareBase64Mixed(actualValue, expectedValue) {
		if (actualValue.length !== expectedValue.length) return false;
		for (let i$1 = 0; i$1 < actualValue.length; ++i$1) if (actualValue[i$1] !== expectedValue[i$1]) {
			if (actualValue[i$1] === "+" && expectedValue[i$1] === "-" || actualValue[i$1] === "/" && expectedValue[i$1] === "_") continue;
			return false;
		}
		return true;
	}
	function tryUpgradeRequestToAPotentiallyTrustworthyURL$1(request$3) {}
	/**
	* @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
	* @param {URL} A
	* @param {URL} B
	*/
	function sameOrigin$2(A, B) {
		if (A.origin === B.origin && A.origin === "null") return true;
		if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) return true;
		return false;
	}
	function isAborted$3(fetchParams) {
		return fetchParams.controller.state === "aborted";
	}
	function isCancelled$2(fetchParams) {
		return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-method-normalize
	* @param {string} method
	*/
	function normalizeMethod(method) {
		return normalizedMethodRecordsBase$1[method.toLowerCase()] ?? method;
	}
	function serializeJavascriptValueToJSONString$1(value) {
		const result = JSON.stringify(value);
		if (result === void 0) throw new TypeError("Value is not JSON serializable");
		assert$25(typeof result === "string");
		return result;
	}
	const esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
	/**
	* @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
	* @param {string} name name of the instance
	* @param {((target: any) => any)} kInternalIterator
	* @param {string | number} [keyIndex]
	* @param {string | number} [valueIndex]
	*/
	function createIterator(name$2, kInternalIterator, keyIndex = 0, valueIndex = 1) {
		class FastIterableIterator {
			/** @type {any} */
			#target;
			/** @type {'key' | 'value' | 'key+value'} */
			#kind;
			/** @type {number} */
			#index;
			/**
			* @see https://webidl.spec.whatwg.org/#dfn-default-iterator-object
			* @param {unknown} target
			* @param {'key' | 'value' | 'key+value'} kind
			*/
			constructor(target, kind) {
				this.#target = target;
				this.#kind = kind;
				this.#index = 0;
			}
			next() {
				if (typeof this !== "object" || this === null || !(#target in this)) throw new TypeError(`'next' called on an object that does not implement interface ${name$2} Iterator.`);
				const index = this.#index;
				const values = kInternalIterator(this.#target);
				const len = values.length;
				if (index >= len) return {
					value: void 0,
					done: true
				};
				const { [keyIndex]: key, [valueIndex]: value } = values[index];
				this.#index = index + 1;
				let result;
				switch (this.#kind) {
					case "key":
						result = key;
						break;
					case "value":
						result = value;
						break;
					case "key+value":
						result = [key, value];
						break;
				}
				return {
					value: result,
					done: false
				};
			}
		}
		delete FastIterableIterator.prototype.constructor;
		Object.setPrototypeOf(FastIterableIterator.prototype, esIteratorPrototype);
		Object.defineProperties(FastIterableIterator.prototype, {
			[Symbol.toStringTag]: {
				writable: false,
				enumerable: false,
				configurable: true,
				value: `${name$2} Iterator`
			},
			next: {
				writable: true,
				enumerable: true,
				configurable: true
			}
		});
		/**
		* @param {unknown} target
		* @param {'key' | 'value' | 'key+value'} kind
		* @returns {IterableIterator<any>}
		*/
		return function(target, kind) {
			return new FastIterableIterator(target, kind);
		};
	}
	/**
	* @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
	* @param {string} name name of the instance
	* @param {any} object class
	* @param {(target: any) => any} kInternalIterator
	* @param {string | number} [keyIndex]
	* @param {string | number} [valueIndex]
	*/
	function iteratorMixin$2(name$2, object$1, kInternalIterator, keyIndex = 0, valueIndex = 1) {
		const makeIterator$3 = createIterator(name$2, kInternalIterator, keyIndex, valueIndex);
		const properties = {
			keys: {
				writable: true,
				enumerable: true,
				configurable: true,
				value: function keys$1() {
					webidl$15.brandCheck(this, object$1);
					return makeIterator$3(this, "key");
				}
			},
			values: {
				writable: true,
				enumerable: true,
				configurable: true,
				value: function values() {
					webidl$15.brandCheck(this, object$1);
					return makeIterator$3(this, "value");
				}
			},
			entries: {
				writable: true,
				enumerable: true,
				configurable: true,
				value: function entries() {
					webidl$15.brandCheck(this, object$1);
					return makeIterator$3(this, "key+value");
				}
			},
			forEach: {
				writable: true,
				enumerable: true,
				configurable: true,
				value: function forEach(callbackfn, thisArg = globalThis) {
					webidl$15.brandCheck(this, object$1);
					webidl$15.argumentLengthCheck(arguments, 1, `${name$2}.forEach`);
					if (typeof callbackfn !== "function") throw new TypeError(`Failed to execute 'forEach' on '${name$2}': parameter 1 is not of type 'Function'.`);
					for (const { 0: key, 1: value } of makeIterator$3(this, "key+value")) callbackfn.call(thisArg, value, key, this);
				}
			}
		};
		return Object.defineProperties(object$1.prototype, {
			...properties,
			[Symbol.iterator]: {
				writable: true,
				enumerable: false,
				configurable: true,
				value: properties.entries.value
			}
		});
	}
	/**
	* @param {import('./body').ExtractBodyResult} body
	* @param {(bytes: Uint8Array) => void} processBody
	* @param {(error: Error) => void} processBodyError
	* @returns {void}
	*
	* @see https://fetch.spec.whatwg.org/#body-fully-read
	*/
	function fullyReadBody$2(body, processBody, processBodyError) {
		const successSteps = processBody;
		const errorSteps = processBodyError;
		try {
			const reader = body.stream.getReader();
			readAllBytes$1(reader, successSteps, errorSteps);
		} catch (e) {
			errorSteps(e);
		}
	}
	/**
	* @param {ReadableStreamController<Uint8Array>} controller
	*/
	function readableStreamClose$2(controller) {
		try {
			controller.close();
			controller.byobRequest?.respond(0);
		} catch (err) {
			if (!err.message.includes("Controller is already closed") && !err.message.includes("ReadableStream is already closed")) throw err;
		}
	}
	const invalidIsomorphicEncodeValueRegex = /[^\x00-\xFF]/;
	/**
	* @see https://infra.spec.whatwg.org/#isomorphic-encode
	* @param {string} input
	*/
	function isomorphicEncode$2(input) {
		assert$25(!invalidIsomorphicEncodeValueRegex.test(input));
		return input;
	}
	/**
	* @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
	* @see https://streams.spec.whatwg.org/#read-loop
	* @param {ReadableStream<Uint8Array<ArrayBuffer>>} reader
	* @param {(bytes: Uint8Array) => void} successSteps
	* @param {(error: Error) => void} failureSteps
	* @returns {Promise<void>}
	*/
	async function readAllBytes$1(reader, successSteps, failureSteps) {
		try {
			const bytes = [];
			let byteLength = 0;
			do {
				const { done, value: chunk } = await reader.read();
				if (done) {
					successSteps(Buffer.concat(bytes, byteLength));
					return;
				}
				if (!isUint8Array$1(chunk)) {
					failureSteps(/* @__PURE__ */ new TypeError("Received non-Uint8Array chunk"));
					return;
				}
				bytes.push(chunk);
				byteLength += chunk.length;
			} while (true);
		} catch (e) {
			failureSteps(e);
		}
	}
	/**
	* @see https://fetch.spec.whatwg.org/#is-local
	* @param {URL} url
	* @returns {boolean}
	*/
	function urlIsLocal$1(url) {
		assert$25("protocol" in url);
		const protocol = url.protocol;
		return protocol === "about:" || protocol === "blob:" || protocol === "data:";
	}
	/**
	* @param {string|URL} url
	* @returns {boolean}
	*/
	function urlHasHttpsScheme$1(url) {
		return typeof url === "string" && url[5] === ":" && url[0] === "h" && url[1] === "t" && url[2] === "t" && url[3] === "p" && url[4] === "s" || url.protocol === "https:";
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-scheme
	* @param {URL} url
	*/
	function urlIsHttpHttpsScheme$2(url) {
		assert$25("protocol" in url);
		const protocol = url.protocol;
		return protocol === "http:" || protocol === "https:";
	}
	/**
	* @typedef {Object} RangeHeaderValue
	* @property {number|null} rangeStartValue
	* @property {number|null} rangeEndValue
	*/
	/**
	* @see https://fetch.spec.whatwg.org/#simple-range-header-value
	* @param {string} value
	* @param {boolean} allowWhitespace
	* @return {RangeHeaderValue|'failure'}
	*/
	function simpleRangeHeaderValue$1(value, allowWhitespace) {
		const data$1 = value;
		if (!data$1.startsWith("bytes")) return "failure";
		const position = { position: 5 };
		if (allowWhitespace) collectASequenceOfCodePoints((char) => char === "	" || char === " ", data$1, position);
		if (data$1.charCodeAt(position.position) !== 61) return "failure";
		position.position++;
		if (allowWhitespace) collectASequenceOfCodePoints((char) => char === "	" || char === " ", data$1, position);
		const rangeStart = collectASequenceOfCodePoints((char) => {
			const code = char.charCodeAt(0);
			return code >= 48 && code <= 57;
		}, data$1, position);
		const rangeStartValue = rangeStart.length ? Number(rangeStart) : null;
		if (allowWhitespace) collectASequenceOfCodePoints((char) => char === "	" || char === " ", data$1, position);
		if (data$1.charCodeAt(position.position) !== 45) return "failure";
		position.position++;
		if (allowWhitespace) collectASequenceOfCodePoints((char) => char === "	" || char === " ", data$1, position);
		const rangeEnd = collectASequenceOfCodePoints((char) => {
			const code = char.charCodeAt(0);
			return code >= 48 && code <= 57;
		}, data$1, position);
		const rangeEndValue = rangeEnd.length ? Number(rangeEnd) : null;
		if (position.position < data$1.length) return "failure";
		if (rangeEndValue === null && rangeStartValue === null) return "failure";
		if (rangeStartValue > rangeEndValue) return "failure";
		return {
			rangeStartValue,
			rangeEndValue
		};
	}
	/**
	* @see https://fetch.spec.whatwg.org/#build-a-content-range
	* @param {number} rangeStart
	* @param {number} rangeEnd
	* @param {number} fullLength
	*/
	function buildContentRange$1(rangeStart, rangeEnd, fullLength) {
		let contentRange = "bytes ";
		contentRange += isomorphicEncode$2(`${rangeStart}`);
		contentRange += "-";
		contentRange += isomorphicEncode$2(`${rangeEnd}`);
		contentRange += "/";
		contentRange += isomorphicEncode$2(`${fullLength}`);
		return contentRange;
	}
	var InflateStream = class extends Transform$3 {
		#zlibOptions;
		/** @param {zlib.ZlibOptions} [zlibOptions] */
		constructor(zlibOptions) {
			super();
			this.#zlibOptions = zlibOptions;
		}
		_transform(chunk, encoding, callback) {
			if (!this._inflateStream) {
				if (chunk.length === 0) {
					callback();
					return;
				}
				this._inflateStream = (chunk[0] & 15) === 8 ? zlib$1.createInflate(this.#zlibOptions) : zlib$1.createInflateRaw(this.#zlibOptions);
				this._inflateStream.on("data", this.push.bind(this));
				this._inflateStream.on("end", () => this.push(null));
				this._inflateStream.on("error", (err) => this.destroy(err));
			}
			this._inflateStream.write(chunk, encoding, callback);
		}
		_final(callback) {
			if (this._inflateStream) {
				this._inflateStream.end();
				this._inflateStream = null;
			}
			callback();
		}
	};
	/**
	* @param {zlib.ZlibOptions} [zlibOptions]
	* @returns {InflateStream}
	*/
	function createInflate$1(zlibOptions) {
		return new InflateStream(zlibOptions);
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-header-extract-mime-type
	* @param {import('./headers').HeadersList} headers
	*/
	function extractMimeType$2(headers) {
		let charset = null;
		let essence = null;
		let mimeType = null;
		const values = getDecodeSplit$1("content-type", headers);
		if (values === null) return "failure";
		for (const value of values) {
			const temporaryMimeType = parseMIMEType$2(value);
			if (temporaryMimeType === "failure" || temporaryMimeType.essence === "*/*") continue;
			mimeType = temporaryMimeType;
			if (mimeType.essence !== essence) {
				charset = null;
				if (mimeType.parameters.has("charset")) charset = mimeType.parameters.get("charset");
				essence = mimeType.essence;
			} else if (!mimeType.parameters.has("charset") && charset !== null) mimeType.parameters.set("charset", charset);
		}
		if (mimeType == null) return "failure";
		return mimeType;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#header-value-get-decode-and-split
	* @param {string|null} value
	*/
	function gettingDecodingSplitting(value) {
		const input = value;
		const position = { position: 0 };
		const values = [];
		let temporaryValue = "";
		while (position.position < input.length) {
			temporaryValue += collectASequenceOfCodePoints((char) => char !== "\"" && char !== ",", input, position);
			if (position.position < input.length) if (input.charCodeAt(position.position) === 34) {
				temporaryValue += collectAnHTTPQuotedString(input, position);
				if (position.position < input.length) continue;
			} else {
				assert$25(input.charCodeAt(position.position) === 44);
				position.position++;
			}
			temporaryValue = removeChars$1(temporaryValue, true, true, (char) => char === 9 || char === 32);
			values.push(temporaryValue);
			temporaryValue = "";
		}
		return values;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-header-list-get-decode-split
	* @param {string} name lowercase header name
	* @param {import('./headers').HeadersList} list
	*/
	function getDecodeSplit$1(name$2, list) {
		const value = list.get(name$2, true);
		if (value === null) return null;
		return gettingDecodingSplitting(value);
	}
	const textDecoder$1 = new TextDecoder();
	/**
	* @see https://encoding.spec.whatwg.org/#utf-8-decode
	* @param {Buffer} buffer
	*/
	function utf8DecodeBytes$3(buffer$1) {
		if (buffer$1.length === 0) return "";
		if (buffer$1[0] === 239 && buffer$1[1] === 187 && buffer$1[2] === 191) buffer$1 = buffer$1.subarray(3);
		const output = textDecoder$1.decode(buffer$1);
		return output;
	}
	var EnvironmentSettingsObjectBase = class {
		get baseUrl() {
			return getGlobalOrigin$1();
		}
		get origin() {
			return this.baseUrl?.origin;
		}
		policyContainer = makePolicyContainer$1();
	};
	var EnvironmentSettingsObject = class {
		settingsObject = new EnvironmentSettingsObjectBase();
	};
	const environmentSettingsObject$4 = new EnvironmentSettingsObject();
	module.exports = {
		isAborted: isAborted$3,
		isCancelled: isCancelled$2,
		isValidEncodedURL,
		ReadableStreamFrom: ReadableStreamFrom$2,
		tryUpgradeRequestToAPotentiallyTrustworthyURL: tryUpgradeRequestToAPotentiallyTrustworthyURL$1,
		clampAndCoarsenConnectionTimingInfo: clampAndCoarsenConnectionTimingInfo$1,
		coarsenedSharedCurrentTime: coarsenedSharedCurrentTime$1,
		determineRequestsReferrer: determineRequestsReferrer$1,
		makePolicyContainer: makePolicyContainer$1,
		clonePolicyContainer: clonePolicyContainer$1,
		appendFetchMetadata: appendFetchMetadata$1,
		appendRequestOriginHeader: appendRequestOriginHeader$1,
		TAOCheck: TAOCheck$1,
		corsCheck: corsCheck$1,
		crossOriginResourcePolicyCheck: crossOriginResourcePolicyCheck$1,
		createOpaqueTimingInfo: createOpaqueTimingInfo$1,
		setRequestReferrerPolicyOnRedirect: setRequestReferrerPolicyOnRedirect$1,
		isValidHTTPToken: isValidHTTPToken$1,
		requestBadPort: requestBadPort$1,
		requestCurrentURL: requestCurrentURL$1,
		responseURL,
		responseLocationURL: responseLocationURL$1,
		isURLPotentiallyTrustworthy,
		isValidReasonPhrase: isValidReasonPhrase$1,
		sameOrigin: sameOrigin$2,
		normalizeMethod,
		serializeJavascriptValueToJSONString: serializeJavascriptValueToJSONString$1,
		iteratorMixin: iteratorMixin$2,
		createIterator,
		isValidHeaderName: isValidHeaderName$2,
		isValidHeaderValue: isValidHeaderValue$1,
		isErrorLike: isErrorLike$2,
		fullyReadBody: fullyReadBody$2,
		bytesMatch: bytesMatch$1,
		readableStreamClose: readableStreamClose$2,
		isomorphicEncode: isomorphicEncode$2,
		urlIsLocal: urlIsLocal$1,
		urlHasHttpsScheme: urlHasHttpsScheme$1,
		urlIsHttpHttpsScheme: urlIsHttpHttpsScheme$2,
		readAllBytes: readAllBytes$1,
		simpleRangeHeaderValue: simpleRangeHeaderValue$1,
		buildContentRange: buildContentRange$1,
		parseMetadata,
		createInflate: createInflate$1,
		extractMimeType: extractMimeType$2,
		getDecodeSplit: getDecodeSplit$1,
		utf8DecodeBytes: utf8DecodeBytes$3,
		environmentSettingsObject: environmentSettingsObject$4,
		isOriginIPPotentiallyTrustworthy
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/formdata.js
var require_formdata = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/formdata.js"(exports, module) {
	const { iteratorMixin: iteratorMixin$1 } = require_util$4();
	const { kEnumerableProperty: kEnumerableProperty$10 } = require_util$5();
	const { webidl: webidl$14 } = require_webidl();
	const { File: NativeFile } = __require("node:buffer");
	const nodeUtil$2 = __require("node:util");
	/** @type {globalThis['File']} */
	const File$2 = globalThis.File ?? NativeFile;
	var FormData$2 = class FormData$2 {
		#state = [];
		constructor(form) {
			webidl$14.util.markAsUncloneable(this);
			if (form !== void 0) throw webidl$14.errors.conversionFailed({
				prefix: "FormData constructor",
				argument: "Argument 1",
				types: ["undefined"]
			});
		}
		append(name$2, value, filename = void 0) {
			webidl$14.brandCheck(this, FormData$2);
			const prefix = "FormData.append";
			webidl$14.argumentLengthCheck(arguments, 2, prefix);
			name$2 = webidl$14.converters.USVString(name$2);
			if (arguments.length === 3 || webidl$14.is.Blob(value)) {
				value = webidl$14.converters.Blob(value, prefix, "value");
				if (filename !== void 0) filename = webidl$14.converters.USVString(filename);
			} else value = webidl$14.converters.USVString(value);
			const entry = makeEntry$1(name$2, value, filename);
			this.#state.push(entry);
		}
		delete(name$2) {
			webidl$14.brandCheck(this, FormData$2);
			const prefix = "FormData.delete";
			webidl$14.argumentLengthCheck(arguments, 1, prefix);
			name$2 = webidl$14.converters.USVString(name$2);
			this.#state = this.#state.filter((entry) => entry.name !== name$2);
		}
		get(name$2) {
			webidl$14.brandCheck(this, FormData$2);
			const prefix = "FormData.get";
			webidl$14.argumentLengthCheck(arguments, 1, prefix);
			name$2 = webidl$14.converters.USVString(name$2);
			const idx = this.#state.findIndex((entry) => entry.name === name$2);
			if (idx === -1) return null;
			return this.#state[idx].value;
		}
		getAll(name$2) {
			webidl$14.brandCheck(this, FormData$2);
			const prefix = "FormData.getAll";
			webidl$14.argumentLengthCheck(arguments, 1, prefix);
			name$2 = webidl$14.converters.USVString(name$2);
			return this.#state.filter((entry) => entry.name === name$2).map((entry) => entry.value);
		}
		has(name$2) {
			webidl$14.brandCheck(this, FormData$2);
			const prefix = "FormData.has";
			webidl$14.argumentLengthCheck(arguments, 1, prefix);
			name$2 = webidl$14.converters.USVString(name$2);
			return this.#state.findIndex((entry) => entry.name === name$2) !== -1;
		}
		set(name$2, value, filename = void 0) {
			webidl$14.brandCheck(this, FormData$2);
			const prefix = "FormData.set";
			webidl$14.argumentLengthCheck(arguments, 2, prefix);
			name$2 = webidl$14.converters.USVString(name$2);
			if (arguments.length === 3 || webidl$14.is.Blob(value)) {
				value = webidl$14.converters.Blob(value, prefix, "value");
				if (filename !== void 0) filename = webidl$14.converters.USVString(filename);
			} else value = webidl$14.converters.USVString(value);
			const entry = makeEntry$1(name$2, value, filename);
			const idx = this.#state.findIndex((entry$1) => entry$1.name === name$2);
			if (idx !== -1) this.#state = [
				...this.#state.slice(0, idx),
				entry,
				...this.#state.slice(idx + 1).filter((entry$1) => entry$1.name !== name$2)
			];
			else this.#state.push(entry);
		}
		[nodeUtil$2.inspect.custom](depth, options) {
			const state = this.#state.reduce((a$1, b) => {
				if (a$1[b.name]) if (Array.isArray(a$1[b.name])) a$1[b.name].push(b.value);
				else a$1[b.name] = [a$1[b.name], b.value];
				else a$1[b.name] = b.value;
				return a$1;
			}, { __proto__: null });
			options.depth ??= depth;
			options.colors ??= true;
			const output = nodeUtil$2.formatWithOptions(options, state);
			return `FormData ${output.slice(output.indexOf("]") + 2)}`;
		}
		/**
		* @param {FormData} formData
		*/
		static getFormDataState(formData) {
			return formData.#state;
		}
		/**
		* @param {FormData} formData
		* @param {any[]} newState
		*/
		static setFormDataState(formData, newState) {
			formData.#state = newState;
		}
	};
	const { getFormDataState, setFormDataState: setFormDataState$1 } = FormData$2;
	Reflect.deleteProperty(FormData$2, "getFormDataState");
	Reflect.deleteProperty(FormData$2, "setFormDataState");
	iteratorMixin$1("FormData", FormData$2, getFormDataState, "name", "value");
	Object.defineProperties(FormData$2.prototype, {
		append: kEnumerableProperty$10,
		delete: kEnumerableProperty$10,
		get: kEnumerableProperty$10,
		getAll: kEnumerableProperty$10,
		has: kEnumerableProperty$10,
		set: kEnumerableProperty$10,
		[Symbol.toStringTag]: {
			value: "FormData",
			configurable: true
		}
	});
	/**
	* @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
	* @param {string} name
	* @param {string|Blob} value
	* @param {?string} filename
	* @returns
	*/
	function makeEntry$1(name$2, value, filename) {
		if (typeof value === "string") {} else {
			if (!webidl$14.is.File(value)) value = new File$2([value], "blob", { type: value.type });
			if (filename !== void 0) {
				/** @type {FilePropertyBag} */
				const options = {
					type: value.type,
					lastModified: value.lastModified
				};
				value = new File$2([value], filename, options);
			}
		}
		return {
			name: name$2,
			value
		};
	}
	webidl$14.is.FormData = webidl$14.util.MakeTypeAssertion(FormData$2);
	module.exports = {
		FormData: FormData$2,
		makeEntry: makeEntry$1,
		setFormDataState: setFormDataState$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/formdata-parser.js
var require_formdata_parser = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/formdata-parser.js"(exports, module) {
	const { bufferToLowerCasedHeaderName: bufferToLowerCasedHeaderName$1 } = require_util$5();
	const { utf8DecodeBytes: utf8DecodeBytes$2 } = require_util$4();
	const { HTTP_TOKEN_CODEPOINTS, isomorphicDecode } = require_data_url();
	const { makeEntry } = require_formdata();
	const { webidl: webidl$13 } = require_webidl();
	const assert$24 = __require("node:assert");
	const { File: NodeFile } = __require("node:buffer");
	const File$1 = globalThis.File ?? NodeFile;
	const formDataNameBuffer = Buffer.from("form-data; name=\"");
	const filenameBuffer = Buffer.from("filename");
	const dd = Buffer.from("--");
	const ddcrlf = Buffer.from("--\r\n");
	/**
	* @param {string} chars
	*/
	function isAsciiString(chars) {
		for (let i$1 = 0; i$1 < chars.length; ++i$1) if ((chars.charCodeAt(i$1) & -128) !== 0) return false;
		return true;
	}
	/**
	* @see https://andreubotella.github.io/multipart-form-data/#multipart-form-data-boundary
	* @param {string} boundary
	*/
	function validateBoundary(boundary) {
		const length = boundary.length;
		if (length < 27 || length > 70) return false;
		for (let i$1 = 0; i$1 < length; ++i$1) {
			const cp$2 = boundary.charCodeAt(i$1);
			if (!(cp$2 >= 48 && cp$2 <= 57 || cp$2 >= 65 && cp$2 <= 90 || cp$2 >= 97 && cp$2 <= 122 || cp$2 === 39 || cp$2 === 45 || cp$2 === 95)) return false;
		}
		return true;
	}
	/**
	* @see https://andreubotella.github.io/multipart-form-data/#multipart-form-data-parser
	* @param {Buffer} input
	* @param {ReturnType<import('./data-url')['parseMIMEType']>} mimeType
	*/
	function multipartFormDataParser$1(input, mimeType) {
		assert$24(mimeType !== "failure" && mimeType.essence === "multipart/form-data");
		const boundaryString = mimeType.parameters.get("boundary");
		if (boundaryString === void 0) throw parsingError("missing boundary in content-type header");
		const boundary = Buffer.from(`--${boundaryString}`, "utf8");
		const entryList = [];
		const position = { position: 0 };
		while (input[position.position] === 13 && input[position.position + 1] === 10) position.position += 2;
		let trailing = input.length;
		while (input[trailing - 1] === 10 && input[trailing - 2] === 13) trailing -= 2;
		if (trailing !== input.length) input = input.subarray(0, trailing);
		while (true) {
			if (input.subarray(position.position, position.position + boundary.length).equals(boundary)) position.position += boundary.length;
			else throw parsingError("expected a value starting with -- and the boundary");
			if (position.position === input.length - 2 && bufferStartsWith(input, dd, position) || position.position === input.length - 4 && bufferStartsWith(input, ddcrlf, position)) return entryList;
			if (input[position.position] !== 13 || input[position.position + 1] !== 10) throw parsingError("expected CRLF");
			position.position += 2;
			const result = parseMultipartFormDataHeaders(input, position);
			let { name: name$2, filename, contentType, encoding } = result;
			position.position += 2;
			let body;
			{
				const boundaryIndex = input.indexOf(boundary.subarray(2), position.position);
				if (boundaryIndex === -1) throw parsingError("expected boundary after body");
				body = input.subarray(position.position, boundaryIndex - 4);
				position.position += body.length;
				if (encoding === "base64") body = Buffer.from(body.toString(), "base64");
			}
			if (input[position.position] !== 13 || input[position.position + 1] !== 10) throw parsingError("expected CRLF");
			else position.position += 2;
			let value;
			if (filename !== null) {
				contentType ??= "text/plain";
				if (!isAsciiString(contentType)) contentType = "";
				value = new File$1([body], filename, { type: contentType });
			} else value = utf8DecodeBytes$2(Buffer.from(body));
			assert$24(webidl$13.is.USVString(name$2));
			assert$24(typeof value === "string" && webidl$13.is.USVString(value) || webidl$13.is.File(value));
			entryList.push(makeEntry(name$2, value, filename));
		}
	}
	/**
	* @see https://andreubotella.github.io/multipart-form-data/#parse-multipart-form-data-headers
	* @param {Buffer} input
	* @param {{ position: number }} position
	*/
	function parseMultipartFormDataHeaders(input, position) {
		let name$2 = null;
		let filename = null;
		let contentType = null;
		let encoding = null;
		while (true) {
			if (input[position.position] === 13 && input[position.position + 1] === 10) {
				if (name$2 === null) throw parsingError("header name is null");
				return {
					name: name$2,
					filename,
					contentType,
					encoding
				};
			}
			let headerName = collectASequenceOfBytes((char) => char !== 10 && char !== 13 && char !== 58, input, position);
			headerName = removeChars(headerName, true, true, (char) => char === 9 || char === 32);
			if (!HTTP_TOKEN_CODEPOINTS.test(headerName.toString())) throw parsingError("header name does not match the field-name token production");
			if (input[position.position] !== 58) throw parsingError("expected :");
			position.position++;
			collectASequenceOfBytes((char) => char === 32 || char === 9, input, position);
			switch (bufferToLowerCasedHeaderName$1(headerName)) {
				case "content-disposition": {
					name$2 = filename = null;
					if (!bufferStartsWith(input, formDataNameBuffer, position)) throw parsingError("expected form-data; name=\" for content-disposition header");
					position.position += 17;
					name$2 = parseMultipartFormDataName(input, position);
					if (input[position.position] === 59 && input[position.position + 1] === 32) {
						const at = { position: position.position + 2 };
						if (bufferStartsWith(input, filenameBuffer, at)) if (input[at.position + 8] === 42) {
							at.position += 10;
							collectASequenceOfBytes((char) => char === 32 || char === 9, input, at);
							const headerValue = collectASequenceOfBytes((char) => char !== 32 && char !== 13 && char !== 10, input, at);
							if (headerValue[0] !== 117 && headerValue[0] !== 85 || headerValue[1] !== 116 && headerValue[1] !== 84 || headerValue[2] !== 102 && headerValue[2] !== 70 || headerValue[3] !== 45 || headerValue[4] !== 56) throw parsingError("unknown encoding, expected utf-8''");
							filename = decodeURIComponent(new TextDecoder().decode(headerValue.subarray(7)));
							position.position = at.position;
						} else {
							position.position += 11;
							collectASequenceOfBytes((char) => char === 32 || char === 9, input, position);
							position.position++;
							filename = parseMultipartFormDataName(input, position);
						}
					}
					break;
				}
				case "content-type": {
					let headerValue = collectASequenceOfBytes((char) => char !== 10 && char !== 13, input, position);
					headerValue = removeChars(headerValue, false, true, (char) => char === 9 || char === 32);
					contentType = isomorphicDecode(headerValue);
					break;
				}
				case "content-transfer-encoding": {
					let headerValue = collectASequenceOfBytes((char) => char !== 10 && char !== 13, input, position);
					headerValue = removeChars(headerValue, false, true, (char) => char === 9 || char === 32);
					encoding = isomorphicDecode(headerValue);
					break;
				}
				default: collectASequenceOfBytes((char) => char !== 10 && char !== 13, input, position);
			}
			if (input[position.position] !== 13 && input[position.position + 1] !== 10) throw parsingError("expected CRLF");
			else position.position += 2;
		}
	}
	/**
	* @see https://andreubotella.github.io/multipart-form-data/#parse-a-multipart-form-data-name
	* @param {Buffer} input
	* @param {{ position: number }} position
	*/
	function parseMultipartFormDataName(input, position) {
		assert$24(input[position.position - 1] === 34);
		/** @type {string | Buffer} */
		let name$2 = collectASequenceOfBytes((char) => char !== 10 && char !== 13 && char !== 34, input, position);
		if (input[position.position] !== 34) throw parsingError("expected \"");
		else position.position++;
		name$2 = new TextDecoder().decode(name$2).replace(/%0A/gi, "\n").replace(/%0D/gi, "\r").replace(/%22/g, "\"");
		return name$2;
	}
	/**
	* @param {(char: number) => boolean} condition
	* @param {Buffer} input
	* @param {{ position: number }} position
	*/
	function collectASequenceOfBytes(condition, input, position) {
		let start = position.position;
		while (start < input.length && condition(input[start])) ++start;
		return input.subarray(position.position, position.position = start);
	}
	/**
	* @param {Buffer} buf
	* @param {boolean} leading
	* @param {boolean} trailing
	* @param {(charCode: number) => boolean} predicate
	* @returns {Buffer}
	*/
	function removeChars(buf, leading, trailing, predicate) {
		let lead = 0;
		let trail = buf.length - 1;
		if (leading) while (lead < buf.length && predicate(buf[lead])) lead++;
		if (trailing) while (trail > 0 && predicate(buf[trail])) trail--;
		return lead === 0 && trail === buf.length - 1 ? buf : buf.subarray(lead, trail + 1);
	}
	/**
	* Checks if {@param buffer} starts with {@param start}
	* @param {Buffer} buffer
	* @param {Buffer} start
	* @param {{ position: number }} position
	*/
	function bufferStartsWith(buffer$1, start, position) {
		if (buffer$1.length < start.length) return false;
		for (let i$1 = 0; i$1 < start.length; i$1++) if (start[i$1] !== buffer$1[position.position + i$1]) return false;
		return true;
	}
	function parsingError(cause) {
		return new TypeError("Failed to parse body as FormData.", { cause: new TypeError(cause) });
	}
	module.exports = {
		multipartFormDataParser: multipartFormDataParser$1,
		validateBoundary
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/util/promise.js
var require_promise = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/util/promise.js"(exports, module) {
	/**
	* @template {*} T
	* @typedef {Object} DeferredPromise
	* @property {Promise<T>} promise
	* @property {(value?: T) => void} resolve
	* @property {(reason?: any) => void} reject
	*/
	/**
	* @template {*} T
	* @returns {DeferredPromise<T>} An object containing a promise and its resolve/reject methods.
	*/
	function createDeferredPromise$4() {
		let res;
		let rej;
		const promise = new Promise((resolve$1, reject) => {
			res = resolve$1;
			rej = reject;
		});
		return {
			promise,
			resolve: res,
			reject: rej
		};
	}
	module.exports = { createDeferredPromise: createDeferredPromise$4 };
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/body.js
var require_body = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/body.js"(exports, module) {
	const util$20 = require_util$5();
	const { ReadableStreamFrom: ReadableStreamFrom$1, readableStreamClose: readableStreamClose$1, fullyReadBody: fullyReadBody$1, extractMimeType: extractMimeType$1, utf8DecodeBytes: utf8DecodeBytes$1 } = require_util$4();
	const { FormData: FormData$1, setFormDataState } = require_formdata();
	const { webidl: webidl$12 } = require_webidl();
	const { Blob: Blob$1 } = __require("node:buffer");
	const assert$23 = __require("node:assert");
	const { isErrored: isErrored$1, isDisturbed: isDisturbed$2 } = __require("node:stream");
	const { isArrayBuffer: isArrayBuffer$1 } = __require("node:util/types");
	const { serializeAMimeType: serializeAMimeType$2 } = require_data_url();
	const { multipartFormDataParser } = require_formdata_parser();
	const { createDeferredPromise: createDeferredPromise$3 } = require_promise();
	let random;
	try {
		const crypto$7 = __require("node:crypto");
		random = (max$1) => crypto$7.randomInt(0, max$1);
	} catch {
		random = (max$1) => Math.floor(Math.random() * max$1);
	}
	const textEncoder$3 = new TextEncoder();
	function noop$10() {}
	const streamRegistry$1 = new FinalizationRegistry((weakRef) => {
		const stream$4 = weakRef.deref();
		if (stream$4 && !stream$4.locked && !isDisturbed$2(stream$4) && !isErrored$1(stream$4)) stream$4.cancel("Response object has been garbage collected").catch(noop$10);
	});
	/**
	* Extract a body with type from a byte sequence or BodyInit object
	*
	* @param {import('../../../types').BodyInit} object - The BodyInit object to extract from
	* @param {boolean} [keepalive=false] - If true, indicates that the body
	* @returns {[{stream: ReadableStream, source: any, length: number | null}, string | null]} - Returns a tuple containing the body and its type
	*
	* @see https://fetch.spec.whatwg.org/#concept-bodyinit-extract
	*/
	function extractBody$5(object$1, keepalive = false) {
		let stream$4 = null;
		if (webidl$12.is.ReadableStream(object$1)) stream$4 = object$1;
		else if (webidl$12.is.Blob(object$1)) stream$4 = object$1.stream();
		else stream$4 = new ReadableStream({
			async pull(controller) {
				const buffer$1 = typeof source === "string" ? textEncoder$3.encode(source) : source;
				if (buffer$1.byteLength) controller.enqueue(buffer$1);
				queueMicrotask(() => readableStreamClose$1(controller));
			},
			start() {},
			type: "bytes"
		});
		assert$23(webidl$12.is.ReadableStream(stream$4));
		let action = null;
		let source = null;
		let length = null;
		let type = null;
		if (typeof object$1 === "string") {
			source = object$1;
			type = "text/plain;charset=UTF-8";
		} else if (webidl$12.is.URLSearchParams(object$1)) {
			source = object$1.toString();
			type = "application/x-www-form-urlencoded;charset=UTF-8";
		} else if (isArrayBuffer$1(object$1)) source = new Uint8Array(object$1.slice());
		else if (ArrayBuffer.isView(object$1)) source = new Uint8Array(object$1.buffer.slice(object$1.byteOffset, object$1.byteOffset + object$1.byteLength));
		else if (webidl$12.is.FormData(object$1)) {
			const boundary = `----formdata-undici-0${`${random(1e11)}`.padStart(11, "0")}`;
			const prefix = `--${boundary}\r\nContent-Disposition: form-data`;
			/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
			const escape$1 = (str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
			const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, "\r\n");
			const blobParts = [];
			const rn = new Uint8Array([13, 10]);
			length = 0;
			let hasUnknownSizeValue = false;
			for (const [name$2, value] of object$1) if (typeof value === "string") {
				const chunk$1 = textEncoder$3.encode(prefix + `; name="${escape$1(normalizeLinefeeds(name$2))}"\r\n\r\n${normalizeLinefeeds(value)}\r\n`);
				blobParts.push(chunk$1);
				length += chunk$1.byteLength;
			} else {
				const chunk$1 = textEncoder$3.encode(`${prefix}; name="${escape$1(normalizeLinefeeds(name$2))}"` + (value.name ? `; filename="${escape$1(value.name)}"` : "") + `\r
Content-Type: ${value.type || "application/octet-stream"}\r\n\r\n`);
				blobParts.push(chunk$1, value, rn);
				if (typeof value.size === "number") length += chunk$1.byteLength + value.size + rn.byteLength;
				else hasUnknownSizeValue = true;
			}
			const chunk = textEncoder$3.encode(`--${boundary}--\r\n`);
			blobParts.push(chunk);
			length += chunk.byteLength;
			if (hasUnknownSizeValue) length = null;
			source = object$1;
			action = async function* () {
				for (const part of blobParts) if (part.stream) yield* part.stream();
				else yield part;
			};
			type = `multipart/form-data; boundary=${boundary}`;
		} else if (webidl$12.is.Blob(object$1)) {
			source = object$1;
			length = object$1.size;
			if (object$1.type) type = object$1.type;
		} else if (typeof object$1[Symbol.asyncIterator] === "function") {
			if (keepalive) throw new TypeError("keepalive");
			if (util$20.isDisturbed(object$1) || object$1.locked) throw new TypeError("Response body object should not be disturbed or locked");
			stream$4 = webidl$12.is.ReadableStream(object$1) ? object$1 : ReadableStreamFrom$1(object$1);
		}
		if (typeof source === "string" || util$20.isBuffer(source)) length = Buffer.byteLength(source);
		if (action != null) {
			let iterator$1;
			stream$4 = new ReadableStream({
				async start() {
					iterator$1 = action(object$1)[Symbol.asyncIterator]();
				},
				async pull(controller) {
					const { value, done } = await iterator$1.next();
					if (done) queueMicrotask(() => {
						controller.close();
						controller.byobRequest?.respond(0);
					});
					else if (!isErrored$1(stream$4)) {
						const buffer$1 = new Uint8Array(value);
						if (buffer$1.byteLength) controller.enqueue(buffer$1);
					}
					return controller.desiredSize > 0;
				},
				async cancel(reason) {
					await iterator$1.return();
				},
				type: "bytes"
			});
		}
		const body = {
			stream: stream$4,
			source,
			length
		};
		return [body, type];
	}
	/**
	* @typedef {object} ExtractBodyResult
	* @property {ReadableStream<Uint8Array<ArrayBuffer>>} stream - The ReadableStream containing the body data
	* @property {any} source - The original source of the body data
	* @property {number | null} length - The length of the body data, or null
	*/
	/**
	* Safely extract a body with type from a byte sequence or BodyInit object.
	*
	* @param {import('../../../types').BodyInit} object - The BodyInit object to extract from
	* @param {boolean} [keepalive=false] - If true, indicates that the body
	* @returns {[ExtractBodyResult, string | null]} - Returns a tuple containing the body and its type
	*
	* @see https://fetch.spec.whatwg.org/#bodyinit-safely-extract
	*/
	function safelyExtractBody$1(object$1, keepalive = false) {
		if (webidl$12.is.ReadableStream(object$1)) {
			assert$23(!util$20.isDisturbed(object$1), "The body has already been consumed.");
			assert$23(!object$1.locked, "The stream is locked.");
		}
		return extractBody$5(object$1, keepalive);
	}
	function cloneBody$2(body) {
		const { 0: out1, 1: out2 } = body.stream.tee();
		body.stream = out1;
		return {
			stream: out2,
			length: body.length,
			source: body.source
		};
	}
	function throwIfAborted(state) {
		if (state.aborted) throw new DOMException("The operation was aborted.", "AbortError");
	}
	function bodyMixinMethods(instance, getInternalState$1) {
		const methods = {
			blob() {
				return consumeBody(this, (bytes) => {
					let mimeType = bodyMimeType(getInternalState$1(this));
					if (mimeType === null) mimeType = "";
					else if (mimeType) mimeType = serializeAMimeType$2(mimeType);
					return new Blob$1([bytes], { type: mimeType });
				}, instance, getInternalState$1);
			},
			arrayBuffer() {
				return consumeBody(this, (bytes) => {
					return new Uint8Array(bytes).buffer;
				}, instance, getInternalState$1);
			},
			text() {
				return consumeBody(this, utf8DecodeBytes$1, instance, getInternalState$1);
			},
			json() {
				return consumeBody(this, parseJSONFromBytes, instance, getInternalState$1);
			},
			formData() {
				return consumeBody(this, (value) => {
					const mimeType = bodyMimeType(getInternalState$1(this));
					if (mimeType !== null) switch (mimeType.essence) {
						case "multipart/form-data": {
							const parsed = multipartFormDataParser(value, mimeType);
							const fd = new FormData$1();
							setFormDataState(fd, parsed);
							return fd;
						}
						case "application/x-www-form-urlencoded": {
							const entries = new URLSearchParams(value.toString());
							const fd = new FormData$1();
							for (const [name$2, value$1] of entries) fd.append(name$2, value$1);
							return fd;
						}
					}
					throw new TypeError("Content-Type was not one of \"multipart/form-data\" or \"application/x-www-form-urlencoded\".");
				}, instance, getInternalState$1);
			},
			bytes() {
				return consumeBody(this, (bytes) => {
					return new Uint8Array(bytes);
				}, instance, getInternalState$1);
			}
		};
		return methods;
	}
	function mixinBody$2(prototype, getInternalState$1) {
		Object.assign(prototype.prototype, bodyMixinMethods(prototype, getInternalState$1));
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-body-consume-body
	* @param {any} object internal state
	* @param {(value: unknown) => unknown} convertBytesToJSValue
	* @param {any} instance
	* @param {(target: any) => any} getInternalState
	*/
	async function consumeBody(object$1, convertBytesToJSValue, instance, getInternalState$1) {
		webidl$12.brandCheck(object$1, instance);
		const state = getInternalState$1(object$1);
		if (bodyUnusable$2(state)) throw new TypeError("Body is unusable: Body has already been read");
		throwIfAborted(state);
		const promise = createDeferredPromise$3();
		const errorSteps = (error$1) => promise.reject(error$1);
		const successSteps = (data$1) => {
			try {
				promise.resolve(convertBytesToJSValue(data$1));
			} catch (e) {
				errorSteps(e);
			}
		};
		if (state.body == null) {
			successSteps(Buffer.allocUnsafe(0));
			return promise.promise;
		}
		fullyReadBody$1(state.body, successSteps, errorSteps);
		return promise.promise;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#body-unusable
	* @param {any} object internal state
	*/
	function bodyUnusable$2(object$1) {
		const body = object$1.body;
		return body != null && (body.stream.locked || util$20.isDisturbed(body.stream));
	}
	/**
	* @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
	* @param {Uint8Array} bytes
	*/
	function parseJSONFromBytes(bytes) {
		return JSON.parse(utf8DecodeBytes$1(bytes));
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-body-mime-type
	* @param {any} requestOrResponse internal state
	*/
	function bodyMimeType(requestOrResponse) {
		/** @type {import('./headers').HeadersList} */
		const headers = requestOrResponse.headersList;
		const mimeType = extractMimeType$1(headers);
		if (mimeType === "failure") return null;
		return mimeType;
	}
	module.exports = {
		extractBody: extractBody$5,
		safelyExtractBody: safelyExtractBody$1,
		cloneBody: cloneBody$2,
		mixinBody: mixinBody$2,
		streamRegistry: streamRegistry$1,
		bodyUnusable: bodyUnusable$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/client-h1.js
var require_client_h1 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/client-h1.js"(exports, module) {
	const assert$22 = __require("node:assert");
	const util$19 = require_util$5();
	const { channels: channels$4 } = require_diagnostics();
	const timers = require_timers();
	const { RequestContentLengthMismatchError: RequestContentLengthMismatchError$1, ResponseContentLengthMismatchError, RequestAbortedError: RequestAbortedError$7, HeadersTimeoutError, HeadersOverflowError, SocketError: SocketError$3, InformationalError: InformationalError$3, BodyTimeoutError, HTTPParserError, ResponseExceededMaxSizeError } = require_errors();
	const { kUrl: kUrl$6, kReset: kReset$1, kClient: kClient$3, kParser, kBlocking, kRunning: kRunning$4, kPending: kPending$3, kSize: kSize$4, kWriting, kQueue: kQueue$3, kNoRef, kKeepAliveDefaultTimeout: kKeepAliveDefaultTimeout$1, kHostHeader: kHostHeader$1, kPendingIdx: kPendingIdx$2, kRunningIdx: kRunningIdx$2, kError: kError$2, kPipelining: kPipelining$1, kSocket: kSocket$1, kKeepAliveTimeoutValue: kKeepAliveTimeoutValue$1, kMaxHeadersSize: kMaxHeadersSize$1, kKeepAliveMaxTimeout: kKeepAliveMaxTimeout$1, kKeepAliveTimeoutThreshold: kKeepAliveTimeoutThreshold$1, kHeadersTimeout: kHeadersTimeout$1, kBodyTimeout: kBodyTimeout$2, kStrictContentLength: kStrictContentLength$2, kMaxRequests: kMaxRequests$1, kCounter: kCounter$1, kMaxResponseSize: kMaxResponseSize$1, kOnError: kOnError$2, kResume: kResume$3, kHTTPContext: kHTTPContext$2, kClosed: kClosed$2 } = require_symbols();
	const constants$1 = require_constants$3();
	const EMPTY_BUF = Buffer.alloc(0);
	const FastBuffer = Buffer[Symbol.species];
	const removeAllListeners = util$19.removeAllListeners;
	let extractBody$4;
	function lazyllhttp() {
		const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm() : void 0;
		let mod;
		try {
			mod = new WebAssembly.Module(require_llhttp_simd_wasm());
		} catch (e) {
			/* istanbul ignore next */
			mod = new WebAssembly.Module(llhttpWasmData || require_llhttp_wasm());
		}
		return new WebAssembly.Instance(mod, { env: {
			wasm_on_url: (p, at, len) => {
				/* istanbul ignore next */
				return 0;
			},
			wasm_on_status: (p, at, len) => {
				assert$22(currentParser.ptr === p);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len));
			},
			wasm_on_message_begin: (p) => {
				assert$22(currentParser.ptr === p);
				return currentParser.onMessageBegin();
			},
			wasm_on_header_field: (p, at, len) => {
				assert$22(currentParser.ptr === p);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len));
			},
			wasm_on_header_value: (p, at, len) => {
				assert$22(currentParser.ptr === p);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len));
			},
			wasm_on_headers_complete: (p, statusCode, upgrade$2, shouldKeepAlive) => {
				assert$22(currentParser.ptr === p);
				return currentParser.onHeadersComplete(statusCode, upgrade$2 === 1, shouldKeepAlive === 1);
			},
			wasm_on_body: (p, at, len) => {
				assert$22(currentParser.ptr === p);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len));
			},
			wasm_on_message_complete: (p) => {
				assert$22(currentParser.ptr === p);
				return currentParser.onMessageComplete();
			}
		} });
	}
	let llhttpInstance = null;
	/**
	* @type {Parser|null}
	*/
	let currentParser = null;
	let currentBufferRef = null;
	/**
	* @type {number}
	*/
	let currentBufferSize = 0;
	let currentBufferPtr = null;
	const USE_NATIVE_TIMER = 0;
	const USE_FAST_TIMER = 1;
	const TIMEOUT_HEADERS = 2 | USE_FAST_TIMER;
	const TIMEOUT_BODY = 4 | USE_FAST_TIMER;
	const TIMEOUT_KEEP_ALIVE = 8 | USE_NATIVE_TIMER;
	var Parser = class {
		/**
		* @param {import('./client.js')} client
		* @param {import('net').Socket} socket
		* @param {*} llhttp
		*/
		constructor(client, socket, { exports: exports$1 }) {
			this.llhttp = exports$1;
			this.ptr = this.llhttp.llhttp_alloc(constants$1.TYPE.RESPONSE);
			this.client = client;
			/**
			* @type {import('net').Socket}
			*/
			this.socket = socket;
			this.timeout = null;
			this.timeoutValue = null;
			this.timeoutType = null;
			this.statusCode = 0;
			this.statusText = "";
			this.upgrade = false;
			this.headers = [];
			this.headersSize = 0;
			this.headersMaxSize = client[kMaxHeadersSize$1];
			this.shouldKeepAlive = false;
			this.paused = false;
			this.resume = this.resume.bind(this);
			this.bytesRead = 0;
			this.keepAlive = "";
			this.contentLength = "";
			this.connection = "";
			this.maxResponseSize = client[kMaxResponseSize$1];
		}
		setTimeout(delay$3, type) {
			if (delay$3 !== this.timeoutValue || type & USE_FAST_TIMER ^ this.timeoutType & USE_FAST_TIMER) {
				if (this.timeout) {
					timers.clearTimeout(this.timeout);
					this.timeout = null;
				}
				if (delay$3) if (type & USE_FAST_TIMER) this.timeout = timers.setFastTimeout(onParserTimeout, delay$3, new WeakRef(this));
				else {
					this.timeout = setTimeout(onParserTimeout, delay$3, new WeakRef(this));
					this.timeout?.unref();
				}
				this.timeoutValue = delay$3;
			} else if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
			this.timeoutType = type;
		}
		resume() {
			if (this.socket.destroyed || !this.paused) return;
			assert$22(this.ptr != null);
			assert$22(currentParser === null);
			this.llhttp.llhttp_resume(this.ptr);
			assert$22(this.timeoutType === TIMEOUT_BODY);
			if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
			this.paused = false;
			this.execute(this.socket.read() || EMPTY_BUF);
			this.readMore();
		}
		readMore() {
			while (!this.paused && this.ptr) {
				const chunk = this.socket.read();
				if (chunk === null) break;
				this.execute(chunk);
			}
		}
		/**
		* @param {Buffer} chunk
		*/
		execute(chunk) {
			assert$22(currentParser === null);
			assert$22(this.ptr != null);
			assert$22(!this.paused);
			const { socket, llhttp } = this;
			if (chunk.length > currentBufferSize) {
				if (currentBufferPtr) llhttp.free(currentBufferPtr);
				currentBufferSize = Math.ceil(chunk.length / 4096) * 4096;
				currentBufferPtr = llhttp.malloc(currentBufferSize);
			}
			new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(chunk);
			try {
				let ret;
				try {
					currentBufferRef = chunk;
					currentParser = this;
					ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, chunk.length);
				} catch (err) {
					/* istanbul ignore next: difficult to make a test case for */
					throw err;
				} finally {
					currentParser = null;
					currentBufferRef = null;
				}
				if (ret !== constants$1.ERROR.OK) {
					const data$1 = chunk.subarray(llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr);
					if (ret === constants$1.ERROR.PAUSED_UPGRADE) this.onUpgrade(data$1);
					else if (ret === constants$1.ERROR.PAUSED) {
						this.paused = true;
						socket.unshift(data$1);
					} else {
						const ptr = llhttp.llhttp_get_error_reason(this.ptr);
						let message = "";
						/* istanbul ignore else: difficult to make a test case for */
						if (ptr) {
							const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
							message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
						}
						throw new HTTPParserError(message, constants$1.ERROR[ret], data$1);
					}
				}
			} catch (err) {
				util$19.destroy(socket, err);
			}
		}
		destroy() {
			assert$22(currentParser === null);
			assert$22(this.ptr != null);
			this.llhttp.llhttp_free(this.ptr);
			this.ptr = null;
			this.timeout && timers.clearTimeout(this.timeout);
			this.timeout = null;
			this.timeoutValue = null;
			this.timeoutType = null;
			this.paused = false;
		}
		/**
		* @param {Buffer} buf
		* @returns {0}
		*/
		onStatus(buf) {
			this.statusText = buf.toString();
			return 0;
		}
		/**
		* @returns {0|-1}
		*/
		onMessageBegin() {
			const { socket, client } = this;
			/* istanbul ignore next: difficult to make a test case for */
			if (socket.destroyed) return -1;
			const request$3 = client[kQueue$3][client[kRunningIdx$2]];
			if (!request$3) return -1;
			request$3.onResponseStarted();
			return 0;
		}
		/**
		* @param {Buffer} buf
		* @returns {number}
		*/
		onHeaderField(buf) {
			const len = this.headers.length;
			if ((len & 1) === 0) this.headers.push(buf);
			else this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
			this.trackHeader(buf.length);
			return 0;
		}
		/**
		* @param {Buffer} buf
		* @returns {number}
		*/
		onHeaderValue(buf) {
			let len = this.headers.length;
			if ((len & 1) === 1) {
				this.headers.push(buf);
				len += 1;
			} else this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
			const key = this.headers[len - 2];
			if (key.length === 10) {
				const headerName = util$19.bufferToLowerCasedHeaderName(key);
				if (headerName === "keep-alive") this.keepAlive += buf.toString();
				else if (headerName === "connection") this.connection += buf.toString();
			} else if (key.length === 14 && util$19.bufferToLowerCasedHeaderName(key) === "content-length") this.contentLength += buf.toString();
			this.trackHeader(buf.length);
			return 0;
		}
		/**
		* @param {number} len
		*/
		trackHeader(len) {
			this.headersSize += len;
			if (this.headersSize >= this.headersMaxSize) util$19.destroy(this.socket, new HeadersOverflowError());
		}
		/**
		* @param {Buffer} head
		*/
		onUpgrade(head) {
			const { upgrade: upgrade$2, client, socket, headers, statusCode } = this;
			assert$22(upgrade$2);
			assert$22(client[kSocket$1] === socket);
			assert$22(!socket.destroyed);
			assert$22(!this.paused);
			assert$22((headers.length & 1) === 0);
			const request$3 = client[kQueue$3][client[kRunningIdx$2]];
			assert$22(request$3);
			assert$22(request$3.upgrade || request$3.method === "CONNECT");
			this.statusCode = 0;
			this.statusText = "";
			this.shouldKeepAlive = false;
			this.headers = [];
			this.headersSize = 0;
			socket.unshift(head);
			socket[kParser].destroy();
			socket[kParser] = null;
			socket[kClient$3] = null;
			socket[kError$2] = null;
			removeAllListeners(socket);
			client[kSocket$1] = null;
			client[kHTTPContext$2] = null;
			client[kQueue$3][client[kRunningIdx$2]++] = null;
			client.emit("disconnect", client[kUrl$6], [client], new InformationalError$3("upgrade"));
			try {
				request$3.onUpgrade(statusCode, headers, socket);
			} catch (err) {
				util$19.destroy(socket, err);
			}
			client[kResume$3]();
		}
		/**
		* @param {number} statusCode
		* @param {boolean} upgrade
		* @param {boolean} shouldKeepAlive
		* @returns {number}
		*/
		onHeadersComplete(statusCode, upgrade$2, shouldKeepAlive) {
			const { client, socket, headers, statusText } = this;
			/* istanbul ignore next: difficult to make a test case for */
			if (socket.destroyed) return -1;
			const request$3 = client[kQueue$3][client[kRunningIdx$2]];
			/* istanbul ignore next: difficult to make a test case for */
			if (!request$3) return -1;
			assert$22(!this.upgrade);
			assert$22(this.statusCode < 200);
			if (statusCode === 100) {
				util$19.destroy(socket, new SocketError$3("bad response", util$19.getSocketInfo(socket)));
				return -1;
			}
			if (upgrade$2 && !request$3.upgrade) {
				util$19.destroy(socket, new SocketError$3("bad upgrade", util$19.getSocketInfo(socket)));
				return -1;
			}
			assert$22(this.timeoutType === TIMEOUT_HEADERS);
			this.statusCode = statusCode;
			this.shouldKeepAlive = shouldKeepAlive || request$3.method === "HEAD" && !socket[kReset$1] && this.connection.toLowerCase() === "keep-alive";
			if (this.statusCode >= 200) {
				const bodyTimeout = request$3.bodyTimeout != null ? request$3.bodyTimeout : client[kBodyTimeout$2];
				this.setTimeout(bodyTimeout, TIMEOUT_BODY);
			} else if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
			if (request$3.method === "CONNECT") {
				assert$22(client[kRunning$4] === 1);
				this.upgrade = true;
				return 2;
			}
			if (upgrade$2) {
				assert$22(client[kRunning$4] === 1);
				this.upgrade = true;
				return 2;
			}
			assert$22((this.headers.length & 1) === 0);
			this.headers = [];
			this.headersSize = 0;
			if (this.shouldKeepAlive && client[kPipelining$1]) {
				const keepAliveTimeout = this.keepAlive ? util$19.parseKeepAliveTimeout(this.keepAlive) : null;
				if (keepAliveTimeout != null) {
					const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold$1], client[kKeepAliveMaxTimeout$1]);
					if (timeout <= 0) socket[kReset$1] = true;
					else client[kKeepAliveTimeoutValue$1] = timeout;
				} else client[kKeepAliveTimeoutValue$1] = client[kKeepAliveDefaultTimeout$1];
			} else socket[kReset$1] = true;
			const pause = request$3.onHeaders(statusCode, headers, this.resume, statusText) === false;
			if (request$3.aborted) return -1;
			if (request$3.method === "HEAD") return 1;
			if (statusCode < 200) return 1;
			if (socket[kBlocking]) {
				socket[kBlocking] = false;
				client[kResume$3]();
			}
			return pause ? constants$1.ERROR.PAUSED : 0;
		}
		/**
		* @param {Buffer} buf
		* @returns {number}
		*/
		onBody(buf) {
			const { client, socket, statusCode, maxResponseSize } = this;
			if (socket.destroyed) return -1;
			const request$3 = client[kQueue$3][client[kRunningIdx$2]];
			assert$22(request$3);
			assert$22(this.timeoutType === TIMEOUT_BODY);
			if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
			assert$22(statusCode >= 200);
			if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
				util$19.destroy(socket, new ResponseExceededMaxSizeError());
				return -1;
			}
			this.bytesRead += buf.length;
			if (request$3.onData(buf) === false) return constants$1.ERROR.PAUSED;
			return 0;
		}
		/**
		* @returns {number}
		*/
		onMessageComplete() {
			const { client, socket, statusCode, upgrade: upgrade$2, headers, contentLength, bytesRead, shouldKeepAlive } = this;
			if (socket.destroyed && (!statusCode || shouldKeepAlive)) return -1;
			if (upgrade$2) return 0;
			assert$22(statusCode >= 100);
			assert$22((this.headers.length & 1) === 0);
			const request$3 = client[kQueue$3][client[kRunningIdx$2]];
			assert$22(request$3);
			this.statusCode = 0;
			this.statusText = "";
			this.bytesRead = 0;
			this.contentLength = "";
			this.keepAlive = "";
			this.connection = "";
			this.headers = [];
			this.headersSize = 0;
			if (statusCode < 200) return 0;
			/* istanbul ignore next: should be handled by llhttp? */
			if (request$3.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
				util$19.destroy(socket, new ResponseContentLengthMismatchError());
				return -1;
			}
			request$3.onComplete(headers);
			client[kQueue$3][client[kRunningIdx$2]++] = null;
			if (socket[kWriting]) {
				assert$22(client[kRunning$4] === 0);
				util$19.destroy(socket, new InformationalError$3("reset"));
				return constants$1.ERROR.PAUSED;
			} else if (!shouldKeepAlive) {
				util$19.destroy(socket, new InformationalError$3("reset"));
				return constants$1.ERROR.PAUSED;
			} else if (socket[kReset$1] && client[kRunning$4] === 0) {
				util$19.destroy(socket, new InformationalError$3("reset"));
				return constants$1.ERROR.PAUSED;
			} else if (client[kPipelining$1] == null || client[kPipelining$1] === 1) setImmediate(client[kResume$3]);
			else client[kResume$3]();
			return 0;
		}
	};
	function onParserTimeout(parser) {
		const { socket, timeoutType, client, paused } = parser.deref();
		/* istanbul ignore else */
		if (timeoutType === TIMEOUT_HEADERS) {
			if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning$4] > 1) {
				assert$22(!paused, "cannot be paused while waiting for headers");
				util$19.destroy(socket, new HeadersTimeoutError());
			}
		} else if (timeoutType === TIMEOUT_BODY) {
			if (!paused) util$19.destroy(socket, new BodyTimeoutError());
		} else if (timeoutType === TIMEOUT_KEEP_ALIVE) {
			assert$22(client[kRunning$4] === 0 && client[kKeepAliveTimeoutValue$1]);
			util$19.destroy(socket, new InformationalError$3("socket idle timeout"));
		}
	}
	/**
	* @param {import ('./client.js')} client
	* @param {import('net').Socket} socket
	* @returns
	*/
	async function connectH1$1(client, socket) {
		client[kSocket$1] = socket;
		if (!llhttpInstance) llhttpInstance = lazyllhttp();
		if (socket.errored) throw socket.errored;
		if (socket.destroyed) throw new SocketError$3("destroyed");
		socket[kNoRef] = false;
		socket[kWriting] = false;
		socket[kReset$1] = false;
		socket[kBlocking] = false;
		socket[kParser] = new Parser(client, socket, llhttpInstance);
		util$19.addListener(socket, "error", onHttpSocketError);
		util$19.addListener(socket, "readable", onHttpSocketReadable);
		util$19.addListener(socket, "end", onHttpSocketEnd);
		util$19.addListener(socket, "close", onHttpSocketClose);
		socket[kClosed$2] = false;
		socket.on("close", onSocketClose$1);
		return {
			version: "h1",
			defaultPipelining: 1,
			write(request$3) {
				return writeH1(client, request$3);
			},
			resume() {
				resumeH1(client);
			},
			destroy(err, callback) {
				if (socket[kClosed$2]) queueMicrotask(callback);
				else {
					socket.on("close", callback);
					socket.destroy(err);
				}
			},
			get destroyed() {
				return socket.destroyed;
			},
			busy(request$3) {
				if (socket[kWriting] || socket[kReset$1] || socket[kBlocking]) return true;
				if (request$3) {
					if (client[kRunning$4] > 0 && !request$3.idempotent) return true;
					if (client[kRunning$4] > 0 && (request$3.upgrade || request$3.method === "CONNECT")) return true;
					if (client[kRunning$4] > 0 && util$19.bodyLength(request$3.body) !== 0 && (util$19.isStream(request$3.body) || util$19.isAsyncIterable(request$3.body) || util$19.isFormDataLike(request$3.body))) return true;
				}
				return false;
			}
		};
	}
	function onHttpSocketError(err) {
		assert$22(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
		const parser = this[kParser];
		if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
			parser.onMessageComplete();
			return;
		}
		this[kError$2] = err;
		this[kClient$3][kOnError$2](err);
	}
	function onHttpSocketReadable() {
		this[kParser]?.readMore();
	}
	function onHttpSocketEnd() {
		const parser = this[kParser];
		if (parser.statusCode && !parser.shouldKeepAlive) {
			parser.onMessageComplete();
			return;
		}
		util$19.destroy(this, new SocketError$3("other side closed", util$19.getSocketInfo(this)));
	}
	function onHttpSocketClose() {
		const parser = this[kParser];
		if (parser) {
			if (!this[kError$2] && parser.statusCode && !parser.shouldKeepAlive) parser.onMessageComplete();
			this[kParser].destroy();
			this[kParser] = null;
		}
		const err = this[kError$2] || new SocketError$3("closed", util$19.getSocketInfo(this));
		const client = this[kClient$3];
		client[kSocket$1] = null;
		client[kHTTPContext$2] = null;
		if (client.destroyed) {
			assert$22(client[kPending$3] === 0);
			const requests = client[kQueue$3].splice(client[kRunningIdx$2]);
			for (let i$1 = 0; i$1 < requests.length; i$1++) {
				const request$3 = requests[i$1];
				util$19.errorRequest(client, request$3, err);
			}
		} else if (client[kRunning$4] > 0 && err.code !== "UND_ERR_INFO") {
			const request$3 = client[kQueue$3][client[kRunningIdx$2]];
			client[kQueue$3][client[kRunningIdx$2]++] = null;
			util$19.errorRequest(client, request$3, err);
		}
		client[kPendingIdx$2] = client[kRunningIdx$2];
		assert$22(client[kRunning$4] === 0);
		client.emit("disconnect", client[kUrl$6], [client], err);
		client[kResume$3]();
	}
	function onSocketClose$1() {
		this[kClosed$2] = true;
	}
	/**
	* @param {import('./client.js')} client
	*/
	function resumeH1(client) {
		const socket = client[kSocket$1];
		if (socket && !socket.destroyed) {
			if (client[kSize$4] === 0) {
				if (!socket[kNoRef] && socket.unref) {
					socket.unref();
					socket[kNoRef] = true;
				}
			} else if (socket[kNoRef] && socket.ref) {
				socket.ref();
				socket[kNoRef] = false;
			}
			if (client[kSize$4] === 0) {
				if (socket[kParser].timeoutType !== TIMEOUT_KEEP_ALIVE) socket[kParser].setTimeout(client[kKeepAliveTimeoutValue$1], TIMEOUT_KEEP_ALIVE);
			} else if (client[kRunning$4] > 0 && socket[kParser].statusCode < 200) {
				if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
					const request$3 = client[kQueue$3][client[kRunningIdx$2]];
					const headersTimeout = request$3.headersTimeout != null ? request$3.headersTimeout : client[kHeadersTimeout$1];
					socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
				}
			}
		}
	}
	function shouldSendContentLength$1(method) {
		return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
	}
	/**
	* @param {import('./client.js')} client
	* @param {import('../core/request.js')} request
	* @returns
	*/
	function writeH1(client, request$3) {
		const { method, path: path$9, host, upgrade: upgrade$2, blocking, reset: reset$1 } = request$3;
		let { body, headers, contentLength } = request$3;
		const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH" || method === "QUERY" || method === "PROPFIND" || method === "PROPPATCH";
		if (util$19.isFormDataLike(body)) {
			if (!extractBody$4) extractBody$4 = require_body().extractBody;
			const [bodyStream, contentType] = extractBody$4(body);
			if (request$3.contentType == null) headers.push("content-type", contentType);
			body = bodyStream.stream;
			contentLength = bodyStream.length;
		} else if (util$19.isBlobLike(body) && request$3.contentType == null && body.type) headers.push("content-type", body.type);
		if (body && typeof body.read === "function") body.read(0);
		const bodyLength$2 = util$19.bodyLength(body);
		contentLength = bodyLength$2 ?? contentLength;
		if (contentLength === null) contentLength = request$3.contentLength;
		if (contentLength === 0 && !expectsPayload) contentLength = null;
		if (shouldSendContentLength$1(method) && contentLength > 0 && request$3.contentLength !== null && request$3.contentLength !== contentLength) {
			if (client[kStrictContentLength$2]) {
				util$19.errorRequest(client, request$3, new RequestContentLengthMismatchError$1());
				return false;
			}
			process.emitWarning(new RequestContentLengthMismatchError$1());
		}
		const socket = client[kSocket$1];
		/**
		* @param {Error} [err]
		* @returns {void}
		*/
		const abort$2 = (err) => {
			if (request$3.aborted || request$3.completed) return;
			util$19.errorRequest(client, request$3, err || new RequestAbortedError$7());
			util$19.destroy(body);
			util$19.destroy(socket, new InformationalError$3("aborted"));
		};
		try {
			request$3.onConnect(abort$2);
		} catch (err) {
			util$19.errorRequest(client, request$3, err);
		}
		if (request$3.aborted) return false;
		if (method === "HEAD") socket[kReset$1] = true;
		if (upgrade$2 || method === "CONNECT") socket[kReset$1] = true;
		if (reset$1 != null) socket[kReset$1] = reset$1;
		if (client[kMaxRequests$1] && socket[kCounter$1]++ >= client[kMaxRequests$1]) socket[kReset$1] = true;
		if (blocking) socket[kBlocking] = true;
		let header = `${method} ${path$9} HTTP/1.1\r\n`;
		if (typeof host === "string") header += `host: ${host}\r\n`;
		else header += client[kHostHeader$1];
		if (upgrade$2) header += `connection: upgrade\r\nupgrade: ${upgrade$2}\r\n`;
		else if (client[kPipelining$1] && !socket[kReset$1]) header += "connection: keep-alive\r\n";
		else header += "connection: close\r\n";
		if (Array.isArray(headers)) for (let n$1 = 0; n$1 < headers.length; n$1 += 2) {
			const key = headers[n$1 + 0];
			const val = headers[n$1 + 1];
			if (Array.isArray(val)) for (let i$1 = 0; i$1 < val.length; i$1++) header += `${key}: ${val[i$1]}\r\n`;
			else header += `${key}: ${val}\r\n`;
		}
		if (channels$4.sendHeaders.hasSubscribers) channels$4.sendHeaders.publish({
			request: request$3,
			headers: header,
			socket
		});
		/* istanbul ignore else: assertion */
		if (!body || bodyLength$2 === 0) writeBuffer$1(abort$2, null, client, request$3, socket, contentLength, header, expectsPayload);
		else if (util$19.isBuffer(body)) writeBuffer$1(abort$2, body, client, request$3, socket, contentLength, header, expectsPayload);
		else if (util$19.isBlobLike(body)) if (typeof body.stream === "function") writeIterable$1(abort$2, body.stream(), client, request$3, socket, contentLength, header, expectsPayload);
		else writeBlob$1(abort$2, body, client, request$3, socket, contentLength, header, expectsPayload);
		else if (util$19.isStream(body)) writeStream$1(abort$2, body, client, request$3, socket, contentLength, header, expectsPayload);
		else if (util$19.isIterable(body)) writeIterable$1(abort$2, body, client, request$3, socket, contentLength, header, expectsPayload);
		else assert$22(false);
		return true;
	}
	/**
	* @param {AbortCallback} abort
	* @param {import('stream').Stream} body
	* @param {import('./client.js')} client
	* @param {import('../core/request.js')} request
	* @param {import('net').Socket} socket
	* @param {number} contentLength
	* @param {string} header
	* @param {boolean} expectsPayload
	*/
	function writeStream$1(abort$2, body, client, request$3, socket, contentLength, header, expectsPayload) {
		assert$22(contentLength !== 0 || client[kRunning$4] === 0, "stream body cannot be pipelined");
		let finished$4 = false;
		const writer = new AsyncWriter({
			abort: abort$2,
			socket,
			request: request$3,
			contentLength,
			client,
			expectsPayload,
			header
		});
		/**
		* @param {Buffer} chunk
		* @returns {void}
		*/
		const onData = function(chunk) {
			if (finished$4) return;
			try {
				if (!writer.write(chunk) && this.pause) this.pause();
			} catch (err) {
				util$19.destroy(this, err);
			}
		};
		/**
		* @returns {void}
		*/
		const onDrain = function() {
			if (finished$4) return;
			if (body.resume) body.resume();
		};
		/**
		* @returns {void}
		*/
		const onClose = function() {
			queueMicrotask(() => {
				body.removeListener("error", onFinished);
			});
			if (!finished$4) {
				const err = new RequestAbortedError$7();
				queueMicrotask(() => onFinished(err));
			}
		};
		/**
		* @param {Error} [err]
		* @returns
		*/
		const onFinished = function(err) {
			if (finished$4) return;
			finished$4 = true;
			assert$22(socket.destroyed || socket[kWriting] && client[kRunning$4] <= 1);
			socket.off("drain", onDrain).off("error", onFinished);
			body.removeListener("data", onData).removeListener("end", onFinished).removeListener("close", onClose);
			if (!err) try {
				writer.end();
			} catch (er) {
				err = er;
			}
			writer.destroy(err);
			if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) util$19.destroy(body, err);
			else util$19.destroy(body);
		};
		body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onClose);
		if (body.resume) body.resume();
		socket.on("drain", onDrain).on("error", onFinished);
		if (body.errorEmitted ?? body.errored) setImmediate(onFinished, body.errored);
		else if (body.endEmitted ?? body.readableEnded) setImmediate(onFinished, null);
		if (body.closeEmitted ?? body.closed) setImmediate(onClose);
	}
	/**
	* @typedef AbortCallback
	* @type {Function}
	* @param {Error} [err]
	* @returns {void}
	*/
	/**
	* @param {AbortCallback} abort
	* @param {Uint8Array|null} body
	* @param {import('./client.js')} client
	* @param {import('../core/request.js')} request
	* @param {import('net').Socket} socket
	* @param {number} contentLength
	* @param {string} header
	* @param {boolean} expectsPayload
	* @returns {void}
	*/
	function writeBuffer$1(abort$2, body, client, request$3, socket, contentLength, header, expectsPayload) {
		try {
			if (!body) if (contentLength === 0) socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
			else {
				assert$22(contentLength === null, "no body must not have content length");
				socket.write(`${header}\r\n`, "latin1");
			}
			else if (util$19.isBuffer(body)) {
				assert$22(contentLength === body.byteLength, "buffer body must have content length");
				socket.cork();
				socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
				socket.write(body);
				socket.uncork();
				request$3.onBodySent(body);
				if (!expectsPayload && request$3.reset !== false) socket[kReset$1] = true;
			}
			request$3.onRequestSent();
			client[kResume$3]();
		} catch (err) {
			abort$2(err);
		}
	}
	/**
	* @param {AbortCallback} abort
	* @param {Blob} body
	* @param {import('./client.js')} client
	* @param {import('../core/request.js')} request
	* @param {import('net').Socket} socket
	* @param {number} contentLength
	* @param {string} header
	* @param {boolean} expectsPayload
	* @returns {Promise<void>}
	*/
	async function writeBlob$1(abort$2, body, client, request$3, socket, contentLength, header, expectsPayload) {
		assert$22(contentLength === body.size, "blob body must have content length");
		try {
			if (contentLength != null && contentLength !== body.size) throw new RequestContentLengthMismatchError$1();
			const buffer$1 = Buffer.from(await body.arrayBuffer());
			socket.cork();
			socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
			socket.write(buffer$1);
			socket.uncork();
			request$3.onBodySent(buffer$1);
			request$3.onRequestSent();
			if (!expectsPayload && request$3.reset !== false) socket[kReset$1] = true;
			client[kResume$3]();
		} catch (err) {
			abort$2(err);
		}
	}
	/**
	* @param {AbortCallback} abort
	* @param {Iterable} body
	* @param {import('./client.js')} client
	* @param {import('../core/request.js')} request
	* @param {import('net').Socket} socket
	* @param {number} contentLength
	* @param {string} header
	* @param {boolean} expectsPayload
	* @returns {Promise<void>}
	*/
	async function writeIterable$1(abort$2, body, client, request$3, socket, contentLength, header, expectsPayload) {
		assert$22(contentLength !== 0 || client[kRunning$4] === 0, "iterator body cannot be pipelined");
		let callback = null;
		function onDrain() {
			if (callback) {
				const cb = callback;
				callback = null;
				cb();
			}
		}
		const waitForDrain = () => new Promise((resolve$1, reject) => {
			assert$22(callback === null);
			if (socket[kError$2]) reject(socket[kError$2]);
			else callback = resolve$1;
		});
		socket.on("close", onDrain).on("drain", onDrain);
		const writer = new AsyncWriter({
			abort: abort$2,
			socket,
			request: request$3,
			contentLength,
			client,
			expectsPayload,
			header
		});
		try {
			for await (const chunk of body) {
				if (socket[kError$2]) throw socket[kError$2];
				if (!writer.write(chunk)) await waitForDrain();
			}
			writer.end();
		} catch (err) {
			writer.destroy(err);
		} finally {
			socket.off("close", onDrain).off("drain", onDrain);
		}
	}
	var AsyncWriter = class {
		/**
		*
		* @param {object} arg
		* @param {AbortCallback} arg.abort
		* @param {import('net').Socket} arg.socket
		* @param {import('../core/request.js')} arg.request
		* @param {number} arg.contentLength
		* @param {import('./client.js')} arg.client
		* @param {boolean} arg.expectsPayload
		* @param {string} arg.header
		*/
		constructor({ abort: abort$2, socket, request: request$3, contentLength, client, expectsPayload, header }) {
			this.socket = socket;
			this.request = request$3;
			this.contentLength = contentLength;
			this.client = client;
			this.bytesWritten = 0;
			this.expectsPayload = expectsPayload;
			this.header = header;
			this.abort = abort$2;
			socket[kWriting] = true;
		}
		/**
		* @param {Buffer} chunk
		* @returns
		*/
		write(chunk) {
			const { socket, request: request$3, contentLength, client, bytesWritten, expectsPayload, header } = this;
			if (socket[kError$2]) throw socket[kError$2];
			if (socket.destroyed) return false;
			const len = Buffer.byteLength(chunk);
			if (!len) return true;
			if (contentLength !== null && bytesWritten + len > contentLength) {
				if (client[kStrictContentLength$2]) throw new RequestContentLengthMismatchError$1();
				process.emitWarning(new RequestContentLengthMismatchError$1());
			}
			socket.cork();
			if (bytesWritten === 0) {
				if (!expectsPayload && request$3.reset !== false) socket[kReset$1] = true;
				if (contentLength === null) socket.write(`${header}transfer-encoding: chunked\r\n`, "latin1");
				else socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
			}
			if (contentLength === null) socket.write(`\r\n${len.toString(16)}\r\n`, "latin1");
			this.bytesWritten += len;
			const ret = socket.write(chunk);
			socket.uncork();
			request$3.onBodySent(chunk);
			if (!ret) {
				if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
					// istanbul ignore else: only for jest
					if (socket[kParser].timeout.refresh) socket[kParser].timeout.refresh();
				}
			}
			return ret;
		}
		/**
		* @returns {void}
		*/
		end() {
			const { socket, contentLength, client, bytesWritten, expectsPayload, header, request: request$3 } = this;
			request$3.onRequestSent();
			socket[kWriting] = false;
			if (socket[kError$2]) throw socket[kError$2];
			if (socket.destroyed) return;
			if (bytesWritten === 0) if (expectsPayload) socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
			else socket.write(`${header}\r\n`, "latin1");
			else if (contentLength === null) socket.write("\r\n0\r\n\r\n", "latin1");
			if (contentLength !== null && bytesWritten !== contentLength) if (client[kStrictContentLength$2]) throw new RequestContentLengthMismatchError$1();
			else process.emitWarning(new RequestContentLengthMismatchError$1());
			if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
				// istanbul ignore else: only for jest
				if (socket[kParser].timeout.refresh) socket[kParser].timeout.refresh();
			}
			client[kResume$3]();
		}
		/**
		* @param {Error} [err]
		* @returns {void}
		*/
		destroy(err) {
			const { socket, client, abort: abort$2 } = this;
			socket[kWriting] = false;
			if (err) {
				assert$22(client[kRunning$4] <= 1, "pipeline should only contain this request");
				abort$2(err);
			}
		}
	};
	module.exports = connectH1$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/client-h2.js
var require_client_h2 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/client-h2.js"(exports, module) {
	const assert$21 = __require("node:assert");
	const { pipeline: pipeline$3 } = __require("node:stream");
	const util$18 = require_util$5();
	const { RequestContentLengthMismatchError, RequestAbortedError: RequestAbortedError$6, SocketError: SocketError$2, InformationalError: InformationalError$2 } = require_errors();
	const { kUrl: kUrl$5, kReset, kClient: kClient$2, kRunning: kRunning$3, kPending: kPending$2, kQueue: kQueue$2, kPendingIdx: kPendingIdx$1, kRunningIdx: kRunningIdx$1, kError: kError$1, kSocket, kStrictContentLength: kStrictContentLength$1, kOnError: kOnError$1, kMaxConcurrentStreams: kMaxConcurrentStreams$1, kHTTP2Session, kResume: kResume$2, kSize: kSize$3, kHTTPContext: kHTTPContext$1, kClosed: kClosed$1, kBodyTimeout: kBodyTimeout$1 } = require_symbols();
	const { channels: channels$3 } = require_diagnostics();
	const kOpenStreams = Symbol("open streams");
	let extractBody$3;
	/** @type {import('http2')} */
	let http2;
	try {
		http2 = __require("node:http2");
	} catch {
		http2 = { constants: {} };
	}
	const { constants: { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_SCHEME, HTTP2_HEADER_CONTENT_LENGTH, HTTP2_HEADER_EXPECT, HTTP2_HEADER_STATUS } } = http2;
	function parseH2Headers(headers) {
		const result = [];
		for (const [name$2, value] of Object.entries(headers)) if (Array.isArray(value)) for (const subvalue of value) result.push(Buffer.from(name$2), Buffer.from(subvalue));
		else result.push(Buffer.from(name$2), Buffer.from(value));
		return result;
	}
	async function connectH2$1(client, socket) {
		client[kSocket] = socket;
		const session = http2.connect(client[kUrl$5], {
			createConnection: () => socket,
			peerMaxConcurrentStreams: client[kMaxConcurrentStreams$1],
			settings: { enablePush: false }
		});
		session[kOpenStreams] = 0;
		session[kClient$2] = client;
		session[kSocket] = socket;
		session[kHTTP2Session] = null;
		util$18.addListener(session, "error", onHttp2SessionError);
		util$18.addListener(session, "frameError", onHttp2FrameError);
		util$18.addListener(session, "end", onHttp2SessionEnd);
		util$18.addListener(session, "goaway", onHttp2SessionGoAway);
		util$18.addListener(session, "close", onHttp2SessionClose);
		session.unref();
		client[kHTTP2Session] = session;
		socket[kHTTP2Session] = session;
		util$18.addListener(socket, "error", onHttp2SocketError);
		util$18.addListener(socket, "end", onHttp2SocketEnd);
		util$18.addListener(socket, "close", onHttp2SocketClose);
		socket[kClosed$1] = false;
		socket.on("close", onSocketClose);
		return {
			version: "h2",
			defaultPipelining: Infinity,
			write(request$3) {
				return writeH2(client, request$3);
			},
			resume() {
				resumeH2(client);
			},
			destroy(err, callback) {
				if (socket[kClosed$1]) queueMicrotask(callback);
				else socket.destroy(err).on("close", callback);
			},
			get destroyed() {
				return socket.destroyed;
			},
			busy() {
				return false;
			}
		};
	}
	function resumeH2(client) {
		const socket = client[kSocket];
		if (socket?.destroyed === false) if (client[kSize$3] === 0 || client[kMaxConcurrentStreams$1] === 0) {
			socket.unref();
			client[kHTTP2Session].unref();
		} else {
			socket.ref();
			client[kHTTP2Session].ref();
		}
	}
	function onHttp2SessionError(err) {
		assert$21(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
		this[kSocket][kError$1] = err;
		this[kClient$2][kOnError$1](err);
	}
	function onHttp2FrameError(type, code, id$1) {
		if (id$1 === 0) {
			const err = new InformationalError$2(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
			this[kSocket][kError$1] = err;
			this[kClient$2][kOnError$1](err);
		}
	}
	function onHttp2SessionEnd() {
		const err = new SocketError$2("other side closed", util$18.getSocketInfo(this[kSocket]));
		this.destroy(err);
		util$18.destroy(this[kSocket], err);
	}
	/**
	* This is the root cause of #3011
	* We need to handle GOAWAY frames properly, and trigger the session close
	* along with the socket right away
	*
	* @this {import('http2').ClientHttp2Session}
	* @param {number} errorCode
	*/
	function onHttp2SessionGoAway(errorCode) {
		const err = this[kError$1] || new SocketError$2(`HTTP/2: "GOAWAY" frame received with code ${errorCode}`, util$18.getSocketInfo(this[kSocket]));
		const client = this[kClient$2];
		client[kSocket] = null;
		client[kHTTPContext$1] = null;
		this.close();
		this[kHTTP2Session] = null;
		util$18.destroy(this[kSocket], err);
		if (client[kRunningIdx$1] < client[kQueue$2].length) {
			const request$3 = client[kQueue$2][client[kRunningIdx$1]];
			client[kQueue$2][client[kRunningIdx$1]++] = null;
			util$18.errorRequest(client, request$3, err);
			client[kPendingIdx$1] = client[kRunningIdx$1];
		}
		assert$21(client[kRunning$3] === 0);
		client.emit("disconnect", client[kUrl$5], [client], err);
		client.emit("connectionError", client[kUrl$5], [client], err);
		client[kResume$2]();
	}
	function onHttp2SessionClose() {
		const { [kClient$2]: client } = this;
		const { [kSocket]: socket } = client;
		const err = this[kSocket][kError$1] || this[kError$1] || new SocketError$2("closed", util$18.getSocketInfo(socket));
		client[kSocket] = null;
		client[kHTTPContext$1] = null;
		if (client.destroyed) {
			assert$21(client[kPending$2] === 0);
			const requests = client[kQueue$2].splice(client[kRunningIdx$1]);
			for (let i$1 = 0; i$1 < requests.length; i$1++) {
				const request$3 = requests[i$1];
				util$18.errorRequest(client, request$3, err);
			}
		}
	}
	function onHttp2SocketClose() {
		const err = this[kError$1] || new SocketError$2("closed", util$18.getSocketInfo(this));
		const client = this[kHTTP2Session][kClient$2];
		client[kSocket] = null;
		client[kHTTPContext$1] = null;
		if (this[kHTTP2Session] !== null) this[kHTTP2Session].destroy(err);
		client[kPendingIdx$1] = client[kRunningIdx$1];
		assert$21(client[kRunning$3] === 0);
		client.emit("disconnect", client[kUrl$5], [client], err);
		client[kResume$2]();
	}
	function onHttp2SocketError(err) {
		assert$21(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
		this[kError$1] = err;
		this[kClient$2][kOnError$1](err);
	}
	function onHttp2SocketEnd() {
		util$18.destroy(this, new SocketError$2("other side closed", util$18.getSocketInfo(this)));
	}
	function onSocketClose() {
		this[kClosed$1] = true;
	}
	function shouldSendContentLength(method) {
		return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
	}
	function writeH2(client, request$3) {
		const requestTimeout = request$3.bodyTimeout ?? client[kBodyTimeout$1];
		const session = client[kHTTP2Session];
		const { method, path: path$9, host, upgrade: upgrade$2, expectContinue, signal, headers: reqHeaders } = request$3;
		let { body } = request$3;
		if (upgrade$2) {
			util$18.errorRequest(client, request$3, /* @__PURE__ */ new Error("Upgrade not supported for H2"));
			return false;
		}
		const headers = {};
		for (let n$1 = 0; n$1 < reqHeaders.length; n$1 += 2) {
			const key = reqHeaders[n$1 + 0];
			const val = reqHeaders[n$1 + 1];
			if (Array.isArray(val)) for (let i$1 = 0; i$1 < val.length; i$1++) if (headers[key]) headers[key] += `, ${val[i$1]}`;
			else headers[key] = val[i$1];
			else if (headers[key]) headers[key] += `, ${val}`;
			else headers[key] = val;
		}
		/** @type {import('node:http2').ClientHttp2Stream} */
		let stream$4 = null;
		const { hostname, port } = client[kUrl$5];
		headers[HTTP2_HEADER_AUTHORITY] = host || `${hostname}${port ? `:${port}` : ""}`;
		headers[HTTP2_HEADER_METHOD] = method;
		const abort$2 = (err) => {
			if (request$3.aborted || request$3.completed) return;
			err = err || new RequestAbortedError$6();
			util$18.errorRequest(client, request$3, err);
			if (stream$4 != null) {
				stream$4.removeAllListeners("data");
				stream$4.close();
				client[kOnError$1](err);
				client[kResume$2]();
			}
			util$18.destroy(body, err);
		};
		try {
			request$3.onConnect(abort$2);
		} catch (err) {
			util$18.errorRequest(client, request$3, err);
		}
		if (request$3.aborted) return false;
		if (method === "CONNECT") {
			session.ref();
			stream$4 = session.request(headers, {
				endStream: false,
				signal
			});
			if (!stream$4.pending) {
				request$3.onUpgrade(null, null, stream$4);
				++session[kOpenStreams];
				client[kQueue$2][client[kRunningIdx$1]++] = null;
			} else stream$4.once("ready", () => {
				request$3.onUpgrade(null, null, stream$4);
				++session[kOpenStreams];
				client[kQueue$2][client[kRunningIdx$1]++] = null;
			});
			stream$4.once("close", () => {
				session[kOpenStreams] -= 1;
				if (session[kOpenStreams] === 0) session.unref();
			});
			stream$4.setTimeout(requestTimeout);
			return true;
		}
		headers[HTTP2_HEADER_PATH] = path$9;
		headers[HTTP2_HEADER_SCHEME] = "https";
		const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
		if (body && typeof body.read === "function") body.read(0);
		let contentLength = util$18.bodyLength(body);
		if (util$18.isFormDataLike(body)) {
			extractBody$3 ??= require_body().extractBody;
			const [bodyStream, contentType] = extractBody$3(body);
			headers["content-type"] = contentType;
			body = bodyStream.stream;
			contentLength = bodyStream.length;
		}
		if (contentLength == null) contentLength = request$3.contentLength;
		if (contentLength === 0 || !expectsPayload) contentLength = null;
		if (shouldSendContentLength(method) && contentLength > 0 && request$3.contentLength != null && request$3.contentLength !== contentLength) {
			if (client[kStrictContentLength$1]) {
				util$18.errorRequest(client, request$3, new RequestContentLengthMismatchError());
				return false;
			}
			process.emitWarning(new RequestContentLengthMismatchError());
		}
		if (contentLength != null) {
			assert$21(body, "no body must not have content length");
			headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
		}
		session.ref();
		if (channels$3.sendHeaders.hasSubscribers) {
			let header = "";
			for (const key in headers) header += `${key}: ${headers[key]}\r\n`;
			channels$3.sendHeaders.publish({
				request: request$3,
				headers: header,
				socket: session[kSocket]
			});
		}
		const shouldEndStream = method === "GET" || method === "HEAD" || body === null;
		if (expectContinue) {
			headers[HTTP2_HEADER_EXPECT] = "100-continue";
			stream$4 = session.request(headers, {
				endStream: shouldEndStream,
				signal
			});
			stream$4.once("continue", writeBodyH2);
		} else {
			stream$4 = session.request(headers, {
				endStream: shouldEndStream,
				signal
			});
			writeBodyH2();
		}
		++session[kOpenStreams];
		stream$4.setTimeout(requestTimeout);
		stream$4.once("response", (headers$1) => {
			const { [HTTP2_HEADER_STATUS]: statusCode,...realHeaders } = headers$1;
			request$3.onResponseStarted();
			if (request$3.aborted) {
				stream$4.removeAllListeners("data");
				return;
			}
			if (request$3.onHeaders(Number(statusCode), parseH2Headers(realHeaders), stream$4.resume.bind(stream$4), "") === false) stream$4.pause();
		});
		stream$4.on("data", (chunk) => {
			if (request$3.onData(chunk) === false) stream$4.pause();
		});
		stream$4.once("end", (err) => {
			stream$4.removeAllListeners("data");
			if (stream$4.state?.state == null || stream$4.state.state < 6) {
				if (!request$3.aborted && !request$3.completed) request$3.onComplete({});
				client[kQueue$2][client[kRunningIdx$1]++] = null;
				client[kResume$2]();
			} else {
				--session[kOpenStreams];
				if (session[kOpenStreams] === 0) session.unref();
				abort$2(err ?? new InformationalError$2("HTTP/2: stream half-closed (remote)"));
				client[kQueue$2][client[kRunningIdx$1]++] = null;
				client[kPendingIdx$1] = client[kRunningIdx$1];
				client[kResume$2]();
			}
		});
		stream$4.once("close", () => {
			stream$4.removeAllListeners("data");
			session[kOpenStreams] -= 1;
			if (session[kOpenStreams] === 0) session.unref();
		});
		stream$4.once("error", function(err) {
			stream$4.removeAllListeners("data");
			abort$2(err);
		});
		stream$4.once("frameError", (type, code) => {
			stream$4.removeAllListeners("data");
			abort$2(new InformationalError$2(`HTTP/2: "frameError" received - type ${type}, code ${code}`));
		});
		stream$4.on("aborted", () => {
			stream$4.removeAllListeners("data");
		});
		stream$4.on("timeout", () => {
			const err = new InformationalError$2(`HTTP/2: "stream timeout after ${requestTimeout}"`);
			stream$4.removeAllListeners("data");
			session[kOpenStreams] -= 1;
			if (session[kOpenStreams] === 0) session.unref();
			abort$2(err);
		});
		stream$4.once("trailers", (trailers) => {
			if (request$3.aborted || request$3.completed) return;
			request$3.onComplete(trailers);
		});
		return true;
		function writeBodyH2() {
			/* istanbul ignore else: assertion */
			if (!body || contentLength === 0) writeBuffer(abort$2, stream$4, null, client, request$3, client[kSocket], contentLength, expectsPayload);
			else if (util$18.isBuffer(body)) writeBuffer(abort$2, stream$4, body, client, request$3, client[kSocket], contentLength, expectsPayload);
			else if (util$18.isBlobLike(body)) if (typeof body.stream === "function") writeIterable(abort$2, stream$4, body.stream(), client, request$3, client[kSocket], contentLength, expectsPayload);
			else writeBlob(abort$2, stream$4, body, client, request$3, client[kSocket], contentLength, expectsPayload);
			else if (util$18.isStream(body)) writeStream(abort$2, client[kSocket], expectsPayload, stream$4, body, client, request$3, contentLength);
			else if (util$18.isIterable(body)) writeIterable(abort$2, stream$4, body, client, request$3, client[kSocket], contentLength, expectsPayload);
			else assert$21(false);
		}
	}
	function writeBuffer(abort$2, h2stream, body, client, request$3, socket, contentLength, expectsPayload) {
		try {
			if (body != null && util$18.isBuffer(body)) {
				assert$21(contentLength === body.byteLength, "buffer body must have content length");
				h2stream.cork();
				h2stream.write(body);
				h2stream.uncork();
				h2stream.end();
				request$3.onBodySent(body);
			}
			if (!expectsPayload) socket[kReset] = true;
			request$3.onRequestSent();
			client[kResume$2]();
		} catch (error$1) {
			abort$2(error$1);
		}
	}
	function writeStream(abort$2, socket, expectsPayload, h2stream, body, client, request$3, contentLength) {
		assert$21(contentLength !== 0 || client[kRunning$3] === 0, "stream body cannot be pipelined");
		const pipe = pipeline$3(body, h2stream, (err) => {
			if (err) {
				util$18.destroy(pipe, err);
				abort$2(err);
			} else {
				util$18.removeAllListeners(pipe);
				request$3.onRequestSent();
				if (!expectsPayload) socket[kReset] = true;
				client[kResume$2]();
			}
		});
		util$18.addListener(pipe, "data", onPipeData);
		function onPipeData(chunk) {
			request$3.onBodySent(chunk);
		}
	}
	async function writeBlob(abort$2, h2stream, body, client, request$3, socket, contentLength, expectsPayload) {
		assert$21(contentLength === body.size, "blob body must have content length");
		try {
			if (contentLength != null && contentLength !== body.size) throw new RequestContentLengthMismatchError();
			const buffer$1 = Buffer.from(await body.arrayBuffer());
			h2stream.cork();
			h2stream.write(buffer$1);
			h2stream.uncork();
			h2stream.end();
			request$3.onBodySent(buffer$1);
			request$3.onRequestSent();
			if (!expectsPayload) socket[kReset] = true;
			client[kResume$2]();
		} catch (err) {
			abort$2(err);
		}
	}
	async function writeIterable(abort$2, h2stream, body, client, request$3, socket, contentLength, expectsPayload) {
		assert$21(contentLength !== 0 || client[kRunning$3] === 0, "iterator body cannot be pipelined");
		let callback = null;
		function onDrain() {
			if (callback) {
				const cb = callback;
				callback = null;
				cb();
			}
		}
		const waitForDrain = () => new Promise((resolve$1, reject) => {
			assert$21(callback === null);
			if (socket[kError$1]) reject(socket[kError$1]);
			else callback = resolve$1;
		});
		h2stream.on("close", onDrain).on("drain", onDrain);
		try {
			for await (const chunk of body) {
				if (socket[kError$1]) throw socket[kError$1];
				const res = h2stream.write(chunk);
				request$3.onBodySent(chunk);
				if (!res) await waitForDrain();
			}
			h2stream.end();
			request$3.onRequestSent();
			if (!expectsPayload) socket[kReset] = true;
			client[kResume$2]();
		} catch (err) {
			abort$2(err);
		} finally {
			h2stream.off("close", onDrain).off("drain", onDrain);
		}
	}
	module.exports = connectH2$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/client.js
var require_client = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/client.js"(exports, module) {
	const assert$20 = __require("node:assert");
	const net = __require("node:net");
	const http = __require("node:http");
	const util$17 = require_util$5();
	const { ClientStats } = require_stats();
	const { channels: channels$2 } = require_diagnostics();
	const Request$3 = require_request$1();
	const DispatcherBase$5 = require_dispatcher_base();
	const { InvalidArgumentError: InvalidArgumentError$24, InformationalError: InformationalError$1, ClientDestroyedError } = require_errors();
	const buildConnector$3 = require_connect();
	const { kUrl: kUrl$4, kServerName, kClient: kClient$1, kBusy: kBusy$1, kConnect, kResuming, kRunning: kRunning$2, kPending: kPending$1, kSize: kSize$2, kQueue: kQueue$1, kConnected: kConnected$3, kConnecting, kNeedDrain: kNeedDrain$3, kKeepAliveDefaultTimeout, kHostHeader, kPendingIdx, kRunningIdx, kError, kPipelining, kKeepAliveTimeoutValue, kMaxHeadersSize, kKeepAliveMaxTimeout, kKeepAliveTimeoutThreshold, kHeadersTimeout, kBodyTimeout, kStrictContentLength, kConnector: kConnector$1, kMaxRequests, kCounter, kClose: kClose$7, kDestroy: kDestroy$5, kDispatch: kDispatch$4, kLocalAddress, kMaxResponseSize, kOnError, kHTTPContext, kMaxConcurrentStreams, kResume: kResume$1 } = require_symbols();
	const connectH1 = require_client_h1();
	const connectH2 = require_client_h2();
	const kClosedResolve$1 = Symbol("kClosedResolve");
	const getDefaultNodeMaxHeaderSize = http && http.maxHeaderSize && Number.isInteger(http.maxHeaderSize) && http.maxHeaderSize > 0 ? () => http.maxHeaderSize : () => {
		throw new InvalidArgumentError$24("http module not available or http.maxHeaderSize invalid");
	};
	const noop$9 = () => {};
	function getPipelining(client) {
		return client[kPipelining] ?? client[kHTTPContext]?.defaultPipelining ?? 1;
	}
	/**
	* @type {import('../../types/client.js').default}
	*/
	var Client$6 = class extends DispatcherBase$5 {
		/**
		*
		* @param {string|URL} url
		* @param {import('../../types/client.js').Client.Options} options
		*/
		constructor(url, { maxHeaderSize, headersTimeout, socketTimeout, requestTimeout, connectTimeout, bodyTimeout, idleTimeout, keepAlive, keepAliveTimeout, maxKeepAliveTimeout, keepAliveMaxTimeout, keepAliveTimeoutThreshold, socketPath, pipelining, tls: tls$3, strictContentLength, maxCachedSessions, connect: connect$5, maxRequestsPerClient, localAddress, maxResponseSize, autoSelectFamily, autoSelectFamilyAttemptTimeout, maxConcurrentStreams, allowH2 } = {}) {
			if (keepAlive !== void 0) throw new InvalidArgumentError$24("unsupported keepAlive, use pipelining=0 instead");
			if (socketTimeout !== void 0) throw new InvalidArgumentError$24("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
			if (requestTimeout !== void 0) throw new InvalidArgumentError$24("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
			if (idleTimeout !== void 0) throw new InvalidArgumentError$24("unsupported idleTimeout, use keepAliveTimeout instead");
			if (maxKeepAliveTimeout !== void 0) throw new InvalidArgumentError$24("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
			if (maxHeaderSize != null) {
				if (!Number.isInteger(maxHeaderSize) || maxHeaderSize < 1) throw new InvalidArgumentError$24("invalid maxHeaderSize");
			} else maxHeaderSize = getDefaultNodeMaxHeaderSize();
			if (socketPath != null && typeof socketPath !== "string") throw new InvalidArgumentError$24("invalid socketPath");
			if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) throw new InvalidArgumentError$24("invalid connectTimeout");
			if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) throw new InvalidArgumentError$24("invalid keepAliveTimeout");
			if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) throw new InvalidArgumentError$24("invalid keepAliveMaxTimeout");
			if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) throw new InvalidArgumentError$24("invalid keepAliveTimeoutThreshold");
			if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) throw new InvalidArgumentError$24("headersTimeout must be a positive integer or zero");
			if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) throw new InvalidArgumentError$24("bodyTimeout must be a positive integer or zero");
			if (connect$5 != null && typeof connect$5 !== "function" && typeof connect$5 !== "object") throw new InvalidArgumentError$24("connect must be a function or an object");
			if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) throw new InvalidArgumentError$24("maxRequestsPerClient must be a positive number");
			if (localAddress != null && (typeof localAddress !== "string" || net.isIP(localAddress) === 0)) throw new InvalidArgumentError$24("localAddress must be valid string IP address");
			if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) throw new InvalidArgumentError$24("maxResponseSize must be a positive number");
			if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) throw new InvalidArgumentError$24("autoSelectFamilyAttemptTimeout must be a positive number");
			if (allowH2 != null && typeof allowH2 !== "boolean") throw new InvalidArgumentError$24("allowH2 must be a valid boolean value");
			if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) throw new InvalidArgumentError$24("maxConcurrentStreams must be a positive integer, greater than 0");
			super();
			if (typeof connect$5 !== "function") connect$5 = buildConnector$3({
				...tls$3,
				maxCachedSessions,
				allowH2,
				socketPath,
				timeout: connectTimeout,
				...typeof autoSelectFamily === "boolean" ? {
					autoSelectFamily,
					autoSelectFamilyAttemptTimeout
				} : void 0,
				...connect$5
			});
			this[kUrl$4] = util$17.parseOrigin(url);
			this[kConnector$1] = connect$5;
			this[kPipelining] = pipelining != null ? pipelining : 1;
			this[kMaxHeadersSize] = maxHeaderSize;
			this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
			this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
			this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 2e3 : keepAliveTimeoutThreshold;
			this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
			this[kServerName] = null;
			this[kLocalAddress] = localAddress != null ? localAddress : null;
			this[kResuming] = 0;
			this[kNeedDrain$3] = 0;
			this[kHostHeader] = `host: ${this[kUrl$4].hostname}${this[kUrl$4].port ? `:${this[kUrl$4].port}` : ""}\r\n`;
			this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 3e5;
			this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 3e5;
			this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
			this[kMaxRequests] = maxRequestsPerClient;
			this[kClosedResolve$1] = null;
			this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
			this[kMaxConcurrentStreams] = maxConcurrentStreams != null ? maxConcurrentStreams : 100;
			this[kHTTPContext] = null;
			this[kQueue$1] = [];
			this[kRunningIdx] = 0;
			this[kPendingIdx] = 0;
			this[kResume$1] = (sync$3) => resume(this, sync$3);
			this[kOnError] = (err) => onError(this, err);
		}
		get pipelining() {
			return this[kPipelining];
		}
		set pipelining(value) {
			this[kPipelining] = value;
			this[kResume$1](true);
		}
		get stats() {
			return new ClientStats(this);
		}
		get [kPending$1]() {
			return this[kQueue$1].length - this[kPendingIdx];
		}
		get [kRunning$2]() {
			return this[kPendingIdx] - this[kRunningIdx];
		}
		get [kSize$2]() {
			return this[kQueue$1].length - this[kRunningIdx];
		}
		get [kConnected$3]() {
			return !!this[kHTTPContext] && !this[kConnecting] && !this[kHTTPContext].destroyed;
		}
		get [kBusy$1]() {
			return Boolean(this[kHTTPContext]?.busy(null) || this[kSize$2] >= (getPipelining(this) || 1) || this[kPending$1] > 0);
		}
		/* istanbul ignore: only used for test */
		[kConnect](cb) {
			connect$2(this);
			this.once("connect", cb);
		}
		[kDispatch$4](opts, handler$1) {
			const origin = opts.origin || this[kUrl$4].origin;
			const request$3 = new Request$3(origin, opts, handler$1);
			this[kQueue$1].push(request$3);
			if (this[kResuming]) {} else if (util$17.bodyLength(request$3.body) == null && util$17.isIterable(request$3.body)) {
				this[kResuming] = 1;
				queueMicrotask(() => resume(this));
			} else this[kResume$1](true);
			if (this[kResuming] && this[kNeedDrain$3] !== 2 && this[kBusy$1]) this[kNeedDrain$3] = 2;
			return this[kNeedDrain$3] < 2;
		}
		async [kClose$7]() {
			return new Promise((resolve$1) => {
				if (this[kSize$2]) this[kClosedResolve$1] = resolve$1;
				else resolve$1(null);
			});
		}
		async [kDestroy$5](err) {
			return new Promise((resolve$1) => {
				const requests = this[kQueue$1].splice(this[kPendingIdx]);
				for (let i$1 = 0; i$1 < requests.length; i$1++) {
					const request$3 = requests[i$1];
					util$17.errorRequest(this, request$3, err);
				}
				const callback = () => {
					if (this[kClosedResolve$1]) {
						this[kClosedResolve$1]();
						this[kClosedResolve$1] = null;
					}
					resolve$1(null);
				};
				if (this[kHTTPContext]) {
					this[kHTTPContext].destroy(err, callback);
					this[kHTTPContext] = null;
				} else queueMicrotask(callback);
				this[kResume$1]();
			});
		}
	};
	function onError(client, err) {
		if (client[kRunning$2] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
			assert$20(client[kPendingIdx] === client[kRunningIdx]);
			const requests = client[kQueue$1].splice(client[kRunningIdx]);
			for (let i$1 = 0; i$1 < requests.length; i$1++) {
				const request$3 = requests[i$1];
				util$17.errorRequest(client, request$3, err);
			}
			assert$20(client[kSize$2] === 0);
		}
	}
	/**
	* @param {Client} client
	* @returns
	*/
	async function connect$2(client) {
		assert$20(!client[kConnecting]);
		assert$20(!client[kHTTPContext]);
		let { host, hostname, protocol, port } = client[kUrl$4];
		if (hostname[0] === "[") {
			const idx = hostname.indexOf("]");
			assert$20(idx !== -1);
			const ip = hostname.substring(1, idx);
			assert$20(net.isIPv6(ip));
			hostname = ip;
		}
		client[kConnecting] = true;
		if (channels$2.beforeConnect.hasSubscribers) channels$2.beforeConnect.publish({
			connectParams: {
				host,
				hostname,
				protocol,
				port,
				version: client[kHTTPContext]?.version,
				servername: client[kServerName],
				localAddress: client[kLocalAddress]
			},
			connector: client[kConnector$1]
		});
		try {
			const socket = await new Promise((resolve$1, reject) => {
				client[kConnector$1]({
					host,
					hostname,
					protocol,
					port,
					servername: client[kServerName],
					localAddress: client[kLocalAddress]
				}, (err, socket$1) => {
					if (err) reject(err);
					else resolve$1(socket$1);
				});
			});
			if (client.destroyed) {
				util$17.destroy(socket.on("error", noop$9), new ClientDestroyedError());
				return;
			}
			assert$20(socket);
			try {
				client[kHTTPContext] = socket.alpnProtocol === "h2" ? await connectH2(client, socket) : await connectH1(client, socket);
			} catch (err) {
				socket.destroy().on("error", noop$9);
				throw err;
			}
			client[kConnecting] = false;
			socket[kCounter] = 0;
			socket[kMaxRequests] = client[kMaxRequests];
			socket[kClient$1] = client;
			socket[kError] = null;
			if (channels$2.connected.hasSubscribers) channels$2.connected.publish({
				connectParams: {
					host,
					hostname,
					protocol,
					port,
					version: client[kHTTPContext]?.version,
					servername: client[kServerName],
					localAddress: client[kLocalAddress]
				},
				connector: client[kConnector$1],
				socket
			});
			client.emit("connect", client[kUrl$4], [client]);
		} catch (err) {
			if (client.destroyed) return;
			client[kConnecting] = false;
			if (channels$2.connectError.hasSubscribers) channels$2.connectError.publish({
				connectParams: {
					host,
					hostname,
					protocol,
					port,
					version: client[kHTTPContext]?.version,
					servername: client[kServerName],
					localAddress: client[kLocalAddress]
				},
				connector: client[kConnector$1],
				error: err
			});
			if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
				assert$20(client[kRunning$2] === 0);
				while (client[kPending$1] > 0 && client[kQueue$1][client[kPendingIdx]].servername === client[kServerName]) {
					const request$3 = client[kQueue$1][client[kPendingIdx]++];
					util$17.errorRequest(client, request$3, err);
				}
			} else onError(client, err);
			client.emit("connectionError", client[kUrl$4], [client], err);
		}
		client[kResume$1]();
	}
	function emitDrain(client) {
		client[kNeedDrain$3] = 0;
		client.emit("drain", client[kUrl$4], [client]);
	}
	function resume(client, sync$3) {
		if (client[kResuming] === 2) return;
		client[kResuming] = 2;
		_resume(client, sync$3);
		client[kResuming] = 0;
		if (client[kRunningIdx] > 256) {
			client[kQueue$1].splice(0, client[kRunningIdx]);
			client[kPendingIdx] -= client[kRunningIdx];
			client[kRunningIdx] = 0;
		}
	}
	function _resume(client, sync$3) {
		while (true) {
			if (client.destroyed) {
				assert$20(client[kPending$1] === 0);
				return;
			}
			if (client[kClosedResolve$1] && !client[kSize$2]) {
				client[kClosedResolve$1]();
				client[kClosedResolve$1] = null;
				return;
			}
			if (client[kHTTPContext]) client[kHTTPContext].resume();
			if (client[kBusy$1]) client[kNeedDrain$3] = 2;
			else if (client[kNeedDrain$3] === 2) {
				if (sync$3) {
					client[kNeedDrain$3] = 1;
					queueMicrotask(() => emitDrain(client));
				} else emitDrain(client);
				continue;
			}
			if (client[kPending$1] === 0) return;
			if (client[kRunning$2] >= (getPipelining(client) || 1)) return;
			const request$3 = client[kQueue$1][client[kPendingIdx]];
			if (client[kUrl$4].protocol === "https:" && client[kServerName] !== request$3.servername) {
				if (client[kRunning$2] > 0) return;
				client[kServerName] = request$3.servername;
				client[kHTTPContext]?.destroy(new InformationalError$1("servername changed"), () => {
					client[kHTTPContext] = null;
					resume(client);
				});
			}
			if (client[kConnecting]) return;
			if (!client[kHTTPContext]) {
				connect$2(client);
				return;
			}
			if (client[kHTTPContext].destroyed) return;
			if (client[kHTTPContext].busy(request$3)) return;
			if (!request$3.aborted && client[kHTTPContext].write(request$3)) client[kPendingIdx]++;
			else client[kQueue$1].splice(client[kPendingIdx], 1);
		}
	}
	module.exports = Client$6;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/fixed-queue.js
var require_fixed_queue = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/fixed-queue.js"(exports, module) {
	const kSize$1 = 2048;
	const kMask = kSize$1 - 1;
	/**
	* @type {FixedCircularBuffer}
	* @template T
	*/
	var FixedCircularBuffer = class {
		constructor() {
			/**
			* @type {number}
			*/
			this.bottom = 0;
			/**
			* @type {number}
			*/
			this.top = 0;
			/**
			* @type {Array<T|undefined>}
			*/
			this.list = new Array(kSize$1).fill(void 0);
			/**
			* @type {T|null}
			*/
			this.next = null;
		}
		/**
		* @returns {boolean}
		*/
		isEmpty() {
			return this.top === this.bottom;
		}
		/**
		* @returns {boolean}
		*/
		isFull() {
			return (this.top + 1 & kMask) === this.bottom;
		}
		/**
		* @param {T} data
		* @returns {void}
		*/
		push(data$1) {
			this.list[this.top] = data$1;
			this.top = this.top + 1 & kMask;
		}
		/**
		* @returns {T|null}
		*/
		shift() {
			const nextItem = this.list[this.bottom];
			if (nextItem === void 0) return null;
			this.list[this.bottom] = void 0;
			this.bottom = this.bottom + 1 & kMask;
			return nextItem;
		}
	};
	/**
	* @template T
	*/
	module.exports = class FixedQueue$3 {
		constructor() {
			/**
			* @type {FixedCircularBuffer<T>}
			*/
			this.head = this.tail = new FixedCircularBuffer();
		}
		/**
		* @returns {boolean}
		*/
		isEmpty() {
			return this.head.isEmpty();
		}
		/**
		* @param {T} data
		*/
		push(data$1) {
			if (this.head.isFull()) this.head = this.head.next = new FixedCircularBuffer();
			this.head.push(data$1);
		}
		/**
		* @returns {T|null}
		*/
		shift() {
			const tail$1 = this.tail;
			const next = tail$1.shift();
			if (tail$1.isEmpty() && tail$1.next !== null) {
				this.tail = tail$1.next;
				tail$1.next = null;
			}
			return next;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/pool-base.js
var require_pool_base = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/pool-base.js"(exports, module) {
	const { PoolStats } = require_stats();
	const DispatcherBase$4 = require_dispatcher_base();
	const FixedQueue$1 = require_fixed_queue();
	const { kConnected: kConnected$2, kSize, kRunning: kRunning$1, kPending, kQueued, kBusy, kFree, kUrl: kUrl$3, kClose: kClose$6, kDestroy: kDestroy$4, kDispatch: kDispatch$3 } = require_symbols();
	const kClients$4 = Symbol("clients");
	const kNeedDrain$2 = Symbol("needDrain");
	const kQueue = Symbol("queue");
	const kClosedResolve = Symbol("closed resolve");
	const kOnDrain$1 = Symbol("onDrain");
	const kOnConnect$1 = Symbol("onConnect");
	const kOnDisconnect$1 = Symbol("onDisconnect");
	const kOnConnectionError$1 = Symbol("onConnectionError");
	const kGetDispatcher$2 = Symbol("get dispatcher");
	const kAddClient$2 = Symbol("add client");
	const kRemoveClient$2 = Symbol("remove client");
	var PoolBase$2 = class extends DispatcherBase$4 {
		constructor() {
			super();
			this[kQueue] = new FixedQueue$1();
			this[kClients$4] = [];
			this[kQueued] = 0;
			const pool = this;
			this[kOnDrain$1] = function onDrain(origin, targets) {
				const queue = pool[kQueue];
				let needDrain = false;
				while (!needDrain) {
					const item = queue.shift();
					if (!item) break;
					pool[kQueued]--;
					needDrain = !this.dispatch(item.opts, item.handler);
				}
				this[kNeedDrain$2] = needDrain;
				if (!this[kNeedDrain$2] && pool[kNeedDrain$2]) {
					pool[kNeedDrain$2] = false;
					pool.emit("drain", origin, [pool, ...targets]);
				}
				if (pool[kClosedResolve] && queue.isEmpty()) Promise.all(pool[kClients$4].map((c$1) => c$1.close())).then(pool[kClosedResolve]);
			};
			this[kOnConnect$1] = (origin, targets) => {
				pool.emit("connect", origin, [pool, ...targets]);
			};
			this[kOnDisconnect$1] = (origin, targets, err) => {
				pool.emit("disconnect", origin, [pool, ...targets], err);
			};
			this[kOnConnectionError$1] = (origin, targets, err) => {
				pool.emit("connectionError", origin, [pool, ...targets], err);
			};
		}
		get [kBusy]() {
			return this[kNeedDrain$2];
		}
		get [kConnected$2]() {
			return this[kClients$4].filter((client) => client[kConnected$2]).length;
		}
		get [kFree]() {
			return this[kClients$4].filter((client) => client[kConnected$2] && !client[kNeedDrain$2]).length;
		}
		get [kPending]() {
			let ret = this[kQueued];
			for (const { [kPending]: pending } of this[kClients$4]) ret += pending;
			return ret;
		}
		get [kRunning$1]() {
			let ret = 0;
			for (const { [kRunning$1]: running } of this[kClients$4]) ret += running;
			return ret;
		}
		get [kSize]() {
			let ret = this[kQueued];
			for (const { [kSize]: size } of this[kClients$4]) ret += size;
			return ret;
		}
		get stats() {
			return new PoolStats(this);
		}
		async [kClose$6]() {
			if (this[kQueue].isEmpty()) await Promise.all(this[kClients$4].map((c$1) => c$1.close()));
			else await new Promise((resolve$1) => {
				this[kClosedResolve] = resolve$1;
			});
		}
		async [kDestroy$4](err) {
			while (true) {
				const item = this[kQueue].shift();
				if (!item) break;
				item.handler.onError(err);
			}
			await Promise.all(this[kClients$4].map((c$1) => c$1.destroy(err)));
		}
		[kDispatch$3](opts, handler$1) {
			const dispatcher = this[kGetDispatcher$2]();
			if (!dispatcher) {
				this[kNeedDrain$2] = true;
				this[kQueue].push({
					opts,
					handler: handler$1
				});
				this[kQueued]++;
			} else if (!dispatcher.dispatch(opts, handler$1)) {
				dispatcher[kNeedDrain$2] = true;
				this[kNeedDrain$2] = !this[kGetDispatcher$2]();
			}
			return !this[kNeedDrain$2];
		}
		[kAddClient$2](client) {
			client.on("drain", this[kOnDrain$1]).on("connect", this[kOnConnect$1]).on("disconnect", this[kOnDisconnect$1]).on("connectionError", this[kOnConnectionError$1]);
			this[kClients$4].push(client);
			if (this[kNeedDrain$2]) queueMicrotask(() => {
				if (this[kNeedDrain$2]) this[kOnDrain$1](client[kUrl$3], [this, client]);
			});
			return this;
		}
		[kRemoveClient$2](client) {
			client.close(() => {
				const idx = this[kClients$4].indexOf(client);
				if (idx !== -1) this[kClients$4].splice(idx, 1);
			});
			this[kNeedDrain$2] = this[kClients$4].some((dispatcher) => !dispatcher[kNeedDrain$2] && dispatcher.closed !== true && dispatcher.destroyed !== true);
		}
	};
	module.exports = {
		PoolBase: PoolBase$2,
		kClients: kClients$4,
		kNeedDrain: kNeedDrain$2,
		kAddClient: kAddClient$2,
		kRemoveClient: kRemoveClient$2,
		kGetDispatcher: kGetDispatcher$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/pool.js
var require_pool = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/pool.js"(exports, module) {
	const { PoolBase: PoolBase$1, kClients: kClients$3, kNeedDrain: kNeedDrain$1, kAddClient: kAddClient$1, kGetDispatcher: kGetDispatcher$1, kRemoveClient: kRemoveClient$1 } = require_pool_base();
	const Client$5 = require_client();
	const { InvalidArgumentError: InvalidArgumentError$23 } = require_errors();
	const util$16 = require_util$5();
	const { kUrl: kUrl$2 } = require_symbols();
	const buildConnector$2 = require_connect();
	const kOptions$3 = Symbol("options");
	const kConnections = Symbol("connections");
	const kFactory$3 = Symbol("factory");
	function defaultFactory$3(origin, opts) {
		return new Client$5(origin, opts);
	}
	var Pool$5 = class extends PoolBase$1 {
		constructor(origin, { connections, factory = defaultFactory$3, connect: connect$5, connectTimeout, tls: tls$3, maxCachedSessions, socketPath, autoSelectFamily, autoSelectFamilyAttemptTimeout, allowH2, clientTtl,...options } = {}) {
			if (connections != null && (!Number.isFinite(connections) || connections < 0)) throw new InvalidArgumentError$23("invalid connections");
			if (typeof factory !== "function") throw new InvalidArgumentError$23("factory must be a function.");
			if (connect$5 != null && typeof connect$5 !== "function" && typeof connect$5 !== "object") throw new InvalidArgumentError$23("connect must be a function or an object");
			super();
			if (typeof connect$5 !== "function") connect$5 = buildConnector$2({
				...tls$3,
				maxCachedSessions,
				allowH2,
				socketPath,
				timeout: connectTimeout,
				...typeof autoSelectFamily === "boolean" ? {
					autoSelectFamily,
					autoSelectFamilyAttemptTimeout
				} : void 0,
				...connect$5
			});
			this[kConnections] = connections || null;
			this[kUrl$2] = util$16.parseOrigin(origin);
			this[kOptions$3] = {
				...util$16.deepClone(options),
				connect: connect$5,
				allowH2,
				clientTtl
			};
			this[kOptions$3].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
			this[kFactory$3] = factory;
			this.on("connect", (origin$1, targets) => {
				if (clientTtl != null && clientTtl > 0) for (const target of targets) Object.assign(target, { ttl: Date.now() });
			});
			this.on("connectionError", (origin$1, targets, error$1) => {
				for (const target of targets) {
					const idx = this[kClients$3].indexOf(target);
					if (idx !== -1) this[kClients$3].splice(idx, 1);
				}
			});
		}
		[kGetDispatcher$1]() {
			const clientTtlOption = this[kOptions$3].clientTtl;
			for (const client of this[kClients$3]) if (clientTtlOption != null && clientTtlOption > 0 && client.ttl && Date.now() - client.ttl > clientTtlOption) this[kRemoveClient$1](client);
			else if (!client[kNeedDrain$1]) return client;
			if (!this[kConnections] || this[kClients$3].length < this[kConnections]) {
				const dispatcher = this[kFactory$3](this[kUrl$2], this[kOptions$3]);
				this[kAddClient$1](dispatcher);
				return dispatcher;
			}
		}
	};
	module.exports = Pool$5;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/balanced-pool.js
var require_balanced_pool = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/balanced-pool.js"(exports, module) {
	const { BalancedPoolMissingUpstreamError, InvalidArgumentError: InvalidArgumentError$22 } = require_errors();
	const { PoolBase, kClients: kClients$2, kNeedDrain, kAddClient, kRemoveClient, kGetDispatcher } = require_pool_base();
	const Pool$4 = require_pool();
	const { kUrl: kUrl$1 } = require_symbols();
	const { parseOrigin } = require_util$5();
	const kFactory$2 = Symbol("factory");
	const kOptions$2 = Symbol("options");
	const kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
	const kCurrentWeight = Symbol("kCurrentWeight");
	const kIndex = Symbol("kIndex");
	const kWeight = Symbol("kWeight");
	const kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
	const kErrorPenalty = Symbol("kErrorPenalty");
	/**
	* Calculate the greatest common divisor of two numbers by
	* using the Euclidean algorithm.
	*
	* @param {number} a
	* @param {number} b
	* @returns {number}
	*/
	function getGreatestCommonDivisor(a$1, b) {
		if (a$1 === 0) return b;
		while (b !== 0) {
			const t = b;
			b = a$1 % b;
			a$1 = t;
		}
		return a$1;
	}
	function defaultFactory$2(origin, opts) {
		return new Pool$4(origin, opts);
	}
	var BalancedPool$1 = class extends PoolBase {
		constructor(upstreams = [], { factory = defaultFactory$2,...opts } = {}) {
			if (typeof factory !== "function") throw new InvalidArgumentError$22("factory must be a function.");
			super();
			this[kOptions$2] = opts;
			this[kIndex] = -1;
			this[kCurrentWeight] = 0;
			this[kMaxWeightPerServer] = this[kOptions$2].maxWeightPerServer || 100;
			this[kErrorPenalty] = this[kOptions$2].errorPenalty || 15;
			if (!Array.isArray(upstreams)) upstreams = [upstreams];
			this[kFactory$2] = factory;
			for (const upstream of upstreams) this.addUpstream(upstream);
			this._updateBalancedPoolStats();
		}
		addUpstream(upstream) {
			const upstreamOrigin = parseOrigin(upstream).origin;
			if (this[kClients$2].find((pool$1) => pool$1[kUrl$1].origin === upstreamOrigin && pool$1.closed !== true && pool$1.destroyed !== true)) return this;
			const pool = this[kFactory$2](upstreamOrigin, Object.assign({}, this[kOptions$2]));
			this[kAddClient](pool);
			pool.on("connect", () => {
				pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
			});
			pool.on("connectionError", () => {
				pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
				this._updateBalancedPoolStats();
			});
			pool.on("disconnect", (...args) => {
				const err = args[2];
				if (err && err.code === "UND_ERR_SOCKET") {
					pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
					this._updateBalancedPoolStats();
				}
			});
			for (const client of this[kClients$2]) client[kWeight] = this[kMaxWeightPerServer];
			this._updateBalancedPoolStats();
			return this;
		}
		_updateBalancedPoolStats() {
			let result = 0;
			for (let i$1 = 0; i$1 < this[kClients$2].length; i$1++) result = getGreatestCommonDivisor(this[kClients$2][i$1][kWeight], result);
			this[kGreatestCommonDivisor] = result;
		}
		removeUpstream(upstream) {
			const upstreamOrigin = parseOrigin(upstream).origin;
			const pool = this[kClients$2].find((pool$1) => pool$1[kUrl$1].origin === upstreamOrigin && pool$1.closed !== true && pool$1.destroyed !== true);
			if (pool) this[kRemoveClient](pool);
			return this;
		}
		get upstreams() {
			return this[kClients$2].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p) => p[kUrl$1].origin);
		}
		[kGetDispatcher]() {
			if (this[kClients$2].length === 0) throw new BalancedPoolMissingUpstreamError();
			const dispatcher = this[kClients$2].find((dispatcher$1) => !dispatcher$1[kNeedDrain] && dispatcher$1.closed !== true && dispatcher$1.destroyed !== true);
			if (!dispatcher) return;
			const allClientsBusy = this[kClients$2].map((pool) => pool[kNeedDrain]).reduce((a$1, b) => a$1 && b, true);
			if (allClientsBusy) return;
			let counter = 0;
			let maxWeightIndex = this[kClients$2].findIndex((pool) => !pool[kNeedDrain]);
			while (counter++ < this[kClients$2].length) {
				this[kIndex] = (this[kIndex] + 1) % this[kClients$2].length;
				const pool = this[kClients$2][this[kIndex]];
				if (pool[kWeight] > this[kClients$2][maxWeightIndex][kWeight] && !pool[kNeedDrain]) maxWeightIndex = this[kIndex];
				if (this[kIndex] === 0) {
					this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];
					if (this[kCurrentWeight] <= 0) this[kCurrentWeight] = this[kMaxWeightPerServer];
				}
				if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) return pool;
			}
			this[kCurrentWeight] = this[kClients$2][maxWeightIndex][kWeight];
			this[kIndex] = maxWeightIndex;
			return this[kClients$2][maxWeightIndex];
		}
	};
	module.exports = BalancedPool$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/agent.js
var require_agent = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/agent.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$21 } = require_errors();
	const { kClients: kClients$1, kRunning, kClose: kClose$5, kDestroy: kDestroy$3, kDispatch: kDispatch$2, kUrl } = require_symbols();
	const DispatcherBase$3 = require_dispatcher_base();
	const Pool$3 = require_pool();
	const Client$4 = require_client();
	const util$15 = require_util$5();
	const kOnConnect = Symbol("onConnect");
	const kOnDisconnect = Symbol("onDisconnect");
	const kOnConnectionError = Symbol("onConnectionError");
	const kOnDrain = Symbol("onDrain");
	const kFactory$1 = Symbol("factory");
	const kOptions$1 = Symbol("options");
	function defaultFactory$1(origin, opts) {
		return opts && opts.connections === 1 ? new Client$4(origin, opts) : new Pool$3(origin, opts);
	}
	var Agent$5 = class extends DispatcherBase$3 {
		constructor({ factory = defaultFactory$1, connect: connect$5,...options } = {}) {
			if (typeof factory !== "function") throw new InvalidArgumentError$21("factory must be a function.");
			if (connect$5 != null && typeof connect$5 !== "function" && typeof connect$5 !== "object") throw new InvalidArgumentError$21("connect must be a function or an object");
			super();
			if (connect$5 && typeof connect$5 !== "function") connect$5 = { ...connect$5 };
			this[kOptions$1] = {
				...util$15.deepClone(options),
				connect: connect$5
			};
			this[kFactory$1] = factory;
			this[kClients$1] = /* @__PURE__ */ new Map();
			this[kOnDrain] = (origin, targets) => {
				this.emit("drain", origin, [this, ...targets]);
			};
			this[kOnConnect] = (origin, targets) => {
				const result = this[kClients$1].get(origin);
				if (result) result.count += 1;
				this.emit("connect", origin, [this, ...targets]);
			};
			this[kOnDisconnect] = (origin, targets, err) => {
				const result = this[kClients$1].get(origin);
				if (result) {
					result.count -= 1;
					if (result.count <= 0) {
						this[kClients$1].delete(origin);
						result.dispatcher.destroy();
					}
				}
				this.emit("disconnect", origin, [this, ...targets], err);
			};
			this[kOnConnectionError] = (origin, targets, err) => {
				this.emit("connectionError", origin, [this, ...targets], err);
			};
		}
		get [kRunning]() {
			let ret = 0;
			for (const { dispatcher } of this[kClients$1].values()) ret += dispatcher[kRunning];
			return ret;
		}
		[kDispatch$2](opts, handler$1) {
			let key;
			if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) key = String(opts.origin);
			else throw new InvalidArgumentError$21("opts.origin must be a non-empty string or URL.");
			const result = this[kClients$1].get(key);
			let dispatcher = result && result.dispatcher;
			if (!dispatcher) {
				dispatcher = this[kFactory$1](opts.origin, this[kOptions$1]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
				this[kClients$1].set(key, {
					count: 0,
					dispatcher
				});
			}
			return dispatcher.dispatch(opts, handler$1);
		}
		async [kClose$5]() {
			const closePromises = [];
			for (const { dispatcher } of this[kClients$1].values()) closePromises.push(dispatcher.close());
			this[kClients$1].clear();
			await Promise.all(closePromises);
		}
		async [kDestroy$3](err) {
			const destroyPromises = [];
			for (const { dispatcher } of this[kClients$1].values()) destroyPromises.push(dispatcher.destroy(err));
			this[kClients$1].clear();
			await Promise.all(destroyPromises);
		}
		get stats() {
			const allClientStats = {};
			for (const { dispatcher } of this[kClients$1].values()) if (dispatcher.stats) allClientStats[dispatcher[kUrl].origin] = dispatcher.stats;
			return allClientStats;
		}
	};
	module.exports = Agent$5;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/proxy-agent.js
var require_proxy_agent = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/proxy-agent.js"(exports, module) {
	const { kProxy, kClose: kClose$4, kDestroy: kDestroy$2, kDispatch: kDispatch$1, kConnector } = require_symbols();
	const { URL: URL$1 } = __require("node:url");
	const Agent$4 = require_agent();
	const Pool$2 = require_pool();
	const DispatcherBase$2 = require_dispatcher_base();
	const { InvalidArgumentError: InvalidArgumentError$20, RequestAbortedError: RequestAbortedError$5, SecureProxyConnectionError } = require_errors();
	const buildConnector$1 = require_connect();
	const Client$3 = require_client();
	const kAgent$1 = Symbol("proxy agent");
	const kClient = Symbol("proxy client");
	const kProxyHeaders = Symbol("proxy headers");
	const kRequestTls = Symbol("request tls settings");
	const kProxyTls = Symbol("proxy tls settings");
	const kConnectEndpoint = Symbol("connect endpoint function");
	const kTunnelProxy = Symbol("tunnel proxy");
	function defaultProtocolPort(protocol) {
		return protocol === "https:" ? 443 : 80;
	}
	function defaultFactory(origin, opts) {
		return new Pool$2(origin, opts);
	}
	const noop$8 = () => {};
	var ProxyClient = class extends DispatcherBase$2 {
		#client = null;
		constructor(origin, opts) {
			if (typeof origin === "string") origin = new URL$1(origin);
			if (origin.protocol !== "http:" && origin.protocol !== "https:") throw new InvalidArgumentError$20("ProxyClient only supports http and https protocols");
			super();
			this.#client = new Client$3(origin, opts);
		}
		async [kClose$4]() {
			await this.#client.close();
		}
		async [kDestroy$2]() {
			await this.#client.destroy();
		}
		async [kDispatch$1](opts, handler$1) {
			const { method, origin } = opts;
			if (method === "CONNECT") {
				this.#client[kConnector]({
					origin,
					port: opts.port || defaultProtocolPort(opts.protocol),
					path: opts.host,
					signal: opts.signal,
					headers: {
						...this[kProxyHeaders],
						host: opts.host
					},
					servername: this[kProxyTls]?.servername || opts.servername
				}, (err, socket) => {
					if (err) handler$1.callback(err);
					else handler$1.callback(null, {
						socket,
						statusCode: 200
					});
				});
				return;
			}
			if (typeof origin === "string") opts.origin = new URL$1(origin);
			return this.#client.dispatch(opts, handler$1);
		}
	};
	var ProxyAgent$3 = class extends DispatcherBase$2 {
		constructor(opts) {
			if (!opts || typeof opts === "object" && !(opts instanceof URL$1) && !opts.uri) throw new InvalidArgumentError$20("Proxy uri is mandatory");
			const { clientFactory = defaultFactory } = opts;
			if (typeof clientFactory !== "function") throw new InvalidArgumentError$20("Proxy opts.clientFactory must be a function.");
			const { proxyTunnel = true } = opts;
			super();
			const url = this.#getUrl(opts);
			const { href, origin, port, protocol, username, password, hostname: proxyHostname } = url;
			this[kProxy] = {
				uri: href,
				protocol
			};
			this[kRequestTls] = opts.requestTls;
			this[kProxyTls] = opts.proxyTls;
			this[kProxyHeaders] = opts.headers || {};
			if (opts.auth && opts.token) throw new InvalidArgumentError$20("opts.auth cannot be used in combination with opts.token");
			else if (opts.auth) this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
			else if (opts.token) this[kProxyHeaders]["proxy-authorization"] = opts.token;
			else if (username && password) this[kProxyHeaders]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
			const factory = !proxyTunnel && protocol === "http:" ? (origin$1, options) => {
				if (origin$1.protocol === "http:") return new ProxyClient(origin$1, options);
				return new Client$3(origin$1, options);
			} : void 0;
			const connect$5 = buildConnector$1({ ...opts.proxyTls });
			this[kConnectEndpoint] = buildConnector$1({ ...opts.requestTls });
			this[kClient] = clientFactory(url, {
				connect: connect$5,
				factory
			});
			this[kTunnelProxy] = proxyTunnel;
			this[kAgent$1] = new Agent$4({
				...opts,
				connect: async (opts$1, callback) => {
					let requestedPath = opts$1.host;
					if (!opts$1.port) requestedPath += `:${defaultProtocolPort(opts$1.protocol)}`;
					try {
						const { socket, statusCode } = await this[kClient].connect({
							origin,
							port,
							path: requestedPath,
							signal: opts$1.signal,
							headers: {
								...this[kProxyHeaders],
								host: opts$1.host,
								...opts$1.connections == null || opts$1.connections > 0 ? { "proxy-connection": "keep-alive" } : {}
							},
							servername: this[kProxyTls]?.servername || proxyHostname
						});
						if (statusCode !== 200) {
							socket.on("error", noop$8).destroy();
							callback(new RequestAbortedError$5(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
						}
						if (opts$1.protocol !== "https:") {
							callback(null, socket);
							return;
						}
						let servername;
						if (this[kRequestTls]) servername = this[kRequestTls].servername;
						else servername = opts$1.servername;
						this[kConnectEndpoint]({
							...opts$1,
							servername,
							httpSocket: socket
						}, callback);
					} catch (err) {
						if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") callback(new SecureProxyConnectionError(err));
						else callback(err);
					}
				}
			});
		}
		dispatch(opts, handler$1) {
			const headers = buildHeaders(opts.headers);
			throwIfProxyAuthIsSent(headers);
			if (headers && !("host" in headers) && !("Host" in headers)) {
				const { host } = new URL$1(opts.origin);
				headers.host = host;
			}
			if (!this.#shouldConnect(new URL$1(opts.origin))) opts.path = opts.origin + opts.path;
			return this[kAgent$1].dispatch({
				...opts,
				headers
			}, handler$1);
		}
		/**
		* @param {import('../types/proxy-agent').ProxyAgent.Options | string | URL} opts
		* @returns {URL}
		*/
		#getUrl(opts) {
			if (typeof opts === "string") return new URL$1(opts);
			else if (opts instanceof URL$1) return opts;
			else return new URL$1(opts.uri);
		}
		async [kClose$4]() {
			await this[kAgent$1].close();
			await this[kClient].close();
		}
		async [kDestroy$2]() {
			await this[kAgent$1].destroy();
			await this[kClient].destroy();
		}
		#shouldConnect(uri) {
			if (typeof uri === "string") uri = new URL$1(uri);
			if (this[kTunnelProxy]) return true;
			if (uri.protocol !== "http:" || this[kProxy].protocol !== "http:") return true;
			return false;
		}
	};
	/**
	* @param {string[] | Record<string, string>} headers
	* @returns {Record<string, string>}
	*/
	function buildHeaders(headers) {
		if (Array.isArray(headers)) {
			/** @type {Record<string, string>} */
			const headersPair = {};
			for (let i$1 = 0; i$1 < headers.length; i$1 += 2) headersPair[headers[i$1]] = headers[i$1 + 1];
			return headersPair;
		}
		return headers;
	}
	/**
	* @param {Record<string, string>} headers
	*
	* Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
	* Nevertheless, it was changed and to avoid a security vulnerability by end users
	* this check was created.
	* It should be removed in the next major version for performance reasons
	*/
	function throwIfProxyAuthIsSent(headers) {
		const existProxyAuth = headers && Object.keys(headers).find((key) => key.toLowerCase() === "proxy-authorization");
		if (existProxyAuth) throw new InvalidArgumentError$20("Proxy-Authorization should be sent in ProxyAgent constructor");
	}
	module.exports = ProxyAgent$3;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/env-http-proxy-agent.js
var require_env_http_proxy_agent = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/env-http-proxy-agent.js"(exports, module) {
	const DispatcherBase$1 = require_dispatcher_base();
	const { kClose: kClose$3, kDestroy: kDestroy$1, kClosed, kDestroyed, kDispatch, kNoProxyAgent, kHttpProxyAgent, kHttpsProxyAgent } = require_symbols();
	const ProxyAgent$2 = require_proxy_agent();
	const Agent$3 = require_agent();
	const DEFAULT_PORTS = {
		"http:": 80,
		"https:": 443
	};
	var EnvHttpProxyAgent$1 = class extends DispatcherBase$1 {
		#noProxyValue = null;
		#noProxyEntries = null;
		#opts = null;
		constructor(opts = {}) {
			super();
			this.#opts = opts;
			const { httpProxy, httpsProxy, noProxy,...agentOpts } = opts;
			this[kNoProxyAgent] = new Agent$3(agentOpts);
			const HTTP_PROXY = httpProxy ?? process.env.http_proxy ?? process.env.HTTP_PROXY;
			if (HTTP_PROXY) this[kHttpProxyAgent] = new ProxyAgent$2({
				...agentOpts,
				uri: HTTP_PROXY
			});
			else this[kHttpProxyAgent] = this[kNoProxyAgent];
			const HTTPS_PROXY = httpsProxy ?? process.env.https_proxy ?? process.env.HTTPS_PROXY;
			if (HTTPS_PROXY) this[kHttpsProxyAgent] = new ProxyAgent$2({
				...agentOpts,
				uri: HTTPS_PROXY
			});
			else this[kHttpsProxyAgent] = this[kHttpProxyAgent];
			this.#parseNoProxy();
		}
		[kDispatch](opts, handler$1) {
			const url = new URL(opts.origin);
			const agent = this.#getProxyAgentForUrl(url);
			return agent.dispatch(opts, handler$1);
		}
		async [kClose$3]() {
			await this[kNoProxyAgent].close();
			if (!this[kHttpProxyAgent][kClosed]) await this[kHttpProxyAgent].close();
			if (!this[kHttpsProxyAgent][kClosed]) await this[kHttpsProxyAgent].close();
		}
		async [kDestroy$1](err) {
			await this[kNoProxyAgent].destroy(err);
			if (!this[kHttpProxyAgent][kDestroyed]) await this[kHttpProxyAgent].destroy(err);
			if (!this[kHttpsProxyAgent][kDestroyed]) await this[kHttpsProxyAgent].destroy(err);
		}
		#getProxyAgentForUrl(url) {
			let { protocol, host: hostname, port } = url;
			hostname = hostname.replace(/:\d*$/, "").toLowerCase();
			port = Number.parseInt(port, 10) || DEFAULT_PORTS[protocol] || 0;
			if (!this.#shouldProxy(hostname, port)) return this[kNoProxyAgent];
			if (protocol === "https:") return this[kHttpsProxyAgent];
			return this[kHttpProxyAgent];
		}
		#shouldProxy(hostname, port) {
			if (this.#noProxyChanged) this.#parseNoProxy();
			if (this.#noProxyEntries.length === 0) return true;
			if (this.#noProxyValue === "*") return false;
			for (let i$1 = 0; i$1 < this.#noProxyEntries.length; i$1++) {
				const entry = this.#noProxyEntries[i$1];
				if (entry.port && entry.port !== port) continue;
				if (!/^[.*]/.test(entry.hostname)) {
					if (hostname === entry.hostname) return false;
				} else if (hostname.endsWith(entry.hostname.replace(/^\*/, ""))) return false;
			}
			return true;
		}
		#parseNoProxy() {
			const noProxyValue = this.#opts.noProxy ?? this.#noProxyEnv;
			const noProxySplit = noProxyValue.split(/[,\s]/);
			const noProxyEntries = [];
			for (let i$1 = 0; i$1 < noProxySplit.length; i$1++) {
				const entry = noProxySplit[i$1];
				if (!entry) continue;
				const parsed = entry.match(/^(.+):(\d+)$/);
				noProxyEntries.push({
					hostname: (parsed ? parsed[1] : entry).toLowerCase(),
					port: parsed ? Number.parseInt(parsed[2], 10) : 0
				});
			}
			this.#noProxyValue = noProxyValue;
			this.#noProxyEntries = noProxyEntries;
		}
		get #noProxyChanged() {
			if (this.#opts.noProxy !== void 0) return false;
			return this.#noProxyValue !== this.#noProxyEnv;
		}
		get #noProxyEnv() {
			return process.env.no_proxy ?? process.env.NO_PROXY ?? "";
		}
	};
	module.exports = EnvHttpProxyAgent$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/retry-handler.js
var require_retry_handler = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/retry-handler.js"(exports, module) {
	const assert$19 = __require("node:assert");
	const { kRetryHandlerDefaultRetry } = require_symbols();
	const { RequestRetryError } = require_errors();
	const WrapHandler$1 = require_wrap_handler();
	const { isDisturbed: isDisturbed$1, parseRangeHeader, wrapRequestBody } = require_util$5();
	function calculateRetryAfterHeader(retryAfter) {
		const retryTime = new Date(retryAfter).getTime();
		return isNaN(retryTime) ? 0 : retryTime - Date.now();
	}
	var RetryHandler$3 = class RetryHandler$3 {
		constructor(opts, { dispatch, handler: handler$1 }) {
			const { retryOptions,...dispatchOpts } = opts;
			const { retry: retryFn, maxRetries, maxTimeout, minTimeout, timeoutFactor, methods, errorCodes, retryAfter, statusCodes, throwOnError } = retryOptions ?? {};
			this.error = null;
			this.dispatch = dispatch;
			this.handler = WrapHandler$1.wrap(handler$1);
			this.opts = {
				...dispatchOpts,
				body: wrapRequestBody(opts.body)
			};
			this.retryOpts = {
				throwOnError: throwOnError ?? true,
				retry: retryFn ?? RetryHandler$3[kRetryHandlerDefaultRetry],
				retryAfter: retryAfter ?? true,
				maxTimeout: maxTimeout ?? 30 * 1e3,
				minTimeout: minTimeout ?? 500,
				timeoutFactor: timeoutFactor ?? 2,
				maxRetries: maxRetries ?? 5,
				methods: methods ?? [
					"GET",
					"HEAD",
					"OPTIONS",
					"PUT",
					"DELETE",
					"TRACE"
				],
				statusCodes: statusCodes ?? [
					500,
					502,
					503,
					504,
					429
				],
				errorCodes: errorCodes ?? [
					"ECONNRESET",
					"ECONNREFUSED",
					"ENOTFOUND",
					"ENETDOWN",
					"ENETUNREACH",
					"EHOSTDOWN",
					"EHOSTUNREACH",
					"EPIPE",
					"UND_ERR_SOCKET"
				]
			};
			this.retryCount = 0;
			this.retryCountCheckpoint = 0;
			this.headersSent = false;
			this.start = 0;
			this.end = null;
			this.etag = null;
		}
		onResponseStartWithRetry(controller, statusCode, headers, statusMessage, err) {
			if (this.retryOpts.throwOnError) {
				if (this.retryOpts.statusCodes.includes(statusCode) === false) {
					this.headersSent = true;
					this.handler.onResponseStart?.(controller, statusCode, headers, statusMessage);
				} else this.error = err;
				return;
			}
			if (isDisturbed$1(this.opts.body)) {
				this.headersSent = true;
				this.handler.onResponseStart?.(controller, statusCode, headers, statusMessage);
				return;
			}
			function shouldRetry(passedErr) {
				if (passedErr) {
					this.headersSent = true;
					this.headersSent = true;
					this.handler.onResponseStart?.(controller, statusCode, headers, statusMessage);
					controller.resume();
					return;
				}
				this.error = err;
				controller.resume();
			}
			controller.pause();
			this.retryOpts.retry(err, {
				state: { counter: this.retryCount },
				opts: {
					retryOptions: this.retryOpts,
					...this.opts
				}
			}, shouldRetry.bind(this));
		}
		onRequestStart(controller, context$1) {
			if (!this.headersSent) this.handler.onRequestStart?.(controller, context$1);
		}
		onRequestUpgrade(controller, statusCode, headers, socket) {
			this.handler.onRequestUpgrade?.(controller, statusCode, headers, socket);
		}
		static [kRetryHandlerDefaultRetry](err, { state, opts }, cb) {
			const { statusCode, code, headers } = err;
			const { method, retryOptions } = opts;
			const { maxRetries, minTimeout, maxTimeout, timeoutFactor, statusCodes, errorCodes, methods } = retryOptions;
			const { counter } = state;
			if (code && code !== "UND_ERR_REQ_RETRY" && !errorCodes.includes(code)) {
				cb(err);
				return;
			}
			if (Array.isArray(methods) && !methods.includes(method)) {
				cb(err);
				return;
			}
			if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
				cb(err);
				return;
			}
			if (counter > maxRetries) {
				cb(err);
				return;
			}
			let retryAfterHeader = headers?.["retry-after"];
			if (retryAfterHeader) {
				retryAfterHeader = Number(retryAfterHeader);
				retryAfterHeader = Number.isNaN(retryAfterHeader) ? calculateRetryAfterHeader(headers["retry-after"]) : retryAfterHeader * 1e3;
			}
			const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(minTimeout * timeoutFactor ** (counter - 1), maxTimeout);
			setTimeout(() => cb(null), retryTimeout);
		}
		onResponseStart(controller, statusCode, headers, statusMessage) {
			this.error = null;
			this.retryCount += 1;
			if (statusCode >= 300) {
				const err = new RequestRetryError("Request failed", statusCode, {
					headers,
					data: { count: this.retryCount }
				});
				this.onResponseStartWithRetry(controller, statusCode, headers, statusMessage, err);
				return;
			}
			if (this.headersSent) {
				if (statusCode !== 206 && (this.start > 0 || statusCode !== 200)) throw new RequestRetryError("server does not support the range header and the payload was partially consumed", statusCode, {
					headers,
					data: { count: this.retryCount }
				});
				const contentRange = parseRangeHeader(headers["content-range"]);
				if (!contentRange) throw new RequestRetryError("Content-Range mismatch", statusCode, {
					headers,
					data: { count: this.retryCount }
				});
				if (this.etag != null && this.etag !== headers.etag) throw new RequestRetryError("ETag mismatch", statusCode, {
					headers,
					data: { count: this.retryCount }
				});
				const { start, size, end = size ? size - 1 : null } = contentRange;
				assert$19(this.start === start, "content-range mismatch");
				assert$19(this.end == null || this.end === end, "content-range mismatch");
				return;
			}
			if (this.end == null) {
				if (statusCode === 206) {
					const range = parseRangeHeader(headers["content-range"]);
					if (range == null) {
						this.headersSent = true;
						this.handler.onResponseStart?.(controller, statusCode, headers, statusMessage);
						return;
					}
					const { start, size, end = size ? size - 1 : null } = range;
					assert$19(start != null && Number.isFinite(start), "content-range mismatch");
					assert$19(end != null && Number.isFinite(end), "invalid content-length");
					this.start = start;
					this.end = end;
				}
				if (this.end == null) {
					const contentLength = headers["content-length"];
					this.end = contentLength != null ? Number(contentLength) - 1 : null;
				}
				assert$19(Number.isFinite(this.start));
				assert$19(this.end == null || Number.isFinite(this.end), "invalid content-length");
				this.resume = true;
				this.etag = headers.etag != null ? headers.etag : null;
				if (this.etag != null && this.etag[0] === "W" && this.etag[1] === "/") this.etag = null;
				this.headersSent = true;
				this.handler.onResponseStart?.(controller, statusCode, headers, statusMessage);
			} else throw new RequestRetryError("Request failed", statusCode, {
				headers,
				data: { count: this.retryCount }
			});
		}
		onResponseData(controller, chunk) {
			if (this.error) return;
			this.start += chunk.length;
			this.handler.onResponseData?.(controller, chunk);
		}
		onResponseEnd(controller, trailers) {
			if (this.error && this.retryOpts.throwOnError) throw this.error;
			if (!this.error) {
				this.retryCount = 0;
				return this.handler.onResponseEnd?.(controller, trailers);
			}
			this.retry(controller);
		}
		retry(controller) {
			if (this.start !== 0) {
				const headers = { range: `bytes=${this.start}-${this.end ?? ""}` };
				if (this.etag != null) headers["if-match"] = this.etag;
				this.opts = {
					...this.opts,
					headers: {
						...this.opts.headers,
						...headers
					}
				};
			}
			try {
				this.retryCountCheckpoint = this.retryCount;
				this.dispatch(this.opts, this);
			} catch (err) {
				this.handler.onResponseError?.(controller, err);
			}
		}
		onResponseError(controller, err) {
			if (controller?.aborted || isDisturbed$1(this.opts.body)) {
				this.handler.onResponseError?.(controller, err);
				return;
			}
			function shouldRetry(returnedErr) {
				if (!returnedErr) {
					this.retry(controller);
					return;
				}
				this.handler?.onResponseError?.(controller, returnedErr);
			}
			if (this.retryCount - this.retryCountCheckpoint > 0) this.retryCount = this.retryCountCheckpoint + (this.retryCount - this.retryCountCheckpoint);
			else this.retryCount += 1;
			this.retryOpts.retry(err, {
				state: { counter: this.retryCount },
				opts: {
					retryOptions: this.retryOpts,
					...this.opts
				}
			}, shouldRetry.bind(this));
		}
	};
	module.exports = RetryHandler$3;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/retry-agent.js
var require_retry_agent = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/retry-agent.js"(exports, module) {
	const Dispatcher$2 = require_dispatcher();
	const RetryHandler$2 = require_retry_handler();
	var RetryAgent$1 = class extends Dispatcher$2 {
		#agent = null;
		#options = null;
		constructor(agent, options = {}) {
			super(options);
			this.#agent = agent;
			this.#options = options;
		}
		dispatch(opts, handler$1) {
			const retry = new RetryHandler$2({
				...opts,
				retryOptions: this.#options
			}, {
				dispatch: this.#agent.dispatch.bind(this.#agent),
				handler: handler$1
			});
			return this.#agent.dispatch(opts, retry);
		}
		close() {
			return this.#agent.close();
		}
		destroy() {
			return this.#agent.destroy();
		}
	};
	module.exports = RetryAgent$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/h2c-client.js
var require_h2c_client = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/dispatcher/h2c-client.js"(exports, module) {
	const { connect: connect$1 } = __require("node:net");
	const { kClose: kClose$2, kDestroy } = require_symbols();
	const { InvalidArgumentError: InvalidArgumentError$19 } = require_errors();
	const util$14 = require_util$5();
	const Client$2 = require_client();
	const DispatcherBase = require_dispatcher_base();
	var H2CClient$1 = class extends DispatcherBase {
		#client = null;
		constructor(origin, clientOpts) {
			super();
			if (typeof origin === "string") origin = new URL(origin);
			if (origin.protocol !== "http:") throw new InvalidArgumentError$19("h2c-client: Only h2c protocol is supported");
			const { connect: connect$5, maxConcurrentStreams, pipelining,...opts } = clientOpts ?? {};
			let defaultMaxConcurrentStreams = 100;
			let defaultPipelining = 100;
			if (maxConcurrentStreams != null && Number.isInteger(maxConcurrentStreams) && maxConcurrentStreams > 0) defaultMaxConcurrentStreams = maxConcurrentStreams;
			if (pipelining != null && Number.isInteger(pipelining) && pipelining > 0) defaultPipelining = pipelining;
			if (defaultPipelining > defaultMaxConcurrentStreams) throw new InvalidArgumentError$19("h2c-client: pipelining cannot be greater than maxConcurrentStreams");
			this.#client = new Client$2(origin, {
				...opts,
				connect: this.#buildConnector(connect$5),
				maxConcurrentStreams: defaultMaxConcurrentStreams,
				pipelining: defaultPipelining,
				allowH2: true
			});
		}
		#buildConnector(connectOpts) {
			return (opts, callback) => {
				const timeout = connectOpts?.connectOpts ?? 1e4;
				const { hostname, port, pathname } = opts;
				const socket = connect$1({
					...opts,
					host: hostname,
					port,
					pathname
				});
				if (opts.keepAlive == null || opts.keepAlive) {
					const keepAliveInitialDelay = opts.keepAliveInitialDelay == null ? 6e4 : opts.keepAliveInitialDelay;
					socket.setKeepAlive(true, keepAliveInitialDelay);
				}
				socket.alpnProtocol = "h2";
				const clearConnectTimeout = util$14.setupConnectTimeout(new WeakRef(socket), {
					timeout,
					hostname,
					port
				});
				socket.setNoDelay(true).once("connect", function() {
					queueMicrotask(clearConnectTimeout);
					if (callback) {
						const cb = callback;
						callback = null;
						cb(null, this);
					}
				}).on("error", function(err) {
					queueMicrotask(clearConnectTimeout);
					if (callback) {
						const cb = callback;
						callback = null;
						cb(err);
					}
				});
				return socket;
			};
		}
		dispatch(opts, handler$1) {
			return this.#client.dispatch(opts, handler$1);
		}
		async [kClose$2]() {
			await this.#client.close();
		}
		async [kDestroy]() {
			await this.#client.destroy();
		}
	};
	module.exports = H2CClient$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/readable.js
var require_readable = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/readable.js"(exports, module) {
	const assert$18 = __require("node:assert");
	const { Readable: Readable$5 } = __require("node:stream");
	const { RequestAbortedError: RequestAbortedError$4, NotSupportedError, InvalidArgumentError: InvalidArgumentError$18, AbortError: AbortError$1 } = require_errors();
	const util$13 = require_util$5();
	const { ReadableStreamFrom } = require_util$5();
	const kConsume = Symbol("kConsume");
	const kReading = Symbol("kReading");
	const kBody$1 = Symbol("kBody");
	const kAbort = Symbol("kAbort");
	const kContentType = Symbol("kContentType");
	const kContentLength$1 = Symbol("kContentLength");
	const kUsed = Symbol("kUsed");
	const kBytesRead = Symbol("kBytesRead");
	const noop$7 = () => {};
	/**
	* @class
	* @extends {Readable}
	* @see https://fetch.spec.whatwg.org/#body
	*/
	var BodyReadable = class extends Readable$5 {
		/**
		* @param {object} opts
		* @param {(this: Readable, size: number) => void} opts.resume
		* @param {() => (void | null)} opts.abort
		* @param {string} [opts.contentType = '']
		* @param {number} [opts.contentLength]
		* @param {number} [opts.highWaterMark = 64 * 1024]
		*/
		constructor({ resume: resume$2, abort: abort$2, contentType = "", contentLength, highWaterMark = 64 * 1024 }) {
			super({
				autoDestroy: true,
				read: resume$2,
				highWaterMark
			});
			this._readableState.dataEmitted = false;
			this[kAbort] = abort$2;
			/**
			* @type {Consume | null}
			*/
			this[kConsume] = null;
			this[kBytesRead] = 0;
			/**
			* @type {ReadableStream|null}
			*/
			this[kBody$1] = null;
			this[kUsed] = false;
			this[kContentType] = contentType;
			this[kContentLength$1] = Number.isFinite(contentLength) ? contentLength : null;
			this[kReading] = false;
		}
		/**
		* @param {Error|null} err
		* @param {(error:(Error|null)) => void} callback
		* @returns {void}
		*/
		_destroy(err, callback) {
			if (!err && !this._readableState.endEmitted) err = new RequestAbortedError$4();
			if (err) this[kAbort]();
			if (!this[kUsed]) setImmediate(callback, err);
			else callback(err);
		}
		/**
		* @param {string} event
		* @param {(...args: any[]) => void} listener
		* @returns {this}
		*/
		on(event, listener) {
			if (event === "data" || event === "readable") {
				this[kReading] = true;
				this[kUsed] = true;
			}
			return super.on(event, listener);
		}
		/**
		* @param {string} event
		* @param {(...args: any[]) => void} listener
		* @returns {this}
		*/
		addListener(event, listener) {
			return this.on(event, listener);
		}
		/**
		* @param {string|symbol} event
		* @param {(...args: any[]) => void} listener
		* @returns {this}
		*/
		off(event, listener) {
			const ret = super.off(event, listener);
			if (event === "data" || event === "readable") this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
			return ret;
		}
		/**
		* @param {string|symbol} event
		* @param {(...args: any[]) => void} listener
		* @returns {this}
		*/
		removeListener(event, listener) {
			return this.off(event, listener);
		}
		/**
		* @param {Buffer|null} chunk
		* @returns {boolean}
		*/
		push(chunk) {
			this[kBytesRead] += chunk ? chunk.length : 0;
			if (this[kConsume] && chunk !== null) {
				consumePush(this[kConsume], chunk);
				return this[kReading] ? super.push(chunk) : true;
			}
			return super.push(chunk);
		}
		/**
		* Consumes and returns the body as a string.
		*
		* @see https://fetch.spec.whatwg.org/#dom-body-text
		* @returns {Promise<string>}
		*/
		text() {
			return consume(this, "text");
		}
		/**
		* Consumes and returns the body as a JavaScript Object.
		*
		* @see https://fetch.spec.whatwg.org/#dom-body-json
		* @returns {Promise<unknown>}
		*/
		json() {
			return consume(this, "json");
		}
		/**
		* Consumes and returns the body as a Blob
		*
		* @see https://fetch.spec.whatwg.org/#dom-body-blob
		* @returns {Promise<Blob>}
		*/
		blob() {
			return consume(this, "blob");
		}
		/**
		* Consumes and returns the body as an Uint8Array.
		*
		* @see https://fetch.spec.whatwg.org/#dom-body-bytes
		* @returns {Promise<Uint8Array>}
		*/
		bytes() {
			return consume(this, "bytes");
		}
		/**
		* Consumes and returns the body as an ArrayBuffer.
		*
		* @see https://fetch.spec.whatwg.org/#dom-body-arraybuffer
		* @returns {Promise<ArrayBuffer>}
		*/
		arrayBuffer() {
			return consume(this, "arrayBuffer");
		}
		/**
		* Not implemented
		*
		* @see https://fetch.spec.whatwg.org/#dom-body-formdata
		* @throws {NotSupportedError}
		*/
		async formData() {
			throw new NotSupportedError();
		}
		/**
		* Returns true if the body is not null and the body has been consumed.
		* Otherwise, returns false.
		*
		* @see https://fetch.spec.whatwg.org/#dom-body-bodyused
		* @readonly
		* @returns {boolean}
		*/
		get bodyUsed() {
			return util$13.isDisturbed(this);
		}
		/**
		* @see https://fetch.spec.whatwg.org/#dom-body-body
		* @readonly
		* @returns {ReadableStream}
		*/
		get body() {
			if (!this[kBody$1]) {
				this[kBody$1] = ReadableStreamFrom(this);
				if (this[kConsume]) {
					this[kBody$1].getReader();
					assert$18(this[kBody$1].locked);
				}
			}
			return this[kBody$1];
		}
		/**
		* Dumps the response body by reading `limit` number of bytes.
		* @param {object} opts
		* @param {number} [opts.limit = 131072] Number of bytes to read.
		* @param {AbortSignal} [opts.signal] An AbortSignal to cancel the dump.
		* @returns {Promise<null>}
		*/
		async dump(opts) {
			const signal = opts?.signal;
			if (signal != null && (typeof signal !== "object" || !("aborted" in signal))) throw new InvalidArgumentError$18("signal must be an AbortSignal");
			const limit = opts?.limit && Number.isFinite(opts.limit) ? opts.limit : 128 * 1024;
			signal?.throwIfAborted();
			if (this._readableState.closeEmitted) return null;
			return await new Promise((resolve$1, reject) => {
				if (this[kContentLength$1] && this[kContentLength$1] > limit || this[kBytesRead] > limit) this.destroy(new AbortError$1());
				if (signal) {
					const onAbort = () => {
						this.destroy(signal.reason ?? new AbortError$1());
					};
					signal.addEventListener("abort", onAbort);
					this.on("close", function() {
						signal.removeEventListener("abort", onAbort);
						if (signal.aborted) reject(signal.reason ?? new AbortError$1());
						else resolve$1(null);
					});
				} else this.on("close", resolve$1);
				this.on("error", noop$7).on("data", () => {
					if (this[kBytesRead] > limit) this.destroy();
				}).resume();
			});
		}
		/**
		* @param {BufferEncoding} encoding
		* @returns {this}
		*/
		setEncoding(encoding) {
			if (Buffer.isEncoding(encoding)) this._readableState.encoding = encoding;
			return this;
		}
	};
	/**
	* @see https://streams.spec.whatwg.org/#readablestream-locked
	* @param {BodyReadable} bodyReadable
	* @returns {boolean}
	*/
	function isLocked(bodyReadable) {
		return bodyReadable[kBody$1]?.locked === true || bodyReadable[kConsume] !== null;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#body-unusable
	* @param {BodyReadable} bodyReadable
	* @returns {boolean}
	*/
	function isUnusable(bodyReadable) {
		return util$13.isDisturbed(bodyReadable) || isLocked(bodyReadable);
	}
	/**
	* @typedef {object} Consume
	* @property {string} type
	* @property {BodyReadable} stream
	* @property {((value?: any) => void)} resolve
	* @property {((err: Error) => void)} reject
	* @property {number} length
	* @property {Buffer[]} body
	*/
	/**
	* @param {BodyReadable} stream
	* @param {string} type
	* @returns {Promise<any>}
	*/
	function consume(stream$4, type) {
		assert$18(!stream$4[kConsume]);
		return new Promise((resolve$1, reject) => {
			if (isUnusable(stream$4)) {
				const rState = stream$4._readableState;
				if (rState.destroyed && rState.closeEmitted === false) stream$4.on("error", (err) => {
					reject(err);
				}).on("close", () => {
					reject(/* @__PURE__ */ new TypeError("unusable"));
				});
				else reject(rState.errored ?? /* @__PURE__ */ new TypeError("unusable"));
			} else queueMicrotask(() => {
				stream$4[kConsume] = {
					type,
					stream: stream$4,
					resolve: resolve$1,
					reject,
					length: 0,
					body: []
				};
				stream$4.on("error", function(err) {
					consumeFinish(this[kConsume], err);
				}).on("close", function() {
					if (this[kConsume].body !== null) consumeFinish(this[kConsume], new RequestAbortedError$4());
				});
				consumeStart(stream$4[kConsume]);
			});
		});
	}
	/**
	* @param {Consume} consume
	* @returns {void}
	*/
	function consumeStart(consume$2) {
		if (consume$2.body === null) return;
		const { _readableState: state } = consume$2.stream;
		if (state.bufferIndex) {
			const start = state.bufferIndex;
			const end = state.buffer.length;
			for (let n$1 = start; n$1 < end; n$1++) consumePush(consume$2, state.buffer[n$1]);
		} else for (const chunk of state.buffer) consumePush(consume$2, chunk);
		if (state.endEmitted) consumeEnd(this[kConsume], this._readableState.encoding);
		else consume$2.stream.on("end", function() {
			consumeEnd(this[kConsume], this._readableState.encoding);
		});
		consume$2.stream.resume();
		while (consume$2.stream.read() != null);
	}
	/**
	* @param {Buffer[]} chunks
	* @param {number} length
	* @param {BufferEncoding} encoding
	* @returns {string}
	*/
	function chunksDecode(chunks, length, encoding) {
		if (chunks.length === 0 || length === 0) return "";
		const buffer$1 = chunks.length === 1 ? chunks[0] : Buffer.concat(chunks, length);
		const bufferLength = buffer$1.length;
		const start = bufferLength > 2 && buffer$1[0] === 239 && buffer$1[1] === 187 && buffer$1[2] === 191 ? 3 : 0;
		if (!encoding || encoding === "utf8" || encoding === "utf-8") return buffer$1.utf8Slice(start, bufferLength);
		else return buffer$1.subarray(start, bufferLength).toString(encoding);
	}
	/**
	* @param {Buffer[]} chunks
	* @param {number} length
	* @returns {Uint8Array}
	*/
	function chunksConcat(chunks, length) {
		if (chunks.length === 0 || length === 0) return new Uint8Array(0);
		if (chunks.length === 1) return new Uint8Array(chunks[0]);
		const buffer$1 = new Uint8Array(Buffer.allocUnsafeSlow(length).buffer);
		let offset = 0;
		for (let i$1 = 0; i$1 < chunks.length; ++i$1) {
			const chunk = chunks[i$1];
			buffer$1.set(chunk, offset);
			offset += chunk.length;
		}
		return buffer$1;
	}
	/**
	* @param {Consume} consume
	* @param {BufferEncoding} encoding
	* @returns {void}
	*/
	function consumeEnd(consume$2, encoding) {
		const { type, body, resolve: resolve$1, stream: stream$4, length } = consume$2;
		try {
			if (type === "text") resolve$1(chunksDecode(body, length, encoding));
			else if (type === "json") resolve$1(JSON.parse(chunksDecode(body, length, encoding)));
			else if (type === "arrayBuffer") resolve$1(chunksConcat(body, length).buffer);
			else if (type === "blob") resolve$1(new Blob(body, { type: stream$4[kContentType] }));
			else if (type === "bytes") resolve$1(chunksConcat(body, length));
			consumeFinish(consume$2);
		} catch (err) {
			stream$4.destroy(err);
		}
	}
	/**
	* @param {Consume} consume
	* @param {Buffer} chunk
	* @returns {void}
	*/
	function consumePush(consume$2, chunk) {
		consume$2.length += chunk.length;
		consume$2.body.push(chunk);
	}
	/**
	* @param {Consume} consume
	* @param {Error} [err]
	* @returns {void}
	*/
	function consumeFinish(consume$2, err) {
		if (consume$2.body === null) return;
		if (err) consume$2.reject(err);
		else consume$2.resolve();
		consume$2.type = null;
		consume$2.stream = null;
		consume$2.resolve = null;
		consume$2.reject = null;
		consume$2.length = 0;
		consume$2.body = null;
	}
	module.exports = {
		Readable: BodyReadable,
		chunksDecode
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/api-request.js
var require_api_request = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/api-request.js"(exports, module) {
	const assert$17 = __require("node:assert");
	const { AsyncResource: AsyncResource$4 } = __require("node:async_hooks");
	const { Readable: Readable$4 } = require_readable();
	const { InvalidArgumentError: InvalidArgumentError$17, RequestAbortedError: RequestAbortedError$3 } = require_errors();
	const util$12 = require_util$5();
	function noop$6() {}
	var RequestHandler = class extends AsyncResource$4 {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$17("invalid opts");
			const { signal, method, opaque, body, onInfo, responseHeaders, highWaterMark } = opts;
			try {
				if (typeof callback !== "function") throw new InvalidArgumentError$17("invalid callback");
				if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) throw new InvalidArgumentError$17("invalid highWaterMark");
				if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$17("signal must be an EventEmitter or EventTarget");
				if (method === "CONNECT") throw new InvalidArgumentError$17("invalid method");
				if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$17("invalid onInfo callback");
				super("UNDICI_REQUEST");
			} catch (err) {
				if (util$12.isStream(body)) util$12.destroy(body.on("error", noop$6), err);
				throw err;
			}
			this.method = method;
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.callback = callback;
			this.res = null;
			this.abort = null;
			this.body = body;
			this.trailers = {};
			this.context = null;
			this.onInfo = onInfo || null;
			this.highWaterMark = highWaterMark;
			this.reason = null;
			this.removeAbortListener = null;
			if (signal?.aborted) this.reason = signal.reason ?? new RequestAbortedError$3();
			else if (signal) this.removeAbortListener = util$12.addAbortListener(signal, () => {
				this.reason = signal.reason ?? new RequestAbortedError$3();
				if (this.res) util$12.destroy(this.res.on("error", noop$6), this.reason);
				else if (this.abort) this.abort(this.reason);
			});
		}
		onConnect(abort$2, context$1) {
			if (this.reason) {
				abort$2(this.reason);
				return;
			}
			assert$17(this.callback);
			this.abort = abort$2;
			this.context = context$1;
		}
		onHeaders(statusCode, rawHeaders, resume$2, statusMessage) {
			const { callback, opaque, abort: abort$2, context: context$1, responseHeaders, highWaterMark } = this;
			const headers = responseHeaders === "raw" ? util$12.parseRawHeaders(rawHeaders) : util$12.parseHeaders(rawHeaders);
			if (statusCode < 200) {
				if (this.onInfo) this.onInfo({
					statusCode,
					headers
				});
				return;
			}
			const parsedHeaders = responseHeaders === "raw" ? util$12.parseHeaders(rawHeaders) : headers;
			const contentType = parsedHeaders["content-type"];
			const contentLength = parsedHeaders["content-length"];
			const res = new Readable$4({
				resume: resume$2,
				abort: abort$2,
				contentType,
				contentLength: this.method !== "HEAD" && contentLength ? Number(contentLength) : null,
				highWaterMark
			});
			if (this.removeAbortListener) {
				res.on("close", this.removeAbortListener);
				this.removeAbortListener = null;
			}
			this.callback = null;
			this.res = res;
			if (callback !== null) this.runInAsyncScope(callback, null, null, {
				statusCode,
				headers,
				trailers: this.trailers,
				opaque,
				body: res,
				context: context$1
			});
		}
		onData(chunk) {
			return this.res.push(chunk);
		}
		onComplete(trailers) {
			util$12.parseHeaders(trailers, this.trailers);
			this.res.push(null);
		}
		onError(err) {
			const { res, callback, body, opaque } = this;
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
			if (res) {
				this.res = null;
				queueMicrotask(() => {
					util$12.destroy(res.on("error", noop$6), err);
				});
			}
			if (body) {
				this.body = null;
				if (util$12.isStream(body)) {
					body.on("error", noop$6);
					util$12.destroy(body, err);
				}
			}
			if (this.removeAbortListener) {
				this.removeAbortListener();
				this.removeAbortListener = null;
			}
		}
	};
	function request(opts, callback) {
		if (callback === void 0) return new Promise((resolve$1, reject) => {
			request.call(this, opts, (err, data$1) => {
				return err ? reject(err) : resolve$1(data$1);
			});
		});
		try {
			const handler$1 = new RequestHandler(opts, callback);
			this.dispatch(opts, handler$1);
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts?.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = request;
	module.exports.RequestHandler = RequestHandler;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/abort-signal.js
var require_abort_signal = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/abort-signal.js"(exports, module) {
	const { addAbortListener: addAbortListener$2 } = require_util$5();
	const { RequestAbortedError: RequestAbortedError$2 } = require_errors();
	const kListener = Symbol("kListener");
	const kSignal = Symbol("kSignal");
	function abort(self$1) {
		if (self$1.abort) self$1.abort(self$1[kSignal]?.reason);
		else self$1.reason = self$1[kSignal]?.reason ?? new RequestAbortedError$2();
		removeSignal$4(self$1);
	}
	function addSignal$4(self$1, signal) {
		self$1.reason = null;
		self$1[kSignal] = null;
		self$1[kListener] = null;
		if (!signal) return;
		if (signal.aborted) {
			abort(self$1);
			return;
		}
		self$1[kSignal] = signal;
		self$1[kListener] = () => {
			abort(self$1);
		};
		addAbortListener$2(self$1[kSignal], self$1[kListener]);
	}
	function removeSignal$4(self$1) {
		if (!self$1[kSignal]) return;
		if ("removeEventListener" in self$1[kSignal]) self$1[kSignal].removeEventListener("abort", self$1[kListener]);
		else self$1[kSignal].removeListener("abort", self$1[kListener]);
		self$1[kSignal] = null;
		self$1[kListener] = null;
	}
	module.exports = {
		addSignal: addSignal$4,
		removeSignal: removeSignal$4
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/api-stream.js
var require_api_stream = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/api-stream.js"(exports, module) {
	const assert$16 = __require("node:assert");
	const { finished: finished$2 } = __require("node:stream");
	const { AsyncResource: AsyncResource$3 } = __require("node:async_hooks");
	const { InvalidArgumentError: InvalidArgumentError$16, InvalidReturnValueError: InvalidReturnValueError$1 } = require_errors();
	const util$11 = require_util$5();
	const { addSignal: addSignal$3, removeSignal: removeSignal$3 } = require_abort_signal();
	function noop$5() {}
	var StreamHandler = class extends AsyncResource$3 {
		constructor(opts, factory, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$16("invalid opts");
			const { signal, method, opaque, body, onInfo, responseHeaders } = opts;
			try {
				if (typeof callback !== "function") throw new InvalidArgumentError$16("invalid callback");
				if (typeof factory !== "function") throw new InvalidArgumentError$16("invalid factory");
				if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$16("signal must be an EventEmitter or EventTarget");
				if (method === "CONNECT") throw new InvalidArgumentError$16("invalid method");
				if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$16("invalid onInfo callback");
				super("UNDICI_STREAM");
			} catch (err) {
				if (util$11.isStream(body)) util$11.destroy(body.on("error", noop$5), err);
				throw err;
			}
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.factory = factory;
			this.callback = callback;
			this.res = null;
			this.abort = null;
			this.context = null;
			this.trailers = null;
			this.body = body;
			this.onInfo = onInfo || null;
			if (util$11.isStream(body)) body.on("error", (err) => {
				this.onError(err);
			});
			addSignal$3(this, signal);
		}
		onConnect(abort$2, context$1) {
			if (this.reason) {
				abort$2(this.reason);
				return;
			}
			assert$16(this.callback);
			this.abort = abort$2;
			this.context = context$1;
		}
		onHeaders(statusCode, rawHeaders, resume$2, statusMessage) {
			const { factory, opaque, context: context$1, responseHeaders } = this;
			const headers = responseHeaders === "raw" ? util$11.parseRawHeaders(rawHeaders) : util$11.parseHeaders(rawHeaders);
			if (statusCode < 200) {
				if (this.onInfo) this.onInfo({
					statusCode,
					headers
				});
				return;
			}
			this.factory = null;
			if (factory === null) return;
			const res = this.runInAsyncScope(factory, null, {
				statusCode,
				headers,
				opaque,
				context: context$1
			});
			if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") throw new InvalidReturnValueError$1("expected Writable");
			finished$2(res, { readable: false }, (err) => {
				const { callback, res: res$1, opaque: opaque$1, trailers, abort: abort$2 } = this;
				this.res = null;
				if (err || !res$1?.readable) util$11.destroy(res$1, err);
				this.callback = null;
				this.runInAsyncScope(callback, null, err || null, {
					opaque: opaque$1,
					trailers
				});
				if (err) abort$2();
			});
			res.on("drain", resume$2);
			this.res = res;
			const needDrain = res.writableNeedDrain !== void 0 ? res.writableNeedDrain : res._writableState?.needDrain;
			return needDrain !== true;
		}
		onData(chunk) {
			const { res } = this;
			return res ? res.write(chunk) : true;
		}
		onComplete(trailers) {
			const { res } = this;
			removeSignal$3(this);
			if (!res) return;
			this.trailers = util$11.parseHeaders(trailers);
			res.end();
		}
		onError(err) {
			const { res, callback, opaque, body } = this;
			removeSignal$3(this);
			this.factory = null;
			if (res) {
				this.res = null;
				util$11.destroy(res, err);
			} else if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
			if (body) {
				this.body = null;
				util$11.destroy(body, err);
			}
		}
	};
	function stream(opts, factory, callback) {
		if (callback === void 0) return new Promise((resolve$1, reject) => {
			stream.call(this, opts, factory, (err, data$1) => {
				return err ? reject(err) : resolve$1(data$1);
			});
		});
		try {
			const handler$1 = new StreamHandler(opts, factory, callback);
			this.dispatch(opts, handler$1);
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts?.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = stream;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/api-pipeline.js
var require_api_pipeline = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/api-pipeline.js"(exports, module) {
	const { Readable: Readable$3, Duplex: Duplex$1, PassThrough: PassThrough$1 } = __require("node:stream");
	const assert$15 = __require("node:assert");
	const { AsyncResource: AsyncResource$2 } = __require("node:async_hooks");
	const { InvalidArgumentError: InvalidArgumentError$15, InvalidReturnValueError, RequestAbortedError: RequestAbortedError$1 } = require_errors();
	const util$10 = require_util$5();
	const { addSignal: addSignal$2, removeSignal: removeSignal$2 } = require_abort_signal();
	function noop$4() {}
	const kResume = Symbol("resume");
	var PipelineRequest = class extends Readable$3 {
		constructor() {
			super({ autoDestroy: true });
			this[kResume] = null;
		}
		_read() {
			const { [kResume]: resume$2 } = this;
			if (resume$2) {
				this[kResume] = null;
				resume$2();
			}
		}
		_destroy(err, callback) {
			this._read();
			callback(err);
		}
	};
	var PipelineResponse = class extends Readable$3 {
		constructor(resume$2) {
			super({ autoDestroy: true });
			this[kResume] = resume$2;
		}
		_read() {
			this[kResume]();
		}
		_destroy(err, callback) {
			if (!err && !this._readableState.endEmitted) err = new RequestAbortedError$1();
			callback(err);
		}
	};
	var PipelineHandler = class extends AsyncResource$2 {
		constructor(opts, handler$1) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$15("invalid opts");
			if (typeof handler$1 !== "function") throw new InvalidArgumentError$15("invalid handler");
			const { signal, method, opaque, onInfo, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$15("signal must be an EventEmitter or EventTarget");
			if (method === "CONNECT") throw new InvalidArgumentError$15("invalid method");
			if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$15("invalid onInfo callback");
			super("UNDICI_PIPELINE");
			this.opaque = opaque || null;
			this.responseHeaders = responseHeaders || null;
			this.handler = handler$1;
			this.abort = null;
			this.context = null;
			this.onInfo = onInfo || null;
			this.req = new PipelineRequest().on("error", noop$4);
			this.ret = new Duplex$1({
				readableObjectMode: opts.objectMode,
				autoDestroy: true,
				read: () => {
					const { body } = this;
					if (body?.resume) body.resume();
				},
				write: (chunk, encoding, callback) => {
					const { req } = this;
					if (req.push(chunk, encoding) || req._readableState.destroyed) callback();
					else req[kResume] = callback;
				},
				destroy: (err, callback) => {
					const { body, req, res, ret, abort: abort$2 } = this;
					if (!err && !ret._readableState.endEmitted) err = new RequestAbortedError$1();
					if (abort$2 && err) abort$2();
					util$10.destroy(body, err);
					util$10.destroy(req, err);
					util$10.destroy(res, err);
					removeSignal$2(this);
					callback(err);
				}
			}).on("prefinish", () => {
				const { req } = this;
				req.push(null);
			});
			this.res = null;
			addSignal$2(this, signal);
		}
		onConnect(abort$2, context$1) {
			const { res } = this;
			if (this.reason) {
				abort$2(this.reason);
				return;
			}
			assert$15(!res, "pipeline cannot be retried");
			this.abort = abort$2;
			this.context = context$1;
		}
		onHeaders(statusCode, rawHeaders, resume$2) {
			const { opaque, handler: handler$1, context: context$1 } = this;
			if (statusCode < 200) {
				if (this.onInfo) {
					const headers = this.responseHeaders === "raw" ? util$10.parseRawHeaders(rawHeaders) : util$10.parseHeaders(rawHeaders);
					this.onInfo({
						statusCode,
						headers
					});
				}
				return;
			}
			this.res = new PipelineResponse(resume$2);
			let body;
			try {
				this.handler = null;
				const headers = this.responseHeaders === "raw" ? util$10.parseRawHeaders(rawHeaders) : util$10.parseHeaders(rawHeaders);
				body = this.runInAsyncScope(handler$1, null, {
					statusCode,
					headers,
					opaque,
					body: this.res,
					context: context$1
				});
			} catch (err) {
				this.res.on("error", noop$4);
				throw err;
			}
			if (!body || typeof body.on !== "function") throw new InvalidReturnValueError("expected Readable");
			body.on("data", (chunk) => {
				const { ret, body: body$1 } = this;
				if (!ret.push(chunk) && body$1.pause) body$1.pause();
			}).on("error", (err) => {
				const { ret } = this;
				util$10.destroy(ret, err);
			}).on("end", () => {
				const { ret } = this;
				ret.push(null);
			}).on("close", () => {
				const { ret } = this;
				if (!ret._readableState.ended) util$10.destroy(ret, new RequestAbortedError$1());
			});
			this.body = body;
		}
		onData(chunk) {
			const { res } = this;
			return res.push(chunk);
		}
		onComplete(trailers) {
			const { res } = this;
			res.push(null);
		}
		onError(err) {
			const { ret } = this;
			this.handler = null;
			util$10.destroy(ret, err);
		}
	};
	function pipeline$2(opts, handler$1) {
		try {
			const pipelineHandler = new PipelineHandler(opts, handler$1);
			this.dispatch({
				...opts,
				body: pipelineHandler.req
			}, pipelineHandler);
			return pipelineHandler.ret;
		} catch (err) {
			return new PassThrough$1().destroy(err);
		}
	}
	module.exports = pipeline$2;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/api-upgrade.js
var require_api_upgrade = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/api-upgrade.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$14, SocketError: SocketError$1 } = require_errors();
	const { AsyncResource: AsyncResource$1 } = __require("node:async_hooks");
	const assert$14 = __require("node:assert");
	const util$9 = require_util$5();
	const { addSignal: addSignal$1, removeSignal: removeSignal$1 } = require_abort_signal();
	var UpgradeHandler = class extends AsyncResource$1 {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$14("invalid opts");
			if (typeof callback !== "function") throw new InvalidArgumentError$14("invalid callback");
			const { signal, opaque, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$14("signal must be an EventEmitter or EventTarget");
			super("UNDICI_UPGRADE");
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.callback = callback;
			this.abort = null;
			this.context = null;
			addSignal$1(this, signal);
		}
		onConnect(abort$2, context$1) {
			if (this.reason) {
				abort$2(this.reason);
				return;
			}
			assert$14(this.callback);
			this.abort = abort$2;
			this.context = null;
		}
		onHeaders() {
			throw new SocketError$1("bad upgrade", null);
		}
		onUpgrade(statusCode, rawHeaders, socket) {
			assert$14(statusCode === 101);
			const { callback, opaque, context: context$1 } = this;
			removeSignal$1(this);
			this.callback = null;
			const headers = this.responseHeaders === "raw" ? util$9.parseRawHeaders(rawHeaders) : util$9.parseHeaders(rawHeaders);
			this.runInAsyncScope(callback, null, null, {
				headers,
				socket,
				opaque,
				context: context$1
			});
		}
		onError(err) {
			const { callback, opaque } = this;
			removeSignal$1(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
		}
	};
	function upgrade(opts, callback) {
		if (callback === void 0) return new Promise((resolve$1, reject) => {
			upgrade.call(this, opts, (err, data$1) => {
				return err ? reject(err) : resolve$1(data$1);
			});
		});
		try {
			const upgradeHandler = new UpgradeHandler(opts, callback);
			const upgradeOpts = {
				...opts,
				method: opts.method || "GET",
				upgrade: opts.protocol || "Websocket"
			};
			this.dispatch(upgradeOpts, upgradeHandler);
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts?.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = upgrade;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/api-connect.js
var require_api_connect = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/api-connect.js"(exports, module) {
	const assert$13 = __require("node:assert");
	const { AsyncResource } = __require("node:async_hooks");
	const { InvalidArgumentError: InvalidArgumentError$13, SocketError } = require_errors();
	const util$8 = require_util$5();
	const { addSignal, removeSignal } = require_abort_signal();
	var ConnectHandler = class extends AsyncResource {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$13("invalid opts");
			if (typeof callback !== "function") throw new InvalidArgumentError$13("invalid callback");
			const { signal, opaque, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$13("signal must be an EventEmitter or EventTarget");
			super("UNDICI_CONNECT");
			this.opaque = opaque || null;
			this.responseHeaders = responseHeaders || null;
			this.callback = callback;
			this.abort = null;
			addSignal(this, signal);
		}
		onConnect(abort$2, context$1) {
			if (this.reason) {
				abort$2(this.reason);
				return;
			}
			assert$13(this.callback);
			this.abort = abort$2;
			this.context = context$1;
		}
		onHeaders() {
			throw new SocketError("bad connect", null);
		}
		onUpgrade(statusCode, rawHeaders, socket) {
			const { callback, opaque, context: context$1 } = this;
			removeSignal(this);
			this.callback = null;
			let headers = rawHeaders;
			if (headers != null) headers = this.responseHeaders === "raw" ? util$8.parseRawHeaders(rawHeaders) : util$8.parseHeaders(rawHeaders);
			this.runInAsyncScope(callback, null, null, {
				statusCode,
				headers,
				socket,
				opaque,
				context: context$1
			});
		}
		onError(err) {
			const { callback, opaque } = this;
			removeSignal(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
		}
	};
	function connect(opts, callback) {
		if (callback === void 0) return new Promise((resolve$1, reject) => {
			connect.call(this, opts, (err, data$1) => {
				return err ? reject(err) : resolve$1(data$1);
			});
		});
		try {
			const connectHandler = new ConnectHandler(opts, callback);
			const connectOptions = {
				...opts,
				method: "CONNECT"
			};
			this.dispatch(connectOptions, connectHandler);
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts?.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = connect;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/index.js
var require_api = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/api/index.js"(exports, module) {
	module.exports.request = require_api_request();
	module.exports.stream = require_api_stream();
	module.exports.pipeline = require_api_pipeline();
	module.exports.upgrade = require_api_upgrade();
	module.exports.connect = require_api_connect();
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-errors.js
var require_mock_errors = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-errors.js"(exports, module) {
	const { UndiciError: UndiciError$1 } = require_errors();
	/**
	* The request does not match any registered mock dispatches.
	*/
	var MockNotMatchedError$1 = class extends UndiciError$1 {
		constructor(message) {
			super(message);
			this.name = "MockNotMatchedError";
			this.message = message || "The request does not match any registered mock dispatches";
			this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
		}
	};
	module.exports = { MockNotMatchedError: MockNotMatchedError$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-symbols.js
var require_mock_symbols = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-symbols.js"(exports, module) {
	module.exports = {
		kAgent: Symbol("agent"),
		kOptions: Symbol("options"),
		kFactory: Symbol("factory"),
		kDispatches: Symbol("dispatches"),
		kDispatchKey: Symbol("dispatch key"),
		kDefaultHeaders: Symbol("default headers"),
		kDefaultTrailers: Symbol("default trailers"),
		kContentLength: Symbol("content length"),
		kMockAgent: Symbol("mock agent"),
		kMockAgentSet: Symbol("mock agent set"),
		kMockAgentGet: Symbol("mock agent get"),
		kMockDispatch: Symbol("mock dispatch"),
		kClose: Symbol("close"),
		kOriginalClose: Symbol("original agent close"),
		kOriginalDispatch: Symbol("original dispatch"),
		kOrigin: Symbol("origin"),
		kIsMockActive: Symbol("is mock active"),
		kNetConnect: Symbol("net connect"),
		kGetNetConnect: Symbol("get net connect"),
		kConnected: Symbol("connected"),
		kIgnoreTrailingSlash: Symbol("ignore trailing slash"),
		kMockAgentMockCallHistoryInstance: Symbol("mock agent mock call history name"),
		kMockAgentRegisterCallHistory: Symbol("mock agent register mock call history"),
		kMockAgentAddCallHistoryLog: Symbol("mock agent add call history log"),
		kMockAgentIsCallHistoryEnabled: Symbol("mock agent is call history enabled"),
		kMockAgentAcceptsNonStandardSearchParameters: Symbol("mock agent accepts non standard search parameters"),
		kMockCallHistoryAddLog: Symbol("mock call history add log")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-utils.js
var require_mock_utils = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-utils.js"(exports, module) {
	const { MockNotMatchedError } = require_mock_errors();
	const { kDispatches: kDispatches$4, kMockAgent: kMockAgent$2, kOriginalDispatch: kOriginalDispatch$2, kOrigin: kOrigin$2, kGetNetConnect: kGetNetConnect$1 } = require_mock_symbols();
	const { serializePathWithQuery: serializePathWithQuery$2 } = require_util$5();
	const { STATUS_CODES: STATUS_CODES$1 } = __require("node:http");
	const { types: { isPromise } } = __require("node:util");
	const { InvalidArgumentError: InvalidArgumentError$12 } = require_errors();
	function matchValue$1(match$1, value) {
		if (typeof match$1 === "string") return match$1 === value;
		if (match$1 instanceof RegExp) return match$1.test(value);
		if (typeof match$1 === "function") return match$1(value) === true;
		return false;
	}
	function lowerCaseEntries(headers) {
		return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue]) => {
			return [headerName.toLocaleLowerCase(), headerValue];
		}));
	}
	/**
	* @param {import('../../index').Headers|string[]|Record<string, string>} headers
	* @param {string} key
	*/
	function getHeaderByName(headers, key) {
		if (Array.isArray(headers)) {
			for (let i$1 = 0; i$1 < headers.length; i$1 += 2) if (headers[i$1].toLocaleLowerCase() === key.toLocaleLowerCase()) return headers[i$1 + 1];
			return void 0;
		} else if (typeof headers.get === "function") return headers.get(key);
		else return lowerCaseEntries(headers)[key.toLocaleLowerCase()];
	}
	/** @param {string[]} headers */
	function buildHeadersFromArray(headers) {
		const clone = headers.slice();
		const entries = [];
		for (let index = 0; index < clone.length; index += 2) entries.push([clone[index], clone[index + 1]]);
		return Object.fromEntries(entries);
	}
	function matchHeaders(mockDispatch$2, headers) {
		if (typeof mockDispatch$2.headers === "function") {
			if (Array.isArray(headers)) headers = buildHeadersFromArray(headers);
			return mockDispatch$2.headers(headers ? lowerCaseEntries(headers) : {});
		}
		if (typeof mockDispatch$2.headers === "undefined") return true;
		if (typeof headers !== "object" || typeof mockDispatch$2.headers !== "object") return false;
		for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch$2.headers)) {
			const headerValue = getHeaderByName(headers, matchHeaderName);
			if (!matchValue$1(matchHeaderValue, headerValue)) return false;
		}
		return true;
	}
	function normalizeSearchParams$1(query) {
		if (typeof query !== "string") return query;
		const originalQp = new URLSearchParams(query);
		const normalizedQp = new URLSearchParams();
		for (let [key, value] of originalQp.entries()) {
			key = key.replace("[]", "");
			const valueRepresentsString = /^(['"]).*\1$/.test(value);
			if (valueRepresentsString) {
				normalizedQp.append(key, value);
				continue;
			}
			if (value.includes(",")) {
				const values = value.split(",");
				for (const v of values) normalizedQp.append(key, v);
				continue;
			}
			normalizedQp.append(key, value);
		}
		return normalizedQp;
	}
	function safeUrl(path$9) {
		if (typeof path$9 !== "string") return path$9;
		const pathSegments = path$9.split("?", 3);
		if (pathSegments.length !== 2) return path$9;
		const qp = new URLSearchParams(pathSegments.pop());
		qp.sort();
		return [...pathSegments, qp.toString()].join("?");
	}
	function matchKey(mockDispatch$2, { path: path$9, method, body, headers }) {
		const pathMatch = matchValue$1(mockDispatch$2.path, path$9);
		const methodMatch = matchValue$1(mockDispatch$2.method, method);
		const bodyMatch = typeof mockDispatch$2.body !== "undefined" ? matchValue$1(mockDispatch$2.body, body) : true;
		const headersMatch = matchHeaders(mockDispatch$2, headers);
		return pathMatch && methodMatch && bodyMatch && headersMatch;
	}
	function getResponseData$1(data$1) {
		if (Buffer.isBuffer(data$1)) return data$1;
		else if (data$1 instanceof Uint8Array) return data$1;
		else if (data$1 instanceof ArrayBuffer) return data$1;
		else if (typeof data$1 === "object") return JSON.stringify(data$1);
		else if (data$1) return data$1.toString();
		else return "";
	}
	function getMockDispatch(mockDispatches, key) {
		const basePath = key.query ? serializePathWithQuery$2(key.path, key.query) : key.path;
		const resolvedPath = typeof basePath === "string" ? safeUrl(basePath) : basePath;
		const resolvedPathWithoutTrailingSlash = removeTrailingSlash(resolvedPath);
		let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path: path$9, ignoreTrailingSlash }) => {
			return ignoreTrailingSlash ? matchValue$1(removeTrailingSlash(safeUrl(path$9)), resolvedPathWithoutTrailingSlash) : matchValue$1(safeUrl(path$9), resolvedPath);
		});
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
		matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue$1(method, key.method));
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}' on path '${resolvedPath}'`);
		matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== "undefined" ? matchValue$1(body, key.body) : true);
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}' on path '${resolvedPath}'`);
		matchedMockDispatches = matchedMockDispatches.filter((mockDispatch$2) => matchHeaders(mockDispatch$2, key.headers));
		if (matchedMockDispatches.length === 0) {
			const headers = typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers;
			throw new MockNotMatchedError(`Mock dispatch not matched for headers '${headers}' on path '${resolvedPath}'`);
		}
		return matchedMockDispatches[0];
	}
	function addMockDispatch$1(mockDispatches, key, data$1, opts) {
		const baseData = {
			timesInvoked: 0,
			times: 1,
			persist: false,
			consumed: false,
			...opts
		};
		const replyData = typeof data$1 === "function" ? { callback: data$1 } : { ...data$1 };
		const newMockDispatch = {
			...baseData,
			...key,
			pending: true,
			data: {
				error: null,
				...replyData
			}
		};
		mockDispatches.push(newMockDispatch);
		return newMockDispatch;
	}
	function deleteMockDispatch(mockDispatches, key) {
		const index = mockDispatches.findIndex((dispatch) => {
			if (!dispatch.consumed) return false;
			return matchKey(dispatch, key);
		});
		if (index !== -1) mockDispatches.splice(index, 1);
	}
	/**
	* @param {string} path Path to remove trailing slash from
	*/
	function removeTrailingSlash(path$9) {
		while (path$9.endsWith("/")) path$9 = path$9.slice(0, -1);
		if (path$9.length === 0) path$9 = "/";
		return path$9;
	}
	function buildKey$1(opts) {
		const { path: path$9, method, body, headers, query } = opts;
		return {
			path: path$9,
			method,
			body,
			headers,
			query
		};
	}
	function generateKeyValues(data$1) {
		const keys$1 = Object.keys(data$1);
		const result = [];
		for (let i$1 = 0; i$1 < keys$1.length; ++i$1) {
			const key = keys$1[i$1];
			const value = data$1[key];
			const name$2 = Buffer.from(`${key}`);
			if (Array.isArray(value)) for (let j = 0; j < value.length; ++j) result.push(name$2, Buffer.from(`${value[j]}`));
			else result.push(name$2, Buffer.from(`${value}`));
		}
		return result;
	}
	/**
	* @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
	* @param {number} statusCode
	*/
	function getStatusText(statusCode) {
		return STATUS_CODES$1[statusCode] || "unknown";
	}
	async function getResponse(body) {
		const buffers = [];
		for await (const data$1 of body) buffers.push(data$1);
		return Buffer.concat(buffers).toString("utf8");
	}
	/**
	* Mock dispatch function used to simulate undici dispatches
	*/
	function mockDispatch(opts, handler$1) {
		const key = buildKey$1(opts);
		const mockDispatch$2 = getMockDispatch(this[kDispatches$4], key);
		mockDispatch$2.timesInvoked++;
		if (mockDispatch$2.data.callback) mockDispatch$2.data = {
			...mockDispatch$2.data,
			...mockDispatch$2.data.callback(opts)
		};
		const { data: { statusCode, data: data$1, headers, trailers, error: error$1 }, delay: delay$3, persist } = mockDispatch$2;
		const { timesInvoked, times } = mockDispatch$2;
		mockDispatch$2.consumed = !persist && timesInvoked >= times;
		mockDispatch$2.pending = timesInvoked < times;
		if (error$1 !== null) {
			deleteMockDispatch(this[kDispatches$4], key);
			handler$1.onError(error$1);
			return true;
		}
		if (typeof delay$3 === "number" && delay$3 > 0) setTimeout(() => {
			handleReply(this[kDispatches$4]);
		}, delay$3);
		else handleReply(this[kDispatches$4]);
		function handleReply(mockDispatches, _data = data$1) {
			const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;
			const body = typeof _data === "function" ? _data({
				...opts,
				headers: optsHeaders
			}) : _data;
			if (isPromise(body)) {
				body.then((newData) => handleReply(mockDispatches, newData));
				return;
			}
			const responseData = getResponseData$1(body);
			const responseHeaders = generateKeyValues(headers);
			const responseTrailers = generateKeyValues(trailers);
			handler$1.onConnect?.((err) => handler$1.onError(err), null);
			handler$1.onHeaders?.(statusCode, responseHeaders, resume$2, getStatusText(statusCode));
			handler$1.onData?.(Buffer.from(responseData));
			handler$1.onComplete?.(responseTrailers);
			deleteMockDispatch(mockDispatches, key);
		}
		function resume$2() {}
		return true;
	}
	function buildMockDispatch$2() {
		const agent = this[kMockAgent$2];
		const origin = this[kOrigin$2];
		const originalDispatch = this[kOriginalDispatch$2];
		return function dispatch(opts, handler$1) {
			if (agent.isMockActive) try {
				mockDispatch.call(this, opts, handler$1);
			} catch (error$1) {
				if (error$1 instanceof MockNotMatchedError) {
					const netConnect = agent[kGetNetConnect$1]();
					if (netConnect === false) throw new MockNotMatchedError(`${error$1.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
					if (checkNetConnect(netConnect, origin)) originalDispatch.call(this, opts, handler$1);
					else throw new MockNotMatchedError(`${error$1.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
				} else throw error$1;
			}
			else originalDispatch.call(this, opts, handler$1);
		};
	}
	function checkNetConnect(netConnect, origin) {
		const url = new URL(origin);
		if (netConnect === true) return true;
		else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue$1(matcher, url.host))) return true;
		return false;
	}
	function buildAndValidateMockOptions$1(opts) {
		if (opts) {
			const { agent,...mockOptions } = opts;
			if ("enableCallHistory" in mockOptions && typeof mockOptions.enableCallHistory !== "boolean") throw new InvalidArgumentError$12("options.enableCallHistory must to be a boolean");
			if ("acceptNonStandardSearchParameters" in mockOptions && typeof mockOptions.acceptNonStandardSearchParameters !== "boolean") throw new InvalidArgumentError$12("options.acceptNonStandardSearchParameters must to be a boolean");
			return mockOptions;
		}
	}
	module.exports = {
		getResponseData: getResponseData$1,
		getMockDispatch,
		addMockDispatch: addMockDispatch$1,
		deleteMockDispatch,
		buildKey: buildKey$1,
		generateKeyValues,
		matchValue: matchValue$1,
		getResponse,
		getStatusText,
		mockDispatch,
		buildMockDispatch: buildMockDispatch$2,
		checkNetConnect,
		buildAndValidateMockOptions: buildAndValidateMockOptions$1,
		getHeaderByName,
		buildHeadersFromArray,
		normalizeSearchParams: normalizeSearchParams$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-interceptor.js
var require_mock_interceptor = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-interceptor.js"(exports, module) {
	const { getResponseData, buildKey, addMockDispatch } = require_mock_utils();
	const { kDispatches: kDispatches$3, kDispatchKey, kDefaultHeaders, kDefaultTrailers, kContentLength, kMockDispatch, kIgnoreTrailingSlash: kIgnoreTrailingSlash$2 } = require_mock_symbols();
	const { InvalidArgumentError: InvalidArgumentError$11 } = require_errors();
	const { serializePathWithQuery: serializePathWithQuery$1 } = require_util$5();
	/**
	* Defines the scope API for an interceptor reply
	*/
	var MockScope = class {
		constructor(mockDispatch$2) {
			this[kMockDispatch] = mockDispatch$2;
		}
		/**
		* Delay a reply by a set amount in ms.
		*/
		delay(waitInMs) {
			if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) throw new InvalidArgumentError$11("waitInMs must be a valid integer > 0");
			this[kMockDispatch].delay = waitInMs;
			return this;
		}
		/**
		* For a defined reply, never mark as consumed.
		*/
		persist() {
			this[kMockDispatch].persist = true;
			return this;
		}
		/**
		* Allow one to define a reply for a set amount of matching requests.
		*/
		times(repeatTimes) {
			if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) throw new InvalidArgumentError$11("repeatTimes must be a valid integer > 0");
			this[kMockDispatch].times = repeatTimes;
			return this;
		}
	};
	/**
	* Defines an interceptor for a Mock
	*/
	var MockInterceptor$2 = class {
		constructor(opts, mockDispatches) {
			if (typeof opts !== "object") throw new InvalidArgumentError$11("opts must be an object");
			if (typeof opts.path === "undefined") throw new InvalidArgumentError$11("opts.path must be defined");
			if (typeof opts.method === "undefined") opts.method = "GET";
			if (typeof opts.path === "string") if (opts.query) opts.path = serializePathWithQuery$1(opts.path, opts.query);
			else {
				const parsedURL = new URL(opts.path, "data://");
				opts.path = parsedURL.pathname + parsedURL.search;
			}
			if (typeof opts.method === "string") opts.method = opts.method.toUpperCase();
			this[kDispatchKey] = buildKey(opts);
			this[kDispatches$3] = mockDispatches;
			this[kIgnoreTrailingSlash$2] = opts.ignoreTrailingSlash ?? false;
			this[kDefaultHeaders] = {};
			this[kDefaultTrailers] = {};
			this[kContentLength] = false;
		}
		createMockScopeDispatchData({ statusCode, data: data$1, responseOptions }) {
			const responseData = getResponseData(data$1);
			const contentLength = this[kContentLength] ? { "content-length": responseData.length } : {};
			const headers = {
				...this[kDefaultHeaders],
				...contentLength,
				...responseOptions.headers
			};
			const trailers = {
				...this[kDefaultTrailers],
				...responseOptions.trailers
			};
			return {
				statusCode,
				data: data$1,
				headers,
				trailers
			};
		}
		validateReplyParameters(replyParameters) {
			if (typeof replyParameters.statusCode === "undefined") throw new InvalidArgumentError$11("statusCode must be defined");
			if (typeof replyParameters.responseOptions !== "object" || replyParameters.responseOptions === null) throw new InvalidArgumentError$11("responseOptions must be an object");
		}
		/**
		* Mock an undici request with a defined reply.
		*/
		reply(replyOptionsCallbackOrStatusCode) {
			if (typeof replyOptionsCallbackOrStatusCode === "function") {
				const wrappedDefaultsCallback = (opts) => {
					const resolvedData = replyOptionsCallbackOrStatusCode(opts);
					if (typeof resolvedData !== "object" || resolvedData === null) throw new InvalidArgumentError$11("reply options callback must return an object");
					const replyParameters$1 = {
						data: "",
						responseOptions: {},
						...resolvedData
					};
					this.validateReplyParameters(replyParameters$1);
					return { ...this.createMockScopeDispatchData(replyParameters$1) };
				};
				const newMockDispatch$1 = addMockDispatch(this[kDispatches$3], this[kDispatchKey], wrappedDefaultsCallback, { ignoreTrailingSlash: this[kIgnoreTrailingSlash$2] });
				return new MockScope(newMockDispatch$1);
			}
			const replyParameters = {
				statusCode: replyOptionsCallbackOrStatusCode,
				data: arguments[1] === void 0 ? "" : arguments[1],
				responseOptions: arguments[2] === void 0 ? {} : arguments[2]
			};
			this.validateReplyParameters(replyParameters);
			const dispatchData = this.createMockScopeDispatchData(replyParameters);
			const newMockDispatch = addMockDispatch(this[kDispatches$3], this[kDispatchKey], dispatchData, { ignoreTrailingSlash: this[kIgnoreTrailingSlash$2] });
			return new MockScope(newMockDispatch);
		}
		/**
		* Mock an undici request with a defined error.
		*/
		replyWithError(error$1) {
			if (typeof error$1 === "undefined") throw new InvalidArgumentError$11("error must be defined");
			const newMockDispatch = addMockDispatch(this[kDispatches$3], this[kDispatchKey], { error: error$1 }, { ignoreTrailingSlash: this[kIgnoreTrailingSlash$2] });
			return new MockScope(newMockDispatch);
		}
		/**
		* Set default reply headers on the interceptor for subsequent replies
		*/
		defaultReplyHeaders(headers) {
			if (typeof headers === "undefined") throw new InvalidArgumentError$11("headers must be defined");
			this[kDefaultHeaders] = headers;
			return this;
		}
		/**
		* Set default reply trailers on the interceptor for subsequent replies
		*/
		defaultReplyTrailers(trailers) {
			if (typeof trailers === "undefined") throw new InvalidArgumentError$11("trailers must be defined");
			this[kDefaultTrailers] = trailers;
			return this;
		}
		/**
		* Set reply content length header for replies on the interceptor
		*/
		replyContentLength() {
			this[kContentLength] = true;
			return this;
		}
	};
	module.exports.MockInterceptor = MockInterceptor$2;
	module.exports.MockScope = MockScope;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-client.js
var require_mock_client = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-client.js"(exports, module) {
	const { promisify: promisify$2 } = __require("node:util");
	const Client$1 = require_client();
	const { buildMockDispatch: buildMockDispatch$1 } = require_mock_utils();
	const { kDispatches: kDispatches$2, kMockAgent: kMockAgent$1, kClose: kClose$1, kOriginalClose: kOriginalClose$1, kOrigin: kOrigin$1, kOriginalDispatch: kOriginalDispatch$1, kConnected: kConnected$1, kIgnoreTrailingSlash: kIgnoreTrailingSlash$1 } = require_mock_symbols();
	const { MockInterceptor: MockInterceptor$1 } = require_mock_interceptor();
	const Symbols$1 = require_symbols();
	const { InvalidArgumentError: InvalidArgumentError$10 } = require_errors();
	/**
	* MockClient provides an API that extends the Client to influence the mockDispatches.
	*/
	var MockClient$2 = class extends Client$1 {
		constructor(origin, opts) {
			if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$10("Argument opts.agent must implement Agent");
			super(origin, opts);
			this[kMockAgent$1] = opts.agent;
			this[kOrigin$1] = origin;
			this[kIgnoreTrailingSlash$1] = opts.ignoreTrailingSlash ?? false;
			this[kDispatches$2] = [];
			this[kConnected$1] = 1;
			this[kOriginalDispatch$1] = this.dispatch;
			this[kOriginalClose$1] = this.close.bind(this);
			this.dispatch = buildMockDispatch$1.call(this);
			this.close = this[kClose$1];
		}
		get [Symbols$1.kConnected]() {
			return this[kConnected$1];
		}
		/**
		* Sets up the base interceptor for mocking replies from undici.
		*/
		intercept(opts) {
			return new MockInterceptor$1(opts && {
				ignoreTrailingSlash: this[kIgnoreTrailingSlash$1],
				...opts
			}, this[kDispatches$2]);
		}
		cleanMocks() {
			this[kDispatches$2] = [];
		}
		async [kClose$1]() {
			await promisify$2(this[kOriginalClose$1])();
			this[kConnected$1] = 0;
			this[kMockAgent$1][Symbols$1.kClients].delete(this[kOrigin$1]);
		}
	};
	module.exports = MockClient$2;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-call-history.js
var require_mock_call_history = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-call-history.js"(exports, module) {
	const { kMockCallHistoryAddLog: kMockCallHistoryAddLog$1 } = require_mock_symbols();
	const { InvalidArgumentError: InvalidArgumentError$9 } = require_errors();
	function handleFilterCallsWithOptions(criteria, options, handler$1, store$4) {
		switch (options.operator) {
			case "OR":
				store$4.push(...handler$1(criteria));
				return store$4;
			case "AND": return handler$1.call({ logs: store$4 }, criteria);
			default: throw new InvalidArgumentError$9("options.operator must to be a case insensitive string equal to 'OR' or 'AND'");
		}
	}
	function buildAndValidateFilterCallsOptions(options = {}) {
		const finalOptions = {};
		if ("operator" in options) {
			if (typeof options.operator !== "string" || options.operator.toUpperCase() !== "OR" && options.operator.toUpperCase() !== "AND") throw new InvalidArgumentError$9("options.operator must to be a case insensitive string equal to 'OR' or 'AND'");
			return {
				...finalOptions,
				operator: options.operator.toUpperCase()
			};
		}
		return finalOptions;
	}
	function makeFilterCalls(parameterName) {
		return (parameterValue) => {
			if (typeof parameterValue === "string" || parameterValue == null) return this.logs.filter((log) => {
				return log[parameterName] === parameterValue;
			});
			if (parameterValue instanceof RegExp) return this.logs.filter((log) => {
				return parameterValue.test(log[parameterName]);
			});
			throw new InvalidArgumentError$9(`${parameterName} parameter should be one of string, regexp, undefined or null`);
		};
	}
	function computeUrlWithMaybeSearchParameters(requestInit) {
		try {
			const url = new URL(requestInit.path, requestInit.origin);
			if (url.search.length !== 0) return url;
			url.search = new URLSearchParams(requestInit.query).toString();
			return url;
		} catch (error$1) {
			throw new InvalidArgumentError$9("An error occurred when computing MockCallHistoryLog.url", { cause: error$1 });
		}
	}
	var MockCallHistoryLog$1 = class {
		constructor(requestInit = {}) {
			this.body = requestInit.body;
			this.headers = requestInit.headers;
			this.method = requestInit.method;
			const url = computeUrlWithMaybeSearchParameters(requestInit);
			this.fullUrl = url.toString();
			this.origin = url.origin;
			this.path = url.pathname;
			this.searchParams = Object.fromEntries(url.searchParams);
			this.protocol = url.protocol;
			this.host = url.host;
			this.port = url.port;
			this.hash = url.hash;
		}
		toMap() {
			return new Map([
				["protocol", this.protocol],
				["host", this.host],
				["port", this.port],
				["origin", this.origin],
				["path", this.path],
				["hash", this.hash],
				["searchParams", this.searchParams],
				["fullUrl", this.fullUrl],
				["method", this.method],
				["body", this.body],
				["headers", this.headers]
			]);
		}
		toString() {
			const options = {
				betweenKeyValueSeparator: "->",
				betweenPairSeparator: "|"
			};
			let result = "";
			this.toMap().forEach((value, key) => {
				if (typeof value === "string" || value === void 0 || value === null) result = `${result}${key}${options.betweenKeyValueSeparator}${value}${options.betweenPairSeparator}`;
				if (typeof value === "object" && value !== null || Array.isArray(value)) result = `${result}${key}${options.betweenKeyValueSeparator}${JSON.stringify(value)}${options.betweenPairSeparator}`;
			});
			return result.slice(0, -1);
		}
	};
	var MockCallHistory$2 = class {
		logs = [];
		calls() {
			return this.logs;
		}
		firstCall() {
			return this.logs.at(0);
		}
		lastCall() {
			return this.logs.at(-1);
		}
		nthCall(number) {
			if (typeof number !== "number") throw new InvalidArgumentError$9("nthCall must be called with a number");
			if (!Number.isInteger(number)) throw new InvalidArgumentError$9("nthCall must be called with an integer");
			if (Math.sign(number) !== 1) throw new InvalidArgumentError$9("nthCall must be called with a positive value. use firstCall or lastCall instead");
			return this.logs.at(number - 1);
		}
		filterCalls(criteria, options) {
			if (this.logs.length === 0) return this.logs;
			if (typeof criteria === "function") return this.logs.filter(criteria);
			if (criteria instanceof RegExp) return this.logs.filter((log) => {
				return criteria.test(log.toString());
			});
			if (typeof criteria === "object" && criteria !== null) {
				if (Object.keys(criteria).length === 0) return this.logs;
				const finalOptions = {
					operator: "OR",
					...buildAndValidateFilterCallsOptions(options)
				};
				let maybeDuplicatedLogsFiltered = [];
				if ("protocol" in criteria) maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.protocol, finalOptions, this.filterCallsByProtocol, maybeDuplicatedLogsFiltered);
				if ("host" in criteria) maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.host, finalOptions, this.filterCallsByHost, maybeDuplicatedLogsFiltered);
				if ("port" in criteria) maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.port, finalOptions, this.filterCallsByPort, maybeDuplicatedLogsFiltered);
				if ("origin" in criteria) maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.origin, finalOptions, this.filterCallsByOrigin, maybeDuplicatedLogsFiltered);
				if ("path" in criteria) maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.path, finalOptions, this.filterCallsByPath, maybeDuplicatedLogsFiltered);
				if ("hash" in criteria) maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.hash, finalOptions, this.filterCallsByHash, maybeDuplicatedLogsFiltered);
				if ("fullUrl" in criteria) maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.fullUrl, finalOptions, this.filterCallsByFullUrl, maybeDuplicatedLogsFiltered);
				if ("method" in criteria) maybeDuplicatedLogsFiltered = handleFilterCallsWithOptions(criteria.method, finalOptions, this.filterCallsByMethod, maybeDuplicatedLogsFiltered);
				const uniqLogsFiltered = [...new Set(maybeDuplicatedLogsFiltered)];
				return uniqLogsFiltered;
			}
			throw new InvalidArgumentError$9("criteria parameter should be one of function, regexp, or object");
		}
		filterCallsByProtocol = makeFilterCalls.call(this, "protocol");
		filterCallsByHost = makeFilterCalls.call(this, "host");
		filterCallsByPort = makeFilterCalls.call(this, "port");
		filterCallsByOrigin = makeFilterCalls.call(this, "origin");
		filterCallsByPath = makeFilterCalls.call(this, "path");
		filterCallsByHash = makeFilterCalls.call(this, "hash");
		filterCallsByFullUrl = makeFilterCalls.call(this, "fullUrl");
		filterCallsByMethod = makeFilterCalls.call(this, "method");
		clear() {
			this.logs = [];
		}
		[kMockCallHistoryAddLog$1](requestInit) {
			const log = new MockCallHistoryLog$1(requestInit);
			this.logs.push(log);
			return log;
		}
		*[Symbol.iterator]() {
			for (const log of this.calls()) yield log;
		}
	};
	module.exports.MockCallHistory = MockCallHistory$2;
	module.exports.MockCallHistoryLog = MockCallHistoryLog$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-pool.js
var require_mock_pool = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-pool.js"(exports, module) {
	const { promisify: promisify$1 } = __require("node:util");
	const Pool$1 = require_pool();
	const { buildMockDispatch } = require_mock_utils();
	const { kDispatches: kDispatches$1, kMockAgent, kClose, kOriginalClose, kOrigin, kOriginalDispatch, kConnected, kIgnoreTrailingSlash } = require_mock_symbols();
	const { MockInterceptor } = require_mock_interceptor();
	const Symbols = require_symbols();
	const { InvalidArgumentError: InvalidArgumentError$8 } = require_errors();
	/**
	* MockPool provides an API that extends the Pool to influence the mockDispatches.
	*/
	var MockPool$2 = class extends Pool$1 {
		constructor(origin, opts) {
			if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$8("Argument opts.agent must implement Agent");
			super(origin, opts);
			this[kMockAgent] = opts.agent;
			this[kOrigin] = origin;
			this[kIgnoreTrailingSlash] = opts.ignoreTrailingSlash ?? false;
			this[kDispatches$1] = [];
			this[kConnected] = 1;
			this[kOriginalDispatch] = this.dispatch;
			this[kOriginalClose] = this.close.bind(this);
			this.dispatch = buildMockDispatch.call(this);
			this.close = this[kClose];
		}
		get [Symbols.kConnected]() {
			return this[kConnected];
		}
		/**
		* Sets up the base interceptor for mocking replies from undici.
		*/
		intercept(opts) {
			return new MockInterceptor(opts && {
				ignoreTrailingSlash: this[kIgnoreTrailingSlash],
				...opts
			}, this[kDispatches$1]);
		}
		cleanMocks() {
			this[kDispatches$1] = [];
		}
		async [kClose]() {
			await promisify$1(this[kOriginalClose])();
			this[kConnected] = 0;
			this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
		}
	};
	module.exports = MockPool$2;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/pending-interceptors-formatter.js
var require_pending_interceptors_formatter = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/pending-interceptors-formatter.js"(exports, module) {
	const { Transform: Transform$2 } = __require("node:stream");
	const { Console } = __require("node:console");
	const PERSISTENT = process.versions.icu ? "✅" : "Y ";
	const NOT_PERSISTENT = process.versions.icu ? "❌" : "N ";
	/**
	* Gets the output of `console.table(…)` as a string.
	*/
	module.exports = class PendingInterceptorsFormatter$2 {
		constructor({ disableColors } = {}) {
			this.transform = new Transform$2({ transform(chunk, _enc, cb) {
				cb(null, chunk);
			} });
			this.logger = new Console({
				stdout: this.transform,
				inspectOptions: { colors: !disableColors && !process.env.CI }
			});
		}
		format(pendingInterceptors) {
			const withPrettyHeaders = pendingInterceptors.map(({ method, path: path$9, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
				Method: method,
				Origin: origin,
				Path: path$9,
				"Status code": statusCode,
				Persistent: persist ? PERSISTENT : NOT_PERSISTENT,
				Invocations: timesInvoked,
				Remaining: persist ? Infinity : times - timesInvoked
			}));
			this.logger.table(withPrettyHeaders);
			return this.transform.read().toString();
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-agent.js
var require_mock_agent = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/mock/mock-agent.js"(exports, module) {
	const { kClients } = require_symbols();
	const Agent$2 = require_agent();
	const { kAgent, kMockAgentSet, kMockAgentGet, kDispatches, kIsMockActive, kNetConnect, kGetNetConnect, kOptions, kFactory, kMockAgentRegisterCallHistory, kMockAgentIsCallHistoryEnabled, kMockAgentAddCallHistoryLog, kMockAgentMockCallHistoryInstance, kMockAgentAcceptsNonStandardSearchParameters, kMockCallHistoryAddLog } = require_mock_symbols();
	const MockClient$1 = require_mock_client();
	const MockPool$1 = require_mock_pool();
	const { matchValue, normalizeSearchParams, buildAndValidateMockOptions } = require_mock_utils();
	const { InvalidArgumentError: InvalidArgumentError$7, UndiciError } = require_errors();
	const Dispatcher$1 = require_dispatcher();
	const PendingInterceptorsFormatter = require_pending_interceptors_formatter();
	const { MockCallHistory: MockCallHistory$1 } = require_mock_call_history();
	var MockAgent$1 = class extends Dispatcher$1 {
		constructor(opts) {
			super(opts);
			const mockOptions = buildAndValidateMockOptions(opts);
			this[kNetConnect] = true;
			this[kIsMockActive] = true;
			this[kMockAgentIsCallHistoryEnabled] = mockOptions?.enableCallHistory ?? false;
			this[kMockAgentAcceptsNonStandardSearchParameters] = mockOptions?.acceptNonStandardSearchParameters ?? false;
			if (opts?.agent && typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$7("Argument opts.agent must implement Agent");
			const agent = opts?.agent ? opts.agent : new Agent$2(opts);
			this[kAgent] = agent;
			this[kClients] = agent[kClients];
			this[kOptions] = mockOptions;
			if (this[kMockAgentIsCallHistoryEnabled]) this[kMockAgentRegisterCallHistory]();
		}
		get(origin) {
			let dispatcher = this[kMockAgentGet](origin);
			if (!dispatcher) {
				dispatcher = this[kFactory](origin);
				this[kMockAgentSet](origin, dispatcher);
			}
			return dispatcher;
		}
		dispatch(opts, handler$1) {
			this.get(opts.origin);
			this[kMockAgentAddCallHistoryLog](opts);
			const acceptNonStandardSearchParameters = this[kMockAgentAcceptsNonStandardSearchParameters];
			const dispatchOpts = { ...opts };
			if (acceptNonStandardSearchParameters && dispatchOpts.path) {
				const [path$9, searchParams] = dispatchOpts.path.split("?");
				const normalizedSearchParams = normalizeSearchParams(searchParams, acceptNonStandardSearchParameters);
				dispatchOpts.path = `${path$9}?${normalizedSearchParams}`;
			}
			return this[kAgent].dispatch(dispatchOpts, handler$1);
		}
		async close() {
			this.clearCallHistory();
			await this[kAgent].close();
			this[kClients].clear();
		}
		deactivate() {
			this[kIsMockActive] = false;
		}
		activate() {
			this[kIsMockActive] = true;
		}
		enableNetConnect(matcher) {
			if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) if (Array.isArray(this[kNetConnect])) this[kNetConnect].push(matcher);
			else this[kNetConnect] = [matcher];
			else if (typeof matcher === "undefined") this[kNetConnect] = true;
			else throw new InvalidArgumentError$7("Unsupported matcher. Must be one of String|Function|RegExp.");
		}
		disableNetConnect() {
			this[kNetConnect] = false;
		}
		enableCallHistory() {
			this[kMockAgentIsCallHistoryEnabled] = true;
			return this;
		}
		disableCallHistory() {
			this[kMockAgentIsCallHistoryEnabled] = false;
			return this;
		}
		getCallHistory() {
			return this[kMockAgentMockCallHistoryInstance];
		}
		clearCallHistory() {
			if (this[kMockAgentMockCallHistoryInstance] !== void 0) this[kMockAgentMockCallHistoryInstance].clear();
		}
		get isMockActive() {
			return this[kIsMockActive];
		}
		[kMockAgentRegisterCallHistory]() {
			if (this[kMockAgentMockCallHistoryInstance] === void 0) this[kMockAgentMockCallHistoryInstance] = new MockCallHistory$1();
		}
		[kMockAgentAddCallHistoryLog](opts) {
			if (this[kMockAgentIsCallHistoryEnabled]) {
				this[kMockAgentRegisterCallHistory]();
				this[kMockAgentMockCallHistoryInstance][kMockCallHistoryAddLog](opts);
			}
		}
		[kMockAgentSet](origin, dispatcher) {
			this[kClients].set(origin, {
				count: 0,
				dispatcher
			});
		}
		[kFactory](origin) {
			const mockOptions = Object.assign({ agent: this }, this[kOptions]);
			return this[kOptions] && this[kOptions].connections === 1 ? new MockClient$1(origin, mockOptions) : new MockPool$1(origin, mockOptions);
		}
		[kMockAgentGet](origin) {
			const result = this[kClients].get(origin);
			if (result?.dispatcher) return result.dispatcher;
			if (typeof origin !== "string") {
				const dispatcher = this[kFactory]("http://localhost:9999");
				this[kMockAgentSet](origin, dispatcher);
				return dispatcher;
			}
			for (const [keyMatcher, result$1] of Array.from(this[kClients])) if (result$1 && typeof keyMatcher !== "string" && matchValue(keyMatcher, origin)) {
				const dispatcher = this[kFactory](origin);
				this[kMockAgentSet](origin, dispatcher);
				dispatcher[kDispatches] = result$1.dispatcher[kDispatches];
				return dispatcher;
			}
		}
		[kGetNetConnect]() {
			return this[kNetConnect];
		}
		pendingInterceptors() {
			const mockAgentClients = this[kClients];
			return Array.from(mockAgentClients.entries()).flatMap(([origin, result]) => result.dispatcher[kDispatches].map((dispatch) => ({
				...dispatch,
				origin
			}))).filter(({ pending }) => pending);
		}
		assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
			const pending = this.pendingInterceptors();
			if (pending.length === 0) return;
			throw new UndiciError(pending.length === 1 ? `1 interceptor is pending:\n\n${pendingInterceptorsFormatter.format(pending)}`.trim() : `${pending.length} interceptors are pending:\n\n${pendingInterceptorsFormatter.format(pending)}`.trim());
		}
	};
	module.exports = MockAgent$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/global.js
var require_global = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/global.js"(exports, module) {
	const globalDispatcher = Symbol.for("undici.globalDispatcher.1");
	const { InvalidArgumentError: InvalidArgumentError$6 } = require_errors();
	const Agent$1 = require_agent();
	if (getGlobalDispatcher$3() === void 0) setGlobalDispatcher$1(new Agent$1());
	function setGlobalDispatcher$1(agent) {
		if (!agent || typeof agent.dispatch !== "function") throw new InvalidArgumentError$6("Argument agent must implement Agent");
		Object.defineProperty(globalThis, globalDispatcher, {
			value: agent,
			writable: true,
			enumerable: false,
			configurable: false
		});
	}
	function getGlobalDispatcher$3() {
		return globalThis[globalDispatcher];
	}
	module.exports = {
		setGlobalDispatcher: setGlobalDispatcher$1,
		getGlobalDispatcher: getGlobalDispatcher$3
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/decorator-handler.js
var require_decorator_handler = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/decorator-handler.js"(exports, module) {
	const assert$12 = __require("node:assert");
	const WrapHandler = require_wrap_handler();
	/**
	* @deprecated
	*/
	module.exports = class DecoratorHandler$5 {
		#handler;
		#onCompleteCalled = false;
		#onErrorCalled = false;
		#onResponseStartCalled = false;
		constructor(handler$1) {
			if (typeof handler$1 !== "object" || handler$1 === null) throw new TypeError("handler must be an object");
			this.#handler = WrapHandler.wrap(handler$1);
		}
		onRequestStart(...args) {
			this.#handler.onRequestStart?.(...args);
		}
		onRequestUpgrade(...args) {
			assert$12(!this.#onCompleteCalled);
			assert$12(!this.#onErrorCalled);
			return this.#handler.onRequestUpgrade?.(...args);
		}
		onResponseStart(...args) {
			assert$12(!this.#onCompleteCalled);
			assert$12(!this.#onErrorCalled);
			assert$12(!this.#onResponseStartCalled);
			this.#onResponseStartCalled = true;
			return this.#handler.onResponseStart?.(...args);
		}
		onResponseData(...args) {
			assert$12(!this.#onCompleteCalled);
			assert$12(!this.#onErrorCalled);
			return this.#handler.onResponseData?.(...args);
		}
		onResponseEnd(...args) {
			assert$12(!this.#onCompleteCalled);
			assert$12(!this.#onErrorCalled);
			this.#onCompleteCalled = true;
			return this.#handler.onResponseEnd?.(...args);
		}
		onResponseError(...args) {
			this.#onErrorCalled = true;
			return this.#handler.onResponseError?.(...args);
		}
		/**
		* @deprecated
		*/
		onBodySent() {}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/redirect-handler.js
var require_redirect_handler = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/redirect-handler.js"(exports, module) {
	const util$7 = require_util$5();
	const { kBodyUsed } = require_symbols();
	const assert$11 = __require("node:assert");
	const { InvalidArgumentError: InvalidArgumentError$5 } = require_errors();
	const EE$1 = __require("node:events");
	const redirectableStatusCodes = [
		300,
		301,
		302,
		303,
		307,
		308
	];
	const kBody = Symbol("body");
	const noop$3 = () => {};
	var BodyAsyncIterable = class {
		constructor(body) {
			this[kBody] = body;
			this[kBodyUsed] = false;
		}
		async *[Symbol.asyncIterator]() {
			assert$11(!this[kBodyUsed], "disturbed");
			this[kBodyUsed] = true;
			yield* this[kBody];
		}
	};
	var RedirectHandler$2 = class RedirectHandler$2 {
		static buildDispatch(dispatcher, maxRedirections) {
			if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new InvalidArgumentError$5("maxRedirections must be a positive number");
			const dispatch = dispatcher.dispatch.bind(dispatcher);
			return (opts, originalHandler) => dispatch(opts, new RedirectHandler$2(dispatch, maxRedirections, opts, originalHandler));
		}
		constructor(dispatch, maxRedirections, opts, handler$1) {
			if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new InvalidArgumentError$5("maxRedirections must be a positive number");
			this.dispatch = dispatch;
			this.location = null;
			const { maxRedirections: _,...cleanOpts } = opts;
			this.opts = cleanOpts;
			this.maxRedirections = maxRedirections;
			this.handler = handler$1;
			this.history = [];
			if (util$7.isStream(this.opts.body)) {
				if (util$7.bodyLength(this.opts.body) === 0) this.opts.body.on("data", function() {
					assert$11(false);
				});
				if (typeof this.opts.body.readableDidRead !== "boolean") {
					this.opts.body[kBodyUsed] = false;
					EE$1.prototype.on.call(this.opts.body, "data", function() {
						this[kBodyUsed] = true;
					});
				}
			} else if (this.opts.body && typeof this.opts.body.pipeTo === "function") this.opts.body = new BodyAsyncIterable(this.opts.body);
			else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util$7.isIterable(this.opts.body) && !util$7.isFormDataLike(this.opts.body)) this.opts.body = new BodyAsyncIterable(this.opts.body);
		}
		onRequestStart(controller, context$1) {
			this.handler.onRequestStart?.(controller, {
				...context$1,
				history: this.history
			});
		}
		onRequestUpgrade(controller, statusCode, headers, socket) {
			this.handler.onRequestUpgrade?.(controller, statusCode, headers, socket);
		}
		onResponseStart(controller, statusCode, headers, statusMessage) {
			if (this.opts.throwOnMaxRedirect && this.history.length >= this.maxRedirections) throw new Error("max redirects");
			if ((statusCode === 301 || statusCode === 302) && this.opts.method === "POST") {
				this.opts.method = "GET";
				if (util$7.isStream(this.opts.body)) util$7.destroy(this.opts.body.on("error", noop$3));
				this.opts.body = null;
			}
			if (statusCode === 303 && this.opts.method !== "HEAD") {
				this.opts.method = "GET";
				if (util$7.isStream(this.opts.body)) util$7.destroy(this.opts.body.on("error", noop$3));
				this.opts.body = null;
			}
			this.location = this.history.length >= this.maxRedirections || util$7.isDisturbed(this.opts.body) || redirectableStatusCodes.indexOf(statusCode) === -1 ? null : headers.location;
			if (this.opts.origin) this.history.push(new URL(this.opts.path, this.opts.origin));
			if (!this.location) {
				this.handler.onResponseStart?.(controller, statusCode, headers, statusMessage);
				return;
			}
			const { origin, pathname, search } = util$7.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
			const path$9 = search ? `${pathname}${search}` : pathname;
			this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
			this.opts.path = path$9;
			this.opts.origin = origin;
			this.opts.query = null;
		}
		onResponseData(controller, chunk) {
			if (this.location) {} else this.handler.onResponseData?.(controller, chunk);
		}
		onResponseEnd(controller, trailers) {
			if (this.location) this.dispatch(this.opts, this);
			else this.handler.onResponseEnd(controller, trailers);
		}
		onResponseError(controller, error$1) {
			this.handler.onResponseError?.(controller, error$1);
		}
	};
	function shouldRemoveHeader(header, removeContent, unknownOrigin) {
		if (header.length === 4) return util$7.headerNameToString(header) === "host";
		if (removeContent && util$7.headerNameToString(header).startsWith("content-")) return true;
		if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
			const name$2 = util$7.headerNameToString(header);
			return name$2 === "authorization" || name$2 === "cookie" || name$2 === "proxy-authorization";
		}
		return false;
	}
	function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
		const ret = [];
		if (Array.isArray(headers)) {
			for (let i$1 = 0; i$1 < headers.length; i$1 += 2) if (!shouldRemoveHeader(headers[i$1], removeContent, unknownOrigin)) ret.push(headers[i$1], headers[i$1 + 1]);
		} else if (headers && typeof headers === "object") {
			const entries = typeof headers[Symbol.iterator] === "function" ? headers : Object.entries(headers);
			for (const [key, value] of entries) if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) ret.push(key, value);
		} else assert$11(headers == null, "headers must be an object or an array");
		return ret;
	}
	module.exports = RedirectHandler$2;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/interceptor/redirect.js
var require_redirect = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/interceptor/redirect.js"(exports, module) {
	const RedirectHandler$1 = require_redirect_handler();
	function createRedirectInterceptor({ maxRedirections: defaultMaxRedirections } = {}) {
		return (dispatch) => {
			return function Intercept(opts, handler$1) {
				const { maxRedirections = defaultMaxRedirections,...rest } = opts;
				if (maxRedirections == null || maxRedirections === 0) return dispatch(opts, handler$1);
				const dispatchOpts = { ...rest };
				const redirectHandler = new RedirectHandler$1(dispatch, maxRedirections, dispatchOpts, handler$1);
				return dispatch(dispatchOpts, redirectHandler);
			};
		};
	}
	module.exports = createRedirectInterceptor;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/interceptor/response-error.js
var require_response_error = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/interceptor/response-error.js"(exports, module) {
	const DecoratorHandler$3 = require_decorator_handler();
	const { ResponseError } = require_errors();
	var ResponseErrorHandler = class extends DecoratorHandler$3 {
		#statusCode;
		#contentType;
		#decoder;
		#headers;
		#body;
		constructor(_opts, { handler: handler$1 }) {
			super(handler$1);
		}
		#checkContentType(contentType) {
			return (this.#contentType ?? "").indexOf(contentType) === 0;
		}
		onRequestStart(controller, context$1) {
			this.#statusCode = 0;
			this.#contentType = null;
			this.#decoder = null;
			this.#headers = null;
			this.#body = "";
			return super.onRequestStart(controller, context$1);
		}
		onResponseStart(controller, statusCode, headers, statusMessage) {
			this.#statusCode = statusCode;
			this.#headers = headers;
			this.#contentType = headers["content-type"];
			if (this.#statusCode < 400) return super.onResponseStart(controller, statusCode, headers, statusMessage);
			if (this.#checkContentType("application/json") || this.#checkContentType("text/plain")) this.#decoder = new TextDecoder("utf-8");
		}
		onResponseData(controller, chunk) {
			if (this.#statusCode < 400) return super.onResponseData(controller, chunk);
			this.#body += this.#decoder?.decode(chunk, { stream: true }) ?? "";
		}
		onResponseEnd(controller, trailers) {
			if (this.#statusCode >= 400) {
				this.#body += this.#decoder?.decode(void 0, { stream: false }) ?? "";
				if (this.#checkContentType("application/json")) try {
					this.#body = JSON.parse(this.#body);
				} catch {}
				let err;
				const stackTraceLimit = Error.stackTraceLimit;
				Error.stackTraceLimit = 0;
				try {
					err = new ResponseError("Response Error", this.#statusCode, {
						body: this.#body,
						headers: this.#headers
					});
				} finally {
					Error.stackTraceLimit = stackTraceLimit;
				}
				super.onResponseError(controller, err);
			} else super.onResponseEnd(controller, trailers);
		}
		onResponseError(controller, err) {
			super.onResponseError(controller, err);
		}
	};
	module.exports = () => {
		return (dispatch) => {
			return function Intercept(opts, handler$1) {
				return dispatch(opts, new ResponseErrorHandler(opts, { handler: handler$1 }));
			};
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/interceptor/retry.js
var require_retry = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/interceptor/retry.js"(exports, module) {
	const RetryHandler$1 = require_retry_handler();
	module.exports = (globalOpts) => {
		return (dispatch) => {
			return function retryInterceptor(opts, handler$1) {
				return dispatch(opts, new RetryHandler$1({
					...opts,
					retryOptions: {
						...globalOpts,
						...opts.retryOptions
					}
				}, {
					handler: handler$1,
					dispatch
				}));
			};
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/interceptor/dump.js
var require_dump = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/interceptor/dump.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$4, RequestAbortedError } = require_errors();
	const DecoratorHandler$2 = require_decorator_handler();
	var DumpHandler = class extends DecoratorHandler$2 {
		#maxSize = 1024 * 1024;
		#dumped = false;
		#size = 0;
		#controller = null;
		aborted = false;
		reason = false;
		constructor({ maxSize, signal }, handler$1) {
			if (maxSize != null && (!Number.isFinite(maxSize) || maxSize < 1)) throw new InvalidArgumentError$4("maxSize must be a number greater than 0");
			super(handler$1);
			this.#maxSize = maxSize ?? this.#maxSize;
		}
		#abort(reason) {
			this.aborted = true;
			this.reason = reason;
		}
		onRequestStart(controller, context$1) {
			controller.abort = this.#abort.bind(this);
			this.#controller = controller;
			return super.onRequestStart(controller, context$1);
		}
		onResponseStart(controller, statusCode, headers, statusMessage) {
			const contentLength = headers["content-length"];
			if (contentLength != null && contentLength > this.#maxSize) throw new RequestAbortedError(`Response size (${contentLength}) larger than maxSize (${this.#maxSize})`);
			if (this.aborted === true) return true;
			return super.onResponseStart(controller, statusCode, headers, statusMessage);
		}
		onResponseError(controller, err) {
			if (this.#dumped) return;
			err = this.#controller.reason ?? err;
			super.onResponseError(controller, err);
		}
		onResponseData(controller, chunk) {
			this.#size = this.#size + chunk.length;
			if (this.#size >= this.#maxSize) {
				this.#dumped = true;
				if (this.aborted === true) super.onResponseError(controller, this.reason);
				else super.onResponseEnd(controller, {});
			}
			return true;
		}
		onResponseEnd(controller, trailers) {
			if (this.#dumped) return;
			if (this.#controller.aborted === true) {
				super.onResponseError(controller, this.reason);
				return;
			}
			super.onResponseEnd(controller, trailers);
		}
	};
	function createDumpInterceptor({ maxSize: defaultMaxSize } = { maxSize: 1024 * 1024 }) {
		return (dispatch) => {
			return function Intercept(opts, handler$1) {
				const { dumpMaxSize = defaultMaxSize } = opts;
				const dumpHandler = new DumpHandler({
					maxSize: dumpMaxSize,
					signal: opts.signal
				}, handler$1);
				return dispatch(opts, dumpHandler);
			};
		};
	}
	module.exports = createDumpInterceptor;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/interceptor/dns.js
var require_dns = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/interceptor/dns.js"(exports, module) {
	const { isIP } = __require("node:net");
	const { lookup } = __require("node:dns");
	const DecoratorHandler$1 = require_decorator_handler();
	const { InvalidArgumentError: InvalidArgumentError$3, InformationalError } = require_errors();
	const maxInt = Math.pow(2, 31) - 1;
	var DNSInstance = class {
		#maxTTL = 0;
		#maxItems = 0;
		#records = /* @__PURE__ */ new Map();
		dualStack = true;
		affinity = null;
		lookup = null;
		pick = null;
		constructor(opts) {
			this.#maxTTL = opts.maxTTL;
			this.#maxItems = opts.maxItems;
			this.dualStack = opts.dualStack;
			this.affinity = opts.affinity;
			this.lookup = opts.lookup ?? this.#defaultLookup;
			this.pick = opts.pick ?? this.#defaultPick;
		}
		get full() {
			return this.#records.size === this.#maxItems;
		}
		runLookup(origin, opts, cb) {
			const ips = this.#records.get(origin.hostname);
			if (ips == null && this.full) {
				cb(null, origin);
				return;
			}
			const newOpts = {
				affinity: this.affinity,
				dualStack: this.dualStack,
				lookup: this.lookup,
				pick: this.pick,
				...opts.dns,
				maxTTL: this.#maxTTL,
				maxItems: this.#maxItems
			};
			if (ips == null) this.lookup(origin, newOpts, (err, addresses) => {
				if (err || addresses == null || addresses.length === 0) {
					cb(err ?? new InformationalError("No DNS entries found"));
					return;
				}
				this.setRecords(origin, addresses);
				const records = this.#records.get(origin.hostname);
				const ip = this.pick(origin, records, newOpts.affinity);
				let port;
				if (typeof ip.port === "number") port = `:${ip.port}`;
				else if (origin.port !== "") port = `:${origin.port}`;
				else port = "";
				cb(null, new URL(`${origin.protocol}//${ip.family === 6 ? `[${ip.address}]` : ip.address}${port}`));
			});
			else {
				const ip = this.pick(origin, ips, newOpts.affinity);
				if (ip == null) {
					this.#records.delete(origin.hostname);
					this.runLookup(origin, opts, cb);
					return;
				}
				let port;
				if (typeof ip.port === "number") port = `:${ip.port}`;
				else if (origin.port !== "") port = `:${origin.port}`;
				else port = "";
				cb(null, new URL(`${origin.protocol}//${ip.family === 6 ? `[${ip.address}]` : ip.address}${port}`));
			}
		}
		#defaultLookup(origin, opts, cb) {
			lookup(origin.hostname, {
				all: true,
				family: this.dualStack === false ? this.affinity : 0,
				order: "ipv4first"
			}, (err, addresses) => {
				if (err) return cb(err);
				const results = /* @__PURE__ */ new Map();
				for (const addr of addresses) results.set(`${addr.address}:${addr.family}`, addr);
				cb(null, results.values());
			});
		}
		#defaultPick(origin, hostnameRecords, affinity) {
			let ip = null;
			const { records, offset } = hostnameRecords;
			let family;
			if (this.dualStack) {
				if (affinity == null) if (offset == null || offset === maxInt) {
					hostnameRecords.offset = 0;
					affinity = 4;
				} else {
					hostnameRecords.offset++;
					affinity = (hostnameRecords.offset & 1) === 1 ? 6 : 4;
				}
				if (records[affinity] != null && records[affinity].ips.length > 0) family = records[affinity];
				else family = records[affinity === 4 ? 6 : 4];
			} else family = records[affinity];
			if (family == null || family.ips.length === 0) return ip;
			if (family.offset == null || family.offset === maxInt) family.offset = 0;
			else family.offset++;
			const position = family.offset % family.ips.length;
			ip = family.ips[position] ?? null;
			if (ip == null) return ip;
			if (Date.now() - ip.timestamp > ip.ttl) {
				family.ips.splice(position, 1);
				return this.pick(origin, hostnameRecords, affinity);
			}
			return ip;
		}
		pickFamily(origin, ipFamily) {
			const records = this.#records.get(origin.hostname)?.records;
			if (!records) return null;
			const family = records[ipFamily];
			if (!family) return null;
			if (family.offset == null || family.offset === maxInt) family.offset = 0;
			else family.offset++;
			const position = family.offset % family.ips.length;
			const ip = family.ips[position] ?? null;
			if (ip == null) return ip;
			if (Date.now() - ip.timestamp > ip.ttl) family.ips.splice(position, 1);
			return ip;
		}
		setRecords(origin, addresses) {
			const timestamp = Date.now();
			const records = { records: {
				4: null,
				6: null
			} };
			for (const record of addresses) {
				record.timestamp = timestamp;
				if (typeof record.ttl === "number") record.ttl = Math.min(record.ttl, this.#maxTTL);
				else record.ttl = this.#maxTTL;
				const familyRecords = records.records[record.family] ?? { ips: [] };
				familyRecords.ips.push(record);
				records.records[record.family] = familyRecords;
			}
			this.#records.set(origin.hostname, records);
		}
		deleteRecords(origin) {
			this.#records.delete(origin.hostname);
		}
		getHandler(meta, opts) {
			return new DNSDispatchHandler(this, meta, opts);
		}
	};
	var DNSDispatchHandler = class extends DecoratorHandler$1 {
		#state = null;
		#opts = null;
		#dispatch = null;
		#origin = null;
		#controller = null;
		#newOrigin = null;
		#firstTry = true;
		constructor(state, { origin, handler: handler$1, dispatch, newOrigin }, opts) {
			super(handler$1);
			this.#origin = origin;
			this.#newOrigin = newOrigin;
			this.#opts = { ...opts };
			this.#state = state;
			this.#dispatch = dispatch;
		}
		onResponseError(controller, err) {
			switch (err.code) {
				case "ETIMEDOUT":
				case "ECONNREFUSED": {
					if (this.#state.dualStack) {
						if (!this.#firstTry) {
							super.onResponseError(controller, err);
							return;
						}
						this.#firstTry = false;
						const otherFamily = this.#newOrigin.hostname[0] === "[" ? 4 : 6;
						const ip = this.#state.pickFamily(this.#origin, otherFamily);
						if (ip == null) {
							super.onResponseError(controller, err);
							return;
						}
						let port;
						if (typeof ip.port === "number") port = `:${ip.port}`;
						else if (this.#origin.port !== "") port = `:${this.#origin.port}`;
						else port = "";
						const dispatchOpts = {
							...this.#opts,
							origin: `${this.#origin.protocol}//${ip.family === 6 ? `[${ip.address}]` : ip.address}${port}`
						};
						this.#dispatch(dispatchOpts, this);
						return;
					}
					super.onResponseError(controller, err);
					break;
				}
				case "ENOTFOUND":
					this.#state.deleteRecords(this.#origin);
					super.onResponseError(controller, err);
					break;
				default:
					super.onResponseError(controller, err);
					break;
			}
		}
	};
	module.exports = (interceptorOpts) => {
		if (interceptorOpts?.maxTTL != null && (typeof interceptorOpts?.maxTTL !== "number" || interceptorOpts?.maxTTL < 0)) throw new InvalidArgumentError$3("Invalid maxTTL. Must be a positive number");
		if (interceptorOpts?.maxItems != null && (typeof interceptorOpts?.maxItems !== "number" || interceptorOpts?.maxItems < 1)) throw new InvalidArgumentError$3("Invalid maxItems. Must be a positive number and greater than zero");
		if (interceptorOpts?.affinity != null && interceptorOpts?.affinity !== 4 && interceptorOpts?.affinity !== 6) throw new InvalidArgumentError$3("Invalid affinity. Must be either 4 or 6");
		if (interceptorOpts?.dualStack != null && typeof interceptorOpts?.dualStack !== "boolean") throw new InvalidArgumentError$3("Invalid dualStack. Must be a boolean");
		if (interceptorOpts?.lookup != null && typeof interceptorOpts?.lookup !== "function") throw new InvalidArgumentError$3("Invalid lookup. Must be a function");
		if (interceptorOpts?.pick != null && typeof interceptorOpts?.pick !== "function") throw new InvalidArgumentError$3("Invalid pick. Must be a function");
		const dualStack = interceptorOpts?.dualStack ?? true;
		let affinity;
		if (dualStack) affinity = interceptorOpts?.affinity ?? null;
		else affinity = interceptorOpts?.affinity ?? 4;
		const opts = {
			maxTTL: interceptorOpts?.maxTTL ?? 1e4,
			lookup: interceptorOpts?.lookup ?? null,
			pick: interceptorOpts?.pick ?? null,
			dualStack,
			affinity,
			maxItems: interceptorOpts?.maxItems ?? Infinity
		};
		const instance = new DNSInstance(opts);
		return (dispatch) => {
			return function dnsInterceptor(origDispatchOpts, handler$1) {
				const origin = origDispatchOpts.origin.constructor === URL ? origDispatchOpts.origin : new URL(origDispatchOpts.origin);
				if (isIP(origin.hostname) !== 0) return dispatch(origDispatchOpts, handler$1);
				instance.runLookup(origin, origDispatchOpts, (err, newOrigin) => {
					if (err) return handler$1.onResponseError(null, err);
					const dispatchOpts = {
						...origDispatchOpts,
						servername: origin.hostname,
						origin: newOrigin.origin,
						headers: {
							host: origin.host,
							...origDispatchOpts.headers
						}
					};
					dispatch(dispatchOpts, instance.getHandler({
						origin,
						dispatch,
						handler: handler$1,
						newOrigin
					}, origDispatchOpts));
				});
				return true;
			};
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/util/cache.js
var require_cache$2 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/util/cache.js"(exports, module) {
	const { safeHTTPMethods } = require_util$5();
	const { serializePathWithQuery } = require_util$5();
	/**
	* @param {import('../../types/dispatcher.d.ts').default.DispatchOptions} opts
	*/
	function makeCacheKey$1(opts) {
		if (!opts.origin) throw new Error("opts.origin is undefined");
		let fullPath;
		try {
			fullPath = serializePathWithQuery(opts.path || "/", opts.query);
		} catch (error$1) {
			fullPath = opts.path || "/";
		}
		return {
			origin: opts.origin.toString(),
			method: opts.method,
			path: fullPath,
			headers: opts.headers
		};
	}
	/**
	* @param {Record<string, string[] | string>}
	* @returns {Record<string, string[] | string>}
	*/
	function normaliseHeaders$1(opts) {
		let headers;
		if (opts.headers == null) headers = {};
		else if (typeof opts.headers[Symbol.iterator] === "function") {
			headers = {};
			for (const x of opts.headers) {
				if (!Array.isArray(x)) throw new Error("opts.headers is not a valid header map");
				const [key, val] = x;
				if (typeof key !== "string" || typeof val !== "string") throw new Error("opts.headers is not a valid header map");
				headers[key.toLowerCase()] = val;
			}
		} else if (typeof opts.headers === "object") {
			headers = {};
			for (const key of Object.keys(opts.headers)) headers[key.toLowerCase()] = opts.headers[key];
		} else throw new Error("opts.headers is not an object");
		return headers;
	}
	/**
	* @param {any} key
	*/
	function assertCacheKey$2(key) {
		if (typeof key !== "object") throw new TypeError(`expected key to be object, got ${typeof key}`);
		for (const property of [
			"origin",
			"method",
			"path"
		]) if (typeof key[property] !== "string") throw new TypeError(`expected key.${property} to be string, got ${typeof key[property]}`);
		if (key.headers !== void 0 && typeof key.headers !== "object") throw new TypeError(`expected headers to be object, got ${typeof key}`);
	}
	/**
	* @param {any} value
	*/
	function assertCacheValue$2(value) {
		if (typeof value !== "object") throw new TypeError(`expected value to be object, got ${typeof value}`);
		for (const property of [
			"statusCode",
			"cachedAt",
			"staleAt",
			"deleteAt"
		]) if (typeof value[property] !== "number") throw new TypeError(`expected value.${property} to be number, got ${typeof value[property]}`);
		if (typeof value.statusMessage !== "string") throw new TypeError(`expected value.statusMessage to be string, got ${typeof value.statusMessage}`);
		if (value.headers != null && typeof value.headers !== "object") throw new TypeError(`expected value.rawHeaders to be object, got ${typeof value.headers}`);
		if (value.vary !== void 0 && typeof value.vary !== "object") throw new TypeError(`expected value.vary to be object, got ${typeof value.vary}`);
		if (value.etag !== void 0 && typeof value.etag !== "string") throw new TypeError(`expected value.etag to be string, got ${typeof value.etag}`);
	}
	/**
	* @see https://www.rfc-editor.org/rfc/rfc9111.html#name-cache-control
	* @see https://www.iana.org/assignments/http-cache-directives/http-cache-directives.xhtml
	
	* @param {string | string[]} header
	* @returns {import('../../types/cache-interceptor.d.ts').default.CacheControlDirectives}
	*/
	function parseCacheControlHeader$2(header) {
		/**
		* @type {import('../../types/cache-interceptor.d.ts').default.CacheControlDirectives}
		*/
		const output = {};
		let directives;
		if (Array.isArray(header)) {
			directives = [];
			for (const directive of header) directives.push(...directive.split(","));
		} else directives = header.split(",");
		for (let i$1 = 0; i$1 < directives.length; i$1++) {
			const directive = directives[i$1].toLowerCase();
			const keyValueDelimiter = directive.indexOf("=");
			let key;
			let value;
			if (keyValueDelimiter !== -1) {
				key = directive.substring(0, keyValueDelimiter).trimStart();
				value = directive.substring(keyValueDelimiter + 1);
			} else key = directive.trim();
			switch (key) {
				case "min-fresh":
				case "max-stale":
				case "max-age":
				case "s-maxage":
				case "stale-while-revalidate":
				case "stale-if-error": {
					if (value === void 0 || value[0] === " ") continue;
					if (value.length >= 2 && value[0] === "\"" && value[value.length - 1] === "\"") value = value.substring(1, value.length - 1);
					const parsedValue = parseInt(value, 10);
					if (parsedValue !== parsedValue) continue;
					if (key === "max-age" && key in output && output[key] >= parsedValue) continue;
					output[key] = parsedValue;
					break;
				}
				case "private":
				case "no-cache": if (value) {
					if (value[0] === "\"") {
						const headers = [value.substring(1)];
						let foundEndingQuote = value[value.length - 1] === "\"";
						if (!foundEndingQuote) for (let j = i$1 + 1; j < directives.length; j++) {
							const nextPart = directives[j];
							const nextPartLength = nextPart.length;
							headers.push(nextPart.trim());
							if (nextPartLength !== 0 && nextPart[nextPartLength - 1] === "\"") {
								foundEndingQuote = true;
								break;
							}
						}
						if (foundEndingQuote) {
							let lastHeader = headers[headers.length - 1];
							if (lastHeader[lastHeader.length - 1] === "\"") {
								lastHeader = lastHeader.substring(0, lastHeader.length - 1);
								headers[headers.length - 1] = lastHeader;
							}
							if (key in output) output[key] = output[key].concat(headers);
							else output[key] = headers;
						}
					} else if (key in output) output[key] = output[key].concat(value);
					else output[key] = [value];
					break;
				}
				case "public":
				case "no-store":
				case "must-revalidate":
				case "proxy-revalidate":
				case "immutable":
				case "no-transform":
				case "must-understand":
				case "only-if-cached":
					if (value) continue;
					output[key] = true;
					break;
				default: continue;
			}
		}
		return output;
	}
	/**
	* @param {string | string[]} varyHeader Vary header from the server
	* @param {Record<string, string | string[]>} headers Request headers
	* @returns {Record<string, string | string[]>}
	*/
	function parseVaryHeader$1(varyHeader, headers) {
		if (typeof varyHeader === "string" && varyHeader.includes("*")) return headers;
		const output = {};
		const varyingHeaders = typeof varyHeader === "string" ? varyHeader.split(",") : varyHeader;
		for (const header of varyingHeaders) {
			const trimmedHeader = header.trim().toLowerCase();
			output[trimmedHeader] = headers[trimmedHeader] ?? null;
		}
		return output;
	}
	/**
	* Note: this deviates from the spec a little. Empty etags ("", W/"") are valid,
	*  however, including them in cached resposnes serves little to no purpose.
	*
	* @see https://www.rfc-editor.org/rfc/rfc9110.html#name-etag
	*
	* @param {string} etag
	* @returns {boolean}
	*/
	function isEtagUsable$1(etag) {
		if (etag.length <= 2) return false;
		if (etag[0] === "\"" && etag[etag.length - 1] === "\"") return !(etag[1] === "\"" || etag.startsWith("\"W/"));
		if (etag.startsWith("W/\"") && etag[etag.length - 1] === "\"") return etag.length !== 4;
		return false;
	}
	/**
	* @param {unknown} store
	* @returns {asserts store is import('../../types/cache-interceptor.d.ts').default.CacheStore}
	*/
	function assertCacheStore$1(store$4, name$2 = "CacheStore") {
		if (typeof store$4 !== "object" || store$4 === null) throw new TypeError(`expected type of ${name$2} to be a CacheStore, got ${store$4 === null ? "null" : typeof store$4}`);
		for (const fn of [
			"get",
			"createWriteStream",
			"delete"
		]) if (typeof store$4[fn] !== "function") throw new TypeError(`${name$2} needs to have a \`${fn}()\` function`);
	}
	/**
	* @param {unknown} methods
	* @returns {asserts methods is import('../../types/cache-interceptor.d.ts').default.CacheMethods[]}
	*/
	function assertCacheMethods$1(methods, name$2 = "CacheMethods") {
		if (!Array.isArray(methods)) throw new TypeError(`expected type of ${name$2} needs to be an array, got ${methods === null ? "null" : typeof methods}`);
		if (methods.length === 0) throw new TypeError(`${name$2} needs to have at least one method`);
		for (const method of methods) if (!safeHTTPMethods.includes(method)) throw new TypeError(`element of ${name$2}-array needs to be one of following values: ${safeHTTPMethods.join(", ")}, got ${method}`);
	}
	module.exports = {
		makeCacheKey: makeCacheKey$1,
		normaliseHeaders: normaliseHeaders$1,
		assertCacheKey: assertCacheKey$2,
		assertCacheValue: assertCacheValue$2,
		parseCacheControlHeader: parseCacheControlHeader$2,
		parseVaryHeader: parseVaryHeader$1,
		isEtagUsable: isEtagUsable$1,
		assertCacheMethods: assertCacheMethods$1,
		assertCacheStore: assertCacheStore$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/util/date.js
var require_date = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/util/date.js"(exports, module) {
	const IMF_DAYS = [
		"mon",
		"tue",
		"wed",
		"thu",
		"fri",
		"sat",
		"sun"
	];
	const IMF_SPACES = [
		4,
		7,
		11,
		16,
		25
	];
	const IMF_MONTHS = [
		"jan",
		"feb",
		"mar",
		"apr",
		"may",
		"jun",
		"jul",
		"aug",
		"sep",
		"oct",
		"nov",
		"dec"
	];
	const IMF_COLONS = [19, 22];
	const ASCTIME_SPACES = [
		3,
		7,
		10,
		19
	];
	const RFC850_DAYS = [
		"monday",
		"tuesday",
		"wednesday",
		"thursday",
		"friday",
		"saturday",
		"sunday"
	];
	/**
	* @see https://www.rfc-editor.org/rfc/rfc9110.html#name-date-time-formats
	*
	* @param {string} date
	* @param {Date} [now]
	* @returns {Date | undefined}
	*/
	function parseHttpDate$1(date, now$1) {
		date = date.toLowerCase();
		switch (date[3]) {
			case ",": return parseImfDate(date);
			case " ": return parseAscTimeDate(date);
			default: return parseRfc850Date(date, now$1);
		}
	}
	/**
	* @see https://httpwg.org/specs/rfc9110.html#preferred.date.format
	*
	* @param {string} date
	* @returns {Date | undefined}
	*/
	function parseImfDate(date) {
		if (date.length !== 29) return void 0;
		if (!date.endsWith("gmt")) return void 0;
		for (const spaceInx of IMF_SPACES) if (date[spaceInx] !== " ") return void 0;
		for (const colonIdx of IMF_COLONS) if (date[colonIdx] !== ":") return void 0;
		const dayName = date.substring(0, 3);
		if (!IMF_DAYS.includes(dayName)) return void 0;
		const dayString = date.substring(5, 7);
		const day = Number.parseInt(dayString);
		if (isNaN(day) || day < 10 && dayString[0] !== "0") return void 0;
		const month = date.substring(8, 11);
		const monthIdx = IMF_MONTHS.indexOf(month);
		if (monthIdx === -1) return void 0;
		const year = Number.parseInt(date.substring(12, 16));
		if (isNaN(year)) return void 0;
		const hourString = date.substring(17, 19);
		const hour = Number.parseInt(hourString);
		if (isNaN(hour) || hour < 10 && hourString[0] !== "0") return void 0;
		const minuteString = date.substring(20, 22);
		const minute = Number.parseInt(minuteString);
		if (isNaN(minute) || minute < 10 && minuteString[0] !== "0") return void 0;
		const secondString = date.substring(23, 25);
		const second = Number.parseInt(secondString);
		if (isNaN(second) || second < 10 && secondString[0] !== "0") return void 0;
		return new Date(Date.UTC(year, monthIdx, day, hour, minute, second));
	}
	/**
	* @see https://httpwg.org/specs/rfc9110.html#obsolete.date.formats
	*
	* @param {string} date
	* @returns {Date | undefined}
	*/
	function parseAscTimeDate(date) {
		if (date.length !== 24) return void 0;
		for (const spaceIdx of ASCTIME_SPACES) if (date[spaceIdx] !== " ") return void 0;
		const dayName = date.substring(0, 3);
		if (!IMF_DAYS.includes(dayName)) return void 0;
		const month = date.substring(4, 7);
		const monthIdx = IMF_MONTHS.indexOf(month);
		if (monthIdx === -1) return void 0;
		const dayString = date.substring(8, 10);
		const day = Number.parseInt(dayString);
		if (isNaN(day) || day < 10 && dayString[0] !== " ") return void 0;
		const hourString = date.substring(11, 13);
		const hour = Number.parseInt(hourString);
		if (isNaN(hour) || hour < 10 && hourString[0] !== "0") return void 0;
		const minuteString = date.substring(14, 16);
		const minute = Number.parseInt(minuteString);
		if (isNaN(minute) || minute < 10 && minuteString[0] !== "0") return void 0;
		const secondString = date.substring(17, 19);
		const second = Number.parseInt(secondString);
		if (isNaN(second) || second < 10 && secondString[0] !== "0") return void 0;
		const year = Number.parseInt(date.substring(20, 24));
		if (isNaN(year)) return void 0;
		return new Date(Date.UTC(year, monthIdx, day, hour, minute, second));
	}
	/**
	* @see https://httpwg.org/specs/rfc9110.html#obsolete.date.formats
	*
	* @param {string} date
	* @param {Date} [now]
	* @returns {Date | undefined}
	*/
	function parseRfc850Date(date, now$1 = /* @__PURE__ */ new Date()) {
		if (!date.endsWith("gmt")) return void 0;
		const commaIndex = date.indexOf(",");
		if (commaIndex === -1) return void 0;
		if (date.length - commaIndex - 1 !== 23) return void 0;
		const dayName = date.substring(0, commaIndex);
		if (!RFC850_DAYS.includes(dayName)) return void 0;
		if (date[commaIndex + 1] !== " " || date[commaIndex + 4] !== "-" || date[commaIndex + 8] !== "-" || date[commaIndex + 11] !== " " || date[commaIndex + 14] !== ":" || date[commaIndex + 17] !== ":" || date[commaIndex + 20] !== " ") return void 0;
		const dayString = date.substring(commaIndex + 2, commaIndex + 4);
		const day = Number.parseInt(dayString);
		if (isNaN(day) || day < 10 && dayString[0] !== "0") return void 0;
		const month = date.substring(commaIndex + 5, commaIndex + 8);
		const monthIdx = IMF_MONTHS.indexOf(month);
		if (monthIdx === -1) return void 0;
		let year = Number.parseInt(date.substring(commaIndex + 9, commaIndex + 11));
		if (isNaN(year)) return void 0;
		const currentYear = now$1.getUTCFullYear();
		const currentDecade = currentYear % 100;
		const currentCentury = Math.floor(currentYear / 100);
		if (year > currentDecade && year - currentDecade >= 50) year += (currentCentury - 1) * 100;
		else year += currentCentury * 100;
		const hourString = date.substring(commaIndex + 12, commaIndex + 14);
		const hour = Number.parseInt(hourString);
		if (isNaN(hour) || hour < 10 && hourString[0] !== "0") return void 0;
		const minuteString = date.substring(commaIndex + 15, commaIndex + 17);
		const minute = Number.parseInt(minuteString);
		if (isNaN(minute) || minute < 10 && minuteString[0] !== "0") return void 0;
		const secondString = date.substring(commaIndex + 18, commaIndex + 20);
		const second = Number.parseInt(secondString);
		if (isNaN(second) || second < 10 && secondString[0] !== "0") return void 0;
		return new Date(Date.UTC(year, monthIdx, day, hour, minute, second));
	}
	module.exports = { parseHttpDate: parseHttpDate$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/cache-handler.js
var require_cache_handler = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/cache-handler.js"(exports, module) {
	const util$6 = require_util$5();
	const { parseCacheControlHeader: parseCacheControlHeader$1, parseVaryHeader, isEtagUsable } = require_cache$2();
	const { parseHttpDate } = require_date();
	function noop$2() {}
	const HEURISTICALLY_CACHEABLE_STATUS_CODES = [
		200,
		203,
		204,
		206,
		300,
		301,
		308,
		404,
		405,
		410,
		414,
		501
	];
	const MAX_RESPONSE_AGE = 2147483647e3;
	/**
	* @typedef {import('../../types/dispatcher.d.ts').default.DispatchHandler} DispatchHandler
	*
	* @implements {DispatchHandler}
	*/
	var CacheHandler$1 = class {
		/**
		* @type {import('../../types/cache-interceptor.d.ts').default.CacheKey}
		*/
		#cacheKey;
		/**
		* @type {import('../../types/cache-interceptor.d.ts').default.CacheHandlerOptions['type']}
		*/
		#cacheType;
		/**
		* @type {number | undefined}
		*/
		#cacheByDefault;
		/**
		* @type {import('../../types/cache-interceptor.d.ts').default.CacheStore}
		*/
		#store;
		/**
		* @type {import('../../types/dispatcher.d.ts').default.DispatchHandler}
		*/
		#handler;
		/**
		* @type {import('node:stream').Writable | undefined}
		*/
		#writeStream;
		/**
		* @param {import('../../types/cache-interceptor.d.ts').default.CacheHandlerOptions} opts
		* @param {import('../../types/cache-interceptor.d.ts').default.CacheKey} cacheKey
		* @param {import('../../types/dispatcher.d.ts').default.DispatchHandler} handler
		*/
		constructor({ store: store$4, type, cacheByDefault }, cacheKey, handler$1) {
			this.#store = store$4;
			this.#cacheType = type;
			this.#cacheByDefault = cacheByDefault;
			this.#cacheKey = cacheKey;
			this.#handler = handler$1;
		}
		onRequestStart(controller, context$1) {
			this.#writeStream?.destroy();
			this.#writeStream = void 0;
			this.#handler.onRequestStart?.(controller, context$1);
		}
		onRequestUpgrade(controller, statusCode, headers, socket) {
			this.#handler.onRequestUpgrade?.(controller, statusCode, headers, socket);
		}
		/**
		* @param {import('../../types/dispatcher.d.ts').default.DispatchController} controller
		* @param {number} statusCode
		* @param {import('../../types/header.d.ts').IncomingHttpHeaders} resHeaders
		* @param {string} statusMessage
		*/
		onResponseStart(controller, statusCode, resHeaders, statusMessage) {
			const downstreamOnHeaders = () => this.#handler.onResponseStart?.(controller, statusCode, resHeaders, statusMessage);
			if (!util$6.safeHTTPMethods.includes(this.#cacheKey.method) && statusCode >= 200 && statusCode <= 399) {
				try {
					this.#store.delete(this.#cacheKey)?.catch?.(noop$2);
				} catch {}
				return downstreamOnHeaders();
			}
			const cacheControlHeader = resHeaders["cache-control"];
			const heuristicallyCacheable = resHeaders["last-modified"] && HEURISTICALLY_CACHEABLE_STATUS_CODES.includes(statusCode);
			if (!cacheControlHeader && !resHeaders["expires"] && !heuristicallyCacheable && !this.#cacheByDefault) return downstreamOnHeaders();
			const cacheControlDirectives = cacheControlHeader ? parseCacheControlHeader$1(cacheControlHeader) : {};
			if (!canCacheResponse(this.#cacheType, statusCode, resHeaders, cacheControlDirectives)) return downstreamOnHeaders();
			const now$1 = Date.now();
			const resAge = resHeaders.age ? getAge(resHeaders.age) : void 0;
			if (resAge && resAge >= MAX_RESPONSE_AGE) return downstreamOnHeaders();
			const resDate = typeof resHeaders.date === "string" ? parseHttpDate(resHeaders.date) : void 0;
			const staleAt = determineStaleAt(this.#cacheType, now$1, resAge, resHeaders, resDate, cacheControlDirectives) ?? this.#cacheByDefault;
			if (staleAt === void 0 || resAge && resAge > staleAt) return downstreamOnHeaders();
			const baseTime = resDate ? resDate.getTime() : now$1;
			const absoluteStaleAt = staleAt + baseTime;
			if (now$1 >= absoluteStaleAt) return downstreamOnHeaders();
			let varyDirectives;
			if (this.#cacheKey.headers && resHeaders.vary) {
				varyDirectives = parseVaryHeader(resHeaders.vary, this.#cacheKey.headers);
				if (!varyDirectives) return downstreamOnHeaders();
			}
			const deleteAt = determineDeleteAt(baseTime, cacheControlDirectives, absoluteStaleAt);
			const strippedHeaders = stripNecessaryHeaders(resHeaders, cacheControlDirectives);
			/**
			* @type {import('../../types/cache-interceptor.d.ts').default.CacheValue}
			*/
			const value = {
				statusCode,
				statusMessage,
				headers: strippedHeaders,
				vary: varyDirectives,
				cacheControlDirectives,
				cachedAt: resAge ? now$1 - resAge : now$1,
				staleAt: absoluteStaleAt,
				deleteAt
			};
			if (typeof resHeaders.etag === "string" && isEtagUsable(resHeaders.etag)) value.etag = resHeaders.etag;
			this.#writeStream = this.#store.createWriteStream(this.#cacheKey, value);
			if (!this.#writeStream) return downstreamOnHeaders();
			const handler$1 = this;
			this.#writeStream.on("drain", () => controller.resume()).on("error", function() {
				handler$1.#writeStream = void 0;
				handler$1.#store.delete(handler$1.#cacheKey);
			}).on("close", function() {
				if (handler$1.#writeStream === this) handler$1.#writeStream = void 0;
				controller.resume();
			});
			return downstreamOnHeaders();
		}
		onResponseData(controller, chunk) {
			if (this.#writeStream?.write(chunk) === false) controller.pause();
			this.#handler.onResponseData?.(controller, chunk);
		}
		onResponseEnd(controller, trailers) {
			this.#writeStream?.end();
			this.#handler.onResponseEnd?.(controller, trailers);
		}
		onResponseError(controller, err) {
			this.#writeStream?.destroy(err);
			this.#writeStream = void 0;
			this.#handler.onResponseError?.(controller, err);
		}
	};
	/**
	* @see https://www.rfc-editor.org/rfc/rfc9111.html#name-storing-responses-to-authen
	*
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheOptions['type']} cacheType
	* @param {number} statusCode
	* @param {import('../../types/header.d.ts').IncomingHttpHeaders} resHeaders
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheControlDirectives} cacheControlDirectives
	*/
	function canCacheResponse(cacheType, statusCode, resHeaders, cacheControlDirectives) {
		if (statusCode !== 200 && statusCode !== 307 && !HEURISTICALLY_CACHEABLE_STATUS_CODES.includes(statusCode)) return false;
		if (cacheControlDirectives["no-store"]) return false;
		if (cacheType === "shared" && cacheControlDirectives.private === true) return false;
		if (resHeaders.vary?.includes("*")) return false;
		if (resHeaders.authorization) {
			if (!cacheControlDirectives.public || typeof resHeaders.authorization !== "string") return false;
			if (Array.isArray(cacheControlDirectives["no-cache"]) && cacheControlDirectives["no-cache"].includes("authorization")) return false;
			if (Array.isArray(cacheControlDirectives["private"]) && cacheControlDirectives["private"].includes("authorization")) return false;
		}
		return true;
	}
	/**
	* @param {string | string[]} ageHeader
	* @returns {number | undefined}
	*/
	function getAge(ageHeader) {
		const age = parseInt(Array.isArray(ageHeader) ? ageHeader[0] : ageHeader);
		return isNaN(age) ? void 0 : age * 1e3;
	}
	/**
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheOptions['type']} cacheType
	* @param {number} now
	* @param {number | undefined} age
	* @param {import('../../types/header.d.ts').IncomingHttpHeaders} resHeaders
	* @param {Date | undefined} responseDate
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheControlDirectives} cacheControlDirectives
	*
	* @returns {number | undefined} time that the value is stale at in seconds or undefined if it shouldn't be cached
	*/
	function determineStaleAt(cacheType, now$1, age, resHeaders, responseDate, cacheControlDirectives) {
		if (cacheType === "shared") {
			const sMaxAge = cacheControlDirectives["s-maxage"];
			if (sMaxAge !== void 0) return sMaxAge > 0 ? sMaxAge * 1e3 : void 0;
		}
		const maxAge = cacheControlDirectives["max-age"];
		if (maxAge !== void 0) return maxAge > 0 ? maxAge * 1e3 : void 0;
		if (typeof resHeaders.expires === "string") {
			const expiresDate = parseHttpDate(resHeaders.expires);
			if (expiresDate) {
				if (now$1 >= expiresDate.getTime()) return void 0;
				if (responseDate) {
					if (responseDate >= expiresDate) return void 0;
					if (age !== void 0 && age > expiresDate - responseDate) return void 0;
				}
				return expiresDate.getTime() - now$1;
			}
		}
		if (typeof resHeaders["last-modified"] === "string") {
			const lastModified = new Date(resHeaders["last-modified"]);
			if (isValidDate(lastModified)) {
				if (lastModified.getTime() >= now$1) return void 0;
				const responseAge = now$1 - lastModified.getTime();
				return responseAge * .1;
			}
		}
		if (cacheControlDirectives.immutable) return 31536e3;
		return void 0;
	}
	/**
	* @param {number} now
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheControlDirectives} cacheControlDirectives
	* @param {number} staleAt
	*/
	function determineDeleteAt(now$1, cacheControlDirectives, staleAt) {
		let staleWhileRevalidate = -Infinity;
		let staleIfError = -Infinity;
		let immutable = -Infinity;
		if (cacheControlDirectives["stale-while-revalidate"]) staleWhileRevalidate = staleAt + cacheControlDirectives["stale-while-revalidate"] * 1e3;
		if (cacheControlDirectives["stale-if-error"]) staleIfError = staleAt + cacheControlDirectives["stale-if-error"] * 1e3;
		if (staleWhileRevalidate === -Infinity && staleIfError === -Infinity) immutable = now$1 + 31536e6;
		return Math.max(staleAt, staleWhileRevalidate, staleIfError, immutable);
	}
	/**
	* Strips headers required to be removed in cached responses
	* @param {import('../../types/header.d.ts').IncomingHttpHeaders} resHeaders
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheControlDirectives} cacheControlDirectives
	* @returns {Record<string, string | string []>}
	*/
	function stripNecessaryHeaders(resHeaders, cacheControlDirectives) {
		const headersToRemove = [
			"connection",
			"proxy-authenticate",
			"proxy-authentication-info",
			"proxy-authorization",
			"proxy-connection",
			"te",
			"transfer-encoding",
			"upgrade",
			"age"
		];
		if (resHeaders["connection"]) if (Array.isArray(resHeaders["connection"])) headersToRemove.push(...resHeaders["connection"].map((header) => header.trim()));
		else headersToRemove.push(...resHeaders["connection"].split(",").map((header) => header.trim()));
		if (Array.isArray(cacheControlDirectives["no-cache"])) headersToRemove.push(...cacheControlDirectives["no-cache"]);
		if (Array.isArray(cacheControlDirectives["private"])) headersToRemove.push(...cacheControlDirectives["private"]);
		let strippedHeaders;
		for (const headerName of headersToRemove) if (resHeaders[headerName]) {
			strippedHeaders ??= { ...resHeaders };
			delete strippedHeaders[headerName];
		}
		return strippedHeaders ?? resHeaders;
	}
	/**
	* @param {Date} date
	* @returns {boolean}
	*/
	function isValidDate(date) {
		return date instanceof Date && Number.isFinite(date.valueOf());
	}
	module.exports = CacheHandler$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/cache/memory-cache-store.js
var require_memory_cache_store = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/cache/memory-cache-store.js"(exports, module) {
	const { Writable: Writable$3 } = __require("node:stream");
	const { EventEmitter: EventEmitter$1 } = __require("node:events");
	const { assertCacheKey: assertCacheKey$1, assertCacheValue: assertCacheValue$1 } = require_cache$2();
	/**
	* @typedef {import('../../types/cache-interceptor.d.ts').default.CacheKey} CacheKey
	* @typedef {import('../../types/cache-interceptor.d.ts').default.CacheValue} CacheValue
	* @typedef {import('../../types/cache-interceptor.d.ts').default.CacheStore} CacheStore
	* @typedef {import('../../types/cache-interceptor.d.ts').default.GetResult} GetResult
	*/
	/**
	* @implements {CacheStore}
	* @extends {EventEmitter}
	*/
	var MemoryCacheStore$1 = class extends EventEmitter$1 {
		#maxCount = 1024;
		#maxSize = 104857600;
		#maxEntrySize = 5242880;
		#size = 0;
		#count = 0;
		#entries = /* @__PURE__ */ new Map();
		#hasEmittedMaxSizeEvent = false;
		/**
		* @param {import('../../types/cache-interceptor.d.ts').default.MemoryCacheStoreOpts | undefined} [opts]
		*/
		constructor(opts) {
			super();
			if (opts) {
				if (typeof opts !== "object") throw new TypeError("MemoryCacheStore options must be an object");
				if (opts.maxCount !== void 0) {
					if (typeof opts.maxCount !== "number" || !Number.isInteger(opts.maxCount) || opts.maxCount < 0) throw new TypeError("MemoryCacheStore options.maxCount must be a non-negative integer");
					this.#maxCount = opts.maxCount;
				}
				if (opts.maxSize !== void 0) {
					if (typeof opts.maxSize !== "number" || !Number.isInteger(opts.maxSize) || opts.maxSize < 0) throw new TypeError("MemoryCacheStore options.maxSize must be a non-negative integer");
					this.#maxSize = opts.maxSize;
				}
				if (opts.maxEntrySize !== void 0) {
					if (typeof opts.maxEntrySize !== "number" || !Number.isInteger(opts.maxEntrySize) || opts.maxEntrySize < 0) throw new TypeError("MemoryCacheStore options.maxEntrySize must be a non-negative integer");
					this.#maxEntrySize = opts.maxEntrySize;
				}
			}
		}
		/**
		* Get the current size of the cache in bytes
		* @returns {number} The current size of the cache in bytes
		*/
		get size() {
			return this.#size;
		}
		/**
		* Check if the cache is full (either max size or max count reached)
		* @returns {boolean} True if the cache is full, false otherwise
		*/
		isFull() {
			return this.#size >= this.#maxSize || this.#count >= this.#maxCount;
		}
		/**
		* @param {import('../../types/cache-interceptor.d.ts').default.CacheKey} req
		* @returns {import('../../types/cache-interceptor.d.ts').default.GetResult | undefined}
		*/
		get(key) {
			assertCacheKey$1(key);
			const topLevelKey = `${key.origin}:${key.path}`;
			const now$1 = Date.now();
			const entries = this.#entries.get(topLevelKey);
			const entry = entries ? findEntry(key, entries, now$1) : null;
			return entry == null ? void 0 : {
				statusMessage: entry.statusMessage,
				statusCode: entry.statusCode,
				headers: entry.headers,
				body: entry.body,
				vary: entry.vary ? entry.vary : void 0,
				etag: entry.etag,
				cacheControlDirectives: entry.cacheControlDirectives,
				cachedAt: entry.cachedAt,
				staleAt: entry.staleAt,
				deleteAt: entry.deleteAt
			};
		}
		/**
		* @param {import('../../types/cache-interceptor.d.ts').default.CacheKey} key
		* @param {import('../../types/cache-interceptor.d.ts').default.CacheValue} val
		* @returns {Writable | undefined}
		*/
		createWriteStream(key, val) {
			assertCacheKey$1(key);
			assertCacheValue$1(val);
			const topLevelKey = `${key.origin}:${key.path}`;
			const store$4 = this;
			const entry = {
				...key,
				...val,
				body: [],
				size: 0
			};
			return new Writable$3({
				write(chunk, encoding, callback) {
					if (typeof chunk === "string") chunk = Buffer.from(chunk, encoding);
					entry.size += chunk.byteLength;
					if (entry.size >= store$4.#maxEntrySize) this.destroy();
					else entry.body.push(chunk);
					callback(null);
				},
				final(callback) {
					let entries = store$4.#entries.get(topLevelKey);
					if (!entries) {
						entries = [];
						store$4.#entries.set(topLevelKey, entries);
					}
					const previousEntry = findEntry(key, entries, Date.now());
					if (previousEntry) {
						const index = entries.indexOf(previousEntry);
						entries.splice(index, 1, entry);
						store$4.#size -= previousEntry.size;
					} else {
						entries.push(entry);
						store$4.#count += 1;
					}
					store$4.#size += entry.size;
					if (store$4.#size > store$4.#maxSize || store$4.#count > store$4.#maxCount) {
						if (!store$4.#hasEmittedMaxSizeEvent) {
							store$4.emit("maxSizeExceeded", {
								size: store$4.#size,
								maxSize: store$4.#maxSize,
								count: store$4.#count,
								maxCount: store$4.#maxCount
							});
							store$4.#hasEmittedMaxSizeEvent = true;
						}
						for (const [key$1, entries$1] of store$4.#entries) {
							for (const entry$1 of entries$1.splice(0, entries$1.length / 2)) {
								store$4.#size -= entry$1.size;
								store$4.#count -= 1;
							}
							if (entries$1.length === 0) store$4.#entries.delete(key$1);
						}
						if (store$4.#size < store$4.#maxSize && store$4.#count < store$4.#maxCount) store$4.#hasEmittedMaxSizeEvent = false;
					}
					callback(null);
				}
			});
		}
		/**
		* @param {CacheKey} key
		*/
		delete(key) {
			if (typeof key !== "object") throw new TypeError(`expected key to be object, got ${typeof key}`);
			const topLevelKey = `${key.origin}:${key.path}`;
			for (const entry of this.#entries.get(topLevelKey) ?? []) {
				this.#size -= entry.size;
				this.#count -= 1;
			}
			this.#entries.delete(topLevelKey);
		}
	};
	function findEntry(key, entries, now$1) {
		return entries.find((entry) => entry.deleteAt > now$1 && entry.method === key.method && (entry.vary == null || Object.keys(entry.vary).every((headerName) => {
			if (entry.vary[headerName] === null) return key.headers[headerName] === void 0;
			return entry.vary[headerName] === key.headers[headerName];
		})));
	}
	module.exports = MemoryCacheStore$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/cache-revalidation-handler.js
var require_cache_revalidation_handler = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/handler/cache-revalidation-handler.js"(exports, module) {
	const assert$10 = __require("node:assert");
	/**
	* This takes care of revalidation requests we send to the origin. If we get
	*  a response indicating that what we have is cached (via a HTTP 304), we can
	*  continue using the cached value. Otherwise, we'll receive the new response
	*  here, which we then just pass on to the next handler (most likely a
	*  CacheHandler). Note that this assumes the proper headers were already
	*  included in the request to tell the origin that we want to revalidate the
	*  response (i.e. if-modified-since or if-none-match).
	*
	* @see https://www.rfc-editor.org/rfc/rfc9111.html#name-validation
	*
	* @implements {import('../../types/dispatcher.d.ts').default.DispatchHandler}
	*/
	var CacheRevalidationHandler$1 = class {
		#successful = false;
		/**
		* @type {((boolean, any) => void) | null}
		*/
		#callback;
		/**
		* @type {(import('../../types/dispatcher.d.ts').default.DispatchHandler)}
		*/
		#handler;
		#context;
		/**
		* @type {boolean}
		*/
		#allowErrorStatusCodes;
		/**
		* @param {(boolean) => void} callback Function to call if the cached value is valid
		* @param {import('../../types/dispatcher.d.ts').default.DispatchHandlers} handler
		* @param {boolean} allowErrorStatusCodes
		*/
		constructor(callback, handler$1, allowErrorStatusCodes) {
			if (typeof callback !== "function") throw new TypeError("callback must be a function");
			this.#callback = callback;
			this.#handler = handler$1;
			this.#allowErrorStatusCodes = allowErrorStatusCodes;
		}
		onRequestStart(_, context$1) {
			this.#successful = false;
			this.#context = context$1;
		}
		onRequestUpgrade(controller, statusCode, headers, socket) {
			this.#handler.onRequestUpgrade?.(controller, statusCode, headers, socket);
		}
		onResponseStart(controller, statusCode, headers, statusMessage) {
			assert$10(this.#callback != null);
			this.#successful = statusCode === 304 || this.#allowErrorStatusCodes && statusCode >= 500 && statusCode <= 504;
			this.#callback(this.#successful, this.#context);
			this.#callback = null;
			if (this.#successful) return true;
			this.#handler.onRequestStart?.(controller, this.#context);
			this.#handler.onResponseStart?.(controller, statusCode, headers, statusMessage);
		}
		onResponseData(controller, chunk) {
			if (this.#successful) return;
			return this.#handler.onResponseData?.(controller, chunk);
		}
		onResponseEnd(controller, trailers) {
			if (this.#successful) return;
			this.#handler.onResponseEnd?.(controller, trailers);
		}
		onResponseError(controller, err) {
			if (this.#successful) return;
			if (this.#callback) {
				this.#callback(false);
				this.#callback = null;
			}
			if (typeof this.#handler.onResponseError === "function") this.#handler.onResponseError(controller, err);
			else throw err;
		}
	};
	module.exports = CacheRevalidationHandler$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/interceptor/cache.js
var require_cache$1 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/interceptor/cache.js"(exports, module) {
	const assert$9 = __require("node:assert");
	const { Readable: Readable$2 } = __require("node:stream");
	const util$5 = require_util$5();
	const CacheHandler = require_cache_handler();
	const MemoryCacheStore = require_memory_cache_store();
	const CacheRevalidationHandler = require_cache_revalidation_handler();
	const { assertCacheStore, assertCacheMethods, makeCacheKey, normaliseHeaders, parseCacheControlHeader } = require_cache$2();
	const { AbortError } = require_errors();
	/**
	* @typedef {(options: import('../../types/dispatcher.d.ts').default.DispatchOptions, handler: import('../../types/dispatcher.d.ts').default.DispatchHandler) => void} DispatchFn
	*/
	/**
	* @param {import('../../types/cache-interceptor.d.ts').default.GetResult} result
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheControlDirectives | undefined} cacheControlDirectives
	* @returns {boolean}
	*/
	function needsRevalidation(result, cacheControlDirectives) {
		if (cacheControlDirectives?.["no-cache"]) return true;
		if (result.cacheControlDirectives?.["no-cache"] && !Array.isArray(result.cacheControlDirectives["no-cache"])) return true;
		const now$1 = Date.now();
		if (now$1 > result.staleAt) {
			if (cacheControlDirectives?.["max-stale"]) {
				const gracePeriod = result.staleAt + cacheControlDirectives["max-stale"] * 1e3;
				return now$1 > gracePeriod;
			}
			return true;
		}
		if (cacheControlDirectives?.["min-fresh"]) {
			const timeLeftTillStale = result.staleAt - now$1;
			const threshold = cacheControlDirectives["min-fresh"] * 1e3;
			return timeLeftTillStale <= threshold;
		}
		return false;
	}
	/**
	* @param {DispatchFn} dispatch
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheHandlerOptions} globalOpts
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheKey} cacheKey
	* @param {import('../../types/dispatcher.d.ts').default.DispatchHandler} handler
	* @param {import('../../types/dispatcher.d.ts').default.RequestOptions} opts
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheControlDirectives | undefined} reqCacheControl
	*/
	function handleUncachedResponse(dispatch, globalOpts, cacheKey, handler$1, opts, reqCacheControl) {
		if (reqCacheControl?.["only-if-cached"]) {
			let aborted$1 = false;
			try {
				if (typeof handler$1.onConnect === "function") {
					handler$1.onConnect(() => {
						aborted$1 = true;
					});
					if (aborted$1) return;
				}
				if (typeof handler$1.onHeaders === "function") {
					handler$1.onHeaders(504, [], () => {}, "Gateway Timeout");
					if (aborted$1) return;
				}
				if (typeof handler$1.onComplete === "function") handler$1.onComplete([]);
			} catch (err) {
				if (typeof handler$1.onError === "function") handler$1.onError(err);
			}
			return true;
		}
		return dispatch(opts, new CacheHandler(globalOpts, cacheKey, handler$1));
	}
	/**
	* @param {import('../../types/dispatcher.d.ts').default.DispatchHandler} handler
	* @param {import('../../types/dispatcher.d.ts').default.RequestOptions} opts
	* @param {import('../../types/cache-interceptor.d.ts').default.GetResult} result
	* @param {number} age
	* @param {any} context
	* @param {boolean} isStale
	*/
	function sendCachedValue(handler$1, opts, result, age, context$1, isStale) {
		const stream$4 = util$5.isStream(result.body) ? result.body : Readable$2.from(result.body ?? []);
		assert$9(!stream$4.destroyed, "stream should not be destroyed");
		assert$9(!stream$4.readableDidRead, "stream should not be readableDidRead");
		const controller = {
			resume() {
				stream$4.resume();
			},
			pause() {
				stream$4.pause();
			},
			get paused() {
				return stream$4.isPaused();
			},
			get aborted() {
				return stream$4.destroyed;
			},
			get reason() {
				return stream$4.errored;
			},
			abort(reason) {
				stream$4.destroy(reason ?? new AbortError());
			}
		};
		stream$4.on("error", function(err) {
			if (!this.readableEnded) if (typeof handler$1.onResponseError === "function") handler$1.onResponseError(controller, err);
			else throw err;
		}).on("close", function() {
			if (!this.errored) handler$1.onResponseEnd?.(controller, {});
		});
		handler$1.onRequestStart?.(controller, context$1);
		if (stream$4.destroyed) return;
		const headers = {
			...result.headers,
			age: String(age)
		};
		if (isStale) headers.warning = "110 - \"response is stale\"";
		handler$1.onResponseStart?.(controller, result.statusCode, headers, result.statusMessage);
		if (opts.method === "HEAD") stream$4.destroy();
		else stream$4.on("data", function(chunk) {
			handler$1.onResponseData?.(controller, chunk);
		});
	}
	/**
	* @param {DispatchFn} dispatch
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheHandlerOptions} globalOpts
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheKey} cacheKey
	* @param {import('../../types/dispatcher.d.ts').default.DispatchHandler} handler
	* @param {import('../../types/dispatcher.d.ts').default.RequestOptions} opts
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheControlDirectives | undefined} reqCacheControl
	* @param {import('../../types/cache-interceptor.d.ts').default.GetResult | undefined} result
	*/
	function handleResult$2(dispatch, globalOpts, cacheKey, handler$1, opts, reqCacheControl, result) {
		if (!result) return handleUncachedResponse(dispatch, globalOpts, cacheKey, handler$1, opts, reqCacheControl);
		const now$1 = Date.now();
		if (now$1 > result.deleteAt) return dispatch(opts, new CacheHandler(globalOpts, cacheKey, handler$1));
		const age = Math.round((now$1 - result.cachedAt) / 1e3);
		if (reqCacheControl?.["max-age"] && age >= reqCacheControl["max-age"]) return dispatch(opts, handler$1);
		if (needsRevalidation(result, reqCacheControl)) {
			if (util$5.isStream(opts.body) && util$5.bodyLength(opts.body) !== 0) return dispatch(opts, new CacheHandler(globalOpts, cacheKey, handler$1));
			let withinStaleIfErrorThreshold = false;
			const staleIfErrorExpiry = result.cacheControlDirectives["stale-if-error"] ?? reqCacheControl?.["stale-if-error"];
			if (staleIfErrorExpiry) withinStaleIfErrorThreshold = now$1 < result.staleAt + staleIfErrorExpiry * 1e3;
			let headers = {
				...opts.headers,
				"if-modified-since": new Date(result.cachedAt).toUTCString()
			};
			if (result.etag) headers["if-none-match"] = result.etag;
			if (result.vary) headers = {
				...headers,
				...result.vary
			};
			return dispatch({
				...opts,
				headers
			}, new CacheRevalidationHandler((success, context$1) => {
				if (success) sendCachedValue(handler$1, opts, result, age, context$1, true);
				else if (util$5.isStream(result.body)) result.body.on("error", () => {}).destroy();
			}, new CacheHandler(globalOpts, cacheKey, handler$1), withinStaleIfErrorThreshold));
		}
		if (util$5.isStream(opts.body)) opts.body.on("error", () => {}).destroy();
		sendCachedValue(handler$1, opts, result, age, null, false);
	}
	/**
	* @param {import('../../types/cache-interceptor.d.ts').default.CacheOptions} [opts]
	* @returns {import('../../types/dispatcher.d.ts').default.DispatcherComposeInterceptor}
	*/
	module.exports = (opts = {}) => {
		const { store: store$4 = new MemoryCacheStore(), methods = ["GET"], cacheByDefault = void 0, type = "shared" } = opts;
		if (typeof opts !== "object" || opts === null) throw new TypeError(`expected type of opts to be an Object, got ${opts === null ? "null" : typeof opts}`);
		assertCacheStore(store$4, "opts.store");
		assertCacheMethods(methods, "opts.methods");
		if (typeof cacheByDefault !== "undefined" && typeof cacheByDefault !== "number") throw new TypeError(`expected opts.cacheByDefault to be number or undefined, got ${typeof cacheByDefault}`);
		if (typeof type !== "undefined" && type !== "shared" && type !== "private") throw new TypeError(`expected opts.type to be shared, private, or undefined, got ${typeof type}`);
		const globalOpts = {
			store: store$4,
			methods,
			cacheByDefault,
			type
		};
		const safeMethodsToNotCache = util$5.safeHTTPMethods.filter((method) => methods.includes(method) === false);
		return (dispatch) => {
			return (opts$1, handler$1) => {
				if (!opts$1.origin || safeMethodsToNotCache.includes(opts$1.method)) return dispatch(opts$1, handler$1);
				opts$1 = {
					...opts$1,
					headers: normaliseHeaders(opts$1)
				};
				const reqCacheControl = opts$1.headers?.["cache-control"] ? parseCacheControlHeader(opts$1.headers["cache-control"]) : void 0;
				if (reqCacheControl?.["no-store"]) return dispatch(opts$1, handler$1);
				/**
				* @type {import('../../types/cache-interceptor.d.ts').default.CacheKey}
				*/
				const cacheKey = makeCacheKey(opts$1);
				const result = store$4.get(cacheKey);
				if (result && typeof result.then === "function") result.then((result$1) => {
					handleResult$2(dispatch, globalOpts, cacheKey, handler$1, opts$1, reqCacheControl, result$1);
				});
				else handleResult$2(dispatch, globalOpts, cacheKey, handler$1, opts$1, reqCacheControl, result);
				return true;
			};
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/cache/sqlite-cache-store.js
var require_sqlite_cache_store = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/cache/sqlite-cache-store.js"(exports, module) {
	const { Writable: Writable$2 } = __require("node:stream");
	const { assertCacheKey, assertCacheValue } = require_cache$2();
	let DatabaseSync;
	const VERSION$1 = 3;
	const MAX_ENTRY_SIZE = 2 * 1e3 * 1e3 * 1e3;
	/**
	* @typedef {import('../../types/cache-interceptor.d.ts').default.CacheStore} CacheStore
	* @implements {CacheStore}
	*
	* @typedef {{
	*  id: Readonly<number>,
	*  body?: Uint8Array
	*  statusCode: number
	*  statusMessage: string
	*  headers?: string
	*  vary?: string
	*  etag?: string
	*  cacheControlDirectives?: string
	*  cachedAt: number
	*  staleAt: number
	*  deleteAt: number
	* }} SqliteStoreValue
	*/
	module.exports = class SqliteCacheStore$1 {
		#maxEntrySize = MAX_ENTRY_SIZE;
		#maxCount = Infinity;
		/**
		* @type {import('node:sqlite').DatabaseSync}
		*/
		#db;
		/**
		* @type {import('node:sqlite').StatementSync}
		*/
		#getValuesQuery;
		/**
		* @type {import('node:sqlite').StatementSync}
		*/
		#updateValueQuery;
		/**
		* @type {import('node:sqlite').StatementSync}
		*/
		#insertValueQuery;
		/**
		* @type {import('node:sqlite').StatementSync}
		*/
		#deleteExpiredValuesQuery;
		/**
		* @type {import('node:sqlite').StatementSync}
		*/
		#deleteByUrlQuery;
		/**
		* @type {import('node:sqlite').StatementSync}
		*/
		#countEntriesQuery;
		/**
		* @type {import('node:sqlite').StatementSync | null}
		*/
		#deleteOldValuesQuery;
		/**
		* @param {import('../../types/cache-interceptor.d.ts').default.SqliteCacheStoreOpts | undefined} opts
		*/
		constructor(opts) {
			if (opts) {
				if (typeof opts !== "object") throw new TypeError("SqliteCacheStore options must be an object");
				if (opts.maxEntrySize !== void 0) {
					if (typeof opts.maxEntrySize !== "number" || !Number.isInteger(opts.maxEntrySize) || opts.maxEntrySize < 0) throw new TypeError("SqliteCacheStore options.maxEntrySize must be a non-negative integer");
					if (opts.maxEntrySize > MAX_ENTRY_SIZE) throw new TypeError("SqliteCacheStore options.maxEntrySize must be less than 2gb");
					this.#maxEntrySize = opts.maxEntrySize;
				}
				if (opts.maxCount !== void 0) {
					if (typeof opts.maxCount !== "number" || !Number.isInteger(opts.maxCount) || opts.maxCount < 0) throw new TypeError("SqliteCacheStore options.maxCount must be a non-negative integer");
					this.#maxCount = opts.maxCount;
				}
			}
			if (!DatabaseSync) DatabaseSync = __require("node:sqlite").DatabaseSync;
			this.#db = new DatabaseSync(opts?.location ?? ":memory:");
			this.#db.exec(`
      PRAGMA journal_mode = WAL;
      PRAGMA synchronous = NORMAL;
      PRAGMA temp_store = memory;
      PRAGMA optimize;

      CREATE TABLE IF NOT EXISTS cacheInterceptorV${VERSION$1} (
        -- Data specific to us
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        url TEXT NOT NULL,
        method TEXT NOT NULL,

        -- Data returned to the interceptor
        body BUF NULL,
        deleteAt INTEGER NOT NULL,
        statusCode INTEGER NOT NULL,
        statusMessage TEXT NOT NULL,
        headers TEXT NULL,
        cacheControlDirectives TEXT NULL,
        etag TEXT NULL,
        vary TEXT NULL,
        cachedAt INTEGER NOT NULL,
        staleAt INTEGER NOT NULL
      );

      CREATE INDEX IF NOT EXISTS idx_cacheInterceptorV${VERSION$1}_getValuesQuery ON cacheInterceptorV${VERSION$1}(url, method, deleteAt);
      CREATE INDEX IF NOT EXISTS idx_cacheInterceptorV${VERSION$1}_deleteByUrlQuery ON cacheInterceptorV${VERSION$1}(deleteAt);
    `);
			this.#getValuesQuery = this.#db.prepare(`
      SELECT
        id,
        body,
        deleteAt,
        statusCode,
        statusMessage,
        headers,
        etag,
        cacheControlDirectives,
        vary,
        cachedAt,
        staleAt
      FROM cacheInterceptorV${VERSION$1}
      WHERE
        url = ?
        AND method = ?
      ORDER BY
        deleteAt ASC
    `);
			this.#updateValueQuery = this.#db.prepare(`
      UPDATE cacheInterceptorV${VERSION$1} SET
        body = ?,
        deleteAt = ?,
        statusCode = ?,
        statusMessage = ?,
        headers = ?,
        etag = ?,
        cacheControlDirectives = ?,
        cachedAt = ?,
        staleAt = ?
      WHERE
        id = ?
    `);
			this.#insertValueQuery = this.#db.prepare(`
      INSERT INTO cacheInterceptorV${VERSION$1} (
        url,
        method,
        body,
        deleteAt,
        statusCode,
        statusMessage,
        headers,
        etag,
        cacheControlDirectives,
        vary,
        cachedAt,
        staleAt
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);
			this.#deleteByUrlQuery = this.#db.prepare(`DELETE FROM cacheInterceptorV${VERSION$1} WHERE url = ?`);
			this.#countEntriesQuery = this.#db.prepare(`SELECT COUNT(*) AS total FROM cacheInterceptorV${VERSION$1}`);
			this.#deleteExpiredValuesQuery = this.#db.prepare(`DELETE FROM cacheInterceptorV${VERSION$1} WHERE deleteAt <= ?`);
			this.#deleteOldValuesQuery = this.#maxCount === Infinity ? null : this.#db.prepare(`
        DELETE FROM cacheInterceptorV${VERSION$1}
        WHERE id IN (
          SELECT
            id
          FROM cacheInterceptorV${VERSION$1}
          ORDER BY cachedAt DESC
          LIMIT ?
        )
      `);
		}
		close() {
			this.#db.close();
		}
		/**
		* @param {import('../../types/cache-interceptor.d.ts').default.CacheKey} key
		* @returns {(import('../../types/cache-interceptor.d.ts').default.GetResult & { body?: Buffer }) | undefined}
		*/
		get(key) {
			assertCacheKey(key);
			const value = this.#findValue(key);
			return value ? {
				body: value.body ? Buffer.from(value.body.buffer, value.body.byteOffset, value.body.byteLength) : void 0,
				statusCode: value.statusCode,
				statusMessage: value.statusMessage,
				headers: value.headers ? JSON.parse(value.headers) : void 0,
				etag: value.etag ? value.etag : void 0,
				vary: value.vary ? JSON.parse(value.vary) : void 0,
				cacheControlDirectives: value.cacheControlDirectives ? JSON.parse(value.cacheControlDirectives) : void 0,
				cachedAt: value.cachedAt,
				staleAt: value.staleAt,
				deleteAt: value.deleteAt
			} : void 0;
		}
		/**
		* @param {import('../../types/cache-interceptor.d.ts').default.CacheKey} key
		* @param {import('../../types/cache-interceptor.d.ts').default.CacheValue & { body: null | Buffer | Array<Buffer>}} value
		*/
		set(key, value) {
			assertCacheKey(key);
			const url = this.#makeValueUrl(key);
			const body = Array.isArray(value.body) ? Buffer.concat(value.body) : value.body;
			const size = body?.byteLength;
			if (size && size > this.#maxEntrySize) return;
			const existingValue = this.#findValue(key, true);
			if (existingValue) this.#updateValueQuery.run(body, value.deleteAt, value.statusCode, value.statusMessage, value.headers ? JSON.stringify(value.headers) : null, value.etag ? value.etag : null, value.cacheControlDirectives ? JSON.stringify(value.cacheControlDirectives) : null, value.cachedAt, value.staleAt, existingValue.id);
			else {
				this.#prune();
				this.#insertValueQuery.run(url, key.method, body, value.deleteAt, value.statusCode, value.statusMessage, value.headers ? JSON.stringify(value.headers) : null, value.etag ? value.etag : null, value.cacheControlDirectives ? JSON.stringify(value.cacheControlDirectives) : null, value.vary ? JSON.stringify(value.vary) : null, value.cachedAt, value.staleAt);
			}
		}
		/**
		* @param {import('../../types/cache-interceptor.d.ts').default.CacheKey} key
		* @param {import('../../types/cache-interceptor.d.ts').default.CacheValue} value
		* @returns {Writable | undefined}
		*/
		createWriteStream(key, value) {
			assertCacheKey(key);
			assertCacheValue(value);
			let size = 0;
			/**
			* @type {Buffer[] | null}
			*/
			const body = [];
			const store$4 = this;
			return new Writable$2({
				decodeStrings: true,
				write(chunk, encoding, callback) {
					size += chunk.byteLength;
					if (size < store$4.#maxEntrySize) body.push(chunk);
					else this.destroy();
					callback();
				},
				final(callback) {
					store$4.set(key, {
						...value,
						body
					});
					callback();
				}
			});
		}
		/**
		* @param {import('../../types/cache-interceptor.d.ts').default.CacheKey} key
		*/
		delete(key) {
			if (typeof key !== "object") throw new TypeError(`expected key to be object, got ${typeof key}`);
			this.#deleteByUrlQuery.run(this.#makeValueUrl(key));
		}
		#prune() {
			if (Number.isFinite(this.#maxCount) && this.size <= this.#maxCount) return 0;
			{
				const removed = this.#deleteExpiredValuesQuery.run(Date.now()).changes;
				if (removed) return removed;
			}
			{
				const removed = this.#deleteOldValuesQuery?.run(Math.max(Math.floor(this.#maxCount * .1), 1)).changes;
				if (removed) return removed;
			}
			return 0;
		}
		/**
		* Counts the number of rows in the cache
		* @returns {Number}
		*/
		get size() {
			const { total } = this.#countEntriesQuery.get();
			return total;
		}
		/**
		* @param {import('../../types/cache-interceptor.d.ts').default.CacheKey} key
		* @returns {string}
		*/
		#makeValueUrl(key) {
			return `${key.origin}/${key.path}`;
		}
		/**
		* @param {import('../../types/cache-interceptor.d.ts').default.CacheKey} key
		* @param {boolean} [canBeExpired=false]
		* @returns {SqliteStoreValue | undefined}
		*/
		#findValue(key, canBeExpired = false) {
			const url = this.#makeValueUrl(key);
			const { headers, method } = key;
			/**
			* @type {SqliteStoreValue[]}
			*/
			const values = this.#getValuesQuery.all(url, method);
			if (values.length === 0) return void 0;
			const now$1 = Date.now();
			for (const value of values) {
				if (now$1 >= value.deleteAt && !canBeExpired) return void 0;
				let matches = true;
				if (value.vary) {
					const vary = JSON.parse(value.vary);
					for (const header in vary) if (!headerValueEquals(headers[header], vary[header])) {
						matches = false;
						break;
					}
				}
				if (matches) return value;
			}
			return void 0;
		}
	};
	/**
	* @param {string|string[]|null|undefined} lhs
	* @param {string|string[]|null|undefined} rhs
	* @returns {boolean}
	*/
	function headerValueEquals(lhs, rhs) {
		if (lhs == null && rhs == null) return true;
		if (lhs == null && rhs != null || lhs != null && rhs == null) return false;
		if (Array.isArray(lhs) && Array.isArray(rhs)) {
			if (lhs.length !== rhs.length) return false;
			return lhs.every((x, i$1) => x === rhs[i$1]);
		}
		return lhs === rhs;
	}
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/headers.js
var require_headers = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/headers.js"(exports, module) {
	const { kConstruct: kConstruct$7 } = require_symbols();
	const { kEnumerableProperty: kEnumerableProperty$9 } = require_util$5();
	const { iteratorMixin, isValidHeaderName: isValidHeaderName$1, isValidHeaderValue } = require_util$4();
	const { webidl: webidl$11 } = require_webidl();
	const assert$8 = __require("node:assert");
	const util$4 = __require("node:util");
	/**
	* @param {number} code
	* @returns {code is (0x0a | 0x0d | 0x09 | 0x20)}
	*/
	function isHTTPWhiteSpaceCharCode(code) {
		return code === 10 || code === 13 || code === 9 || code === 32;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
	* @param {string} potentialValue
	* @returns {string}
	*/
	function headerValueNormalize(potentialValue) {
		let i$1 = 0;
		let j = potentialValue.length;
		while (j > i$1 && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j;
		while (j > i$1 && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i$1))) ++i$1;
		return i$1 === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i$1, j);
	}
	/**
	* @param {Headers} headers
	* @param {Array|Object} object
	*/
	function fill$1(headers, object$1) {
		if (Array.isArray(object$1)) for (let i$1 = 0; i$1 < object$1.length; ++i$1) {
			const header = object$1[i$1];
			if (header.length !== 2) throw webidl$11.errors.exception({
				header: "Headers constructor",
				message: `expected name/value pair to be length 2, found ${header.length}.`
			});
			appendHeader(headers, header[0], header[1]);
		}
		else if (typeof object$1 === "object" && object$1 !== null) {
			const keys$1 = Object.keys(object$1);
			for (let i$1 = 0; i$1 < keys$1.length; ++i$1) appendHeader(headers, keys$1[i$1], object$1[keys$1[i$1]]);
		} else throw webidl$11.errors.conversionFailed({
			prefix: "Headers constructor",
			argument: "Argument 1",
			types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
		});
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-headers-append
	* @param {Headers} headers
	* @param {string} name
	* @param {string} value
	*/
	function appendHeader(headers, name$2, value) {
		value = headerValueNormalize(value);
		if (!isValidHeaderName$1(name$2)) throw webidl$11.errors.invalidArgument({
			prefix: "Headers.append",
			value: name$2,
			type: "header name"
		});
		else if (!isValidHeaderValue(value)) throw webidl$11.errors.invalidArgument({
			prefix: "Headers.append",
			value,
			type: "header value"
		});
		if (getHeadersGuard$2(headers) === "immutable") throw new TypeError("immutable");
		return getHeadersList$2(headers).append(name$2, value, false);
	}
	/**
	* @param {Headers} target
	*/
	function headersListSortAndCombine(target) {
		const headersList = getHeadersList$2(target);
		if (!headersList) return [];
		if (headersList.sortedMap) return headersList.sortedMap;
		const headers = [];
		const names = headersList.toSortedArray();
		const cookies = headersList.cookies;
		if (cookies === null || cookies.length === 1) return headersList.sortedMap = names;
		for (let i$1 = 0; i$1 < names.length; ++i$1) {
			const { 0: name$2, 1: value } = names[i$1];
			if (name$2 === "set-cookie") for (let j = 0; j < cookies.length; ++j) headers.push([name$2, cookies[j]]);
			else headers.push([name$2, value]);
		}
		return headersList.sortedMap = headers;
	}
	function compareHeaderName(a$1, b) {
		return a$1[0] < b[0] ? -1 : 1;
	}
	var HeadersList$3 = class HeadersList$3 {
		/** @type {[string, string][]|null} */
		cookies = null;
		sortedMap;
		headersMap;
		constructor(init) {
			if (init instanceof HeadersList$3) {
				this.headersMap = new Map(init.headersMap);
				this.sortedMap = init.sortedMap;
				this.cookies = init.cookies === null ? null : [...init.cookies];
			} else {
				this.headersMap = new Map(init);
				this.sortedMap = null;
			}
		}
		/**
		* @see https://fetch.spec.whatwg.org/#header-list-contains
		* @param {string} name
		* @param {boolean} isLowerCase
		*/
		contains(name$2, isLowerCase) {
			return this.headersMap.has(isLowerCase ? name$2 : name$2.toLowerCase());
		}
		clear() {
			this.headersMap.clear();
			this.sortedMap = null;
			this.cookies = null;
		}
		/**
		* @see https://fetch.spec.whatwg.org/#concept-header-list-append
		* @param {string} name
		* @param {string} value
		* @param {boolean} isLowerCase
		*/
		append(name$2, value, isLowerCase) {
			this.sortedMap = null;
			const lowercaseName = isLowerCase ? name$2 : name$2.toLowerCase();
			const exists$1 = this.headersMap.get(lowercaseName);
			if (exists$1) {
				const delimiter = lowercaseName === "cookie" ? "; " : ", ";
				this.headersMap.set(lowercaseName, {
					name: exists$1.name,
					value: `${exists$1.value}${delimiter}${value}`
				});
			} else this.headersMap.set(lowercaseName, {
				name: name$2,
				value
			});
			if (lowercaseName === "set-cookie") (this.cookies ??= []).push(value);
		}
		/**
		* @see https://fetch.spec.whatwg.org/#concept-header-list-set
		* @param {string} name
		* @param {string} value
		* @param {boolean} isLowerCase
		*/
		set(name$2, value, isLowerCase) {
			this.sortedMap = null;
			const lowercaseName = isLowerCase ? name$2 : name$2.toLowerCase();
			if (lowercaseName === "set-cookie") this.cookies = [value];
			this.headersMap.set(lowercaseName, {
				name: name$2,
				value
			});
		}
		/**
		* @see https://fetch.spec.whatwg.org/#concept-header-list-delete
		* @param {string} name
		* @param {boolean} isLowerCase
		*/
		delete(name$2, isLowerCase) {
			this.sortedMap = null;
			if (!isLowerCase) name$2 = name$2.toLowerCase();
			if (name$2 === "set-cookie") this.cookies = null;
			this.headersMap.delete(name$2);
		}
		/**
		* @see https://fetch.spec.whatwg.org/#concept-header-list-get
		* @param {string} name
		* @param {boolean} isLowerCase
		* @returns {string | null}
		*/
		get(name$2, isLowerCase) {
			return this.headersMap.get(isLowerCase ? name$2 : name$2.toLowerCase())?.value ?? null;
		}
		*[Symbol.iterator]() {
			for (const { 0: name$2, 1: { value } } of this.headersMap) yield [name$2, value];
		}
		get entries() {
			const headers = {};
			if (this.headersMap.size !== 0) for (const { name: name$2, value } of this.headersMap.values()) headers[name$2] = value;
			return headers;
		}
		rawValues() {
			return this.headersMap.values();
		}
		get entriesList() {
			const headers = [];
			if (this.headersMap.size !== 0) for (const { 0: lowerName, 1: { name: name$2, value } } of this.headersMap) if (lowerName === "set-cookie") for (const cookie of this.cookies) headers.push([name$2, cookie]);
			else headers.push([name$2, value]);
			return headers;
		}
		toSortedArray() {
			const size = this.headersMap.size;
			const array = new Array(size);
			if (size <= 32) {
				if (size === 0) return array;
				const iterator$1 = this.headersMap[Symbol.iterator]();
				const firstValue = iterator$1.next().value;
				array[0] = [firstValue[0], firstValue[1].value];
				assert$8(firstValue[1].value !== null);
				for (let i$1 = 1, j = 0, right = 0, left = 0, pivot = 0, x, value; i$1 < size; ++i$1) {
					value = iterator$1.next().value;
					x = array[i$1] = [value[0], value[1].value];
					assert$8(x[1] !== null);
					left = 0;
					right = i$1;
					while (left < right) {
						pivot = left + (right - left >> 1);
						if (array[pivot][0] <= x[0]) left = pivot + 1;
						else right = pivot;
					}
					if (i$1 !== pivot) {
						j = i$1;
						while (j > left) array[j] = array[--j];
						array[left] = x;
					}
				}
				/* c8 ignore next 4 */
				if (!iterator$1.next().done) throw new TypeError("Unreachable");
				return array;
			} else {
				let i$1 = 0;
				for (const { 0: name$2, 1: { value } } of this.headersMap) {
					array[i$1++] = [name$2, value];
					assert$8(value !== null);
				}
				return array.sort(compareHeaderName);
			}
		}
	};
	var Headers$5 = class Headers$5 {
		#guard;
		/**
		* @type {HeadersList}
		*/
		#headersList;
		/**
		* @param {HeadersInit|Symbol} [init]
		* @returns
		*/
		constructor(init = void 0) {
			webidl$11.util.markAsUncloneable(this);
			if (init === kConstruct$7) return;
			this.#headersList = new HeadersList$3();
			this.#guard = "none";
			if (init !== void 0) {
				init = webidl$11.converters.HeadersInit(init, "Headers constructor", "init");
				fill$1(this, init);
			}
		}
		append(name$2, value) {
			webidl$11.brandCheck(this, Headers$5);
			webidl$11.argumentLengthCheck(arguments, 2, "Headers.append");
			const prefix = "Headers.append";
			name$2 = webidl$11.converters.ByteString(name$2, prefix, "name");
			value = webidl$11.converters.ByteString(value, prefix, "value");
			return appendHeader(this, name$2, value);
		}
		delete(name$2) {
			webidl$11.brandCheck(this, Headers$5);
			webidl$11.argumentLengthCheck(arguments, 1, "Headers.delete");
			const prefix = "Headers.delete";
			name$2 = webidl$11.converters.ByteString(name$2, prefix, "name");
			if (!isValidHeaderName$1(name$2)) throw webidl$11.errors.invalidArgument({
				prefix: "Headers.delete",
				value: name$2,
				type: "header name"
			});
			if (this.#guard === "immutable") throw new TypeError("immutable");
			if (!this.#headersList.contains(name$2, false)) return;
			this.#headersList.delete(name$2, false);
		}
		get(name$2) {
			webidl$11.brandCheck(this, Headers$5);
			webidl$11.argumentLengthCheck(arguments, 1, "Headers.get");
			const prefix = "Headers.get";
			name$2 = webidl$11.converters.ByteString(name$2, prefix, "name");
			if (!isValidHeaderName$1(name$2)) throw webidl$11.errors.invalidArgument({
				prefix,
				value: name$2,
				type: "header name"
			});
			return this.#headersList.get(name$2, false);
		}
		has(name$2) {
			webidl$11.brandCheck(this, Headers$5);
			webidl$11.argumentLengthCheck(arguments, 1, "Headers.has");
			const prefix = "Headers.has";
			name$2 = webidl$11.converters.ByteString(name$2, prefix, "name");
			if (!isValidHeaderName$1(name$2)) throw webidl$11.errors.invalidArgument({
				prefix,
				value: name$2,
				type: "header name"
			});
			return this.#headersList.contains(name$2, false);
		}
		set(name$2, value) {
			webidl$11.brandCheck(this, Headers$5);
			webidl$11.argumentLengthCheck(arguments, 2, "Headers.set");
			const prefix = "Headers.set";
			name$2 = webidl$11.converters.ByteString(name$2, prefix, "name");
			value = webidl$11.converters.ByteString(value, prefix, "value");
			value = headerValueNormalize(value);
			if (!isValidHeaderName$1(name$2)) throw webidl$11.errors.invalidArgument({
				prefix,
				value: name$2,
				type: "header name"
			});
			else if (!isValidHeaderValue(value)) throw webidl$11.errors.invalidArgument({
				prefix,
				value,
				type: "header value"
			});
			if (this.#guard === "immutable") throw new TypeError("immutable");
			this.#headersList.set(name$2, value, false);
		}
		getSetCookie() {
			webidl$11.brandCheck(this, Headers$5);
			const list = this.#headersList.cookies;
			if (list) return [...list];
			return [];
		}
		[util$4.inspect.custom](depth, options) {
			options.depth ??= depth;
			return `Headers ${util$4.formatWithOptions(options, this.#headersList.entries)}`;
		}
		static getHeadersGuard(o$1) {
			return o$1.#guard;
		}
		static setHeadersGuard(o$1, guard) {
			o$1.#guard = guard;
		}
		/**
		* @param {Headers} o
		*/
		static getHeadersList(o$1) {
			return o$1.#headersList;
		}
		/**
		* @param {Headers} target
		* @param {HeadersList} list
		*/
		static setHeadersList(target, list) {
			target.#headersList = list;
		}
	};
	const { getHeadersGuard: getHeadersGuard$2, setHeadersGuard: setHeadersGuard$2, getHeadersList: getHeadersList$2, setHeadersList: setHeadersList$2 } = Headers$5;
	Reflect.deleteProperty(Headers$5, "getHeadersGuard");
	Reflect.deleteProperty(Headers$5, "setHeadersGuard");
	Reflect.deleteProperty(Headers$5, "getHeadersList");
	Reflect.deleteProperty(Headers$5, "setHeadersList");
	iteratorMixin("Headers", Headers$5, headersListSortAndCombine, 0, 1);
	Object.defineProperties(Headers$5.prototype, {
		append: kEnumerableProperty$9,
		delete: kEnumerableProperty$9,
		get: kEnumerableProperty$9,
		has: kEnumerableProperty$9,
		set: kEnumerableProperty$9,
		getSetCookie: kEnumerableProperty$9,
		[Symbol.toStringTag]: {
			value: "Headers",
			configurable: true
		},
		[util$4.inspect.custom]: { enumerable: false }
	});
	webidl$11.converters.HeadersInit = function(V, prefix, argument) {
		if (webidl$11.util.Type(V) === webidl$11.util.Types.OBJECT) {
			const iterator$1 = Reflect.get(V, Symbol.iterator);
			if (!util$4.types.isProxy(V) && iterator$1 === Headers$5.prototype.entries) try {
				return getHeadersList$2(V).entriesList;
			} catch {}
			if (typeof iterator$1 === "function") return webidl$11.converters["sequence<sequence<ByteString>>"](V, prefix, argument, iterator$1.bind(V));
			return webidl$11.converters["record<ByteString, ByteString>"](V, prefix, argument);
		}
		throw webidl$11.errors.conversionFailed({
			prefix: "Headers constructor",
			argument: "Argument 1",
			types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
		});
	};
	module.exports = {
		fill: fill$1,
		compareHeaderName,
		Headers: Headers$5,
		HeadersList: HeadersList$3,
		getHeadersGuard: getHeadersGuard$2,
		setHeadersGuard: setHeadersGuard$2,
		setHeadersList: setHeadersList$2,
		getHeadersList: getHeadersList$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/response.js
var require_response = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/response.js"(exports, module) {
	const { Headers: Headers$4, HeadersList: HeadersList$2, fill, getHeadersGuard: getHeadersGuard$1, setHeadersGuard: setHeadersGuard$1, setHeadersList: setHeadersList$1 } = require_headers();
	const { extractBody: extractBody$2, cloneBody: cloneBody$1, mixinBody: mixinBody$1, streamRegistry, bodyUnusable: bodyUnusable$1 } = require_body();
	const util$3 = require_util$5();
	const nodeUtil$1 = __require("node:util");
	const { kEnumerableProperty: kEnumerableProperty$8 } = util$3;
	const { isValidReasonPhrase, isCancelled: isCancelled$1, isAborted: isAborted$2, serializeJavascriptValueToJSONString, isErrorLike: isErrorLike$1, isomorphicEncode: isomorphicEncode$1, environmentSettingsObject: relevantRealm } = require_util$4();
	const { redirectStatusSet: redirectStatusSet$1, nullBodyStatus: nullBodyStatus$1 } = require_constants$2();
	const { webidl: webidl$10 } = require_webidl();
	const { URLSerializer: URLSerializer$3 } = require_data_url();
	const { kConstruct: kConstruct$6 } = require_symbols();
	const assert$7 = __require("node:assert");
	const { types: types$2 } = __require("node:util");
	const textEncoder$2 = new TextEncoder("utf-8");
	var Response$1 = class Response$1 {
		/** @type {Headers} */
		#headers;
		#state;
		static error() {
			const responseObject = fromInnerResponse$2(makeNetworkError$1(), "immutable");
			return responseObject;
		}
		static json(data$1, init = void 0) {
			webidl$10.argumentLengthCheck(arguments, 1, "Response.json");
			if (init !== null) init = webidl$10.converters.ResponseInit(init);
			const bytes = textEncoder$2.encode(serializeJavascriptValueToJSONString(data$1));
			const body = extractBody$2(bytes);
			const responseObject = fromInnerResponse$2(makeResponse$1({}), "response");
			initializeResponse(responseObject, init, {
				body: body[0],
				type: "application/json"
			});
			return responseObject;
		}
		static redirect(url, status = 302) {
			webidl$10.argumentLengthCheck(arguments, 1, "Response.redirect");
			url = webidl$10.converters.USVString(url);
			status = webidl$10.converters["unsigned short"](status);
			let parsedURL;
			try {
				parsedURL = new URL(url, relevantRealm.settingsObject.baseUrl);
			} catch (err) {
				throw new TypeError(`Failed to parse URL from ${url}`, { cause: err });
			}
			if (!redirectStatusSet$1.has(status)) throw new RangeError(`Invalid status code ${status}`);
			const responseObject = fromInnerResponse$2(makeResponse$1({}), "immutable");
			responseObject.#state.status = status;
			const value = isomorphicEncode$1(URLSerializer$3(parsedURL));
			responseObject.#state.headersList.append("location", value, true);
			return responseObject;
		}
		constructor(body = null, init = void 0) {
			webidl$10.util.markAsUncloneable(this);
			if (body === kConstruct$6) return;
			if (body !== null) body = webidl$10.converters.BodyInit(body);
			init = webidl$10.converters.ResponseInit(init);
			this.#state = makeResponse$1({});
			this.#headers = new Headers$4(kConstruct$6);
			setHeadersGuard$1(this.#headers, "response");
			setHeadersList$1(this.#headers, this.#state.headersList);
			let bodyWithType = null;
			if (body != null) {
				const [extractedBody, type] = extractBody$2(body);
				bodyWithType = {
					body: extractedBody,
					type
				};
			}
			initializeResponse(this, init, bodyWithType);
		}
		get type() {
			webidl$10.brandCheck(this, Response$1);
			return this.#state.type;
		}
		get url() {
			webidl$10.brandCheck(this, Response$1);
			const urlList = this.#state.urlList;
			const url = urlList[urlList.length - 1] ?? null;
			if (url === null) return "";
			return URLSerializer$3(url, true);
		}
		get redirected() {
			webidl$10.brandCheck(this, Response$1);
			return this.#state.urlList.length > 1;
		}
		get status() {
			webidl$10.brandCheck(this, Response$1);
			return this.#state.status;
		}
		get ok() {
			webidl$10.brandCheck(this, Response$1);
			return this.#state.status >= 200 && this.#state.status <= 299;
		}
		get statusText() {
			webidl$10.brandCheck(this, Response$1);
			return this.#state.statusText;
		}
		get headers() {
			webidl$10.brandCheck(this, Response$1);
			return this.#headers;
		}
		get body() {
			webidl$10.brandCheck(this, Response$1);
			return this.#state.body ? this.#state.body.stream : null;
		}
		get bodyUsed() {
			webidl$10.brandCheck(this, Response$1);
			return !!this.#state.body && util$3.isDisturbed(this.#state.body.stream);
		}
		clone() {
			webidl$10.brandCheck(this, Response$1);
			if (bodyUnusable$1(this.#state)) throw webidl$10.errors.exception({
				header: "Response.clone",
				message: "Body has already been consumed."
			});
			const clonedResponse = cloneResponse$1(this.#state);
			return fromInnerResponse$2(clonedResponse, getHeadersGuard$1(this.#headers));
		}
		[nodeUtil$1.inspect.custom](depth, options) {
			if (options.depth === null) options.depth = 2;
			options.colors ??= true;
			const properties = {
				status: this.status,
				statusText: this.statusText,
				headers: this.headers,
				body: this.body,
				bodyUsed: this.bodyUsed,
				ok: this.ok,
				redirected: this.redirected,
				type: this.type,
				url: this.url
			};
			return `Response ${nodeUtil$1.formatWithOptions(options, properties)}`;
		}
		/**
		* @param {Response} response
		*/
		static getResponseHeaders(response) {
			return response.#headers;
		}
		/**
		* @param {Response} response
		* @param {Headers} newHeaders
		*/
		static setResponseHeaders(response, newHeaders) {
			response.#headers = newHeaders;
		}
		/**
		* @param {Response} response
		*/
		static getResponseState(response) {
			return response.#state;
		}
		/**
		* @param {Response} response
		* @param {any} newState
		*/
		static setResponseState(response, newState) {
			response.#state = newState;
		}
	};
	const { getResponseHeaders, setResponseHeaders, getResponseState: getResponseState$2, setResponseState } = Response$1;
	Reflect.deleteProperty(Response$1, "getResponseHeaders");
	Reflect.deleteProperty(Response$1, "setResponseHeaders");
	Reflect.deleteProperty(Response$1, "getResponseState");
	Reflect.deleteProperty(Response$1, "setResponseState");
	mixinBody$1(Response$1, getResponseState$2);
	Object.defineProperties(Response$1.prototype, {
		type: kEnumerableProperty$8,
		url: kEnumerableProperty$8,
		status: kEnumerableProperty$8,
		ok: kEnumerableProperty$8,
		redirected: kEnumerableProperty$8,
		statusText: kEnumerableProperty$8,
		headers: kEnumerableProperty$8,
		clone: kEnumerableProperty$8,
		body: kEnumerableProperty$8,
		bodyUsed: kEnumerableProperty$8,
		[Symbol.toStringTag]: {
			value: "Response",
			configurable: true
		}
	});
	Object.defineProperties(Response$1, {
		json: kEnumerableProperty$8,
		redirect: kEnumerableProperty$8,
		error: kEnumerableProperty$8
	});
	function cloneResponse$1(response) {
		if (response.internalResponse) return filterResponse$1(cloneResponse$1(response.internalResponse), response.type);
		const newResponse = makeResponse$1({
			...response,
			body: null
		});
		if (response.body != null) {
			newResponse.body = cloneBody$1(response.body);
			streamRegistry.register(newResponse, new WeakRef(response.body.stream));
		}
		return newResponse;
	}
	function makeResponse$1(init) {
		return {
			aborted: false,
			rangeRequested: false,
			timingAllowPassed: false,
			requestIncludesCredentials: false,
			type: "default",
			status: 200,
			timingInfo: null,
			cacheState: "",
			statusText: "",
			...init,
			headersList: init?.headersList ? new HeadersList$2(init?.headersList) : new HeadersList$2(),
			urlList: init?.urlList ? [...init.urlList] : []
		};
	}
	function makeNetworkError$1(reason) {
		const isError = isErrorLike$1(reason);
		return makeResponse$1({
			type: "error",
			status: 0,
			error: isError ? reason : new Error(reason ? String(reason) : reason),
			aborted: reason && reason.name === "AbortError"
		});
	}
	function isNetworkError$1(response) {
		return response.type === "error" && response.status === 0;
	}
	function makeFilteredResponse(response, state) {
		state = {
			internalResponse: response,
			...state
		};
		return new Proxy(response, {
			get(target, p) {
				return p in state ? state[p] : target[p];
			},
			set(target, p, value) {
				assert$7(!(p in state));
				target[p] = value;
				return true;
			}
		});
	}
	function filterResponse$1(response, type) {
		if (type === "basic") return makeFilteredResponse(response, {
			type: "basic",
			headersList: response.headersList
		});
		else if (type === "cors") return makeFilteredResponse(response, {
			type: "cors",
			headersList: response.headersList
		});
		else if (type === "opaque") return makeFilteredResponse(response, {
			type: "opaque",
			urlList: Object.freeze([]),
			status: 0,
			statusText: "",
			body: null
		});
		else if (type === "opaqueredirect") return makeFilteredResponse(response, {
			type: "opaqueredirect",
			status: 0,
			statusText: "",
			headersList: [],
			body: null
		});
		else assert$7(false);
	}
	function makeAppropriateNetworkError$1(fetchParams, err = null) {
		assert$7(isCancelled$1(fetchParams));
		return isAborted$2(fetchParams) ? makeNetworkError$1(Object.assign(new DOMException("The operation was aborted.", "AbortError"), { cause: err })) : makeNetworkError$1(Object.assign(new DOMException("Request was cancelled."), { cause: err }));
	}
	function initializeResponse(response, init, body) {
		if (init.status !== null && (init.status < 200 || init.status > 599)) throw new RangeError("init[\"status\"] must be in the range of 200 to 599, inclusive.");
		if ("statusText" in init && init.statusText != null) {
			if (!isValidReasonPhrase(String(init.statusText))) throw new TypeError("Invalid statusText");
		}
		if ("status" in init && init.status != null) getResponseState$2(response).status = init.status;
		if ("statusText" in init && init.statusText != null) getResponseState$2(response).statusText = init.statusText;
		if ("headers" in init && init.headers != null) fill(getResponseHeaders(response), init.headers);
		if (body) {
			if (nullBodyStatus$1.includes(response.status)) throw webidl$10.errors.exception({
				header: "Response constructor",
				message: `Invalid response status code ${response.status}`
			});
			getResponseState$2(response).body = body.body;
			if (body.type != null && !getResponseState$2(response).headersList.contains("content-type", true)) getResponseState$2(response).headersList.append("content-type", body.type, true);
		}
	}
	/**
	* @see https://fetch.spec.whatwg.org/#response-create
	* @param {any} innerResponse
	* @param {'request' | 'immutable' | 'request-no-cors' | 'response' | 'none'} guard
	* @returns {Response}
	*/
	function fromInnerResponse$2(innerResponse, guard) {
		const response = new Response$1(kConstruct$6);
		setResponseState(response, innerResponse);
		const headers = new Headers$4(kConstruct$6);
		setResponseHeaders(response, headers);
		setHeadersList$1(headers, innerResponse.headersList);
		setHeadersGuard$1(headers, guard);
		if (innerResponse.body?.stream) streamRegistry.register(response, new WeakRef(innerResponse.body.stream));
		return response;
	}
	webidl$10.converters.XMLHttpRequestBodyInit = function(V, prefix, name$2) {
		if (typeof V === "string") return webidl$10.converters.USVString(V, prefix, name$2);
		if (webidl$10.is.Blob(V)) return V;
		if (ArrayBuffer.isView(V) || types$2.isArrayBuffer(V)) return V;
		if (webidl$10.is.FormData(V)) return V;
		if (webidl$10.is.URLSearchParams(V)) return V;
		return webidl$10.converters.DOMString(V, prefix, name$2);
	};
	webidl$10.converters.BodyInit = function(V, prefix, argument) {
		if (webidl$10.is.ReadableStream(V)) return V;
		if (V?.[Symbol.asyncIterator]) return V;
		return webidl$10.converters.XMLHttpRequestBodyInit(V, prefix, argument);
	};
	webidl$10.converters.ResponseInit = webidl$10.dictionaryConverter([
		{
			key: "status",
			converter: webidl$10.converters["unsigned short"],
			defaultValue: () => 200
		},
		{
			key: "statusText",
			converter: webidl$10.converters.ByteString,
			defaultValue: () => ""
		},
		{
			key: "headers",
			converter: webidl$10.converters.HeadersInit
		}
	]);
	webidl$10.is.Response = webidl$10.util.MakeTypeAssertion(Response$1);
	module.exports = {
		isNetworkError: isNetworkError$1,
		makeNetworkError: makeNetworkError$1,
		makeResponse: makeResponse$1,
		makeAppropriateNetworkError: makeAppropriateNetworkError$1,
		filterResponse: filterResponse$1,
		Response: Response$1,
		cloneResponse: cloneResponse$1,
		fromInnerResponse: fromInnerResponse$2,
		getResponseState: getResponseState$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/request.js
var require_request = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/request.js"(exports, module) {
	const { extractBody: extractBody$1, mixinBody, cloneBody, bodyUnusable } = require_body();
	const { Headers: Headers$3, fill: fillHeaders, HeadersList: HeadersList$1, setHeadersGuard, getHeadersGuard, setHeadersList, getHeadersList: getHeadersList$1 } = require_headers();
	const util$2 = require_util$5();
	const nodeUtil = __require("node:util");
	const { isValidHTTPToken, sameOrigin: sameOrigin$1, environmentSettingsObject: environmentSettingsObject$3 } = require_util$4();
	const { forbiddenMethodsSet, corsSafeListedMethodsSet, referrerPolicy, requestRedirect, requestMode, requestCredentials, requestCache, requestDuplex } = require_constants$2();
	const { kEnumerableProperty: kEnumerableProperty$7, normalizedMethodRecordsBase, normalizedMethodRecords } = util$2;
	const { webidl: webidl$9 } = require_webidl();
	const { URLSerializer: URLSerializer$2 } = require_data_url();
	const { kConstruct: kConstruct$5 } = require_symbols();
	const assert$6 = __require("node:assert");
	const { getMaxListeners, setMaxListeners: setMaxListeners$1, defaultMaxListeners } = __require("node:events");
	const kAbortController = Symbol("abortController");
	const requestFinalizer = new FinalizationRegistry(({ signal, abort: abort$2 }) => {
		signal.removeEventListener("abort", abort$2);
	});
	const dependentControllerMap = /* @__PURE__ */ new WeakMap();
	let abortSignalHasEventHandlerLeakWarning;
	try {
		abortSignalHasEventHandlerLeakWarning = getMaxListeners(new AbortController().signal) > 0;
	} catch {
		abortSignalHasEventHandlerLeakWarning = false;
	}
	function buildAbort(acRef) {
		return abort$2;
		function abort$2() {
			const ac = acRef.deref();
			if (ac !== void 0) {
				requestFinalizer.unregister(abort$2);
				this.removeEventListener("abort", abort$2);
				ac.abort(this.reason);
				const controllerList = dependentControllerMap.get(ac.signal);
				if (controllerList !== void 0) {
					if (controllerList.size !== 0) {
						for (const ref of controllerList) {
							const ctrl = ref.deref();
							if (ctrl !== void 0) ctrl.abort(this.reason);
						}
						controllerList.clear();
					}
					dependentControllerMap.delete(ac.signal);
				}
			}
		}
	}
	let patchMethodWarning = false;
	var Request$2 = class Request$2 {
		/** @type {AbortSignal} */
		#signal;
		/** @type {import('../../dispatcher/dispatcher')} */
		#dispatcher;
		/** @type {Headers} */
		#headers;
		#state;
		constructor(input, init = void 0) {
			webidl$9.util.markAsUncloneable(this);
			if (input === kConstruct$5) return;
			const prefix = "Request constructor";
			webidl$9.argumentLengthCheck(arguments, 1, prefix);
			input = webidl$9.converters.RequestInfo(input);
			init = webidl$9.converters.RequestInit(init);
			let request$3 = null;
			let fallbackMode = null;
			const baseUrl$1 = environmentSettingsObject$3.settingsObject.baseUrl;
			let signal = null;
			if (typeof input === "string") {
				this.#dispatcher = init.dispatcher;
				let parsedURL;
				try {
					parsedURL = new URL(input, baseUrl$1);
				} catch (err) {
					throw new TypeError("Failed to parse URL from " + input, { cause: err });
				}
				if (parsedURL.username || parsedURL.password) throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
				request$3 = makeRequest$2({ urlList: [parsedURL] });
				fallbackMode = "cors";
			} else {
				assert$6(webidl$9.is.Request(input));
				request$3 = input.#state;
				signal = input.#signal;
				this.#dispatcher = init.dispatcher || input.#dispatcher;
			}
			const origin = environmentSettingsObject$3.settingsObject.origin;
			let window$1 = "client";
			if (request$3.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin$1(request$3.window, origin)) window$1 = request$3.window;
			if (init.window != null) throw new TypeError(`'window' option '${window$1}' must be null`);
			if ("window" in init) window$1 = "no-window";
			request$3 = makeRequest$2({
				method: request$3.method,
				headersList: request$3.headersList,
				unsafeRequest: request$3.unsafeRequest,
				client: environmentSettingsObject$3.settingsObject,
				window: window$1,
				priority: request$3.priority,
				origin: request$3.origin,
				referrer: request$3.referrer,
				referrerPolicy: request$3.referrerPolicy,
				mode: request$3.mode,
				credentials: request$3.credentials,
				cache: request$3.cache,
				redirect: request$3.redirect,
				integrity: request$3.integrity,
				keepalive: request$3.keepalive,
				reloadNavigation: request$3.reloadNavigation,
				historyNavigation: request$3.historyNavigation,
				urlList: [...request$3.urlList]
			});
			const initHasKey = Object.keys(init).length !== 0;
			if (initHasKey) {
				if (request$3.mode === "navigate") request$3.mode = "same-origin";
				request$3.reloadNavigation = false;
				request$3.historyNavigation = false;
				request$3.origin = "client";
				request$3.referrer = "client";
				request$3.referrerPolicy = "";
				request$3.url = request$3.urlList[request$3.urlList.length - 1];
				request$3.urlList = [request$3.url];
			}
			if (init.referrer !== void 0) {
				const referrer = init.referrer;
				if (referrer === "") request$3.referrer = "no-referrer";
				else {
					let parsedReferrer;
					try {
						parsedReferrer = new URL(referrer, baseUrl$1);
					} catch (err) {
						throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
					}
					if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !sameOrigin$1(parsedReferrer, environmentSettingsObject$3.settingsObject.baseUrl)) request$3.referrer = "client";
					else request$3.referrer = parsedReferrer;
				}
			}
			if (init.referrerPolicy !== void 0) request$3.referrerPolicy = init.referrerPolicy;
			let mode;
			if (init.mode !== void 0) mode = init.mode;
			else mode = fallbackMode;
			if (mode === "navigate") throw webidl$9.errors.exception({
				header: "Request constructor",
				message: "invalid request mode navigate."
			});
			if (mode != null) request$3.mode = mode;
			if (init.credentials !== void 0) request$3.credentials = init.credentials;
			if (init.cache !== void 0) request$3.cache = init.cache;
			if (request$3.cache === "only-if-cached" && request$3.mode !== "same-origin") throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
			if (init.redirect !== void 0) request$3.redirect = init.redirect;
			if (init.integrity != null) request$3.integrity = String(init.integrity);
			if (init.keepalive !== void 0) request$3.keepalive = Boolean(init.keepalive);
			if (init.method !== void 0) {
				let method = init.method;
				const mayBeNormalized = normalizedMethodRecords[method];
				if (mayBeNormalized !== void 0) request$3.method = mayBeNormalized;
				else {
					if (!isValidHTTPToken(method)) throw new TypeError(`'${method}' is not a valid HTTP method.`);
					const upperCase = method.toUpperCase();
					if (forbiddenMethodsSet.has(upperCase)) throw new TypeError(`'${method}' HTTP method is unsupported.`);
					method = normalizedMethodRecordsBase[upperCase] ?? method;
					request$3.method = method;
				}
				if (!patchMethodWarning && request$3.method === "patch") {
					process.emitWarning("Using `patch` is highly likely to result in a `405 Method Not Allowed`. `PATCH` is much more likely to succeed.", { code: "UNDICI-FETCH-patch" });
					patchMethodWarning = true;
				}
			}
			if (init.signal !== void 0) signal = init.signal;
			this.#state = request$3;
			const ac = new AbortController();
			this.#signal = ac.signal;
			if (signal != null) if (signal.aborted) ac.abort(signal.reason);
			else {
				this[kAbortController] = ac;
				const acRef = new WeakRef(ac);
				const abort$2 = buildAbort(acRef);
				if (abortSignalHasEventHandlerLeakWarning && getMaxListeners(signal) === defaultMaxListeners) setMaxListeners$1(1500, signal);
				util$2.addAbortListener(signal, abort$2);
				requestFinalizer.register(ac, {
					signal,
					abort: abort$2
				}, abort$2);
			}
			this.#headers = new Headers$3(kConstruct$5);
			setHeadersList(this.#headers, request$3.headersList);
			setHeadersGuard(this.#headers, "request");
			if (mode === "no-cors") {
				if (!corsSafeListedMethodsSet.has(request$3.method)) throw new TypeError(`'${request$3.method} is unsupported in no-cors mode.`);
				setHeadersGuard(this.#headers, "request-no-cors");
			}
			if (initHasKey) {
				/** @type {HeadersList} */
				const headersList = getHeadersList$1(this.#headers);
				const headers = init.headers !== void 0 ? init.headers : new HeadersList$1(headersList);
				headersList.clear();
				if (headers instanceof HeadersList$1) {
					for (const { name: name$2, value } of headers.rawValues()) headersList.append(name$2, value, false);
					headersList.cookies = headers.cookies;
				} else fillHeaders(this.#headers, headers);
			}
			const inputBody = webidl$9.is.Request(input) ? input.#state.body : null;
			if ((init.body != null || inputBody != null) && (request$3.method === "GET" || request$3.method === "HEAD")) throw new TypeError("Request with GET/HEAD method cannot have body.");
			let initBody = null;
			if (init.body != null) {
				const [extractedBody, contentType] = extractBody$1(init.body, request$3.keepalive);
				initBody = extractedBody;
				if (contentType && !getHeadersList$1(this.#headers).contains("content-type", true)) this.#headers.append("content-type", contentType, true);
			}
			const inputOrInitBody = initBody ?? inputBody;
			if (inputOrInitBody != null && inputOrInitBody.source == null) {
				if (initBody != null && init.duplex == null) throw new TypeError("RequestInit: duplex option is required when sending a body.");
				if (request$3.mode !== "same-origin" && request$3.mode !== "cors") throw new TypeError("If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"");
				request$3.useCORSPreflightFlag = true;
			}
			let finalBody = inputOrInitBody;
			if (initBody == null && inputBody != null) {
				if (bodyUnusable(input.#state)) throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
				const identityTransform = new TransformStream();
				inputBody.stream.pipeThrough(identityTransform);
				finalBody = {
					source: inputBody.source,
					length: inputBody.length,
					stream: identityTransform.readable
				};
			}
			this.#state.body = finalBody;
		}
		get method() {
			webidl$9.brandCheck(this, Request$2);
			return this.#state.method;
		}
		get url() {
			webidl$9.brandCheck(this, Request$2);
			return URLSerializer$2(this.#state.url);
		}
		get headers() {
			webidl$9.brandCheck(this, Request$2);
			return this.#headers;
		}
		get destination() {
			webidl$9.brandCheck(this, Request$2);
			return this.#state.destination;
		}
		get referrer() {
			webidl$9.brandCheck(this, Request$2);
			if (this.#state.referrer === "no-referrer") return "";
			if (this.#state.referrer === "client") return "about:client";
			return this.#state.referrer.toString();
		}
		get referrerPolicy() {
			webidl$9.brandCheck(this, Request$2);
			return this.#state.referrerPolicy;
		}
		get mode() {
			webidl$9.brandCheck(this, Request$2);
			return this.#state.mode;
		}
		get credentials() {
			webidl$9.brandCheck(this, Request$2);
			return this.#state.credentials;
		}
		get cache() {
			webidl$9.brandCheck(this, Request$2);
			return this.#state.cache;
		}
		get redirect() {
			webidl$9.brandCheck(this, Request$2);
			return this.#state.redirect;
		}
		get integrity() {
			webidl$9.brandCheck(this, Request$2);
			return this.#state.integrity;
		}
		get keepalive() {
			webidl$9.brandCheck(this, Request$2);
			return this.#state.keepalive;
		}
		get isReloadNavigation() {
			webidl$9.brandCheck(this, Request$2);
			return this.#state.reloadNavigation;
		}
		get isHistoryNavigation() {
			webidl$9.brandCheck(this, Request$2);
			return this.#state.historyNavigation;
		}
		get signal() {
			webidl$9.brandCheck(this, Request$2);
			return this.#signal;
		}
		get body() {
			webidl$9.brandCheck(this, Request$2);
			return this.#state.body ? this.#state.body.stream : null;
		}
		get bodyUsed() {
			webidl$9.brandCheck(this, Request$2);
			return !!this.#state.body && util$2.isDisturbed(this.#state.body.stream);
		}
		get duplex() {
			webidl$9.brandCheck(this, Request$2);
			return "half";
		}
		clone() {
			webidl$9.brandCheck(this, Request$2);
			if (bodyUnusable(this.#state)) throw new TypeError("unusable");
			const clonedRequest = cloneRequest$1(this.#state);
			const ac = new AbortController();
			if (this.signal.aborted) ac.abort(this.signal.reason);
			else {
				let list = dependentControllerMap.get(this.signal);
				if (list === void 0) {
					list = /* @__PURE__ */ new Set();
					dependentControllerMap.set(this.signal, list);
				}
				const acRef = new WeakRef(ac);
				list.add(acRef);
				util$2.addAbortListener(ac.signal, buildAbort(acRef));
			}
			return fromInnerRequest$1(clonedRequest, this.#dispatcher, ac.signal, getHeadersGuard(this.#headers));
		}
		[nodeUtil.inspect.custom](depth, options) {
			if (options.depth === null) options.depth = 2;
			options.colors ??= true;
			const properties = {
				method: this.method,
				url: this.url,
				headers: this.headers,
				destination: this.destination,
				referrer: this.referrer,
				referrerPolicy: this.referrerPolicy,
				mode: this.mode,
				credentials: this.credentials,
				cache: this.cache,
				redirect: this.redirect,
				integrity: this.integrity,
				keepalive: this.keepalive,
				isReloadNavigation: this.isReloadNavigation,
				isHistoryNavigation: this.isHistoryNavigation,
				signal: this.signal
			};
			return `Request ${nodeUtil.formatWithOptions(options, properties)}`;
		}
		/**
		* @param {Request} request
		* @param {AbortSignal} newSignal
		*/
		static setRequestSignal(request$3, newSignal) {
			request$3.#signal = newSignal;
			return request$3;
		}
		/**
		* @param {Request} request
		*/
		static getRequestDispatcher(request$3) {
			return request$3.#dispatcher;
		}
		/**
		* @param {Request} request
		* @param {import('../../dispatcher/dispatcher')} newDispatcher
		*/
		static setRequestDispatcher(request$3, newDispatcher) {
			request$3.#dispatcher = newDispatcher;
		}
		/**
		* @param {Request} request
		* @param {Headers} newHeaders
		*/
		static setRequestHeaders(request$3, newHeaders) {
			request$3.#headers = newHeaders;
		}
		/**
		* @param {Request} request
		*/
		static getRequestState(request$3) {
			return request$3.#state;
		}
		/**
		* @param {Request} request
		* @param {any} newState
		*/
		static setRequestState(request$3, newState) {
			request$3.#state = newState;
		}
	};
	const { setRequestSignal, getRequestDispatcher: getRequestDispatcher$1, setRequestDispatcher, setRequestHeaders, getRequestState: getRequestState$2, setRequestState } = Request$2;
	Reflect.deleteProperty(Request$2, "setRequestSignal");
	Reflect.deleteProperty(Request$2, "getRequestDispatcher");
	Reflect.deleteProperty(Request$2, "setRequestDispatcher");
	Reflect.deleteProperty(Request$2, "setRequestHeaders");
	Reflect.deleteProperty(Request$2, "getRequestState");
	Reflect.deleteProperty(Request$2, "setRequestState");
	mixinBody(Request$2, getRequestState$2);
	function makeRequest$2(init) {
		return {
			method: init.method ?? "GET",
			localURLsOnly: init.localURLsOnly ?? false,
			unsafeRequest: init.unsafeRequest ?? false,
			body: init.body ?? null,
			client: init.client ?? null,
			reservedClient: init.reservedClient ?? null,
			replacesClientId: init.replacesClientId ?? "",
			window: init.window ?? "client",
			keepalive: init.keepalive ?? false,
			serviceWorkers: init.serviceWorkers ?? "all",
			initiator: init.initiator ?? "",
			destination: init.destination ?? "",
			priority: init.priority ?? null,
			origin: init.origin ?? "client",
			policyContainer: init.policyContainer ?? "client",
			referrer: init.referrer ?? "client",
			referrerPolicy: init.referrerPolicy ?? "",
			mode: init.mode ?? "no-cors",
			useCORSPreflightFlag: init.useCORSPreflightFlag ?? false,
			credentials: init.credentials ?? "same-origin",
			useCredentials: init.useCredentials ?? false,
			cache: init.cache ?? "default",
			redirect: init.redirect ?? "follow",
			integrity: init.integrity ?? "",
			cryptoGraphicsNonceMetadata: init.cryptoGraphicsNonceMetadata ?? "",
			parserMetadata: init.parserMetadata ?? "",
			reloadNavigation: init.reloadNavigation ?? false,
			historyNavigation: init.historyNavigation ?? false,
			userActivation: init.userActivation ?? false,
			taintedOrigin: init.taintedOrigin ?? false,
			redirectCount: init.redirectCount ?? 0,
			responseTainting: init.responseTainting ?? "basic",
			preventNoCacheCacheControlHeaderModification: init.preventNoCacheCacheControlHeaderModification ?? false,
			done: init.done ?? false,
			timingAllowFailed: init.timingAllowFailed ?? false,
			urlList: init.urlList,
			url: init.urlList[0],
			headersList: init.headersList ? new HeadersList$1(init.headersList) : new HeadersList$1()
		};
	}
	function cloneRequest$1(request$3) {
		const newRequest = makeRequest$2({
			...request$3,
			body: null
		});
		if (request$3.body != null) newRequest.body = cloneBody(request$3.body);
		return newRequest;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#request-create
	* @param {any} innerRequest
	* @param {import('../../dispatcher/agent')} dispatcher
	* @param {AbortSignal} signal
	* @param {'request' | 'immutable' | 'request-no-cors' | 'response' | 'none'} guard
	* @returns {Request}
	*/
	function fromInnerRequest$1(innerRequest, dispatcher, signal, guard) {
		const request$3 = new Request$2(kConstruct$5);
		setRequestState(request$3, innerRequest);
		setRequestDispatcher(request$3, dispatcher);
		setRequestSignal(request$3, signal);
		const headers = new Headers$3(kConstruct$5);
		setRequestHeaders(request$3, headers);
		setHeadersList(headers, innerRequest.headersList);
		setHeadersGuard(headers, guard);
		return request$3;
	}
	Object.defineProperties(Request$2.prototype, {
		method: kEnumerableProperty$7,
		url: kEnumerableProperty$7,
		headers: kEnumerableProperty$7,
		redirect: kEnumerableProperty$7,
		clone: kEnumerableProperty$7,
		signal: kEnumerableProperty$7,
		duplex: kEnumerableProperty$7,
		destination: kEnumerableProperty$7,
		body: kEnumerableProperty$7,
		bodyUsed: kEnumerableProperty$7,
		isHistoryNavigation: kEnumerableProperty$7,
		isReloadNavigation: kEnumerableProperty$7,
		keepalive: kEnumerableProperty$7,
		integrity: kEnumerableProperty$7,
		cache: kEnumerableProperty$7,
		credentials: kEnumerableProperty$7,
		attribute: kEnumerableProperty$7,
		referrerPolicy: kEnumerableProperty$7,
		referrer: kEnumerableProperty$7,
		mode: kEnumerableProperty$7,
		[Symbol.toStringTag]: {
			value: "Request",
			configurable: true
		}
	});
	webidl$9.is.Request = webidl$9.util.MakeTypeAssertion(Request$2);
	/**
	* @param {*} V
	* @returns {import('../../../types/fetch').Request|string}
	*
	* @see https://fetch.spec.whatwg.org/#requestinfo
	*/
	webidl$9.converters.RequestInfo = function(V) {
		if (typeof V === "string") return webidl$9.converters.USVString(V);
		if (webidl$9.is.Request(V)) return V;
		return webidl$9.converters.USVString(V);
	};
	/**
	* @param {*} V
	* @returns {import('../../../types/fetch').RequestInit}
	* @see https://fetch.spec.whatwg.org/#requestinit
	*/
	webidl$9.converters.RequestInit = webidl$9.dictionaryConverter([
		{
			key: "method",
			converter: webidl$9.converters.ByteString
		},
		{
			key: "headers",
			converter: webidl$9.converters.HeadersInit
		},
		{
			key: "body",
			converter: webidl$9.nullableConverter(webidl$9.converters.BodyInit)
		},
		{
			key: "referrer",
			converter: webidl$9.converters.USVString
		},
		{
			key: "referrerPolicy",
			converter: webidl$9.converters.DOMString,
			allowedValues: referrerPolicy
		},
		{
			key: "mode",
			converter: webidl$9.converters.DOMString,
			allowedValues: requestMode
		},
		{
			key: "credentials",
			converter: webidl$9.converters.DOMString,
			allowedValues: requestCredentials
		},
		{
			key: "cache",
			converter: webidl$9.converters.DOMString,
			allowedValues: requestCache
		},
		{
			key: "redirect",
			converter: webidl$9.converters.DOMString,
			allowedValues: requestRedirect
		},
		{
			key: "integrity",
			converter: webidl$9.converters.DOMString
		},
		{
			key: "keepalive",
			converter: webidl$9.converters.boolean
		},
		{
			key: "signal",
			converter: webidl$9.nullableConverter((signal) => webidl$9.converters.AbortSignal(signal, "RequestInit", "signal"))
		},
		{
			key: "window",
			converter: webidl$9.converters.any
		},
		{
			key: "duplex",
			converter: webidl$9.converters.DOMString,
			allowedValues: requestDuplex
		},
		{
			key: "dispatcher",
			converter: webidl$9.converters.any
		}
	]);
	module.exports = {
		Request: Request$2,
		makeRequest: makeRequest$2,
		fromInnerRequest: fromInnerRequest$1,
		cloneRequest: cloneRequest$1,
		getRequestDispatcher: getRequestDispatcher$1,
		getRequestState: getRequestState$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/index.js
var require_fetch = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/fetch/index.js"(exports, module) {
	const { makeNetworkError, makeAppropriateNetworkError, filterResponse, makeResponse, fromInnerResponse: fromInnerResponse$1, getResponseState: getResponseState$1 } = require_response();
	const { HeadersList } = require_headers();
	const { Request: Request$1, cloneRequest, getRequestDispatcher, getRequestState: getRequestState$1 } = require_request();
	const zlib = __require("node:zlib");
	const { bytesMatch, makePolicyContainer, clonePolicyContainer, requestBadPort, TAOCheck, appendRequestOriginHeader, responseLocationURL, requestCurrentURL, setRequestReferrerPolicyOnRedirect, tryUpgradeRequestToAPotentiallyTrustworthyURL, createOpaqueTimingInfo, appendFetchMetadata, corsCheck, crossOriginResourcePolicyCheck, determineRequestsReferrer, coarsenedSharedCurrentTime, sameOrigin, isCancelled, isAborted: isAborted$1, isErrorLike, fullyReadBody, readableStreamClose, isomorphicEncode, urlIsLocal, urlIsHttpHttpsScheme: urlIsHttpHttpsScheme$1, urlHasHttpsScheme, clampAndCoarsenConnectionTimingInfo, simpleRangeHeaderValue, buildContentRange, createInflate, extractMimeType } = require_util$4();
	const assert$5 = __require("node:assert");
	const { safelyExtractBody, extractBody } = require_body();
	const { redirectStatusSet, nullBodyStatus, safeMethodsSet, requestBodyHeader, subresourceSet } = require_constants$2();
	const EE = __require("node:events");
	const { Readable: Readable$1, pipeline: pipeline$1, finished: finished$1, isErrored, isReadable } = __require("node:stream");
	const { addAbortListener: addAbortListener$1, bufferToLowerCasedHeaderName } = require_util$5();
	const { dataURLProcessor, serializeAMimeType: serializeAMimeType$1, minimizeSupportedMimeType } = require_data_url();
	const { getGlobalDispatcher: getGlobalDispatcher$2 } = require_global();
	const { webidl: webidl$8 } = require_webidl();
	const { STATUS_CODES } = __require("node:http");
	const { createDeferredPromise: createDeferredPromise$2 } = require_promise();
	const GET_OR_HEAD = ["GET", "HEAD"];
	const defaultUserAgent = typeof __UNDICI_IS_NODE__ !== "undefined" || typeof esbuildDetection !== "undefined" ? "node" : "undici";
	/** @type {import('buffer').resolveObjectURL} */
	let resolveObjectURL;
	var Fetch = class extends EE {
		constructor(dispatcher) {
			super();
			this.dispatcher = dispatcher;
			this.connection = null;
			this.dump = false;
			this.state = "ongoing";
		}
		terminate(reason) {
			if (this.state !== "ongoing") return;
			this.state = "terminated";
			this.connection?.destroy(reason);
			this.emit("terminated", reason);
		}
		abort(error$1) {
			if (this.state !== "ongoing") return;
			this.state = "aborted";
			if (!error$1) error$1 = new DOMException("The operation was aborted.", "AbortError");
			this.serializedAbortReason = error$1;
			this.connection?.destroy(error$1);
			this.emit("terminated", error$1);
		}
	};
	function handleFetchDone(response) {
		finalizeAndReportTiming(response, "fetch");
	}
	function fetch$2(input, init = void 0) {
		webidl$8.argumentLengthCheck(arguments, 1, "globalThis.fetch");
		let p = createDeferredPromise$2();
		let requestObject;
		try {
			requestObject = new Request$1(input, init);
		} catch (e) {
			p.reject(e);
			return p.promise;
		}
		const request$3 = getRequestState$1(requestObject);
		if (requestObject.signal.aborted) {
			abortFetch(p, request$3, null, requestObject.signal.reason);
			return p.promise;
		}
		const globalObject = request$3.client.globalObject;
		if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") request$3.serviceWorkers = "none";
		let responseObject = null;
		let locallyAborted = false;
		let controller = null;
		addAbortListener$1(requestObject.signal, () => {
			locallyAborted = true;
			assert$5(controller != null);
			controller.abort(requestObject.signal.reason);
			const realResponse = responseObject?.deref();
			abortFetch(p, request$3, realResponse, requestObject.signal.reason);
		});
		const processResponse = (response) => {
			if (locallyAborted) return;
			if (response.aborted) {
				abortFetch(p, request$3, responseObject, controller.serializedAbortReason);
				return;
			}
			if (response.type === "error") {
				p.reject(new TypeError("fetch failed", { cause: response.error }));
				return;
			}
			responseObject = new WeakRef(fromInnerResponse$1(response, "immutable"));
			p.resolve(responseObject.deref());
			p = null;
		};
		controller = fetching$3({
			request: request$3,
			processResponseEndOfBody: handleFetchDone,
			processResponse,
			dispatcher: getRequestDispatcher(requestObject)
		});
		return p.promise;
	}
	function finalizeAndReportTiming(response, initiatorType = "other") {
		if (response.type === "error" && response.aborted) return;
		if (!response.urlList?.length) return;
		const originalURL = response.urlList[0];
		let timingInfo = response.timingInfo;
		let cacheState = response.cacheState;
		if (!urlIsHttpHttpsScheme$1(originalURL)) return;
		if (timingInfo === null) return;
		if (!response.timingAllowPassed) {
			timingInfo = createOpaqueTimingInfo({ startTime: timingInfo.startTime });
			cacheState = "";
		}
		timingInfo.endTime = coarsenedSharedCurrentTime();
		response.timingInfo = timingInfo;
		markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState, "", response.status);
	}
	const markResourceTiming = performance.markResourceTiming;
	function abortFetch(p, request$3, responseObject, error$1) {
		if (p) p.reject(error$1);
		if (request$3.body?.stream != null && isReadable(request$3.body.stream)) request$3.body.stream.cancel(error$1).catch((err) => {
			if (err.code === "ERR_INVALID_STATE") return;
			throw err;
		});
		if (responseObject == null) return;
		const response = getResponseState$1(responseObject);
		if (response.body?.stream != null && isReadable(response.body.stream)) response.body.stream.cancel(error$1).catch((err) => {
			if (err.code === "ERR_INVALID_STATE") return;
			throw err;
		});
	}
	function fetching$3({ request: request$3, processRequestBodyChunkLength, processRequestEndOfBody, processResponse, processResponseEndOfBody, processResponseConsumeBody, useParallelQueue = false, dispatcher = getGlobalDispatcher$2() }) {
		assert$5(dispatcher);
		let taskDestination = null;
		let crossOriginIsolatedCapability = false;
		if (request$3.client != null) {
			taskDestination = request$3.client.globalObject;
			crossOriginIsolatedCapability = request$3.client.crossOriginIsolatedCapability;
		}
		const currentTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
		const timingInfo = createOpaqueTimingInfo({ startTime: currentTime });
		const fetchParams = {
			controller: new Fetch(dispatcher),
			request: request$3,
			timingInfo,
			processRequestBodyChunkLength,
			processRequestEndOfBody,
			processResponse,
			processResponseConsumeBody,
			processResponseEndOfBody,
			taskDestination,
			crossOriginIsolatedCapability
		};
		assert$5(!request$3.body || request$3.body.stream);
		if (request$3.window === "client") request$3.window = request$3.client?.globalObject?.constructor?.name === "Window" ? request$3.client : "no-window";
		if (request$3.origin === "client") request$3.origin = request$3.client.origin;
		if (request$3.policyContainer === "client") if (request$3.client != null) request$3.policyContainer = clonePolicyContainer(request$3.client.policyContainer);
		else request$3.policyContainer = makePolicyContainer();
		if (!request$3.headersList.contains("accept", true)) {
			const value = "*/*";
			request$3.headersList.append("accept", value, true);
		}
		if (!request$3.headersList.contains("accept-language", true)) request$3.headersList.append("accept-language", "*", true);
		if (request$3.priority === null) {}
		if (subresourceSet.has(request$3.destination)) {}
		mainFetch(fetchParams, false);
		return fetchParams.controller;
	}
	async function mainFetch(fetchParams, recursive) {
		try {
			const request$3 = fetchParams.request;
			let response = null;
			if (request$3.localURLsOnly && !urlIsLocal(requestCurrentURL(request$3))) response = makeNetworkError("local URLs only");
			tryUpgradeRequestToAPotentiallyTrustworthyURL(request$3);
			if (requestBadPort(request$3) === "blocked") response = makeNetworkError("bad port");
			if (request$3.referrerPolicy === "") request$3.referrerPolicy = request$3.policyContainer.referrerPolicy;
			if (request$3.referrer !== "no-referrer") request$3.referrer = determineRequestsReferrer(request$3);
			if (response === null) {
				const currentURL = requestCurrentURL(request$3);
				if (sameOrigin(currentURL, request$3.url) && request$3.responseTainting === "basic" || currentURL.protocol === "data:" || request$3.mode === "navigate" || request$3.mode === "websocket") {
					request$3.responseTainting = "basic";
					response = await schemeFetch(fetchParams);
				} else if (request$3.mode === "same-origin") response = makeNetworkError("request mode cannot be \"same-origin\"");
				else if (request$3.mode === "no-cors") if (request$3.redirect !== "follow") response = makeNetworkError("redirect mode cannot be \"follow\" for \"no-cors\" request");
				else {
					request$3.responseTainting = "opaque";
					response = await schemeFetch(fetchParams);
				}
				else if (!urlIsHttpHttpsScheme$1(requestCurrentURL(request$3))) response = makeNetworkError("URL scheme must be a HTTP(S) scheme");
				else {
					request$3.responseTainting = "cors";
					response = await httpFetch(fetchParams);
				}
			}
			if (recursive) return response;
			if (response.status !== 0 && !response.internalResponse) {
				if (request$3.responseTainting === "cors") {}
				if (request$3.responseTainting === "basic") response = filterResponse(response, "basic");
				else if (request$3.responseTainting === "cors") response = filterResponse(response, "cors");
				else if (request$3.responseTainting === "opaque") response = filterResponse(response, "opaque");
				else assert$5(false);
			}
			let internalResponse = response.status === 0 ? response : response.internalResponse;
			if (internalResponse.urlList.length === 0) internalResponse.urlList.push(...request$3.urlList);
			if (!request$3.timingAllowFailed) response.timingAllowPassed = true;
			if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request$3.headers.contains("range", true)) response = internalResponse = makeNetworkError();
			if (response.status !== 0 && (request$3.method === "HEAD" || request$3.method === "CONNECT" || nullBodyStatus.includes(internalResponse.status))) {
				internalResponse.body = null;
				fetchParams.controller.dump = true;
			}
			if (request$3.integrity) {
				const processBodyError = (reason) => fetchFinale(fetchParams, makeNetworkError(reason));
				if (request$3.responseTainting === "opaque" || response.body == null) {
					processBodyError(response.error);
					return;
				}
				const processBody = (bytes) => {
					if (!bytesMatch(bytes, request$3.integrity)) {
						processBodyError("integrity mismatch");
						return;
					}
					response.body = safelyExtractBody(bytes)[0];
					fetchFinale(fetchParams, response);
				};
				fullyReadBody(response.body, processBody, processBodyError);
			} else fetchFinale(fetchParams, response);
		} catch (err) {
			fetchParams.controller.terminate(err);
		}
	}
	function schemeFetch(fetchParams) {
		if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) return Promise.resolve(makeAppropriateNetworkError(fetchParams));
		const { request: request$3 } = fetchParams;
		const { protocol: scheme } = requestCurrentURL(request$3);
		switch (scheme) {
			case "about:": return Promise.resolve(makeNetworkError("about scheme is not supported"));
			case "blob:": {
				if (!resolveObjectURL) resolveObjectURL = __require("node:buffer").resolveObjectURL;
				const blobURLEntry = requestCurrentURL(request$3);
				if (blobURLEntry.search.length !== 0) return Promise.resolve(makeNetworkError("NetworkError when attempting to fetch resource."));
				const blob = resolveObjectURL(blobURLEntry.toString());
				if (request$3.method !== "GET" || !webidl$8.is.Blob(blob)) return Promise.resolve(makeNetworkError("invalid method"));
				const response = makeResponse();
				const fullLength = blob.size;
				const serializedFullLength = isomorphicEncode(`${fullLength}`);
				const type = blob.type;
				if (!request$3.headersList.contains("range", true)) {
					const bodyWithType = extractBody(blob);
					response.statusText = "OK";
					response.body = bodyWithType[0];
					response.headersList.set("content-length", serializedFullLength, true);
					response.headersList.set("content-type", type, true);
				} else {
					response.rangeRequested = true;
					const rangeHeader = request$3.headersList.get("range", true);
					const rangeValue = simpleRangeHeaderValue(rangeHeader, true);
					if (rangeValue === "failure") return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
					let { rangeStartValue: rangeStart, rangeEndValue: rangeEnd } = rangeValue;
					if (rangeStart === null) {
						rangeStart = fullLength - rangeEnd;
						rangeEnd = rangeStart + rangeEnd - 1;
					} else {
						if (rangeStart >= fullLength) return Promise.resolve(makeNetworkError("Range start is greater than the blob's size."));
						if (rangeEnd === null || rangeEnd >= fullLength) rangeEnd = fullLength - 1;
					}
					const slicedBlob = blob.slice(rangeStart, rangeEnd, type);
					const slicedBodyWithType = extractBody(slicedBlob);
					response.body = slicedBodyWithType[0];
					const serializedSlicedLength = isomorphicEncode(`${slicedBlob.size}`);
					const contentRange = buildContentRange(rangeStart, rangeEnd, fullLength);
					response.status = 206;
					response.statusText = "Partial Content";
					response.headersList.set("content-length", serializedSlicedLength, true);
					response.headersList.set("content-type", type, true);
					response.headersList.set("content-range", contentRange, true);
				}
				return Promise.resolve(response);
			}
			case "data:": {
				const currentURL = requestCurrentURL(request$3);
				const dataURLStruct = dataURLProcessor(currentURL);
				if (dataURLStruct === "failure") return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
				const mimeType = serializeAMimeType$1(dataURLStruct.mimeType);
				return Promise.resolve(makeResponse({
					statusText: "OK",
					headersList: [["content-type", {
						name: "Content-Type",
						value: mimeType
					}]],
					body: safelyExtractBody(dataURLStruct.body)[0]
				}));
			}
			case "file:": return Promise.resolve(makeNetworkError("not implemented... yet..."));
			case "http:":
			case "https:": return httpFetch(fetchParams).catch((err) => makeNetworkError(err));
			default: return Promise.resolve(makeNetworkError("unknown scheme"));
		}
	}
	function finalizeResponse(fetchParams, response) {
		fetchParams.request.done = true;
		if (fetchParams.processResponseDone != null) queueMicrotask(() => fetchParams.processResponseDone(response));
	}
	function fetchFinale(fetchParams, response) {
		let timingInfo = fetchParams.timingInfo;
		const processResponseEndOfBody = () => {
			const unsafeEndTime = Date.now();
			if (fetchParams.request.destination === "document") fetchParams.controller.fullTimingInfo = timingInfo;
			fetchParams.controller.reportTimingSteps = () => {
				if (!urlIsHttpHttpsScheme$1(fetchParams.request.url)) return;
				timingInfo.endTime = unsafeEndTime;
				let cacheState = response.cacheState;
				const bodyInfo = response.bodyInfo;
				if (!response.timingAllowPassed) {
					timingInfo = createOpaqueTimingInfo(timingInfo);
					cacheState = "";
				}
				let responseStatus = 0;
				if (fetchParams.request.mode !== "navigator" || !response.hasCrossOriginRedirects) {
					responseStatus = response.status;
					const mimeType = extractMimeType(response.headersList);
					if (mimeType !== "failure") bodyInfo.contentType = minimizeSupportedMimeType(mimeType);
				}
				if (fetchParams.request.initiatorType != null) markResourceTiming(timingInfo, fetchParams.request.url.href, fetchParams.request.initiatorType, globalThis, cacheState, bodyInfo, responseStatus);
			};
			const processResponseEndOfBodyTask = () => {
				fetchParams.request.done = true;
				if (fetchParams.processResponseEndOfBody != null) queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
				if (fetchParams.request.initiatorType != null) fetchParams.controller.reportTimingSteps();
			};
			queueMicrotask(() => processResponseEndOfBodyTask());
		};
		if (fetchParams.processResponse != null) queueMicrotask(() => {
			fetchParams.processResponse(response);
			fetchParams.processResponse = null;
		});
		const internalResponse = response.type === "error" ? response : response.internalResponse ?? response;
		if (internalResponse.body == null) processResponseEndOfBody();
		else finished$1(internalResponse.body.stream, () => {
			processResponseEndOfBody();
		});
	}
	async function httpFetch(fetchParams) {
		const request$3 = fetchParams.request;
		let response = null;
		let actualResponse = null;
		const timingInfo = fetchParams.timingInfo;
		if (request$3.serviceWorkers === "all") {}
		if (response === null) {
			if (request$3.redirect === "follow") request$3.serviceWorkers = "none";
			actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);
			if (request$3.responseTainting === "cors" && corsCheck(request$3, response) === "failure") return makeNetworkError("cors failure");
			if (TAOCheck(request$3, response) === "failure") request$3.timingAllowFailed = true;
		}
		if ((request$3.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck(request$3.origin, request$3.client, request$3.destination, actualResponse) === "blocked") return makeNetworkError("blocked");
		if (redirectStatusSet.has(actualResponse.status)) {
			if (request$3.redirect !== "manual") fetchParams.controller.connection.destroy(void 0, false);
			if (request$3.redirect === "error") response = makeNetworkError("unexpected redirect");
			else if (request$3.redirect === "manual") response = actualResponse;
			else if (request$3.redirect === "follow") response = await httpRedirectFetch(fetchParams, response);
			else assert$5(false);
		}
		response.timingInfo = timingInfo;
		return response;
	}
	function httpRedirectFetch(fetchParams, response) {
		const request$3 = fetchParams.request;
		const actualResponse = response.internalResponse ? response.internalResponse : response;
		let locationURL;
		try {
			locationURL = responseLocationURL(actualResponse, requestCurrentURL(request$3).hash);
			if (locationURL == null) return response;
		} catch (err) {
			return Promise.resolve(makeNetworkError(err));
		}
		if (!urlIsHttpHttpsScheme$1(locationURL)) return Promise.resolve(makeNetworkError("URL scheme must be a HTTP(S) scheme"));
		if (request$3.redirectCount === 20) return Promise.resolve(makeNetworkError("redirect count exceeded"));
		request$3.redirectCount += 1;
		if (request$3.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin(request$3, locationURL)) return Promise.resolve(makeNetworkError("cross origin not allowed for request mode \"cors\""));
		if (request$3.responseTainting === "cors" && (locationURL.username || locationURL.password)) return Promise.resolve(makeNetworkError("URL cannot contain credentials for request mode \"cors\""));
		if (actualResponse.status !== 303 && request$3.body != null && request$3.body.source == null) return Promise.resolve(makeNetworkError());
		if ([301, 302].includes(actualResponse.status) && request$3.method === "POST" || actualResponse.status === 303 && !GET_OR_HEAD.includes(request$3.method)) {
			request$3.method = "GET";
			request$3.body = null;
			for (const headerName of requestBodyHeader) request$3.headersList.delete(headerName);
		}
		if (!sameOrigin(requestCurrentURL(request$3), locationURL)) {
			request$3.headersList.delete("authorization", true);
			request$3.headersList.delete("proxy-authorization", true);
			request$3.headersList.delete("cookie", true);
			request$3.headersList.delete("host", true);
		}
		if (request$3.body != null) {
			assert$5(request$3.body.source != null);
			request$3.body = safelyExtractBody(request$3.body.source)[0];
		}
		const timingInfo = fetchParams.timingInfo;
		timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
		if (timingInfo.redirectStartTime === 0) timingInfo.redirectStartTime = timingInfo.startTime;
		request$3.urlList.push(locationURL);
		setRequestReferrerPolicyOnRedirect(request$3, actualResponse);
		return mainFetch(fetchParams, true);
	}
	async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
		const request$3 = fetchParams.request;
		let httpFetchParams = null;
		let httpRequest = null;
		let response = null;
		const httpCache = null;
		const revalidatingFlag = false;
		if (request$3.window === "no-window" && request$3.redirect === "error") {
			httpFetchParams = fetchParams;
			httpRequest = request$3;
		} else {
			httpRequest = cloneRequest(request$3);
			httpFetchParams = { ...fetchParams };
			httpFetchParams.request = httpRequest;
		}
		const includeCredentials = request$3.credentials === "include" || request$3.credentials === "same-origin" && request$3.responseTainting === "basic";
		const contentLength = httpRequest.body ? httpRequest.body.length : null;
		let contentLengthHeaderValue = null;
		if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) contentLengthHeaderValue = "0";
		if (contentLength != null) contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
		if (contentLengthHeaderValue != null) httpRequest.headersList.append("content-length", contentLengthHeaderValue, true);
		if (contentLength != null && httpRequest.keepalive) {}
		if (webidl$8.is.URL(httpRequest.referrer)) httpRequest.headersList.append("referer", isomorphicEncode(httpRequest.referrer.href), true);
		appendRequestOriginHeader(httpRequest);
		appendFetchMetadata(httpRequest);
		if (!httpRequest.headersList.contains("user-agent", true)) httpRequest.headersList.append("user-agent", defaultUserAgent, true);
		if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since", true) || httpRequest.headersList.contains("if-none-match", true) || httpRequest.headersList.contains("if-unmodified-since", true) || httpRequest.headersList.contains("if-match", true) || httpRequest.headersList.contains("if-range", true))) httpRequest.cache = "no-store";
		if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control", true)) httpRequest.headersList.append("cache-control", "max-age=0", true);
		if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
			if (!httpRequest.headersList.contains("pragma", true)) httpRequest.headersList.append("pragma", "no-cache", true);
			if (!httpRequest.headersList.contains("cache-control", true)) httpRequest.headersList.append("cache-control", "no-cache", true);
		}
		if (httpRequest.headersList.contains("range", true)) httpRequest.headersList.append("accept-encoding", "identity", true);
		if (!httpRequest.headersList.contains("accept-encoding", true)) if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) httpRequest.headersList.append("accept-encoding", "br, gzip, deflate", true);
		else httpRequest.headersList.append("accept-encoding", "gzip, deflate", true);
		httpRequest.headersList.delete("host", true);
		if (includeCredentials) {}
		if (httpCache == null) httpRequest.cache = "no-store";
		if (httpRequest.cache !== "no-store" && httpRequest.cache !== "reload") {}
		if (response == null) {
			if (httpRequest.cache === "only-if-cached") return makeNetworkError("only if cached");
			const forwardResponse = await httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);
			if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {}
			if (response == null) response = forwardResponse;
		}
		response.urlList = [...httpRequest.urlList];
		if (httpRequest.headersList.contains("range", true)) response.rangeRequested = true;
		response.requestIncludesCredentials = includeCredentials;
		if (response.status === 407) {
			if (request$3.window === "no-window") return makeNetworkError();
			if (isCancelled(fetchParams)) return makeAppropriateNetworkError(fetchParams);
			return makeNetworkError("proxy authentication required");
		}
		if (response.status === 421 && !isNewConnectionFetch && (request$3.body == null || request$3.body.source != null)) {
			if (isCancelled(fetchParams)) return makeAppropriateNetworkError(fetchParams);
			fetchParams.controller.connection.destroy();
			response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);
		}
		if (isAuthenticationFetch) {}
		return response;
	}
	async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
		assert$5(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
		fetchParams.controller.connection = {
			abort: null,
			destroyed: false,
			destroy(err, abort$2 = true) {
				if (!this.destroyed) {
					this.destroyed = true;
					if (abort$2) this.abort?.(err ?? new DOMException("The operation was aborted.", "AbortError"));
				}
			}
		};
		const request$3 = fetchParams.request;
		let response = null;
		const timingInfo = fetchParams.timingInfo;
		const httpCache = null;
		if (httpCache == null) request$3.cache = "no-store";
		const newConnection = forceNewConnection ? "yes" : "no";
		if (request$3.mode === "websocket") {}
		let requestBody = null;
		if (request$3.body == null && fetchParams.processRequestEndOfBody) queueMicrotask(() => fetchParams.processRequestEndOfBody());
		else if (request$3.body != null) {
			const processBodyChunk = async function* (bytes) {
				if (isCancelled(fetchParams)) return;
				yield bytes;
				fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
			};
			const processEndOfBody = () => {
				if (isCancelled(fetchParams)) return;
				if (fetchParams.processRequestEndOfBody) fetchParams.processRequestEndOfBody();
			};
			const processBodyError = (e) => {
				if (isCancelled(fetchParams)) return;
				if (e.name === "AbortError") fetchParams.controller.abort();
				else fetchParams.controller.terminate(e);
			};
			requestBody = async function* () {
				try {
					for await (const bytes of request$3.body.stream) yield* processBodyChunk(bytes);
					processEndOfBody();
				} catch (err) {
					processBodyError(err);
				}
			}();
		}
		try {
			const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });
			if (socket) response = makeResponse({
				status,
				statusText,
				headersList,
				socket
			});
			else {
				const iterator$1 = body[Symbol.asyncIterator]();
				fetchParams.controller.next = () => iterator$1.next();
				response = makeResponse({
					status,
					statusText,
					headersList
				});
			}
		} catch (err) {
			if (err.name === "AbortError") {
				fetchParams.controller.connection.destroy();
				return makeAppropriateNetworkError(fetchParams, err);
			}
			return makeNetworkError(err);
		}
		const pullAlgorithm = () => {
			return fetchParams.controller.resume();
		};
		const cancelAlgorithm = (reason) => {
			if (!isCancelled(fetchParams)) fetchParams.controller.abort(reason);
		};
		const stream$4 = new ReadableStream({
			start(controller) {
				fetchParams.controller.controller = controller;
			},
			pull: pullAlgorithm,
			cancel: cancelAlgorithm,
			type: "bytes"
		});
		response.body = {
			stream: stream$4,
			source: null,
			length: null
		};
		if (!fetchParams.controller.resume) fetchParams.controller.on("terminated", onAborted);
		fetchParams.controller.resume = async () => {
			while (true) {
				let bytes;
				let isFailure;
				try {
					const { done, value } = await fetchParams.controller.next();
					if (isAborted$1(fetchParams)) break;
					bytes = done ? void 0 : value;
				} catch (err) {
					if (fetchParams.controller.ended && !timingInfo.encodedBodySize) bytes = void 0;
					else {
						bytes = err;
						isFailure = true;
					}
				}
				if (bytes === void 0) {
					readableStreamClose(fetchParams.controller.controller);
					finalizeResponse(fetchParams, response);
					return;
				}
				timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
				if (isFailure) {
					fetchParams.controller.terminate(bytes);
					return;
				}
				const buffer$1 = new Uint8Array(bytes);
				if (buffer$1.byteLength) fetchParams.controller.controller.enqueue(buffer$1);
				if (isErrored(stream$4)) {
					fetchParams.controller.terminate();
					return;
				}
				if (fetchParams.controller.controller.desiredSize <= 0) return;
			}
		};
		function onAborted(reason) {
			if (isAborted$1(fetchParams)) {
				response.aborted = true;
				if (isReadable(stream$4)) fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);
			} else if (isReadable(stream$4)) fetchParams.controller.controller.error(new TypeError("terminated", { cause: isErrorLike(reason) ? reason : void 0 }));
			fetchParams.controller.connection.destroy();
		}
		return response;
		function dispatch({ body }) {
			const url = requestCurrentURL(request$3);
			/** @type {import('../../..').Agent} */
			const agent = fetchParams.controller.dispatcher;
			return new Promise((resolve$1, reject) => agent.dispatch({
				path: url.pathname + url.search,
				origin: url.origin,
				method: request$3.method,
				body: agent.isMockActive ? request$3.body && (request$3.body.source || request$3.body.stream) : body,
				headers: request$3.headersList.entries,
				maxRedirections: 0,
				upgrade: request$3.mode === "websocket" ? "websocket" : void 0
			}, {
				body: null,
				abort: null,
				onConnect(abort$2) {
					const { connection } = fetchParams.controller;
					timingInfo.finalConnectionTimingInfo = clampAndCoarsenConnectionTimingInfo(void 0, timingInfo.postRedirectStartTime, fetchParams.crossOriginIsolatedCapability);
					if (connection.destroyed) abort$2(new DOMException("The operation was aborted.", "AbortError"));
					else {
						fetchParams.controller.on("terminated", abort$2);
						this.abort = connection.abort = abort$2;
					}
					timingInfo.finalNetworkRequestStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
				},
				onResponseStarted() {
					timingInfo.finalNetworkResponseStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
				},
				onHeaders(status, rawHeaders, resume$2, statusText) {
					if (status < 200) return false;
					/** @type {string[]} */
					let codings = [];
					const headersList = new HeadersList();
					for (let i$1 = 0; i$1 < rawHeaders.length; i$1 += 2) headersList.append(bufferToLowerCasedHeaderName(rawHeaders[i$1]), rawHeaders[i$1 + 1].toString("latin1"), true);
					const contentEncoding = headersList.get("content-encoding", true);
					if (contentEncoding) codings = contentEncoding.toLowerCase().split(",").map((x) => x.trim());
					const location = headersList.get("location", true);
					this.body = new Readable$1({ read: resume$2 });
					const decoders$1 = [];
					const willFollow = location && request$3.redirect === "follow" && redirectStatusSet.has(status);
					if (codings.length !== 0 && request$3.method !== "HEAD" && request$3.method !== "CONNECT" && !nullBodyStatus.includes(status) && !willFollow) for (let i$1 = codings.length - 1; i$1 >= 0; --i$1) {
						const coding = codings[i$1];
						if (coding === "x-gzip" || coding === "gzip") decoders$1.push(zlib.createGunzip({
							flush: zlib.constants.Z_SYNC_FLUSH,
							finishFlush: zlib.constants.Z_SYNC_FLUSH
						}));
						else if (coding === "deflate") decoders$1.push(createInflate({
							flush: zlib.constants.Z_SYNC_FLUSH,
							finishFlush: zlib.constants.Z_SYNC_FLUSH
						}));
						else if (coding === "br") decoders$1.push(zlib.createBrotliDecompress({
							flush: zlib.constants.BROTLI_OPERATION_FLUSH,
							finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH
						}));
						else if (coding === "zstd" && typeof zlib.createZstdDecompress === "function") decoders$1.push(zlib.createZstdDecompress({
							flush: zlib.constants.ZSTD_e_continue,
							finishFlush: zlib.constants.ZSTD_e_end
						}));
						else {
							decoders$1.length = 0;
							break;
						}
					}
					const onError$2 = this.onError.bind(this);
					resolve$1({
						status,
						statusText,
						headersList,
						body: decoders$1.length ? pipeline$1(this.body, ...decoders$1, (err) => {
							if (err) this.onError(err);
						}).on("error", onError$2) : this.body.on("error", onError$2)
					});
					return true;
				},
				onData(chunk) {
					if (fetchParams.controller.dump) return;
					const bytes = chunk;
					timingInfo.encodedBodySize += bytes.byteLength;
					return this.body.push(bytes);
				},
				onComplete() {
					if (this.abort) fetchParams.controller.off("terminated", this.abort);
					fetchParams.controller.ended = true;
					this.body.push(null);
				},
				onError(error$1) {
					if (this.abort) fetchParams.controller.off("terminated", this.abort);
					this.body?.destroy(error$1);
					fetchParams.controller.terminate(error$1);
					reject(error$1);
				},
				onUpgrade(status, rawHeaders, socket) {
					if (status !== 101) return;
					const headersList = new HeadersList();
					for (let i$1 = 0; i$1 < rawHeaders.length; i$1 += 2) headersList.append(bufferToLowerCasedHeaderName(rawHeaders[i$1]), rawHeaders[i$1 + 1].toString("latin1"), true);
					resolve$1({
						status,
						statusText: STATUS_CODES[status],
						headersList,
						socket
					});
					return true;
				}
			}));
		}
	}
	module.exports = {
		fetch: fetch$2,
		Fetch,
		fetching: fetching$3,
		finalizeAndReportTiming
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cache/util.js
var require_util$3 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cache/util.js"(exports, module) {
	const assert$4 = __require("node:assert");
	const { URLSerializer: URLSerializer$1 } = require_data_url();
	const { isValidHeaderName } = require_util$4();
	/**
	* @see https://url.spec.whatwg.org/#concept-url-equals
	* @param {URL} A
	* @param {URL} B
	* @param {boolean | undefined} excludeFragment
	* @returns {boolean}
	*/
	function urlEquals$1(A, B, excludeFragment = false) {
		const serializedA = URLSerializer$1(A, excludeFragment);
		const serializedB = URLSerializer$1(B, excludeFragment);
		return serializedA === serializedB;
	}
	/**
	* @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
	* @param {string} header
	*/
	function getFieldValues$1(header) {
		assert$4(header !== null);
		const values = [];
		for (let value of header.split(",")) {
			value = value.trim();
			if (isValidHeaderName(value)) values.push(value);
		}
		return values;
	}
	module.exports = {
		urlEquals: urlEquals$1,
		getFieldValues: getFieldValues$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cache/cache.js
var require_cache = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cache/cache.js"(exports, module) {
	const assert$3 = __require("node:assert");
	const { kConstruct: kConstruct$4 } = require_symbols();
	const { urlEquals, getFieldValues } = require_util$3();
	const { kEnumerableProperty: kEnumerableProperty$6, isDisturbed } = require_util$5();
	const { webidl: webidl$7 } = require_webidl();
	const { cloneResponse, fromInnerResponse, getResponseState } = require_response();
	const { Request, fromInnerRequest, getRequestState } = require_request();
	const { fetching: fetching$2 } = require_fetch();
	const { urlIsHttpHttpsScheme, readAllBytes } = require_util$4();
	const { createDeferredPromise: createDeferredPromise$1 } = require_promise();
	/**
	* @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation
	* @typedef {Object} CacheBatchOperation
	* @property {'delete' | 'put'} type
	* @property {any} request
	* @property {any} response
	* @property {import('../../types/cache').CacheQueryOptions} options
	*/
	/**
	* @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list
	* @typedef {[any, any][]} requestResponseList
	*/
	var Cache$1 = class Cache$1 {
		/**
		* @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
		* @type {requestResponseList}
		*/
		#relevantRequestResponseList;
		constructor() {
			if (arguments[0] !== kConstruct$4) webidl$7.illegalConstructor();
			webidl$7.util.markAsUncloneable(this);
			this.#relevantRequestResponseList = arguments[1];
		}
		async match(request$3, options = {}) {
			webidl$7.brandCheck(this, Cache$1);
			const prefix = "Cache.match";
			webidl$7.argumentLengthCheck(arguments, 1, prefix);
			request$3 = webidl$7.converters.RequestInfo(request$3);
			options = webidl$7.converters.CacheQueryOptions(options, prefix, "options");
			const p = this.#internalMatchAll(request$3, options, 1);
			if (p.length === 0) return;
			return p[0];
		}
		async matchAll(request$3 = void 0, options = {}) {
			webidl$7.brandCheck(this, Cache$1);
			const prefix = "Cache.matchAll";
			if (request$3 !== void 0) request$3 = webidl$7.converters.RequestInfo(request$3);
			options = webidl$7.converters.CacheQueryOptions(options, prefix, "options");
			return this.#internalMatchAll(request$3, options);
		}
		async add(request$3) {
			webidl$7.brandCheck(this, Cache$1);
			const prefix = "Cache.add";
			webidl$7.argumentLengthCheck(arguments, 1, prefix);
			request$3 = webidl$7.converters.RequestInfo(request$3);
			const requests = [request$3];
			const responseArrayPromise = this.addAll(requests);
			return await responseArrayPromise;
		}
		async addAll(requests) {
			webidl$7.brandCheck(this, Cache$1);
			const prefix = "Cache.addAll";
			webidl$7.argumentLengthCheck(arguments, 1, prefix);
			const responsePromises = [];
			const requestList = [];
			for (let request$3 of requests) {
				if (request$3 === void 0) throw webidl$7.errors.conversionFailed({
					prefix,
					argument: "Argument 1",
					types: ["undefined is not allowed"]
				});
				request$3 = webidl$7.converters.RequestInfo(request$3);
				if (typeof request$3 === "string") continue;
				const r = getRequestState(request$3);
				if (!urlIsHttpHttpsScheme(r.url) || r.method !== "GET") throw webidl$7.errors.exception({
					header: prefix,
					message: "Expected http/s scheme when method is not GET."
				});
			}
			/** @type {ReturnType<typeof fetching>[]} */
			const fetchControllers = [];
			for (const request$3 of requests) {
				const r = getRequestState(new Request(request$3));
				if (!urlIsHttpHttpsScheme(r.url)) throw webidl$7.errors.exception({
					header: prefix,
					message: "Expected http/s scheme."
				});
				r.initiator = "fetch";
				r.destination = "subresource";
				requestList.push(r);
				const responsePromise = createDeferredPromise$1();
				fetchControllers.push(fetching$2({
					request: r,
					processResponse(response) {
						if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) responsePromise.reject(webidl$7.errors.exception({
							header: "Cache.addAll",
							message: "Received an invalid status code or the request failed."
						}));
						else if (response.headersList.contains("vary")) {
							const fieldValues$1 = getFieldValues(response.headersList.get("vary"));
							for (const fieldValue of fieldValues$1) if (fieldValue === "*") {
								responsePromise.reject(webidl$7.errors.exception({
									header: "Cache.addAll",
									message: "invalid vary field value"
								}));
								for (const controller of fetchControllers) controller.abort();
								return;
							}
						}
					},
					processResponseEndOfBody(response) {
						if (response.aborted) {
							responsePromise.reject(new DOMException("aborted", "AbortError"));
							return;
						}
						responsePromise.resolve(response);
					}
				}));
				responsePromises.push(responsePromise.promise);
			}
			const p = Promise.all(responsePromises);
			const responses = await p;
			const operations = [];
			let index = 0;
			for (const response of responses) {
				/** @type {CacheBatchOperation} */
				const operation = {
					type: "put",
					request: requestList[index],
					response
				};
				operations.push(operation);
				index++;
			}
			const cacheJobPromise = createDeferredPromise$1();
			let errorData = null;
			try {
				this.#batchCacheOperations(operations);
			} catch (e) {
				errorData = e;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve(void 0);
				else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		async put(request$3, response) {
			webidl$7.brandCheck(this, Cache$1);
			const prefix = "Cache.put";
			webidl$7.argumentLengthCheck(arguments, 2, prefix);
			request$3 = webidl$7.converters.RequestInfo(request$3);
			response = webidl$7.converters.Response(response, prefix, "response");
			let innerRequest = null;
			if (webidl$7.is.Request(request$3)) innerRequest = getRequestState(request$3);
			else innerRequest = getRequestState(new Request(request$3));
			if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") throw webidl$7.errors.exception({
				header: prefix,
				message: "Expected an http/s scheme when method is not GET"
			});
			const innerResponse = getResponseState(response);
			if (innerResponse.status === 206) throw webidl$7.errors.exception({
				header: prefix,
				message: "Got 206 status"
			});
			if (innerResponse.headersList.contains("vary")) {
				const fieldValues$1 = getFieldValues(innerResponse.headersList.get("vary"));
				for (const fieldValue of fieldValues$1) if (fieldValue === "*") throw webidl$7.errors.exception({
					header: prefix,
					message: "Got * vary field value"
				});
			}
			if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) throw webidl$7.errors.exception({
				header: prefix,
				message: "Response body is locked or disturbed"
			});
			const clonedResponse = cloneResponse(innerResponse);
			const bodyReadPromise = createDeferredPromise$1();
			if (innerResponse.body != null) {
				const stream$4 = innerResponse.body.stream;
				const reader = stream$4.getReader();
				readAllBytes(reader, bodyReadPromise.resolve, bodyReadPromise.reject);
			} else bodyReadPromise.resolve(void 0);
			/** @type {CacheBatchOperation[]} */
			const operations = [];
			/** @type {CacheBatchOperation} */
			const operation = {
				type: "put",
				request: innerRequest,
				response: clonedResponse
			};
			operations.push(operation);
			const bytes = await bodyReadPromise.promise;
			if (clonedResponse.body != null) clonedResponse.body.source = bytes;
			const cacheJobPromise = createDeferredPromise$1();
			let errorData = null;
			try {
				this.#batchCacheOperations(operations);
			} catch (e) {
				errorData = e;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve();
				else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		async delete(request$3, options = {}) {
			webidl$7.brandCheck(this, Cache$1);
			const prefix = "Cache.delete";
			webidl$7.argumentLengthCheck(arguments, 1, prefix);
			request$3 = webidl$7.converters.RequestInfo(request$3);
			options = webidl$7.converters.CacheQueryOptions(options, prefix, "options");
			/**
			* @type {Request}
			*/
			let r = null;
			if (webidl$7.is.Request(request$3)) {
				r = getRequestState(request$3);
				if (r.method !== "GET" && !options.ignoreMethod) return false;
			} else {
				assert$3(typeof request$3 === "string");
				r = getRequestState(new Request(request$3));
			}
			/** @type {CacheBatchOperation[]} */
			const operations = [];
			/** @type {CacheBatchOperation} */
			const operation = {
				type: "delete",
				request: r,
				options
			};
			operations.push(operation);
			const cacheJobPromise = createDeferredPromise$1();
			let errorData = null;
			let requestResponses;
			try {
				requestResponses = this.#batchCacheOperations(operations);
			} catch (e) {
				errorData = e;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve(!!requestResponses?.length);
				else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
		* @param {any} request
		* @param {import('../../types/cache').CacheQueryOptions} options
		* @returns {Promise<readonly Request[]>}
		*/
		async keys(request$3 = void 0, options = {}) {
			webidl$7.brandCheck(this, Cache$1);
			const prefix = "Cache.keys";
			if (request$3 !== void 0) request$3 = webidl$7.converters.RequestInfo(request$3);
			options = webidl$7.converters.CacheQueryOptions(options, prefix, "options");
			let r = null;
			if (request$3 !== void 0) {
				if (webidl$7.is.Request(request$3)) {
					r = getRequestState(request$3);
					if (r.method !== "GET" && !options.ignoreMethod) return [];
				} else if (typeof request$3 === "string") r = getRequestState(new Request(request$3));
			}
			const promise = createDeferredPromise$1();
			const requests = [];
			if (request$3 === void 0) for (const requestResponse of this.#relevantRequestResponseList) requests.push(requestResponse[0]);
			else {
				const requestResponses = this.#queryCache(r, options);
				for (const requestResponse of requestResponses) requests.push(requestResponse[0]);
			}
			queueMicrotask(() => {
				const requestList = [];
				for (const request$4 of requests) {
					const requestObject = fromInnerRequest(request$4, void 0, new AbortController().signal, "immutable");
					requestList.push(requestObject);
				}
				promise.resolve(Object.freeze(requestList));
			});
			return promise.promise;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
		* @param {CacheBatchOperation[]} operations
		* @returns {requestResponseList}
		*/
		#batchCacheOperations(operations) {
			const cache = this.#relevantRequestResponseList;
			const backupCache = [...cache];
			const addedItems = [];
			const resultList = [];
			try {
				for (const operation of operations) {
					if (operation.type !== "delete" && operation.type !== "put") throw webidl$7.errors.exception({
						header: "Cache.#batchCacheOperations",
						message: "operation type does not match \"delete\" or \"put\""
					});
					if (operation.type === "delete" && operation.response != null) throw webidl$7.errors.exception({
						header: "Cache.#batchCacheOperations",
						message: "delete operation should not have an associated response"
					});
					if (this.#queryCache(operation.request, operation.options, addedItems).length) throw new DOMException("???", "InvalidStateError");
					let requestResponses;
					if (operation.type === "delete") {
						requestResponses = this.#queryCache(operation.request, operation.options);
						if (requestResponses.length === 0) return [];
						for (const requestResponse of requestResponses) {
							const idx = cache.indexOf(requestResponse);
							assert$3(idx !== -1);
							cache.splice(idx, 1);
						}
					} else if (operation.type === "put") {
						if (operation.response == null) throw webidl$7.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "put operation should have an associated response"
						});
						const r = operation.request;
						if (!urlIsHttpHttpsScheme(r.url)) throw webidl$7.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "expected http or https scheme"
						});
						if (r.method !== "GET") throw webidl$7.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "not get method"
						});
						if (operation.options != null) throw webidl$7.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "options must not be defined"
						});
						requestResponses = this.#queryCache(operation.request);
						for (const requestResponse of requestResponses) {
							const idx = cache.indexOf(requestResponse);
							assert$3(idx !== -1);
							cache.splice(idx, 1);
						}
						cache.push([operation.request, operation.response]);
						addedItems.push([operation.request, operation.response]);
					}
					resultList.push([operation.request, operation.response]);
				}
				return resultList;
			} catch (e) {
				this.#relevantRequestResponseList.length = 0;
				this.#relevantRequestResponseList = backupCache;
				throw e;
			}
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#query-cache
		* @param {any} requestQuery
		* @param {import('../../types/cache').CacheQueryOptions} options
		* @param {requestResponseList} targetStorage
		* @returns {requestResponseList}
		*/
		#queryCache(requestQuery, options, targetStorage) {
			/** @type {requestResponseList} */
			const resultList = [];
			const storage = targetStorage ?? this.#relevantRequestResponseList;
			for (const requestResponse of storage) {
				const [cachedRequest, cachedResponse] = requestResponse;
				if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) resultList.push(requestResponse);
			}
			return resultList;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
		* @param {any} requestQuery
		* @param {any} request
		* @param {any | null} response
		* @param {import('../../types/cache').CacheQueryOptions | undefined} options
		* @returns {boolean}
		*/
		#requestMatchesCachedItem(requestQuery, request$3, response = null, options) {
			const queryURL = new URL(requestQuery.url);
			const cachedURL = new URL(request$3.url);
			if (options?.ignoreSearch) {
				cachedURL.search = "";
				queryURL.search = "";
			}
			if (!urlEquals(queryURL, cachedURL, true)) return false;
			if (response == null || options?.ignoreVary || !response.headersList.contains("vary")) return true;
			const fieldValues$1 = getFieldValues(response.headersList.get("vary"));
			for (const fieldValue of fieldValues$1) {
				if (fieldValue === "*") return false;
				const requestValue = request$3.headersList.get(fieldValue);
				const queryValue = requestQuery.headersList.get(fieldValue);
				if (requestValue !== queryValue) return false;
			}
			return true;
		}
		#internalMatchAll(request$3, options, maxResponses = Infinity) {
			let r = null;
			if (request$3 !== void 0) {
				if (webidl$7.is.Request(request$3)) {
					r = getRequestState(request$3);
					if (r.method !== "GET" && !options.ignoreMethod) return [];
				} else if (typeof request$3 === "string") r = getRequestState(new Request(request$3));
			}
			const responses = [];
			if (request$3 === void 0) for (const requestResponse of this.#relevantRequestResponseList) responses.push(requestResponse[1]);
			else {
				const requestResponses = this.#queryCache(r, options);
				for (const requestResponse of requestResponses) responses.push(requestResponse[1]);
			}
			const responseList = [];
			for (const response of responses) {
				const responseObject = fromInnerResponse(response, "immutable");
				responseList.push(responseObject.clone());
				if (responseList.length >= maxResponses) break;
			}
			return Object.freeze(responseList);
		}
	};
	Object.defineProperties(Cache$1.prototype, {
		[Symbol.toStringTag]: {
			value: "Cache",
			configurable: true
		},
		match: kEnumerableProperty$6,
		matchAll: kEnumerableProperty$6,
		add: kEnumerableProperty$6,
		addAll: kEnumerableProperty$6,
		put: kEnumerableProperty$6,
		delete: kEnumerableProperty$6,
		keys: kEnumerableProperty$6
	});
	const cacheQueryOptionConverters = [
		{
			key: "ignoreSearch",
			converter: webidl$7.converters.boolean,
			defaultValue: () => false
		},
		{
			key: "ignoreMethod",
			converter: webidl$7.converters.boolean,
			defaultValue: () => false
		},
		{
			key: "ignoreVary",
			converter: webidl$7.converters.boolean,
			defaultValue: () => false
		}
	];
	webidl$7.converters.CacheQueryOptions = webidl$7.dictionaryConverter(cacheQueryOptionConverters);
	webidl$7.converters.MultiCacheQueryOptions = webidl$7.dictionaryConverter([...cacheQueryOptionConverters, {
		key: "cacheName",
		converter: webidl$7.converters.DOMString
	}]);
	webidl$7.converters.Response = webidl$7.interfaceConverter(webidl$7.is.Response, "Response");
	webidl$7.converters["sequence<RequestInfo>"] = webidl$7.sequenceConverter(webidl$7.converters.RequestInfo);
	module.exports = { Cache: Cache$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cache/cachestorage.js
var require_cachestorage = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cache/cachestorage.js"(exports, module) {
	const { Cache } = require_cache();
	const { webidl: webidl$6 } = require_webidl();
	const { kEnumerableProperty: kEnumerableProperty$5 } = require_util$5();
	const { kConstruct: kConstruct$3 } = require_symbols();
	var CacheStorage$1 = class CacheStorage$1 {
		/**
		* @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
		* @type {Map<string, import('./cache').requestResponseList}
		*/
		#caches = /* @__PURE__ */ new Map();
		constructor() {
			if (arguments[0] !== kConstruct$3) webidl$6.illegalConstructor();
			webidl$6.util.markAsUncloneable(this);
		}
		async match(request$3, options = {}) {
			webidl$6.brandCheck(this, CacheStorage$1);
			webidl$6.argumentLengthCheck(arguments, 1, "CacheStorage.match");
			request$3 = webidl$6.converters.RequestInfo(request$3);
			options = webidl$6.converters.MultiCacheQueryOptions(options);
			if (options.cacheName != null) {
				if (this.#caches.has(options.cacheName)) {
					const cacheList = this.#caches.get(options.cacheName);
					const cache = new Cache(kConstruct$3, cacheList);
					return await cache.match(request$3, options);
				}
			} else for (const cacheList of this.#caches.values()) {
				const cache = new Cache(kConstruct$3, cacheList);
				const response = await cache.match(request$3, options);
				if (response !== void 0) return response;
			}
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-has
		* @param {string} cacheName
		* @returns {Promise<boolean>}
		*/
		async has(cacheName) {
			webidl$6.brandCheck(this, CacheStorage$1);
			const prefix = "CacheStorage.has";
			webidl$6.argumentLengthCheck(arguments, 1, prefix);
			cacheName = webidl$6.converters.DOMString(cacheName, prefix, "cacheName");
			return this.#caches.has(cacheName);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
		* @param {string} cacheName
		* @returns {Promise<Cache>}
		*/
		async open(cacheName) {
			webidl$6.brandCheck(this, CacheStorage$1);
			const prefix = "CacheStorage.open";
			webidl$6.argumentLengthCheck(arguments, 1, prefix);
			cacheName = webidl$6.converters.DOMString(cacheName, prefix, "cacheName");
			if (this.#caches.has(cacheName)) {
				const cache$1 = this.#caches.get(cacheName);
				return new Cache(kConstruct$3, cache$1);
			}
			const cache = [];
			this.#caches.set(cacheName, cache);
			return new Cache(kConstruct$3, cache);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
		* @param {string} cacheName
		* @returns {Promise<boolean>}
		*/
		async delete(cacheName) {
			webidl$6.brandCheck(this, CacheStorage$1);
			const prefix = "CacheStorage.delete";
			webidl$6.argumentLengthCheck(arguments, 1, prefix);
			cacheName = webidl$6.converters.DOMString(cacheName, prefix, "cacheName");
			return this.#caches.delete(cacheName);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
		* @returns {Promise<string[]>}
		*/
		async keys() {
			webidl$6.brandCheck(this, CacheStorage$1);
			const keys$1 = this.#caches.keys();
			return [...keys$1];
		}
	};
	Object.defineProperties(CacheStorage$1.prototype, {
		[Symbol.toStringTag]: {
			value: "CacheStorage",
			configurable: true
		},
		match: kEnumerableProperty$5,
		has: kEnumerableProperty$5,
		open: kEnumerableProperty$5,
		delete: kEnumerableProperty$5,
		keys: kEnumerableProperty$5
	});
	module.exports = { CacheStorage: CacheStorage$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cookies/constants.js
var require_constants$1 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cookies/constants.js"(exports, module) {
	const maxAttributeValueSize$1 = 1024;
	const maxNameValuePairSize$1 = 4096;
	module.exports = {
		maxAttributeValueSize: maxAttributeValueSize$1,
		maxNameValuePairSize: maxNameValuePairSize$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cookies/util.js
var require_util$2 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cookies/util.js"(exports, module) {
	/**
	* @param {string} value
	* @returns {boolean}
	*/
	function isCTLExcludingHtab$1(value) {
		for (let i$1 = 0; i$1 < value.length; ++i$1) {
			const code = value.charCodeAt(i$1);
			if (code >= 0 && code <= 8 || code >= 10 && code <= 31 || code === 127) return true;
		}
		return false;
	}
	/**
	CHAR           = <any US-ASCII character (octets 0 - 127)>
	token          = 1*<any CHAR except CTLs or separators>
	separators     = "(" | ")" | "<" | ">" | "@"
	| "," | ";" | ":" | "\" | <">
	| "/" | "[" | "]" | "?" | "="
	| "{" | "}" | SP | HT
	* @param {string} name
	*/
	function validateCookieName(name$2) {
		for (let i$1 = 0; i$1 < name$2.length; ++i$1) {
			const code = name$2.charCodeAt(i$1);
			if (code < 33 || code > 126 || code === 34 || code === 40 || code === 41 || code === 60 || code === 62 || code === 64 || code === 44 || code === 59 || code === 58 || code === 92 || code === 47 || code === 91 || code === 93 || code === 63 || code === 61 || code === 123 || code === 125) throw new Error("Invalid cookie name");
		}
	}
	/**
	cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
	cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
	; US-ASCII characters excluding CTLs,
	; whitespace DQUOTE, comma, semicolon,
	; and backslash
	* @param {string} value
	*/
	function validateCookieValue(value) {
		let len = value.length;
		let i$1 = 0;
		if (value[0] === "\"") {
			if (len === 1 || value[len - 1] !== "\"") throw new Error("Invalid cookie value");
			--len;
			++i$1;
		}
		while (i$1 < len) {
			const code = value.charCodeAt(i$1++);
			if (code < 33 || code > 126 || code === 34 || code === 44 || code === 59 || code === 92) throw new Error("Invalid cookie value");
		}
	}
	/**
	* path-value        = <any CHAR except CTLs or ";">
	* @param {string} path
	*/
	function validateCookiePath(path$9) {
		for (let i$1 = 0; i$1 < path$9.length; ++i$1) {
			const code = path$9.charCodeAt(i$1);
			if (code < 32 || code === 127 || code === 59) throw new Error("Invalid cookie path");
		}
	}
	/**
	* I have no idea why these values aren't allowed to be honest,
	* but Deno tests these. - Khafra
	* @param {string} domain
	*/
	function validateCookieDomain(domain) {
		if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) throw new Error("Invalid cookie domain");
	}
	const IMFDays = [
		"Sun",
		"Mon",
		"Tue",
		"Wed",
		"Thu",
		"Fri",
		"Sat"
	];
	const IMFMonths = [
		"Jan",
		"Feb",
		"Mar",
		"Apr",
		"May",
		"Jun",
		"Jul",
		"Aug",
		"Sep",
		"Oct",
		"Nov",
		"Dec"
	];
	const IMFPaddedNumbers = Array(61).fill(0).map((_, i$1) => i$1.toString().padStart(2, "0"));
	/**
	* @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
	* @param {number|Date} date
	IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
	; fixed length/zone/capitalization subset of the format
	; see Section 3.3 of [RFC5322]
	
	day-name     = %x4D.6F.6E ; "Mon", case-sensitive
	/ %x54.75.65 ; "Tue", case-sensitive
	/ %x57.65.64 ; "Wed", case-sensitive
	/ %x54.68.75 ; "Thu", case-sensitive
	/ %x46.72.69 ; "Fri", case-sensitive
	/ %x53.61.74 ; "Sat", case-sensitive
	/ %x53.75.6E ; "Sun", case-sensitive
	date1        = day SP month SP year
	; e.g., 02 Jun 1982
	
	day          = 2DIGIT
	month        = %x4A.61.6E ; "Jan", case-sensitive
	/ %x46.65.62 ; "Feb", case-sensitive
	/ %x4D.61.72 ; "Mar", case-sensitive
	/ %x41.70.72 ; "Apr", case-sensitive
	/ %x4D.61.79 ; "May", case-sensitive
	/ %x4A.75.6E ; "Jun", case-sensitive
	/ %x4A.75.6C ; "Jul", case-sensitive
	/ %x41.75.67 ; "Aug", case-sensitive
	/ %x53.65.70 ; "Sep", case-sensitive
	/ %x4F.63.74 ; "Oct", case-sensitive
	/ %x4E.6F.76 ; "Nov", case-sensitive
	/ %x44.65.63 ; "Dec", case-sensitive
	year         = 4DIGIT
	
	GMT          = %x47.4D.54 ; "GMT", case-sensitive
	
	time-of-day  = hour ":" minute ":" second
	; 00:00:00 - 23:59:60 (leap second)
	
	hour         = 2DIGIT
	minute       = 2DIGIT
	second       = 2DIGIT
	*/
	function toIMFDate(date) {
		if (typeof date === "number") date = new Date(date);
		return `${IMFDays[date.getUTCDay()]}, ${IMFPaddedNumbers[date.getUTCDate()]} ${IMFMonths[date.getUTCMonth()]} ${date.getUTCFullYear()} ${IMFPaddedNumbers[date.getUTCHours()]}:${IMFPaddedNumbers[date.getUTCMinutes()]}:${IMFPaddedNumbers[date.getUTCSeconds()]} GMT`;
	}
	/**
	max-age-av        = "Max-Age=" non-zero-digit *DIGIT
	; In practice, both expires-av and max-age-av
	; are limited to dates representable by the
	; user agent.
	* @param {number} maxAge
	*/
	function validateCookieMaxAge(maxAge) {
		if (maxAge < 0) throw new Error("Invalid cookie max-age");
	}
	/**
	* @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
	* @param {import('./index').Cookie} cookie
	*/
	function stringify$1(cookie) {
		if (cookie.name.length === 0) return null;
		validateCookieName(cookie.name);
		validateCookieValue(cookie.value);
		const out = [`${cookie.name}=${cookie.value}`];
		if (cookie.name.startsWith("__Secure-")) cookie.secure = true;
		if (cookie.name.startsWith("__Host-")) {
			cookie.secure = true;
			cookie.domain = null;
			cookie.path = "/";
		}
		if (cookie.secure) out.push("Secure");
		if (cookie.httpOnly) out.push("HttpOnly");
		if (typeof cookie.maxAge === "number") {
			validateCookieMaxAge(cookie.maxAge);
			out.push(`Max-Age=${cookie.maxAge}`);
		}
		if (cookie.domain) {
			validateCookieDomain(cookie.domain);
			out.push(`Domain=${cookie.domain}`);
		}
		if (cookie.path) {
			validateCookiePath(cookie.path);
			out.push(`Path=${cookie.path}`);
		}
		if (cookie.expires && cookie.expires.toString() !== "Invalid Date") out.push(`Expires=${toIMFDate(cookie.expires)}`);
		if (cookie.sameSite) out.push(`SameSite=${cookie.sameSite}`);
		for (const part of cookie.unparsed) {
			if (!part.includes("=")) throw new Error("Invalid unparsed");
			const [key, ...value] = part.split("=");
			out.push(`${key.trim()}=${value.join("=")}`);
		}
		return out.join("; ");
	}
	module.exports = {
		isCTLExcludingHtab: isCTLExcludingHtab$1,
		validateCookieName,
		validateCookiePath,
		validateCookieValue,
		toIMFDate,
		stringify: stringify$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cookies/parse.js
var require_parse$1 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cookies/parse.js"(exports, module) {
	const { maxNameValuePairSize, maxAttributeValueSize } = require_constants$1();
	const { isCTLExcludingHtab } = require_util$2();
	const { collectASequenceOfCodePointsFast: collectASequenceOfCodePointsFast$1 } = require_data_url();
	const assert$2 = __require("node:assert");
	const { unescape } = __require("node:querystring");
	/**
	* @description Parses the field-value attributes of a set-cookie header string.
	* @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
	* @param {string} header
	* @returns {import('./index').Cookie|null} if the header is invalid, null will be returned
	*/
	function parseSetCookie$1(header) {
		if (isCTLExcludingHtab(header)) return null;
		let nameValuePair = "";
		let unparsedAttributes = "";
		let name$2 = "";
		let value = "";
		if (header.includes(";")) {
			const position = { position: 0 };
			nameValuePair = collectASequenceOfCodePointsFast$1(";", header, position);
			unparsedAttributes = header.slice(position.position);
		} else nameValuePair = header;
		if (!nameValuePair.includes("=")) value = nameValuePair;
		else {
			const position = { position: 0 };
			name$2 = collectASequenceOfCodePointsFast$1("=", nameValuePair, position);
			value = nameValuePair.slice(position.position + 1);
		}
		name$2 = name$2.trim();
		value = value.trim();
		if (name$2.length + value.length > maxNameValuePairSize) return null;
		return {
			name: name$2,
			value: unescape(value),
			...parseUnparsedAttributes(unparsedAttributes)
		};
	}
	/**
	* Parses the remaining attributes of a set-cookie header
	* @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
	* @param {string} unparsedAttributes
	* @param {Object.<string, unknown>} [cookieAttributeList={}]
	*/
	function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
		if (unparsedAttributes.length === 0) return cookieAttributeList;
		assert$2(unparsedAttributes[0] === ";");
		unparsedAttributes = unparsedAttributes.slice(1);
		let cookieAv = "";
		if (unparsedAttributes.includes(";")) {
			cookieAv = collectASequenceOfCodePointsFast$1(";", unparsedAttributes, { position: 0 });
			unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
		} else {
			cookieAv = unparsedAttributes;
			unparsedAttributes = "";
		}
		let attributeName = "";
		let attributeValue = "";
		if (cookieAv.includes("=")) {
			const position = { position: 0 };
			attributeName = collectASequenceOfCodePointsFast$1("=", cookieAv, position);
			attributeValue = cookieAv.slice(position.position + 1);
		} else attributeName = cookieAv;
		attributeName = attributeName.trim();
		attributeValue = attributeValue.trim();
		if (attributeValue.length > maxAttributeValueSize) return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
		const attributeNameLowercase = attributeName.toLowerCase();
		if (attributeNameLowercase === "expires") {
			const expiryTime = new Date(attributeValue);
			cookieAttributeList.expires = expiryTime;
		} else if (attributeNameLowercase === "max-age") {
			const charCode = attributeValue.charCodeAt(0);
			if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
			if (!/^\d+$/.test(attributeValue)) return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
			const deltaSeconds = Number(attributeValue);
			cookieAttributeList.maxAge = deltaSeconds;
		} else if (attributeNameLowercase === "domain") {
			let cookieDomain = attributeValue;
			if (cookieDomain[0] === ".") cookieDomain = cookieDomain.slice(1);
			cookieDomain = cookieDomain.toLowerCase();
			cookieAttributeList.domain = cookieDomain;
		} else if (attributeNameLowercase === "path") {
			let cookiePath = "";
			if (attributeValue.length === 0 || attributeValue[0] !== "/") cookiePath = "/";
			else cookiePath = attributeValue;
			cookieAttributeList.path = cookiePath;
		} else if (attributeNameLowercase === "secure") cookieAttributeList.secure = true;
		else if (attributeNameLowercase === "httponly") cookieAttributeList.httpOnly = true;
		else if (attributeNameLowercase === "samesite") {
			let enforcement = "Default";
			const attributeValueLowercase = attributeValue.toLowerCase();
			if (attributeValueLowercase.includes("none")) enforcement = "None";
			if (attributeValueLowercase.includes("strict")) enforcement = "Strict";
			if (attributeValueLowercase.includes("lax")) enforcement = "Lax";
			cookieAttributeList.sameSite = enforcement;
		} else {
			cookieAttributeList.unparsed ??= [];
			cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
		}
		return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
	}
	module.exports = {
		parseSetCookie: parseSetCookie$1,
		parseUnparsedAttributes
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cookies/index.js
var require_cookies = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/cookies/index.js"(exports, module) {
	const { parseSetCookie } = require_parse$1();
	const { stringify } = require_util$2();
	const { webidl: webidl$5 } = require_webidl();
	const { Headers: Headers$2 } = require_headers();
	const brandChecks = webidl$5.brandCheckMultiple([Headers$2, globalThis.Headers].filter(Boolean));
	/**
	* @typedef {Object} Cookie
	* @property {string} name
	* @property {string} value
	* @property {Date|number} [expires]
	* @property {number} [maxAge]
	* @property {string} [domain]
	* @property {string} [path]
	* @property {boolean} [secure]
	* @property {boolean} [httpOnly]
	* @property {'Strict'|'Lax'|'None'} [sameSite]
	* @property {string[]} [unparsed]
	*/
	/**
	* @param {Headers} headers
	* @returns {Record<string, string>}
	*/
	function getCookies$1(headers) {
		webidl$5.argumentLengthCheck(arguments, 1, "getCookies");
		brandChecks(headers);
		const cookie = headers.get("cookie");
		/** @type {Record<string, string>} */
		const out = {};
		if (!cookie) return out;
		for (const piece of cookie.split(";")) {
			const [name$2, ...value] = piece.split("=");
			out[name$2.trim()] = value.join("=");
		}
		return out;
	}
	/**
	* @param {Headers} headers
	* @param {string} name
	* @param {{ path?: string, domain?: string }|undefined} attributes
	* @returns {void}
	*/
	function deleteCookie$1(headers, name$2, attributes) {
		brandChecks(headers);
		const prefix = "deleteCookie";
		webidl$5.argumentLengthCheck(arguments, 2, prefix);
		name$2 = webidl$5.converters.DOMString(name$2, prefix, "name");
		attributes = webidl$5.converters.DeleteCookieAttributes(attributes);
		setCookie$1(headers, {
			name: name$2,
			value: "",
			expires: /* @__PURE__ */ new Date(0),
			...attributes
		});
	}
	/**
	* @param {Headers} headers
	* @returns {Cookie[]}
	*/
	function getSetCookies$1(headers) {
		webidl$5.argumentLengthCheck(arguments, 1, "getSetCookies");
		brandChecks(headers);
		const cookies = headers.getSetCookie();
		if (!cookies) return [];
		return cookies.map((pair) => parseSetCookie(pair));
	}
	/**
	* Parses a cookie string
	* @param {string} cookie
	*/
	function parseCookie$1(cookie) {
		cookie = webidl$5.converters.DOMString(cookie);
		return parseSetCookie(cookie);
	}
	/**
	* @param {Headers} headers
	* @param {Cookie} cookie
	* @returns {void}
	*/
	function setCookie$1(headers, cookie) {
		webidl$5.argumentLengthCheck(arguments, 2, "setCookie");
		brandChecks(headers);
		cookie = webidl$5.converters.Cookie(cookie);
		const str = stringify(cookie);
		if (str) headers.append("set-cookie", str, true);
	}
	webidl$5.converters.DeleteCookieAttributes = webidl$5.dictionaryConverter([{
		converter: webidl$5.nullableConverter(webidl$5.converters.DOMString),
		key: "path",
		defaultValue: () => null
	}, {
		converter: webidl$5.nullableConverter(webidl$5.converters.DOMString),
		key: "domain",
		defaultValue: () => null
	}]);
	webidl$5.converters.Cookie = webidl$5.dictionaryConverter([
		{
			converter: webidl$5.converters.DOMString,
			key: "name"
		},
		{
			converter: webidl$5.converters.DOMString,
			key: "value"
		},
		{
			converter: webidl$5.nullableConverter((value) => {
				if (typeof value === "number") return webidl$5.converters["unsigned long long"](value);
				return new Date(value);
			}),
			key: "expires",
			defaultValue: () => null
		},
		{
			converter: webidl$5.nullableConverter(webidl$5.converters["long long"]),
			key: "maxAge",
			defaultValue: () => null
		},
		{
			converter: webidl$5.nullableConverter(webidl$5.converters.DOMString),
			key: "domain",
			defaultValue: () => null
		},
		{
			converter: webidl$5.nullableConverter(webidl$5.converters.DOMString),
			key: "path",
			defaultValue: () => null
		},
		{
			converter: webidl$5.nullableConverter(webidl$5.converters.boolean),
			key: "secure",
			defaultValue: () => null
		},
		{
			converter: webidl$5.nullableConverter(webidl$5.converters.boolean),
			key: "httpOnly",
			defaultValue: () => null
		},
		{
			converter: webidl$5.converters.USVString,
			key: "sameSite",
			allowedValues: [
				"Strict",
				"Lax",
				"None"
			]
		},
		{
			converter: webidl$5.sequenceConverter(webidl$5.converters.DOMString),
			key: "unparsed",
			defaultValue: () => new Array(0)
		}
	]);
	module.exports = {
		getCookies: getCookies$1,
		deleteCookie: deleteCookie$1,
		getSetCookies: getSetCookies$1,
		setCookie: setCookie$1,
		parseCookie: parseCookie$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/events.js
var require_events = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/events.js"(exports, module) {
	const { webidl: webidl$4 } = require_webidl();
	const { kEnumerableProperty: kEnumerableProperty$4 } = require_util$5();
	const { kConstruct: kConstruct$2 } = require_symbols();
	/**
	* @see https://html.spec.whatwg.org/multipage/comms.html#messageevent
	*/
	var MessageEvent$1 = class MessageEvent$1 extends Event {
		#eventInit;
		constructor(type, eventInitDict = {}) {
			if (type === kConstruct$2) {
				super(arguments[1], arguments[2]);
				webidl$4.util.markAsUncloneable(this);
				return;
			}
			const prefix = "MessageEvent constructor";
			webidl$4.argumentLengthCheck(arguments, 1, prefix);
			type = webidl$4.converters.DOMString(type, prefix, "type");
			eventInitDict = webidl$4.converters.MessageEventInit(eventInitDict, prefix, "eventInitDict");
			super(type, eventInitDict);
			this.#eventInit = eventInitDict;
			webidl$4.util.markAsUncloneable(this);
		}
		get data() {
			webidl$4.brandCheck(this, MessageEvent$1);
			return this.#eventInit.data;
		}
		get origin() {
			webidl$4.brandCheck(this, MessageEvent$1);
			return this.#eventInit.origin;
		}
		get lastEventId() {
			webidl$4.brandCheck(this, MessageEvent$1);
			return this.#eventInit.lastEventId;
		}
		get source() {
			webidl$4.brandCheck(this, MessageEvent$1);
			return this.#eventInit.source;
		}
		get ports() {
			webidl$4.brandCheck(this, MessageEvent$1);
			if (!Object.isFrozen(this.#eventInit.ports)) Object.freeze(this.#eventInit.ports);
			return this.#eventInit.ports;
		}
		initMessageEvent(type, bubbles = false, cancelable = false, data$1 = null, origin = "", lastEventId = "", source = null, ports = []) {
			webidl$4.brandCheck(this, MessageEvent$1);
			webidl$4.argumentLengthCheck(arguments, 1, "MessageEvent.initMessageEvent");
			return new MessageEvent$1(type, {
				bubbles,
				cancelable,
				data: data$1,
				origin,
				lastEventId,
				source,
				ports
			});
		}
		static createFastMessageEvent(type, init) {
			const messageEvent = new MessageEvent$1(kConstruct$2, type, init);
			messageEvent.#eventInit = init;
			messageEvent.#eventInit.data ??= null;
			messageEvent.#eventInit.origin ??= "";
			messageEvent.#eventInit.lastEventId ??= "";
			messageEvent.#eventInit.source ??= null;
			messageEvent.#eventInit.ports ??= [];
			return messageEvent;
		}
	};
	const { createFastMessageEvent: createFastMessageEvent$2 } = MessageEvent$1;
	delete MessageEvent$1.createFastMessageEvent;
	/**
	* @see https://websockets.spec.whatwg.org/#the-closeevent-interface
	*/
	var CloseEvent$2 = class CloseEvent$2 extends Event {
		#eventInit;
		constructor(type, eventInitDict = {}) {
			const prefix = "CloseEvent constructor";
			webidl$4.argumentLengthCheck(arguments, 1, prefix);
			type = webidl$4.converters.DOMString(type, prefix, "type");
			eventInitDict = webidl$4.converters.CloseEventInit(eventInitDict);
			super(type, eventInitDict);
			this.#eventInit = eventInitDict;
			webidl$4.util.markAsUncloneable(this);
		}
		get wasClean() {
			webidl$4.brandCheck(this, CloseEvent$2);
			return this.#eventInit.wasClean;
		}
		get code() {
			webidl$4.brandCheck(this, CloseEvent$2);
			return this.#eventInit.code;
		}
		get reason() {
			webidl$4.brandCheck(this, CloseEvent$2);
			return this.#eventInit.reason;
		}
	};
	var ErrorEvent$2 = class ErrorEvent$2 extends Event {
		#eventInit;
		constructor(type, eventInitDict) {
			const prefix = "ErrorEvent constructor";
			webidl$4.argumentLengthCheck(arguments, 1, prefix);
			super(type, eventInitDict);
			webidl$4.util.markAsUncloneable(this);
			type = webidl$4.converters.DOMString(type, prefix, "type");
			eventInitDict = webidl$4.converters.ErrorEventInit(eventInitDict ?? {});
			this.#eventInit = eventInitDict;
		}
		get message() {
			webidl$4.brandCheck(this, ErrorEvent$2);
			return this.#eventInit.message;
		}
		get filename() {
			webidl$4.brandCheck(this, ErrorEvent$2);
			return this.#eventInit.filename;
		}
		get lineno() {
			webidl$4.brandCheck(this, ErrorEvent$2);
			return this.#eventInit.lineno;
		}
		get colno() {
			webidl$4.brandCheck(this, ErrorEvent$2);
			return this.#eventInit.colno;
		}
		get error() {
			webidl$4.brandCheck(this, ErrorEvent$2);
			return this.#eventInit.error;
		}
	};
	Object.defineProperties(MessageEvent$1.prototype, {
		[Symbol.toStringTag]: {
			value: "MessageEvent",
			configurable: true
		},
		data: kEnumerableProperty$4,
		origin: kEnumerableProperty$4,
		lastEventId: kEnumerableProperty$4,
		source: kEnumerableProperty$4,
		ports: kEnumerableProperty$4,
		initMessageEvent: kEnumerableProperty$4
	});
	Object.defineProperties(CloseEvent$2.prototype, {
		[Symbol.toStringTag]: {
			value: "CloseEvent",
			configurable: true
		},
		reason: kEnumerableProperty$4,
		code: kEnumerableProperty$4,
		wasClean: kEnumerableProperty$4
	});
	Object.defineProperties(ErrorEvent$2.prototype, {
		[Symbol.toStringTag]: {
			value: "ErrorEvent",
			configurable: true
		},
		message: kEnumerableProperty$4,
		filename: kEnumerableProperty$4,
		lineno: kEnumerableProperty$4,
		colno: kEnumerableProperty$4,
		error: kEnumerableProperty$4
	});
	webidl$4.converters.MessagePort = webidl$4.interfaceConverter(webidl$4.is.MessagePort, "MessagePort");
	webidl$4.converters["sequence<MessagePort>"] = webidl$4.sequenceConverter(webidl$4.converters.MessagePort);
	const eventInit = [
		{
			key: "bubbles",
			converter: webidl$4.converters.boolean,
			defaultValue: () => false
		},
		{
			key: "cancelable",
			converter: webidl$4.converters.boolean,
			defaultValue: () => false
		},
		{
			key: "composed",
			converter: webidl$4.converters.boolean,
			defaultValue: () => false
		}
	];
	webidl$4.converters.MessageEventInit = webidl$4.dictionaryConverter([
		...eventInit,
		{
			key: "data",
			converter: webidl$4.converters.any,
			defaultValue: () => null
		},
		{
			key: "origin",
			converter: webidl$4.converters.USVString,
			defaultValue: () => ""
		},
		{
			key: "lastEventId",
			converter: webidl$4.converters.DOMString,
			defaultValue: () => ""
		},
		{
			key: "source",
			converter: webidl$4.nullableConverter(webidl$4.converters.MessagePort),
			defaultValue: () => null
		},
		{
			key: "ports",
			converter: webidl$4.converters["sequence<MessagePort>"],
			defaultValue: () => new Array(0)
		}
	]);
	webidl$4.converters.CloseEventInit = webidl$4.dictionaryConverter([
		...eventInit,
		{
			key: "wasClean",
			converter: webidl$4.converters.boolean,
			defaultValue: () => false
		},
		{
			key: "code",
			converter: webidl$4.converters["unsigned short"],
			defaultValue: () => 0
		},
		{
			key: "reason",
			converter: webidl$4.converters.USVString,
			defaultValue: () => ""
		}
	]);
	webidl$4.converters.ErrorEventInit = webidl$4.dictionaryConverter([
		...eventInit,
		{
			key: "message",
			converter: webidl$4.converters.DOMString,
			defaultValue: () => ""
		},
		{
			key: "filename",
			converter: webidl$4.converters.USVString,
			defaultValue: () => ""
		},
		{
			key: "lineno",
			converter: webidl$4.converters["unsigned long"],
			defaultValue: () => 0
		},
		{
			key: "colno",
			converter: webidl$4.converters["unsigned long"],
			defaultValue: () => 0
		},
		{
			key: "error",
			converter: webidl$4.converters.any
		}
	]);
	module.exports = {
		MessageEvent: MessageEvent$1,
		CloseEvent: CloseEvent$2,
		ErrorEvent: ErrorEvent$2,
		createFastMessageEvent: createFastMessageEvent$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/constants.js
var require_constants = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/constants.js"(exports, module) {
	/**
	* This is a Globally Unique Identifier unique used to validate that the
	* endpoint accepts websocket connections.
	* @see https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3
	* @type {'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'}
	*/
	const uid$3 = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
	/**
	* @type {PropertyDescriptor}
	*/
	const staticPropertyDescriptors$1 = {
		enumerable: true,
		writable: false,
		configurable: false
	};
	/**
	* The states of the WebSocket connection.
	*
	* @readonly
	* @enum
	* @property {0} CONNECTING
	* @property {1} OPEN
	* @property {2} CLOSING
	* @property {3} CLOSED
	*/
	const states$5 = {
		CONNECTING: 0,
		OPEN: 1,
		CLOSING: 2,
		CLOSED: 3
	};
	/**
	* @readonly
	* @enum
	* @property {0} NOT_SENT
	* @property {1} PROCESSING
	* @property {2} SENT
	*/
	const sentCloseFrameState$4 = {
		SENT: 1,
		RECEIVED: 2
	};
	/**
	* The WebSocket opcodes.
	*
	* @readonly
	* @enum
	* @property {0x0} CONTINUATION
	* @property {0x1} TEXT
	* @property {0x2} BINARY
	* @property {0x8} CLOSE
	* @property {0x9} PING
	* @property {0xA} PONG
	* @see https://datatracker.ietf.org/doc/html/rfc6455#section-5.2
	*/
	const opcodes$7 = {
		CONTINUATION: 0,
		TEXT: 1,
		BINARY: 2,
		CLOSE: 8,
		PING: 9,
		PONG: 10
	};
	/**
	* The maximum value for an unsigned 16-bit integer.
	*
	* @type {65535} 2 ** 16 - 1
	*/
	const maxUnsigned16Bit$1 = 65535;
	/**
	* The states of the parser.
	*
	* @readonly
	* @enum
	* @property {0} INFO
	* @property {2} PAYLOADLENGTH_16
	* @property {3} PAYLOADLENGTH_64
	* @property {4} READ_DATA
	*/
	const parserStates$1 = {
		INFO: 0,
		PAYLOADLENGTH_16: 2,
		PAYLOADLENGTH_64: 3,
		READ_DATA: 4
	};
	/**
	* An empty buffer.
	*
	* @type {Buffer}
	*/
	const emptyBuffer$2 = Buffer.allocUnsafe(0);
	/**
	* @readonly
	* @property {1} text
	* @property {2} typedArray
	* @property {3} arrayBuffer
	* @property {4} blob
	*/
	const sendHints$2 = {
		text: 1,
		typedArray: 2,
		arrayBuffer: 3,
		blob: 4
	};
	module.exports = {
		uid: uid$3,
		sentCloseFrameState: sentCloseFrameState$4,
		staticPropertyDescriptors: staticPropertyDescriptors$1,
		states: states$5,
		opcodes: opcodes$7,
		maxUnsigned16Bit: maxUnsigned16Bit$1,
		parserStates: parserStates$1,
		emptyBuffer: emptyBuffer$2,
		sendHints: sendHints$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/util.js
var require_util$1 = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/util.js"(exports, module) {
	const { states: states$4, opcodes: opcodes$6 } = require_constants();
	const { isUtf8 } = __require("node:buffer");
	const { collectASequenceOfCodePointsFast, removeHTTPWhitespace } = require_data_url();
	/**
	* @param {number} readyState
	* @returns {boolean}
	*/
	function isConnecting$1(readyState) {
		return readyState === states$4.CONNECTING;
	}
	/**
	* @param {number} readyState
	* @returns {boolean}
	*/
	function isEstablished$3(readyState) {
		return readyState === states$4.OPEN;
	}
	/**
	* @param {number} readyState
	* @returns {boolean}
	*/
	function isClosing$2(readyState) {
		return readyState === states$4.CLOSING;
	}
	/**
	* @param {number} readyState
	* @returns {boolean}
	*/
	function isClosed$2(readyState) {
		return readyState === states$4.CLOSED;
	}
	/**
	* @see https://dom.spec.whatwg.org/#concept-event-fire
	* @param {string} e
	* @param {EventTarget} target
	* @param {(...args: ConstructorParameters<typeof Event>) => Event} eventFactory
	* @param {EventInit | undefined} eventInitDict
	* @returns {void}
	*/
	function fireEvent$1(e, target, eventFactory = (type, init) => new Event(type, init), eventInitDict = {}) {
		const event = eventFactory(e, eventInitDict);
		target.dispatchEvent(event);
	}
	/**
	* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
	* @param {import('./websocket').Handler} handler
	* @param {number} type Opcode
	* @param {Buffer} data application data
	* @returns {void}
	*/
	function websocketMessageReceived$1(handler$1, type, data$1) {
		handler$1.onMessage(type, data$1);
	}
	/**
	* @param {Buffer} buffer
	* @returns {ArrayBuffer}
	*/
	function toArrayBuffer$1(buffer$1) {
		if (buffer$1.byteLength === buffer$1.buffer.byteLength) return buffer$1.buffer;
		return new Uint8Array(buffer$1).buffer;
	}
	/**
	* @see https://datatracker.ietf.org/doc/html/rfc6455
	* @see https://datatracker.ietf.org/doc/html/rfc2616
	* @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
	* @param {string} protocol
	* @returns {boolean}
	*/
	function isValidSubprotocol$2(protocol) {
		if (protocol.length === 0) return false;
		for (let i$1 = 0; i$1 < protocol.length; ++i$1) {
			const code = protocol.charCodeAt(i$1);
			if (code < 33 || code > 126 || code === 34 || code === 40 || code === 41 || code === 44 || code === 47 || code === 58 || code === 59 || code === 60 || code === 61 || code === 62 || code === 63 || code === 64 || code === 91 || code === 92 || code === 93 || code === 123 || code === 125) return false;
		}
		return true;
	}
	/**
	* @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
	* @param {number} code
	* @returns {boolean}
	*/
	function isValidStatusCode$1(code) {
		if (code >= 1e3 && code < 1015) return code !== 1004 && code !== 1005 && code !== 1006;
		return code >= 3e3 && code <= 4999;
	}
	/**
	* @see https://datatracker.ietf.org/doc/html/rfc6455#section-5.5
	* @param {number} opcode
	* @returns {boolean}
	*/
	function isControlFrame$1(opcode) {
		return opcode === opcodes$6.CLOSE || opcode === opcodes$6.PING || opcode === opcodes$6.PONG;
	}
	/**
	* @param {number} opcode
	* @returns {boolean}
	*/
	function isContinuationFrame$1(opcode) {
		return opcode === opcodes$6.CONTINUATION;
	}
	/**
	* @param {number} opcode
	* @returns {boolean}
	*/
	function isTextBinaryFrame$1(opcode) {
		return opcode === opcodes$6.TEXT || opcode === opcodes$6.BINARY;
	}
	/**
	*
	* @param {number} opcode
	* @returns {boolean}
	*/
	function isValidOpcode$1(opcode) {
		return isTextBinaryFrame$1(opcode) || isContinuationFrame$1(opcode) || isControlFrame$1(opcode);
	}
	/**
	* Parses a Sec-WebSocket-Extensions header value.
	* @param {string} extensions
	* @returns {Map<string, string>}
	*/
	function parseExtensions$1(extensions) {
		const position = { position: 0 };
		const extensionList = /* @__PURE__ */ new Map();
		while (position.position < extensions.length) {
			const pair = collectASequenceOfCodePointsFast(";", extensions, position);
			const [name$2, value = ""] = pair.split("=", 2);
			extensionList.set(removeHTTPWhitespace(name$2, true, false), removeHTTPWhitespace(value, false, true));
			position.position++;
		}
		return extensionList;
	}
	/**
	* @see https://www.rfc-editor.org/rfc/rfc7692#section-7.1.2.2
	* @description "client-max-window-bits = 1*DIGIT"
	* @param {string} value
	* @returns {boolean}
	*/
	function isValidClientWindowBits$1(value) {
		for (let i$1 = 0; i$1 < value.length; i$1++) {
			const byte = value.charCodeAt(i$1);
			if (byte < 48 || byte > 57) return false;
		}
		return true;
	}
	/**
	* @see https://whatpr.org/websockets/48/7b748d3...d5570f3.html#get-a-url-record
	* @param {string} url
	* @param {string} [baseURL]
	*/
	function getURLRecord$2(url, baseURL) {
		let urlRecord;
		try {
			urlRecord = new URL(url, baseURL);
		} catch (e) {
			throw new DOMException(e, "SyntaxError");
		}
		if (urlRecord.protocol === "http:") urlRecord.protocol = "ws:";
		else if (urlRecord.protocol === "https:") urlRecord.protocol = "wss:";
		if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") throw new DOMException("expected a ws: or wss: url", "SyntaxError");
		if (urlRecord.hash.length || urlRecord.href.endsWith("#")) throw new DOMException("hash", "SyntaxError");
		return urlRecord;
	}
	function validateCloseCodeAndReason$2(code, reason) {
		if (code !== null) {
			if (code !== 1e3 && (code < 3e3 || code > 4999)) throw new DOMException("invalid code", "InvalidAccessError");
		}
		if (reason !== null) {
			const reasonBytesLength = Buffer.byteLength(reason);
			if (reasonBytesLength > 123) throw new DOMException(`Reason must be less than 123 bytes; received ${reasonBytesLength}`, "SyntaxError");
		}
	}
	/**
	* Converts a Buffer to utf-8, even on platforms without icu.
	* @type {(buffer: Buffer) => string}
	*/
	const utf8Decode$3 = (() => {
		if (typeof process.versions.icu === "string") {
			const fatalDecoder = new TextDecoder("utf-8", { fatal: true });
			return fatalDecoder.decode.bind(fatalDecoder);
		}
		return function(buffer$1) {
			if (isUtf8(buffer$1)) return buffer$1.toString("utf-8");
			throw new TypeError("Invalid utf-8 received.");
		};
	})();
	module.exports = {
		isConnecting: isConnecting$1,
		isEstablished: isEstablished$3,
		isClosing: isClosing$2,
		isClosed: isClosed$2,
		fireEvent: fireEvent$1,
		isValidSubprotocol: isValidSubprotocol$2,
		isValidStatusCode: isValidStatusCode$1,
		websocketMessageReceived: websocketMessageReceived$1,
		utf8Decode: utf8Decode$3,
		isControlFrame: isControlFrame$1,
		isContinuationFrame: isContinuationFrame$1,
		isTextBinaryFrame: isTextBinaryFrame$1,
		isValidOpcode: isValidOpcode$1,
		parseExtensions: parseExtensions$1,
		isValidClientWindowBits: isValidClientWindowBits$1,
		toArrayBuffer: toArrayBuffer$1,
		getURLRecord: getURLRecord$2,
		validateCloseCodeAndReason: validateCloseCodeAndReason$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/frame.js
var require_frame = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/frame.js"(exports, module) {
	const { maxUnsigned16Bit, opcodes: opcodes$5 } = require_constants();
	const BUFFER_SIZE = 8 * 1024;
	/** @type {import('crypto')} */
	let crypto$1;
	let buffer = null;
	let bufIdx = BUFFER_SIZE;
	try {
		crypto$1 = __require("node:crypto");
	} catch {
		crypto$1 = { randomFillSync: function randomFillSync(buffer$1, _offset, _size) {
			for (let i$1 = 0; i$1 < buffer$1.length; ++i$1) buffer$1[i$1] = Math.random() * 255 | 0;
			return buffer$1;
		} };
	}
	function generateMask() {
		if (bufIdx === BUFFER_SIZE) {
			bufIdx = 0;
			crypto$1.randomFillSync(buffer ??= Buffer.allocUnsafeSlow(BUFFER_SIZE), 0, BUFFER_SIZE);
		}
		return [
			buffer[bufIdx++],
			buffer[bufIdx++],
			buffer[bufIdx++],
			buffer[bufIdx++]
		];
	}
	var WebsocketFrameSend$5 = class {
		/**
		* @param {Buffer|undefined} data
		*/
		constructor(data$1) {
			this.frameData = data$1;
		}
		createFrame(opcode) {
			const frameData = this.frameData;
			const maskKey = generateMask();
			const bodyLength$2 = frameData?.byteLength ?? 0;
			/** @type {number} */
			let payloadLength = bodyLength$2;
			let offset = 6;
			if (bodyLength$2 > maxUnsigned16Bit) {
				offset += 8;
				payloadLength = 127;
			} else if (bodyLength$2 > 125) {
				offset += 2;
				payloadLength = 126;
			}
			const buffer$1 = Buffer.allocUnsafe(bodyLength$2 + offset);
			buffer$1[0] = buffer$1[1] = 0;
			buffer$1[0] |= 128;
			buffer$1[0] = (buffer$1[0] & 240) + opcode;
			/*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
			buffer$1[offset - 4] = maskKey[0];
			buffer$1[offset - 3] = maskKey[1];
			buffer$1[offset - 2] = maskKey[2];
			buffer$1[offset - 1] = maskKey[3];
			buffer$1[1] = payloadLength;
			if (payloadLength === 126) buffer$1.writeUInt16BE(bodyLength$2, 2);
			else if (payloadLength === 127) {
				buffer$1[2] = buffer$1[3] = 0;
				buffer$1.writeUIntBE(bodyLength$2, 4, 6);
			}
			buffer$1[1] |= 128;
			for (let i$1 = 0; i$1 < bodyLength$2; ++i$1) buffer$1[offset + i$1] = frameData[i$1] ^ maskKey[i$1 & 3];
			return buffer$1;
		}
		/**
		* @param {Uint8Array} buffer
		*/
		static createFastTextFrame(buffer$1) {
			const maskKey = generateMask();
			const bodyLength$2 = buffer$1.length;
			for (let i$1 = 0; i$1 < bodyLength$2; ++i$1) buffer$1[i$1] ^= maskKey[i$1 & 3];
			let payloadLength = bodyLength$2;
			let offset = 6;
			if (bodyLength$2 > maxUnsigned16Bit) {
				offset += 8;
				payloadLength = 127;
			} else if (bodyLength$2 > 125) {
				offset += 2;
				payloadLength = 126;
			}
			const head = Buffer.allocUnsafeSlow(offset);
			head[0] = 128 | opcodes$5.TEXT;
			head[1] = payloadLength | 128;
			head[offset - 4] = maskKey[0];
			head[offset - 3] = maskKey[1];
			head[offset - 2] = maskKey[2];
			head[offset - 1] = maskKey[3];
			if (payloadLength === 126) head.writeUInt16BE(bodyLength$2, 2);
			else if (payloadLength === 127) {
				head[2] = head[3] = 0;
				head.writeUIntBE(bodyLength$2, 4, 6);
			}
			return [head, buffer$1];
		}
	};
	module.exports = {
		WebsocketFrameSend: WebsocketFrameSend$5,
		generateMask
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/connection.js
var require_connection = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/connection.js"(exports, module) {
	const { uid: uid$2, states: states$3, sentCloseFrameState: sentCloseFrameState$3, emptyBuffer: emptyBuffer$1, opcodes: opcodes$4 } = require_constants();
	const { parseExtensions, isClosed: isClosed$1, isClosing: isClosing$1, isEstablished: isEstablished$2, validateCloseCodeAndReason: validateCloseCodeAndReason$1 } = require_util$1();
	const { makeRequest: makeRequest$1 } = require_request();
	const { fetching: fetching$1 } = require_fetch();
	const { Headers: Headers$1, getHeadersList } = require_headers();
	const { getDecodeSplit } = require_util$4();
	const { WebsocketFrameSend: WebsocketFrameSend$4 } = require_frame();
	const assert$1 = __require("node:assert");
	/** @type {import('crypto')} */
	let crypto;
	try {
		crypto = __require("node:crypto");
	} catch {}
	/**
	* @see https://websockets.spec.whatwg.org/#concept-websocket-establish
	* @param {URL} url
	* @param {string|string[]} protocols
	* @param {import('./websocket').Handler} handler
	* @param {Partial<import('../../../types/websocket').WebSocketInit>} options
	*/
	function establishWebSocketConnection$2(url, protocols, client, handler$1, options) {
		const requestURL = url;
		requestURL.protocol = url.protocol === "ws:" ? "http:" : "https:";
		const request$3 = makeRequest$1({
			urlList: [requestURL],
			client,
			serviceWorkers: "none",
			referrer: "no-referrer",
			mode: "websocket",
			credentials: "include",
			cache: "no-store",
			redirect: "error"
		});
		if (options.headers) {
			const headersList = getHeadersList(new Headers$1(options.headers));
			request$3.headersList = headersList;
		}
		const keyValue = crypto.randomBytes(16).toString("base64");
		request$3.headersList.append("sec-websocket-key", keyValue, true);
		request$3.headersList.append("sec-websocket-version", "13", true);
		for (const protocol of protocols) request$3.headersList.append("sec-websocket-protocol", protocol, true);
		const permessageDeflate = "permessage-deflate; client_max_window_bits";
		request$3.headersList.append("sec-websocket-extensions", permessageDeflate, true);
		const controller = fetching$1({
			request: request$3,
			useParallelQueue: true,
			dispatcher: options.dispatcher,
			processResponse(response) {
				if (response.type === "error") handler$1.readyState = states$3.CLOSED;
				if (response.type === "error" || response.status !== 101) {
					failWebsocketConnection$3(handler$1, 1002, "Received network error or non-101 status code.", response.error);
					return;
				}
				if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
					failWebsocketConnection$3(handler$1, 1002, "Server did not respond with sent protocols.");
					return;
				}
				if (response.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
					failWebsocketConnection$3(handler$1, 1002, "Server did not set Upgrade header to \"websocket\".");
					return;
				}
				if (response.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
					failWebsocketConnection$3(handler$1, 1002, "Server did not set Connection header to \"upgrade\".");
					return;
				}
				const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
				const digest = crypto.createHash("sha1").update(keyValue + uid$2).digest("base64");
				if (secWSAccept !== digest) {
					failWebsocketConnection$3(handler$1, 1002, "Incorrect hash received in Sec-WebSocket-Accept header.");
					return;
				}
				const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
				let extensions;
				if (secExtension !== null) {
					extensions = parseExtensions(secExtension);
					if (!extensions.has("permessage-deflate")) {
						failWebsocketConnection$3(handler$1, 1002, "Sec-WebSocket-Extensions header does not match.");
						return;
					}
				}
				const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
				if (secProtocol !== null) {
					const requestProtocols = getDecodeSplit("sec-websocket-protocol", request$3.headersList);
					if (!requestProtocols.includes(secProtocol)) {
						failWebsocketConnection$3(handler$1, 1002, "Protocol was not set in the opening handshake.");
						return;
					}
				}
				response.socket.on("data", handler$1.onSocketData);
				response.socket.on("close", handler$1.onSocketClose);
				response.socket.on("error", handler$1.onSocketError);
				handler$1.wasEverConnected = true;
				handler$1.onConnectionEstablished(response, extensions);
			}
		});
		return controller;
	}
	/**
	* @see https://whatpr.org/websockets/48.html#close-the-websocket
	* @param {import('./websocket').Handler} object
	* @param {number} [code=null]
	* @param {string} [reason='']
	*/
	function closeWebSocketConnection$2(object$1, code, reason, validate = false) {
		code ??= null;
		reason ??= "";
		if (validate) validateCloseCodeAndReason$1(code, reason);
		if (isClosed$1(object$1.readyState) || isClosing$1(object$1.readyState)) {} else if (!isEstablished$2(object$1.readyState)) {
			failWebsocketConnection$3(object$1);
			object$1.readyState = states$3.CLOSING;
		} else if (!object$1.closeState.has(sentCloseFrameState$3.SENT) && !object$1.closeState.has(sentCloseFrameState$3.RECEIVED)) {
			const frame = new WebsocketFrameSend$4();
			if (reason.length !== 0 && code === null) code = 1e3;
			assert$1(code === null || Number.isInteger(code));
			if (code === null && reason.length === 0) frame.frameData = emptyBuffer$1;
			else if (code !== null && reason === null) {
				frame.frameData = Buffer.allocUnsafe(2);
				frame.frameData.writeUInt16BE(code, 0);
			} else if (code !== null && reason !== null) {
				frame.frameData = Buffer.allocUnsafe(2 + Buffer.byteLength(reason));
				frame.frameData.writeUInt16BE(code, 0);
				frame.frameData.write(reason, 2, "utf-8");
			} else frame.frameData = emptyBuffer$1;
			object$1.socket.write(frame.createFrame(opcodes$4.CLOSE));
			object$1.closeState.add(sentCloseFrameState$3.SENT);
			object$1.readyState = states$3.CLOSING;
		} else object$1.readyState = states$3.CLOSING;
	}
	/**
	* @param {import('./websocket').Handler} handler
	* @param {number} code
	* @param {string|undefined} reason
	* @param {unknown} cause
	* @returns {void}
	*/
	function failWebsocketConnection$3(handler$1, code, reason, cause) {
		if (isEstablished$2(handler$1.readyState)) closeWebSocketConnection$2(handler$1, code, reason, false);
		handler$1.controller.abort();
		if (handler$1.socket?.destroyed === false) handler$1.socket.destroy();
		handler$1.onFail(code, reason, cause);
	}
	module.exports = {
		establishWebSocketConnection: establishWebSocketConnection$2,
		failWebsocketConnection: failWebsocketConnection$3,
		closeWebSocketConnection: closeWebSocketConnection$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/permessage-deflate.js
var require_permessage_deflate = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/permessage-deflate.js"(exports, module) {
	const { createInflateRaw, Z_DEFAULT_WINDOWBITS } = __require("node:zlib");
	const { isValidClientWindowBits } = require_util$1();
	const tail = Buffer.from([
		0,
		0,
		255,
		255
	]);
	const kBuffer = Symbol("kBuffer");
	const kLength = Symbol("kLength");
	var PerMessageDeflate$1 = class {
		/** @type {import('node:zlib').InflateRaw} */
		#inflate;
		#options = {};
		constructor(extensions) {
			this.#options.serverNoContextTakeover = extensions.has("server_no_context_takeover");
			this.#options.serverMaxWindowBits = extensions.get("server_max_window_bits");
		}
		decompress(chunk, fin, callback) {
			if (!this.#inflate) {
				let windowBits = Z_DEFAULT_WINDOWBITS;
				if (this.#options.serverMaxWindowBits) {
					if (!isValidClientWindowBits(this.#options.serverMaxWindowBits)) {
						callback(/* @__PURE__ */ new Error("Invalid server_max_window_bits"));
						return;
					}
					windowBits = Number.parseInt(this.#options.serverMaxWindowBits);
				}
				this.#inflate = createInflateRaw({ windowBits });
				this.#inflate[kBuffer] = [];
				this.#inflate[kLength] = 0;
				this.#inflate.on("data", (data$1) => {
					this.#inflate[kBuffer].push(data$1);
					this.#inflate[kLength] += data$1.length;
				});
				this.#inflate.on("error", (err) => {
					this.#inflate = null;
					callback(err);
				});
			}
			this.#inflate.write(chunk);
			if (fin) this.#inflate.write(tail);
			this.#inflate.flush(() => {
				const full = Buffer.concat(this.#inflate[kBuffer], this.#inflate[kLength]);
				this.#inflate[kBuffer].length = 0;
				this.#inflate[kLength] = 0;
				callback(null, full);
			});
		}
	};
	module.exports = { PerMessageDeflate: PerMessageDeflate$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/receiver.js
var require_receiver = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/receiver.js"(exports, module) {
	const { Writable: Writable$1 } = __require("node:stream");
	const assert = __require("node:assert");
	const { parserStates, opcodes: opcodes$3, states: states$2, emptyBuffer, sentCloseFrameState: sentCloseFrameState$2 } = require_constants();
	const { isValidStatusCode, isValidOpcode, websocketMessageReceived, utf8Decode: utf8Decode$2, isControlFrame, isTextBinaryFrame, isContinuationFrame } = require_util$1();
	const { failWebsocketConnection: failWebsocketConnection$2 } = require_connection();
	const { WebsocketFrameSend: WebsocketFrameSend$3 } = require_frame();
	const { PerMessageDeflate } = require_permessage_deflate();
	var ByteParser$2 = class extends Writable$1 {
		#buffers = [];
		#fragmentsBytes = 0;
		#byteOffset = 0;
		#loop = false;
		#state = parserStates.INFO;
		#info = {};
		#fragments = [];
		/** @type {Map<string, PerMessageDeflate>} */
		#extensions;
		/** @type {import('./websocket').Handler} */
		#handler;
		constructor(handler$1, extensions) {
			super();
			this.#handler = handler$1;
			this.#extensions = extensions == null ? /* @__PURE__ */ new Map() : extensions;
			if (this.#extensions.has("permessage-deflate")) this.#extensions.set("permessage-deflate", new PerMessageDeflate(extensions));
		}
		/**
		* @param {Buffer} chunk
		* @param {() => void} callback
		*/
		_write(chunk, _, callback) {
			this.#buffers.push(chunk);
			this.#byteOffset += chunk.length;
			this.#loop = true;
			this.run(callback);
		}
		/**
		* Runs whenever a new chunk is received.
		* Callback is called whenever there are no more chunks buffering,
		* or not enough bytes are buffered to parse.
		*/
		run(callback) {
			while (this.#loop) if (this.#state === parserStates.INFO) {
				if (this.#byteOffset < 2) return callback();
				const buffer$1 = this.consume(2);
				const fin = (buffer$1[0] & 128) !== 0;
				const opcode = buffer$1[0] & 15;
				const masked = (buffer$1[1] & 128) === 128;
				const fragmented = !fin && opcode !== opcodes$3.CONTINUATION;
				const payloadLength = buffer$1[1] & 127;
				const rsv1 = buffer$1[0] & 64;
				const rsv2 = buffer$1[0] & 32;
				const rsv3 = buffer$1[0] & 16;
				if (!isValidOpcode(opcode)) {
					failWebsocketConnection$2(this.#handler, 1002, "Invalid opcode received");
					return callback();
				}
				if (masked) {
					failWebsocketConnection$2(this.#handler, 1002, "Frame cannot be masked");
					return callback();
				}
				if (rsv1 !== 0 && !this.#extensions.has("permessage-deflate")) {
					failWebsocketConnection$2(this.#handler, 1002, "Expected RSV1 to be clear.");
					return;
				}
				if (rsv2 !== 0 || rsv3 !== 0) {
					failWebsocketConnection$2(this.#handler, 1002, "RSV1, RSV2, RSV3 must be clear");
					return;
				}
				if (fragmented && !isTextBinaryFrame(opcode)) {
					failWebsocketConnection$2(this.#handler, 1002, "Invalid frame type was fragmented.");
					return;
				}
				if (isTextBinaryFrame(opcode) && this.#fragments.length > 0) {
					failWebsocketConnection$2(this.#handler, 1002, "Expected continuation frame");
					return;
				}
				if (this.#info.fragmented && fragmented) {
					failWebsocketConnection$2(this.#handler, 1002, "Fragmented frame exceeded 125 bytes.");
					return;
				}
				if ((payloadLength > 125 || fragmented) && isControlFrame(opcode)) {
					failWebsocketConnection$2(this.#handler, 1002, "Control frame either too large or fragmented");
					return;
				}
				if (isContinuationFrame(opcode) && this.#fragments.length === 0 && !this.#info.compressed) {
					failWebsocketConnection$2(this.#handler, 1002, "Unexpected continuation frame");
					return;
				}
				if (payloadLength <= 125) {
					this.#info.payloadLength = payloadLength;
					this.#state = parserStates.READ_DATA;
				} else if (payloadLength === 126) this.#state = parserStates.PAYLOADLENGTH_16;
				else if (payloadLength === 127) this.#state = parserStates.PAYLOADLENGTH_64;
				if (isTextBinaryFrame(opcode)) {
					this.#info.binaryType = opcode;
					this.#info.compressed = rsv1 !== 0;
				}
				this.#info.opcode = opcode;
				this.#info.masked = masked;
				this.#info.fin = fin;
				this.#info.fragmented = fragmented;
			} else if (this.#state === parserStates.PAYLOADLENGTH_16) {
				if (this.#byteOffset < 2) return callback();
				const buffer$1 = this.consume(2);
				this.#info.payloadLength = buffer$1.readUInt16BE(0);
				this.#state = parserStates.READ_DATA;
			} else if (this.#state === parserStates.PAYLOADLENGTH_64) {
				if (this.#byteOffset < 8) return callback();
				const buffer$1 = this.consume(8);
				const upper = buffer$1.readUInt32BE(0);
				if (upper > 2 ** 31 - 1) {
					failWebsocketConnection$2(this.#handler, 1009, "Received payload length > 2^31 bytes.");
					return;
				}
				const lower = buffer$1.readUInt32BE(4);
				this.#info.payloadLength = (upper << 8) + lower;
				this.#state = parserStates.READ_DATA;
			} else if (this.#state === parserStates.READ_DATA) {
				if (this.#byteOffset < this.#info.payloadLength) return callback();
				const body = this.consume(this.#info.payloadLength);
				if (isControlFrame(this.#info.opcode)) {
					this.#loop = this.parseControlFrame(body);
					this.#state = parserStates.INFO;
				} else if (!this.#info.compressed) {
					this.writeFragments(body);
					if (!this.#info.fragmented && this.#info.fin) websocketMessageReceived(this.#handler, this.#info.binaryType, this.consumeFragments());
					this.#state = parserStates.INFO;
				} else {
					this.#extensions.get("permessage-deflate").decompress(body, this.#info.fin, (error$1, data$1) => {
						if (error$1) {
							failWebsocketConnection$2(this.#handler, 1007, error$1.message);
							return;
						}
						this.writeFragments(data$1);
						if (!this.#info.fin) {
							this.#state = parserStates.INFO;
							this.#loop = true;
							this.run(callback);
							return;
						}
						websocketMessageReceived(this.#handler, this.#info.binaryType, this.consumeFragments());
						this.#loop = true;
						this.#state = parserStates.INFO;
						this.run(callback);
					});
					this.#loop = false;
					break;
				}
			}
		}
		/**
		* Take n bytes from the buffered Buffers
		* @param {number} n
		* @returns {Buffer}
		*/
		consume(n$1) {
			if (n$1 > this.#byteOffset) throw new Error("Called consume() before buffers satiated.");
			else if (n$1 === 0) return emptyBuffer;
			this.#byteOffset -= n$1;
			const first = this.#buffers[0];
			if (first.length > n$1) {
				this.#buffers[0] = first.subarray(n$1, first.length);
				return first.subarray(0, n$1);
			} else if (first.length === n$1) return this.#buffers.shift();
			else {
				let offset = 0;
				const buffer$1 = Buffer.allocUnsafeSlow(n$1);
				while (offset !== n$1) {
					const next = this.#buffers[0];
					const length = next.length;
					if (length + offset === n$1) {
						buffer$1.set(this.#buffers.shift(), offset);
						break;
					} else if (length + offset > n$1) {
						buffer$1.set(next.subarray(0, n$1 - offset), offset);
						this.#buffers[0] = next.subarray(n$1 - offset);
						break;
					} else {
						buffer$1.set(this.#buffers.shift(), offset);
						offset += length;
					}
				}
				return buffer$1;
			}
		}
		writeFragments(fragment) {
			this.#fragmentsBytes += fragment.length;
			this.#fragments.push(fragment);
		}
		consumeFragments() {
			const fragments = this.#fragments;
			if (fragments.length === 1) {
				this.#fragmentsBytes = 0;
				return fragments.shift();
			}
			let offset = 0;
			const output = Buffer.allocUnsafeSlow(this.#fragmentsBytes);
			for (let i$1 = 0; i$1 < fragments.length; ++i$1) {
				const buffer$1 = fragments[i$1];
				output.set(buffer$1, offset);
				offset += buffer$1.length;
			}
			this.#fragments = [];
			this.#fragmentsBytes = 0;
			return output;
		}
		parseCloseBody(data$1) {
			assert(data$1.length !== 1);
			/** @type {number|undefined} */
			let code;
			if (data$1.length >= 2) code = data$1.readUInt16BE(0);
			if (code !== void 0 && !isValidStatusCode(code)) return {
				code: 1002,
				reason: "Invalid status code",
				error: true
			};
			/** @type {Buffer} */
			let reason = data$1.subarray(2);
			if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) reason = reason.subarray(3);
			try {
				reason = utf8Decode$2(reason);
			} catch {
				return {
					code: 1007,
					reason: "Invalid UTF-8",
					error: true
				};
			}
			return {
				code,
				reason,
				error: false
			};
		}
		/**
		* Parses control frames.
		* @param {Buffer} body
		*/
		parseControlFrame(body) {
			const { opcode, payloadLength } = this.#info;
			if (opcode === opcodes$3.CLOSE) {
				if (payloadLength === 1) {
					failWebsocketConnection$2(this.#handler, 1002, "Received close frame with a 1-byte body.");
					return false;
				}
				this.#info.closeInfo = this.parseCloseBody(body);
				if (this.#info.closeInfo.error) {
					const { code, reason } = this.#info.closeInfo;
					failWebsocketConnection$2(this.#handler, code, reason);
					return false;
				}
				if (!this.#handler.closeState.has(sentCloseFrameState$2.SENT) && !this.#handler.closeState.has(sentCloseFrameState$2.RECEIVED)) {
					let body$1 = emptyBuffer;
					if (this.#info.closeInfo.code) {
						body$1 = Buffer.allocUnsafe(2);
						body$1.writeUInt16BE(this.#info.closeInfo.code, 0);
					}
					const closeFrame = new WebsocketFrameSend$3(body$1);
					this.#handler.socket.write(closeFrame.createFrame(opcodes$3.CLOSE));
					this.#handler.closeState.add(sentCloseFrameState$2.SENT);
				}
				this.#handler.readyState = states$2.CLOSING;
				this.#handler.closeState.add(sentCloseFrameState$2.RECEIVED);
				return false;
			} else if (opcode === opcodes$3.PING) {
				if (!this.#handler.closeState.has(sentCloseFrameState$2.RECEIVED)) {
					const frame = new WebsocketFrameSend$3(body);
					this.#handler.socket.write(frame.createFrame(opcodes$3.PONG));
					this.#handler.onPing(body);
				}
			} else if (opcode === opcodes$3.PONG) this.#handler.onPong(body);
			return true;
		}
		get closingInfo() {
			return this.#info.closeInfo;
		}
	};
	module.exports = { ByteParser: ByteParser$2 };
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/sender.js
var require_sender = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/sender.js"(exports, module) {
	const { WebsocketFrameSend: WebsocketFrameSend$2 } = require_frame();
	const { opcodes: opcodes$2, sendHints: sendHints$1 } = require_constants();
	const FixedQueue = require_fixed_queue();
	/**
	* @typedef {object} SendQueueNode
	* @property {Promise<void> | null} promise
	* @property {((...args: any[]) => any)} callback
	* @property {Buffer | null} frame
	*/
	var SendQueue$1 = class {
		/**
		* @type {FixedQueue}
		*/
		#queue = new FixedQueue();
		/**
		* @type {boolean}
		*/
		#running = false;
		/** @type {import('node:net').Socket} */
		#socket;
		constructor(socket) {
			this.#socket = socket;
		}
		add(item, cb, hint) {
			if (hint !== sendHints$1.blob) {
				if (!this.#running) if (hint === sendHints$1.text) {
					const { 0: head, 1: body } = WebsocketFrameSend$2.createFastTextFrame(item);
					this.#socket.cork();
					this.#socket.write(head);
					this.#socket.write(body, cb);
					this.#socket.uncork();
				} else this.#socket.write(createFrame(item, hint), cb);
				else {
					/** @type {SendQueueNode} */
					const node$1 = {
						promise: null,
						callback: cb,
						frame: createFrame(item, hint)
					};
					this.#queue.push(node$1);
				}
				return;
			}
			/** @type {SendQueueNode} */
			const node = {
				promise: item.arrayBuffer().then((ab) => {
					node.promise = null;
					node.frame = createFrame(ab, hint);
				}),
				callback: cb,
				frame: null
			};
			this.#queue.push(node);
			if (!this.#running) this.#run();
		}
		async #run() {
			this.#running = true;
			const queue = this.#queue;
			while (!queue.isEmpty()) {
				const node = queue.shift();
				if (node.promise !== null) await node.promise;
				this.#socket.write(node.frame, node.callback);
				node.callback = node.frame = null;
			}
			this.#running = false;
		}
	};
	function createFrame(data$1, hint) {
		return new WebsocketFrameSend$2(toBuffer(data$1, hint)).createFrame(hint === sendHints$1.text ? opcodes$2.TEXT : opcodes$2.BINARY);
	}
	function toBuffer(data$1, hint) {
		switch (hint) {
			case sendHints$1.text:
			case sendHints$1.typedArray: return new Uint8Array(data$1.buffer, data$1.byteOffset, data$1.byteLength);
			case sendHints$1.arrayBuffer:
			case sendHints$1.blob: return new Uint8Array(data$1);
		}
	}
	module.exports = { SendQueue: SendQueue$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/websocket.js
var require_websocket = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/websocket.js"(exports, module) {
	const { webidl: webidl$3 } = require_webidl();
	const { URLSerializer } = require_data_url();
	const { environmentSettingsObject: environmentSettingsObject$2 } = require_util$4();
	const { staticPropertyDescriptors, states: states$1, sentCloseFrameState: sentCloseFrameState$1, sendHints, opcodes: opcodes$1 } = require_constants();
	const { isConnecting, isEstablished: isEstablished$1, isClosing, isClosed, isValidSubprotocol: isValidSubprotocol$1, fireEvent, utf8Decode: utf8Decode$1, toArrayBuffer, getURLRecord: getURLRecord$1 } = require_util$1();
	const { establishWebSocketConnection: establishWebSocketConnection$1, closeWebSocketConnection: closeWebSocketConnection$1, failWebsocketConnection: failWebsocketConnection$1 } = require_connection();
	const { ByteParser: ByteParser$1 } = require_receiver();
	const { kEnumerableProperty: kEnumerableProperty$3 } = require_util$5();
	const { getGlobalDispatcher: getGlobalDispatcher$1 } = require_global();
	const { types: types$1 } = __require("node:util");
	const { ErrorEvent: ErrorEvent$1, CloseEvent: CloseEvent$1, createFastMessageEvent: createFastMessageEvent$1 } = require_events();
	const { SendQueue } = require_sender();
	const { WebsocketFrameSend: WebsocketFrameSend$1 } = require_frame();
	const { channels: channels$1 } = require_diagnostics();
	/**
	* @typedef {object} Handler
	* @property {(response: any, extensions?: string[]) => void} onConnectionEstablished
	* @property {(code: number, reason: any) => void} onFail
	* @property {(opcode: number, data: Buffer) => void} onMessage
	* @property {(error: Error) => void} onParserError
	* @property {() => void} onParserDrain
	* @property {(chunk: Buffer) => void} onSocketData
	* @property {(err: Error) => void} onSocketError
	* @property {() => void} onSocketClose
	* @property {(body: Buffer) => void} onPing
	* @property {(body: Buffer) => void} onPong
	*
	* @property {number} readyState
	* @property {import('stream').Duplex} socket
	* @property {Set<number>} closeState
	* @property {import('../fetch/index').Fetch} controller
	* @property {boolean} [wasEverConnected=false]
	*/
	var WebSocket$1 = class WebSocket$1 extends EventTarget {
		#events = {
			open: null,
			error: null,
			close: null,
			message: null
		};
		#bufferedAmount = 0;
		#protocol = "";
		#extensions = "";
		/** @type {SendQueue} */
		#sendQueue;
		/** @type {Handler} */
		#handler = {
			onConnectionEstablished: (response, extensions) => this.#onConnectionEstablished(response, extensions),
			onFail: (code, reason, cause) => this.#onFail(code, reason, cause),
			onMessage: (opcode, data$1) => this.#onMessage(opcode, data$1),
			onParserError: (err) => failWebsocketConnection$1(this.#handler, null, err.message),
			onParserDrain: () => this.#onParserDrain(),
			onSocketData: (chunk) => {
				if (!this.#parser.write(chunk)) this.#handler.socket.pause();
			},
			onSocketError: (err) => {
				this.#handler.readyState = states$1.CLOSING;
				if (channels$1.socketError.hasSubscribers) channels$1.socketError.publish(err);
				this.#handler.socket.destroy();
			},
			onSocketClose: () => this.#onSocketClose(),
			onPing: (body) => {
				if (channels$1.ping.hasSubscribers) channels$1.ping.publish({
					payload: body,
					websocket: this
				});
			},
			onPong: (body) => {
				if (channels$1.pong.hasSubscribers) channels$1.pong.publish({
					payload: body,
					websocket: this
				});
			},
			readyState: states$1.CONNECTING,
			socket: null,
			closeState: /* @__PURE__ */ new Set(),
			controller: null,
			wasEverConnected: false
		};
		#url;
		#binaryType;
		/** @type {import('./receiver').ByteParser} */
		#parser;
		/**
		* @param {string} url
		* @param {string|string[]} protocols
		*/
		constructor(url, protocols = []) {
			super();
			webidl$3.util.markAsUncloneable(this);
			const prefix = "WebSocket constructor";
			webidl$3.argumentLengthCheck(arguments, 1, prefix);
			const options = webidl$3.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols, prefix, "options");
			url = webidl$3.converters.USVString(url);
			protocols = options.protocols;
			const baseURL = environmentSettingsObject$2.settingsObject.baseUrl;
			const urlRecord = getURLRecord$1(url, baseURL);
			if (typeof protocols === "string") protocols = [protocols];
			if (protocols.length !== new Set(protocols.map((p) => p.toLowerCase())).size) throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
			if (protocols.length > 0 && !protocols.every((p) => isValidSubprotocol$1(p))) throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
			this.#url = new URL(urlRecord.href);
			const client = environmentSettingsObject$2.settingsObject;
			this.#handler.controller = establishWebSocketConnection$1(urlRecord, protocols, client, this.#handler, options);
			this.#handler.readyState = WebSocket$1.CONNECTING;
			this.#binaryType = "blob";
		}
		/**
		* @see https://websockets.spec.whatwg.org/#dom-websocket-close
		* @param {number|undefined} code
		* @param {string|undefined} reason
		*/
		close(code = void 0, reason = void 0) {
			webidl$3.brandCheck(this, WebSocket$1);
			const prefix = "WebSocket.close";
			if (code !== void 0) code = webidl$3.converters["unsigned short"](code, prefix, "code", { clamp: true });
			if (reason !== void 0) reason = webidl$3.converters.USVString(reason);
			code ??= null;
			reason ??= "";
			closeWebSocketConnection$1(this.#handler, code, reason, true);
		}
		/**
		* @see https://websockets.spec.whatwg.org/#dom-websocket-send
		* @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
		*/
		send(data$1) {
			webidl$3.brandCheck(this, WebSocket$1);
			const prefix = "WebSocket.send";
			webidl$3.argumentLengthCheck(arguments, 1, prefix);
			data$1 = webidl$3.converters.WebSocketSendData(data$1, prefix, "data");
			if (isConnecting(this.#handler.readyState)) throw new DOMException("Sent before connected.", "InvalidStateError");
			if (!isEstablished$1(this.#handler.readyState) || isClosing(this.#handler.readyState)) return;
			if (typeof data$1 === "string") {
				const buffer$1 = Buffer.from(data$1);
				this.#bufferedAmount += buffer$1.byteLength;
				this.#sendQueue.add(buffer$1, () => {
					this.#bufferedAmount -= buffer$1.byteLength;
				}, sendHints.text);
			} else if (types$1.isArrayBuffer(data$1)) {
				this.#bufferedAmount += data$1.byteLength;
				this.#sendQueue.add(data$1, () => {
					this.#bufferedAmount -= data$1.byteLength;
				}, sendHints.arrayBuffer);
			} else if (ArrayBuffer.isView(data$1)) {
				this.#bufferedAmount += data$1.byteLength;
				this.#sendQueue.add(data$1, () => {
					this.#bufferedAmount -= data$1.byteLength;
				}, sendHints.typedArray);
			} else if (webidl$3.is.Blob(data$1)) {
				this.#bufferedAmount += data$1.size;
				this.#sendQueue.add(data$1, () => {
					this.#bufferedAmount -= data$1.size;
				}, sendHints.blob);
			}
		}
		get readyState() {
			webidl$3.brandCheck(this, WebSocket$1);
			return this.#handler.readyState;
		}
		get bufferedAmount() {
			webidl$3.brandCheck(this, WebSocket$1);
			return this.#bufferedAmount;
		}
		get url() {
			webidl$3.brandCheck(this, WebSocket$1);
			return URLSerializer(this.#url);
		}
		get extensions() {
			webidl$3.brandCheck(this, WebSocket$1);
			return this.#extensions;
		}
		get protocol() {
			webidl$3.brandCheck(this, WebSocket$1);
			return this.#protocol;
		}
		get onopen() {
			webidl$3.brandCheck(this, WebSocket$1);
			return this.#events.open;
		}
		set onopen(fn) {
			webidl$3.brandCheck(this, WebSocket$1);
			if (this.#events.open) this.removeEventListener("open", this.#events.open);
			if (typeof fn === "function") {
				this.#events.open = fn;
				this.addEventListener("open", fn);
			} else this.#events.open = null;
		}
		get onerror() {
			webidl$3.brandCheck(this, WebSocket$1);
			return this.#events.error;
		}
		set onerror(fn) {
			webidl$3.brandCheck(this, WebSocket$1);
			if (this.#events.error) this.removeEventListener("error", this.#events.error);
			if (typeof fn === "function") {
				this.#events.error = fn;
				this.addEventListener("error", fn);
			} else this.#events.error = null;
		}
		get onclose() {
			webidl$3.brandCheck(this, WebSocket$1);
			return this.#events.close;
		}
		set onclose(fn) {
			webidl$3.brandCheck(this, WebSocket$1);
			if (this.#events.close) this.removeEventListener("close", this.#events.close);
			if (typeof fn === "function") {
				this.#events.close = fn;
				this.addEventListener("close", fn);
			} else this.#events.close = null;
		}
		get onmessage() {
			webidl$3.brandCheck(this, WebSocket$1);
			return this.#events.message;
		}
		set onmessage(fn) {
			webidl$3.brandCheck(this, WebSocket$1);
			if (this.#events.message) this.removeEventListener("message", this.#events.message);
			if (typeof fn === "function") {
				this.#events.message = fn;
				this.addEventListener("message", fn);
			} else this.#events.message = null;
		}
		get binaryType() {
			webidl$3.brandCheck(this, WebSocket$1);
			return this.#binaryType;
		}
		set binaryType(type) {
			webidl$3.brandCheck(this, WebSocket$1);
			if (type !== "blob" && type !== "arraybuffer") this.#binaryType = "blob";
			else this.#binaryType = type;
		}
		/**
		* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
		*/
		#onConnectionEstablished(response, parsedExtensions) {
			this.#handler.socket = response.socket;
			const parser = new ByteParser$1(this.#handler, parsedExtensions);
			parser.on("drain", () => this.#handler.onParserDrain());
			parser.on("error", (err) => this.#handler.onParserError(err));
			this.#parser = parser;
			this.#sendQueue = new SendQueue(response.socket);
			this.#handler.readyState = states$1.OPEN;
			const extensions = response.headersList.get("sec-websocket-extensions");
			if (extensions !== null) this.#extensions = extensions;
			const protocol = response.headersList.get("sec-websocket-protocol");
			if (protocol !== null) this.#protocol = protocol;
			fireEvent("open", this);
			if (channels$1.open.hasSubscribers) channels$1.open.publish({
				address: response.socket.address(),
				protocol: this.#protocol,
				extensions: this.#extensions,
				websocket: this
			});
		}
		#onFail(code, reason, cause) {
			if (reason) fireEvent("error", this, (type, init) => new ErrorEvent$1(type, init), {
				error: new Error(reason, cause ? { cause } : void 0),
				message: reason
			});
			if (!this.#handler.wasEverConnected) {
				this.#handler.readyState = states$1.CLOSED;
				fireEvent("close", this, (type, init) => new CloseEvent$1(type, init), {
					wasClean: false,
					code,
					reason
				});
			}
		}
		#onMessage(type, data$1) {
			if (this.#handler.readyState !== states$1.OPEN) return;
			let dataForEvent;
			if (type === opcodes$1.TEXT) try {
				dataForEvent = utf8Decode$1(data$1);
			} catch {
				failWebsocketConnection$1(this.#handler, 1007, "Received invalid UTF-8 in text frame.");
				return;
			}
			else if (type === opcodes$1.BINARY) if (this.#binaryType === "blob") dataForEvent = new Blob([data$1]);
			else dataForEvent = toArrayBuffer(data$1);
			fireEvent("message", this, createFastMessageEvent$1, {
				origin: this.#url.origin,
				data: dataForEvent
			});
		}
		#onParserDrain() {
			this.#handler.socket.resume();
		}
		/**
		* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
		* @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
		*/
		#onSocketClose() {
			const wasClean = this.#handler.closeState.has(sentCloseFrameState$1.SENT) && this.#handler.closeState.has(sentCloseFrameState$1.RECEIVED);
			let code = 1005;
			let reason = "";
			const result = this.#parser.closingInfo;
			if (result && !result.error) {
				code = result.code ?? 1005;
				reason = result.reason;
			} else if (!this.#handler.closeState.has(sentCloseFrameState$1.RECEIVED)) code = 1006;
			this.#handler.readyState = states$1.CLOSED;
			fireEvent("close", this, (type, init) => new CloseEvent$1(type, init), {
				wasClean,
				code,
				reason
			});
			if (channels$1.close.hasSubscribers) channels$1.close.publish({
				websocket: this,
				code,
				reason
			});
		}
		/**
		* @param {WebSocket} ws
		* @param {Buffer|undefined} buffer
		*/
		static ping(ws, buffer$1) {
			if (Buffer.isBuffer(buffer$1)) {
				if (buffer$1.length > 125) throw new TypeError("A PING frame cannot have a body larger than 125 bytes.");
			} else if (buffer$1 !== void 0) throw new TypeError("Expected buffer payload");
			const readyState = ws.#handler.readyState;
			if (isEstablished$1(readyState) && !isClosing(readyState) && !isClosed(readyState)) {
				const frame = new WebsocketFrameSend$1(buffer$1);
				ws.#handler.socket.write(frame.createFrame(opcodes$1.PING));
			}
		}
	};
	const { ping: ping$1 } = WebSocket$1;
	Reflect.deleteProperty(WebSocket$1, "ping");
	WebSocket$1.CONNECTING = WebSocket$1.prototype.CONNECTING = states$1.CONNECTING;
	WebSocket$1.OPEN = WebSocket$1.prototype.OPEN = states$1.OPEN;
	WebSocket$1.CLOSING = WebSocket$1.prototype.CLOSING = states$1.CLOSING;
	WebSocket$1.CLOSED = WebSocket$1.prototype.CLOSED = states$1.CLOSED;
	Object.defineProperties(WebSocket$1.prototype, {
		CONNECTING: staticPropertyDescriptors,
		OPEN: staticPropertyDescriptors,
		CLOSING: staticPropertyDescriptors,
		CLOSED: staticPropertyDescriptors,
		url: kEnumerableProperty$3,
		readyState: kEnumerableProperty$3,
		bufferedAmount: kEnumerableProperty$3,
		onopen: kEnumerableProperty$3,
		onerror: kEnumerableProperty$3,
		onclose: kEnumerableProperty$3,
		close: kEnumerableProperty$3,
		onmessage: kEnumerableProperty$3,
		binaryType: kEnumerableProperty$3,
		send: kEnumerableProperty$3,
		extensions: kEnumerableProperty$3,
		protocol: kEnumerableProperty$3,
		[Symbol.toStringTag]: {
			value: "WebSocket",
			writable: false,
			enumerable: false,
			configurable: true
		}
	});
	Object.defineProperties(WebSocket$1, {
		CONNECTING: staticPropertyDescriptors,
		OPEN: staticPropertyDescriptors,
		CLOSING: staticPropertyDescriptors,
		CLOSED: staticPropertyDescriptors
	});
	webidl$3.converters["sequence<DOMString>"] = webidl$3.sequenceConverter(webidl$3.converters.DOMString);
	webidl$3.converters["DOMString or sequence<DOMString>"] = function(V, prefix, argument) {
		if (webidl$3.util.Type(V) === webidl$3.util.Types.OBJECT && Symbol.iterator in V) return webidl$3.converters["sequence<DOMString>"](V);
		return webidl$3.converters.DOMString(V, prefix, argument);
	};
	webidl$3.converters.WebSocketInit = webidl$3.dictionaryConverter([
		{
			key: "protocols",
			converter: webidl$3.converters["DOMString or sequence<DOMString>"],
			defaultValue: () => new Array(0)
		},
		{
			key: "dispatcher",
			converter: webidl$3.converters.any,
			defaultValue: () => getGlobalDispatcher$1()
		},
		{
			key: "headers",
			converter: webidl$3.nullableConverter(webidl$3.converters.HeadersInit)
		}
	]);
	webidl$3.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
		if (webidl$3.util.Type(V) === webidl$3.util.Types.OBJECT && !(Symbol.iterator in V)) return webidl$3.converters.WebSocketInit(V);
		return { protocols: webidl$3.converters["DOMString or sequence<DOMString>"](V) };
	};
	webidl$3.converters.WebSocketSendData = function(V) {
		if (webidl$3.util.Type(V) === webidl$3.util.Types.OBJECT) {
			if (webidl$3.is.Blob(V)) return V;
			if (ArrayBuffer.isView(V) || types$1.isArrayBuffer(V)) return V;
		}
		return webidl$3.converters.USVString(V);
	};
	module.exports = {
		WebSocket: WebSocket$1,
		ping: ping$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/stream/websocketerror.js
var require_websocketerror = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/stream/websocketerror.js"(exports, module) {
	const { webidl: webidl$2 } = require_webidl();
	const { validateCloseCodeAndReason } = require_util$1();
	const { kConstruct: kConstruct$1 } = require_symbols();
	const { kEnumerableProperty: kEnumerableProperty$2 } = require_util$5();
	var WebSocketError$1 = class WebSocketError$1 extends DOMException {
		#closeCode;
		#reason;
		constructor(message = "", init = void 0) {
			message = webidl$2.converters.DOMString(message, "WebSocketError", "message");
			super(message, "WebSocketError");
			if (init === kConstruct$1) return;
			else if (init !== null) init = webidl$2.converters.WebSocketCloseInfo(init);
			let code = init.closeCode ?? null;
			const reason = init.reason ?? "";
			validateCloseCodeAndReason(code, reason);
			if (reason.length !== 0 && code === null) code = 1e3;
			this.#closeCode = code;
			this.#reason = reason;
		}
		get closeCode() {
			return this.#closeCode;
		}
		get reason() {
			return this.#reason;
		}
		/**
		* @param {string} message
		* @param {number|null} code
		* @param {string} reason
		*/
		static createUnvalidatedWebSocketError(message, code, reason) {
			const error$1 = new WebSocketError$1(message, kConstruct$1);
			error$1.#closeCode = code;
			error$1.#reason = reason;
			return error$1;
		}
	};
	const { createUnvalidatedWebSocketError: createUnvalidatedWebSocketError$1 } = WebSocketError$1;
	delete WebSocketError$1.createUnvalidatedWebSocketError;
	Object.defineProperties(WebSocketError$1.prototype, {
		closeCode: kEnumerableProperty$2,
		reason: kEnumerableProperty$2,
		[Symbol.toStringTag]: {
			value: "WebSocketError",
			writable: false,
			enumerable: false,
			configurable: true
		}
	});
	webidl$2.is.WebSocketError = webidl$2.util.MakeTypeAssertion(WebSocketError$1);
	module.exports = {
		WebSocketError: WebSocketError$1,
		createUnvalidatedWebSocketError: createUnvalidatedWebSocketError$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/stream/websocketstream.js
var require_websocketstream = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/websocket/stream/websocketstream.js"(exports, module) {
	const { createDeferredPromise } = require_promise();
	const { environmentSettingsObject: environmentSettingsObject$1 } = require_util$4();
	const { states, opcodes, sentCloseFrameState } = require_constants();
	const { webidl: webidl$1 } = require_webidl();
	const { getURLRecord, isValidSubprotocol, isEstablished, utf8Decode } = require_util$1();
	const { establishWebSocketConnection, failWebsocketConnection, closeWebSocketConnection } = require_connection();
	const { types } = __require("node:util");
	const { channels } = require_diagnostics();
	const { WebsocketFrameSend } = require_frame();
	const { ByteParser } = require_receiver();
	const { WebSocketError, createUnvalidatedWebSocketError } = require_websocketerror();
	const { utf8DecodeBytes } = require_util$4();
	const { kEnumerableProperty: kEnumerableProperty$1 } = require_util$5();
	let emittedExperimentalWarning = false;
	var WebSocketStream = class {
		/** @type {URL} */
		#url;
		/** @type {import('../../../util/promise').DeferredPromise} */
		#openedPromise;
		/** @type {import('../../../util/promise').DeferredPromise} */
		#closedPromise;
		/** @type {ReadableStream} */
		#readableStream;
		/** @type {ReadableStreamDefaultController} */
		#readableStreamController;
		/** @type {WritableStream} */
		#writableStream;
		#handshakeAborted = false;
		/** @type {import('../websocket').Handler} */
		#handler = {
			onConnectionEstablished: (response, extensions) => this.#onConnectionEstablished(response, extensions),
			onFail: (_code, _reason) => {},
			onMessage: (opcode, data$1) => this.#onMessage(opcode, data$1),
			onParserError: (err) => failWebsocketConnection(this.#handler, null, err.message),
			onParserDrain: () => this.#handler.socket.resume(),
			onSocketData: (chunk) => {
				if (!this.#parser.write(chunk)) this.#handler.socket.pause();
			},
			onSocketError: (err) => {
				this.#handler.readyState = states.CLOSING;
				if (channels.socketError.hasSubscribers) channels.socketError.publish(err);
				this.#handler.socket.destroy();
			},
			onSocketClose: () => this.#onSocketClose(),
			onPing: () => {},
			onPong: () => {},
			readyState: states.CONNECTING,
			socket: null,
			closeState: /* @__PURE__ */ new Set(),
			controller: null,
			wasEverConnected: false
		};
		/** @type {import('../receiver').ByteParser} */
		#parser;
		constructor(url, options = void 0) {
			if (!emittedExperimentalWarning) {
				process.emitWarning("WebSocketStream is experimental! Expect it to change at any time.", { code: "UNDICI-WSS" });
				emittedExperimentalWarning = true;
			}
			webidl$1.argumentLengthCheck(arguments, 1, "WebSocket");
			url = webidl$1.converters.USVString(url);
			if (options !== null) options = webidl$1.converters.WebSocketStreamOptions(options);
			const baseURL = environmentSettingsObject$1.settingsObject.baseUrl;
			const urlRecord = getURLRecord(url, baseURL);
			const protocols = options.protocols;
			if (protocols.length !== new Set(protocols.map((p) => p.toLowerCase())).size) throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
			if (protocols.length > 0 && !protocols.every((p) => isValidSubprotocol(p))) throw new DOMException("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
			this.#url = urlRecord.toString();
			this.#openedPromise = createDeferredPromise();
			this.#closedPromise = createDeferredPromise();
			if (options.signal != null) {
				const signal = options.signal;
				if (signal.aborted) {
					this.#openedPromise.reject(signal.reason);
					this.#closedPromise.reject(signal.reason);
					return;
				}
				signal.addEventListener("abort", () => {
					if (!isEstablished(this.#handler.readyState)) {
						failWebsocketConnection(this.#handler);
						this.#handler.readyState = states.CLOSING;
						this.#openedPromise.reject(signal.reason);
						this.#closedPromise.reject(signal.reason);
						this.#handshakeAborted = true;
					}
				}, { once: true });
			}
			const client = environmentSettingsObject$1.settingsObject;
			this.#handler.controller = establishWebSocketConnection(urlRecord, protocols, client, this.#handler, options);
		}
		get url() {
			return this.#url.toString();
		}
		get opened() {
			return this.#openedPromise.promise;
		}
		get closed() {
			return this.#closedPromise.promise;
		}
		close(closeInfo = void 0) {
			if (closeInfo !== null) closeInfo = webidl$1.converters.WebSocketCloseInfo(closeInfo);
			const code = closeInfo.closeCode ?? null;
			const reason = closeInfo.reason;
			closeWebSocketConnection(this.#handler, code, reason, true);
		}
		#write(chunk) {
			const promise = createDeferredPromise();
			let data$1 = null;
			let opcode = null;
			if (ArrayBuffer.isView(chunk) || types.isArrayBuffer(chunk)) {
				data$1 = new Uint8Array(ArrayBuffer.isView(chunk) ? new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength) : chunk);
				opcode = opcodes.BINARY;
			} else {
				let string;
				try {
					string = webidl$1.converters.DOMString(chunk);
				} catch (e) {
					promise.reject(e);
					return;
				}
				data$1 = new TextEncoder().encode(string);
				opcode = opcodes.TEXT;
			}
			if (!this.#handler.closeState.has(sentCloseFrameState.SENT) && !this.#handler.closeState.has(sentCloseFrameState.RECEIVED)) {
				const frame = new WebsocketFrameSend(data$1);
				this.#handler.socket.write(frame.createFrame(opcode), () => {
					promise.resolve(void 0);
				});
			}
			return promise;
		}
		/** @type {import('../websocket').Handler['onConnectionEstablished']} */
		#onConnectionEstablished(response, parsedExtensions) {
			this.#handler.socket = response.socket;
			const parser = new ByteParser(this.#handler, parsedExtensions);
			parser.on("drain", () => this.#handler.onParserDrain());
			parser.on("error", (err) => this.#handler.onParserError(err));
			this.#parser = parser;
			this.#handler.readyState = states.OPEN;
			const extensions = parsedExtensions ?? "";
			const protocol = response.headersList.get("sec-websocket-protocol") ?? "";
			const readable$1 = new ReadableStream({
				start: (controller) => {
					this.#readableStreamController = controller;
				},
				pull(controller) {
					let chunk;
					while (controller.desiredSize > 0 && (chunk = response.socket.read()) !== null) controller.enqueue(chunk);
				},
				cancel: (reason) => this.#cancel(reason)
			});
			const writable$1 = new WritableStream({
				write: (chunk) => this.#write(chunk),
				close: () => closeWebSocketConnection(this.#handler, null, null),
				abort: (reason) => this.#closeUsingReason(reason)
			});
			this.#readableStream = readable$1;
			this.#writableStream = writable$1;
			this.#openedPromise.resolve({
				extensions,
				protocol,
				readable: readable$1,
				writable: writable$1
			});
		}
		/** @type {import('../websocket').Handler['onMessage']} */
		#onMessage(type, data$1) {
			if (this.#handler.readyState !== states.OPEN) return;
			let chunk;
			if (type === opcodes.TEXT) try {
				chunk = utf8Decode(data$1);
			} catch {
				failWebsocketConnection(this.#handler, "Received invalid UTF-8 in text frame.");
				return;
			}
			else if (type === opcodes.BINARY) chunk = new Uint8Array(data$1.buffer, data$1.byteOffset, data$1.byteLength);
			this.#readableStreamController.enqueue(chunk);
		}
		/** @type {import('../websocket').Handler['onSocketClose']} */
		#onSocketClose() {
			const wasClean = this.#handler.closeState.has(sentCloseFrameState.SENT) && this.#handler.closeState.has(sentCloseFrameState.RECEIVED);
			this.#handler.readyState = states.CLOSED;
			if (this.#handshakeAborted) return;
			if (!this.#handler.wasEverConnected) this.#openedPromise.reject(new WebSocketError("Socket never opened"));
			const result = this.#parser.closingInfo;
			let code = result?.code ?? 1005;
			if (!this.#handler.closeState.has(sentCloseFrameState.SENT) && !this.#handler.closeState.has(sentCloseFrameState.RECEIVED)) code = 1006;
			const reason = result?.reason == null ? "" : utf8DecodeBytes(Buffer.from(result.reason));
			if (wasClean) {
				this.#readableStreamController.close();
				if (!this.#writableStream.locked) this.#writableStream.abort(new DOMException("A closed WebSocketStream cannot be written to", "InvalidStateError"));
				this.#closedPromise.resolve({
					closeCode: code,
					reason
				});
			} else {
				const error$1 = createUnvalidatedWebSocketError("unclean close", code, reason);
				this.#readableStreamController.error(error$1);
				this.#writableStream.abort(error$1);
				this.#closedPromise.reject(error$1);
			}
		}
		#closeUsingReason(reason) {
			let code = null;
			let reasonString = "";
			if (webidl$1.is.WebSocketError(reason)) {
				code = reason.closeCode;
				reasonString = reason.reason;
			}
			closeWebSocketConnection(this.#handler, code, reasonString);
		}
		#cancel(reason) {
			this.#closeUsingReason(reason);
		}
	};
	Object.defineProperties(WebSocketStream.prototype, {
		url: kEnumerableProperty$1,
		opened: kEnumerableProperty$1,
		closed: kEnumerableProperty$1,
		close: kEnumerableProperty$1,
		[Symbol.toStringTag]: {
			value: "WebSocketStream",
			writable: false,
			enumerable: false,
			configurable: true
		}
	});
	webidl$1.converters.WebSocketStreamOptions = webidl$1.dictionaryConverter([{
		key: "protocols",
		converter: webidl$1.sequenceConverter(webidl$1.converters.USVString),
		defaultValue: () => []
	}, {
		key: "signal",
		converter: webidl$1.nullableConverter(webidl$1.converters.AbortSignal),
		defaultValue: () => null
	}]);
	webidl$1.converters.WebSocketCloseInfo = webidl$1.dictionaryConverter([{
		key: "closeCode",
		converter: (V) => webidl$1.converters["unsigned short"](V, { enforceRange: true })
	}, {
		key: "reason",
		converter: webidl$1.converters.USVString,
		defaultValue: () => ""
	}]);
	module.exports = { WebSocketStream };
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/eventsource/util.js
var require_util = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/eventsource/util.js"(exports, module) {
	/**
	* Checks if the given value is a valid LastEventId.
	* @param {string} value
	* @returns {boolean}
	*/
	function isValidLastEventId$1(value) {
		return value.indexOf("\0") === -1;
	}
	/**
	* Checks if the given value is a base 10 digit.
	* @param {string} value
	* @returns {boolean}
	*/
	function isASCIINumber$1(value) {
		if (value.length === 0) return false;
		for (let i$1 = 0; i$1 < value.length; i$1++) if (value.charCodeAt(i$1) < 48 || value.charCodeAt(i$1) > 57) return false;
		return true;
	}
	function delay$2(ms) {
		return new Promise((resolve$1) => {
			setTimeout(resolve$1, ms);
		});
	}
	module.exports = {
		isValidLastEventId: isValidLastEventId$1,
		isASCIINumber: isASCIINumber$1,
		delay: delay$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/eventsource/eventsource-stream.js
var require_eventsource_stream = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/eventsource/eventsource-stream.js"(exports, module) {
	const { Transform: Transform$1 } = __require("node:stream");
	const { isASCIINumber, isValidLastEventId } = require_util();
	/**
	* @type {number[]} BOM
	*/
	const BOM = [
		239,
		187,
		191
	];
	/**
	* @type {10} LF
	*/
	const LF$1 = 10;
	/**
	* @type {13} CR
	*/
	const CR$1 = 13;
	/**
	* @type {58} COLON
	*/
	const COLON$1 = 58;
	/**
	* @type {32} SPACE
	*/
	const SPACE = 32;
	/**
	* @typedef {object} EventSourceStreamEvent
	* @type {object}
	* @property {string} [event] The event type.
	* @property {string} [data] The data of the message.
	* @property {string} [id] A unique ID for the event.
	* @property {string} [retry] The reconnection time, in milliseconds.
	*/
	/**
	* @typedef eventSourceSettings
	* @type {object}
	* @property {string} [lastEventId] The last event ID received from the server.
	* @property {string} [origin] The origin of the event source.
	* @property {number} [reconnectionTime] The reconnection time, in milliseconds.
	*/
	var EventSourceStream$1 = class extends Transform$1 {
		/**
		* @type {eventSourceSettings}
		*/
		state;
		/**
		* Leading byte-order-mark check.
		* @type {boolean}
		*/
		checkBOM = true;
		/**
		* @type {boolean}
		*/
		crlfCheck = false;
		/**
		* @type {boolean}
		*/
		eventEndCheck = false;
		/**
		* @type {Buffer|null}
		*/
		buffer = null;
		pos = 0;
		event = {
			data: void 0,
			event: void 0,
			id: void 0,
			retry: void 0
		};
		/**
		* @param {object} options
		* @param {boolean} [options.readableObjectMode]
		* @param {eventSourceSettings} [options.eventSourceSettings]
		* @param {(chunk: any, encoding?: BufferEncoding | undefined) => boolean} [options.push]
		*/
		constructor(options = {}) {
			options.readableObjectMode = true;
			super(options);
			this.state = options.eventSourceSettings || {};
			if (options.push) this.push = options.push;
		}
		/**
		* @param {Buffer} chunk
		* @param {string} _encoding
		* @param {Function} callback
		* @returns {void}
		*/
		_transform(chunk, _encoding, callback) {
			if (chunk.length === 0) {
				callback();
				return;
			}
			if (this.buffer) this.buffer = Buffer.concat([this.buffer, chunk]);
			else this.buffer = chunk;
			if (this.checkBOM) switch (this.buffer.length) {
				case 1:
					if (this.buffer[0] === BOM[0]) {
						callback();
						return;
					}
					this.checkBOM = false;
					callback();
					return;
				case 2:
					if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1]) {
						callback();
						return;
					}
					this.checkBOM = false;
					break;
				case 3:
					if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1] && this.buffer[2] === BOM[2]) {
						this.buffer = Buffer.alloc(0);
						this.checkBOM = false;
						callback();
						return;
					}
					this.checkBOM = false;
					break;
				default:
					if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1] && this.buffer[2] === BOM[2]) this.buffer = this.buffer.subarray(3);
					this.checkBOM = false;
					break;
			}
			while (this.pos < this.buffer.length) {
				if (this.eventEndCheck) {
					if (this.crlfCheck) {
						if (this.buffer[this.pos] === LF$1) {
							this.buffer = this.buffer.subarray(this.pos + 1);
							this.pos = 0;
							this.crlfCheck = false;
							continue;
						}
						this.crlfCheck = false;
					}
					if (this.buffer[this.pos] === LF$1 || this.buffer[this.pos] === CR$1) {
						if (this.buffer[this.pos] === CR$1) this.crlfCheck = true;
						this.buffer = this.buffer.subarray(this.pos + 1);
						this.pos = 0;
						if (this.event.data !== void 0 || this.event.event || this.event.id || this.event.retry) this.processEvent(this.event);
						this.clearEvent();
						continue;
					}
					this.eventEndCheck = false;
					continue;
				}
				if (this.buffer[this.pos] === LF$1 || this.buffer[this.pos] === CR$1) {
					if (this.buffer[this.pos] === CR$1) this.crlfCheck = true;
					this.parseLine(this.buffer.subarray(0, this.pos), this.event);
					this.buffer = this.buffer.subarray(this.pos + 1);
					this.pos = 0;
					this.eventEndCheck = true;
					continue;
				}
				this.pos++;
			}
			callback();
		}
		/**
		* @param {Buffer} line
		* @param {EventSourceStreamEvent} event
		*/
		parseLine(line, event) {
			if (line.length === 0) return;
			const colonPosition = line.indexOf(COLON$1);
			if (colonPosition === 0) return;
			let field = "";
			let value = "";
			if (colonPosition !== -1) {
				field = line.subarray(0, colonPosition).toString("utf8");
				let valueStart = colonPosition + 1;
				if (line[valueStart] === SPACE) ++valueStart;
				value = line.subarray(valueStart).toString("utf8");
			} else {
				field = line.toString("utf8");
				value = "";
			}
			switch (field) {
				case "data":
					if (event[field] === void 0) event[field] = value;
					else event[field] += `\n${value}`;
					break;
				case "retry":
					if (isASCIINumber(value)) event[field] = value;
					break;
				case "id":
					if (isValidLastEventId(value)) event[field] = value;
					break;
				case "event":
					if (value.length > 0) event[field] = value;
					break;
			}
		}
		/**
		* @param {EventSourceStreamEvent} event
		*/
		processEvent(event) {
			if (event.retry && isASCIINumber(event.retry)) this.state.reconnectionTime = parseInt(event.retry, 10);
			if (event.id && isValidLastEventId(event.id)) this.state.lastEventId = event.id;
			if (event.data !== void 0) this.push({
				type: event.event || "message",
				options: {
					data: event.data,
					lastEventId: this.state.lastEventId,
					origin: this.state.origin
				}
			});
		}
		clearEvent() {
			this.event = {
				data: void 0,
				event: void 0,
				id: void 0,
				retry: void 0
			};
		}
	};
	module.exports = { EventSourceStream: EventSourceStream$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/eventsource/eventsource.js
var require_eventsource = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/lib/web/eventsource/eventsource.js"(exports, module) {
	const { pipeline } = __require("node:stream");
	const { fetching } = require_fetch();
	const { makeRequest } = require_request();
	const { webidl } = require_webidl();
	const { EventSourceStream } = require_eventsource_stream();
	const { parseMIMEType: parseMIMEType$1 } = require_data_url();
	const { createFastMessageEvent } = require_events();
	const { isNetworkError } = require_response();
	const { delay: delay$1 } = require_util();
	const { kEnumerableProperty } = require_util$5();
	const { environmentSettingsObject } = require_util$4();
	let experimentalWarned = false;
	/**
	* A reconnection time, in milliseconds. This must initially be an implementation-defined value,
	* probably in the region of a few seconds.
	*
	* In Comparison:
	* - Chrome uses 3000ms.
	* - Deno uses 5000ms.
	*
	* @type {3000}
	*/
	const defaultReconnectionTime = 3e3;
	/**
	* The readyState attribute represents the state of the connection.
	* @typedef ReadyState
	* @type {0|1|2}
	* @readonly
	* @see https://html.spec.whatwg.org/multipage/server-sent-events.html#dom-eventsource-readystate-dev
	*/
	/**
	* The connection has not yet been established, or it was closed and the user
	* agent is reconnecting.
	* @type {0}
	*/
	const CONNECTING = 0;
	/**
	* The user agent has an open connection and is dispatching events as it
	* receives them.
	* @type {1}
	*/
	const OPEN = 1;
	/**
	* The connection is not open, and the user agent is not trying to reconnect.
	* @type {2}
	*/
	const CLOSED = 2;
	/**
	* Requests for the element will have their mode set to "cors" and their credentials mode set to "same-origin".
	* @type {'anonymous'}
	*/
	const ANONYMOUS = "anonymous";
	/**
	* Requests for the element will have their mode set to "cors" and their credentials mode set to "include".
	* @type {'use-credentials'}
	*/
	const USE_CREDENTIALS = "use-credentials";
	/**
	* The EventSource interface is used to receive server-sent events. It
	* connects to a server over HTTP and receives events in text/event-stream
	* format without closing the connection.
	* @extends {EventTarget}
	* @see https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events
	* @api public
	*/
	var EventSource$1 = class EventSource$1 extends EventTarget {
		#events = {
			open: null,
			error: null,
			message: null
		};
		#url;
		#withCredentials = false;
		/**
		* @type {ReadyState}
		*/
		#readyState = CONNECTING;
		#request = null;
		#controller = null;
		#dispatcher;
		/**
		* @type {import('./eventsource-stream').eventSourceSettings}
		*/
		#state;
		/**
		* Creates a new EventSource object.
		* @param {string} url
		* @param {EventSourceInit} [eventSourceInitDict={}]
		* @see https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface
		*/
		constructor(url, eventSourceInitDict = {}) {
			super();
			webidl.util.markAsUncloneable(this);
			const prefix = "EventSource constructor";
			webidl.argumentLengthCheck(arguments, 1, prefix);
			if (!experimentalWarned) {
				experimentalWarned = true;
				process.emitWarning("EventSource is experimental, expect them to change at any time.", { code: "UNDICI-ES" });
			}
			url = webidl.converters.USVString(url);
			eventSourceInitDict = webidl.converters.EventSourceInitDict(eventSourceInitDict, prefix, "eventSourceInitDict");
			this.#dispatcher = eventSourceInitDict.dispatcher;
			this.#state = {
				lastEventId: "",
				reconnectionTime: defaultReconnectionTime
			};
			const settings = environmentSettingsObject;
			let urlRecord;
			try {
				urlRecord = new URL(url, settings.settingsObject.baseUrl);
				this.#state.origin = urlRecord.origin;
			} catch (e) {
				throw new DOMException(e, "SyntaxError");
			}
			this.#url = urlRecord.href;
			let corsAttributeState = ANONYMOUS;
			if (eventSourceInitDict.withCredentials === true) {
				corsAttributeState = USE_CREDENTIALS;
				this.#withCredentials = true;
			}
			const initRequest = {
				redirect: "follow",
				keepalive: true,
				mode: "cors",
				credentials: corsAttributeState === "anonymous" ? "same-origin" : "omit",
				referrer: "no-referrer"
			};
			initRequest.client = environmentSettingsObject.settingsObject;
			initRequest.headersList = [["accept", {
				name: "accept",
				value: "text/event-stream"
			}]];
			initRequest.cache = "no-store";
			initRequest.initiator = "other";
			initRequest.urlList = [new URL(this.#url)];
			this.#request = makeRequest(initRequest);
			this.#connect();
		}
		/**
		* Returns the state of this EventSource object's connection. It can have the
		* values described below.
		* @returns {ReadyState}
		* @readonly
		*/
		get readyState() {
			return this.#readyState;
		}
		/**
		* Returns the URL providing the event stream.
		* @readonly
		* @returns {string}
		*/
		get url() {
			return this.#url;
		}
		/**
		* Returns a boolean indicating whether the EventSource object was
		* instantiated with CORS credentials set (true), or not (false, the default).
		*/
		get withCredentials() {
			return this.#withCredentials;
		}
		#connect() {
			if (this.#readyState === CLOSED) return;
			this.#readyState = CONNECTING;
			const fetchParams = {
				request: this.#request,
				dispatcher: this.#dispatcher
			};
			const processEventSourceEndOfBody = (response) => {
				if (!isNetworkError(response)) return this.#reconnect();
			};
			fetchParams.processResponseEndOfBody = processEventSourceEndOfBody;
			fetchParams.processResponse = (response) => {
				if (isNetworkError(response)) if (response.aborted) {
					this.close();
					this.dispatchEvent(new Event("error"));
					return;
				} else {
					this.#reconnect();
					return;
				}
				const contentType = response.headersList.get("content-type", true);
				const mimeType = contentType !== null ? parseMIMEType$1(contentType) : "failure";
				const contentTypeValid = mimeType !== "failure" && mimeType.essence === "text/event-stream";
				if (response.status !== 200 || contentTypeValid === false) {
					this.close();
					this.dispatchEvent(new Event("error"));
					return;
				}
				this.#readyState = OPEN;
				this.dispatchEvent(new Event("open"));
				this.#state.origin = response.urlList[response.urlList.length - 1].origin;
				const eventSourceStream = new EventSourceStream({
					eventSourceSettings: this.#state,
					push: (event) => {
						this.dispatchEvent(createFastMessageEvent(event.type, event.options));
					}
				});
				pipeline(response.body.stream, eventSourceStream, (error$1) => {
					if (error$1?.aborted === false) {
						this.close();
						this.dispatchEvent(new Event("error"));
					}
				});
			};
			this.#controller = fetching(fetchParams);
		}
		/**
		* @see https://html.spec.whatwg.org/multipage/server-sent-events.html#sse-processing-model
		* @returns {Promise<void>}
		*/
		async #reconnect() {
			if (this.#readyState === CLOSED) return;
			this.#readyState = CONNECTING;
			this.dispatchEvent(new Event("error"));
			await delay$1(this.#state.reconnectionTime);
			if (this.#readyState !== CONNECTING) return;
			if (this.#state.lastEventId.length) this.#request.headersList.set("last-event-id", this.#state.lastEventId, true);
			this.#connect();
		}
		/**
		* Closes the connection, if any, and sets the readyState attribute to
		* CLOSED.
		*/
		close() {
			webidl.brandCheck(this, EventSource$1);
			if (this.#readyState === CLOSED) return;
			this.#readyState = CLOSED;
			this.#controller.abort();
			this.#request = null;
		}
		get onopen() {
			return this.#events.open;
		}
		set onopen(fn) {
			if (this.#events.open) this.removeEventListener("open", this.#events.open);
			if (typeof fn === "function") {
				this.#events.open = fn;
				this.addEventListener("open", fn);
			} else this.#events.open = null;
		}
		get onmessage() {
			return this.#events.message;
		}
		set onmessage(fn) {
			if (this.#events.message) this.removeEventListener("message", this.#events.message);
			if (typeof fn === "function") {
				this.#events.message = fn;
				this.addEventListener("message", fn);
			} else this.#events.message = null;
		}
		get onerror() {
			return this.#events.error;
		}
		set onerror(fn) {
			if (this.#events.error) this.removeEventListener("error", this.#events.error);
			if (typeof fn === "function") {
				this.#events.error = fn;
				this.addEventListener("error", fn);
			} else this.#events.error = null;
		}
	};
	const constantsPropertyDescriptors = {
		CONNECTING: {
			__proto__: null,
			configurable: false,
			enumerable: true,
			value: CONNECTING,
			writable: false
		},
		OPEN: {
			__proto__: null,
			configurable: false,
			enumerable: true,
			value: OPEN,
			writable: false
		},
		CLOSED: {
			__proto__: null,
			configurable: false,
			enumerable: true,
			value: CLOSED,
			writable: false
		}
	};
	Object.defineProperties(EventSource$1, constantsPropertyDescriptors);
	Object.defineProperties(EventSource$1.prototype, constantsPropertyDescriptors);
	Object.defineProperties(EventSource$1.prototype, {
		close: kEnumerableProperty,
		onerror: kEnumerableProperty,
		onmessage: kEnumerableProperty,
		onopen: kEnumerableProperty,
		readyState: kEnumerableProperty,
		url: kEnumerableProperty,
		withCredentials: kEnumerableProperty
	});
	webidl.converters.EventSourceInitDict = webidl.dictionaryConverter([{
		key: "withCredentials",
		converter: webidl.converters.boolean,
		defaultValue: () => false
	}, {
		key: "dispatcher",
		converter: webidl.converters.any
	}]);
	module.exports = {
		EventSource: EventSource$1,
		defaultReconnectionTime
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@7.12.0/node_modules/undici/index.js
var require_undici = __commonJS({ "node_modules/.pnpm/undici@7.12.0/node_modules/undici/index.js"(exports, module) {
	const Client = require_client();
	const Dispatcher = require_dispatcher();
	const Pool = require_pool();
	const BalancedPool = require_balanced_pool();
	const Agent = require_agent();
	const ProxyAgent$1 = require_proxy_agent();
	const EnvHttpProxyAgent = require_env_http_proxy_agent();
	const RetryAgent = require_retry_agent();
	const H2CClient = require_h2c_client();
	const errors = require_errors();
	const util$1 = require_util$5();
	const { InvalidArgumentError: InvalidArgumentError$2 } = errors;
	const api = require_api();
	const buildConnector = require_connect();
	const MockClient = require_mock_client();
	const { MockCallHistory, MockCallHistoryLog } = require_mock_call_history();
	const MockAgent = require_mock_agent();
	const MockPool = require_mock_pool();
	const mockErrors = require_mock_errors();
	const RetryHandler = require_retry_handler();
	const { getGlobalDispatcher, setGlobalDispatcher } = require_global();
	const DecoratorHandler = require_decorator_handler();
	const RedirectHandler = require_redirect_handler();
	Object.assign(Dispatcher.prototype, api);
	module.exports.Dispatcher = Dispatcher;
	module.exports.Client = Client;
	module.exports.Pool = Pool;
	module.exports.BalancedPool = BalancedPool;
	module.exports.Agent = Agent;
	module.exports.ProxyAgent = ProxyAgent$1;
	module.exports.EnvHttpProxyAgent = EnvHttpProxyAgent;
	module.exports.RetryAgent = RetryAgent;
	module.exports.H2CClient = H2CClient;
	module.exports.RetryHandler = RetryHandler;
	module.exports.DecoratorHandler = DecoratorHandler;
	module.exports.RedirectHandler = RedirectHandler;
	module.exports.interceptors = {
		redirect: require_redirect(),
		responseError: require_response_error(),
		retry: require_retry(),
		dump: require_dump(),
		dns: require_dns(),
		cache: require_cache$1()
	};
	module.exports.cacheStores = { MemoryCacheStore: require_memory_cache_store() };
	const SqliteCacheStore = require_sqlite_cache_store();
	module.exports.cacheStores.SqliteCacheStore = SqliteCacheStore;
	module.exports.buildConnector = buildConnector;
	module.exports.errors = errors;
	module.exports.util = {
		parseHeaders: util$1.parseHeaders,
		headerNameToString: util$1.headerNameToString
	};
	function makeDispatcher(fn) {
		return (url, opts, handler$1) => {
			if (typeof opts === "function") {
				handler$1 = opts;
				opts = null;
			}
			if (!url || typeof url !== "string" && typeof url !== "object" && !(url instanceof URL)) throw new InvalidArgumentError$2("invalid url");
			if (opts != null && typeof opts !== "object") throw new InvalidArgumentError$2("invalid opts");
			if (opts && opts.path != null) {
				if (typeof opts.path !== "string") throw new InvalidArgumentError$2("invalid opts.path");
				let path$9 = opts.path;
				if (!opts.path.startsWith("/")) path$9 = `/${path$9}`;
				url = new URL(util$1.parseOrigin(url).origin + path$9);
			} else {
				if (!opts) opts = typeof url === "object" ? url : {};
				url = util$1.parseURL(url);
			}
			const { agent, dispatcher = getGlobalDispatcher() } = opts;
			if (agent) throw new InvalidArgumentError$2("unsupported opts.agent. Did you mean opts.client?");
			return fn.call(dispatcher, {
				...opts,
				origin: url.origin,
				path: url.search ? `${url.pathname}${url.search}` : url.pathname,
				method: opts.method || (opts.body ? "PUT" : "GET")
			}, handler$1);
		};
	}
	module.exports.setGlobalDispatcher = setGlobalDispatcher;
	module.exports.getGlobalDispatcher = getGlobalDispatcher;
	const fetchImpl = require_fetch().fetch;
	module.exports.fetch = async function fetch$4(init, options = void 0) {
		try {
			return await fetchImpl(init, options);
		} catch (err) {
			if (err && typeof err === "object") Error.captureStackTrace(err);
			throw err;
		}
	};
	module.exports.Headers = require_headers().Headers;
	module.exports.Response = require_response().Response;
	module.exports.Request = require_request().Request;
	module.exports.FormData = require_formdata().FormData;
	const { setGlobalOrigin, getGlobalOrigin } = require_global$1();
	module.exports.setGlobalOrigin = setGlobalOrigin;
	module.exports.getGlobalOrigin = getGlobalOrigin;
	const { CacheStorage } = require_cachestorage();
	const { kConstruct } = require_symbols();
	module.exports.caches = new CacheStorage(kConstruct);
	const { deleteCookie, getCookies, getSetCookies, setCookie, parseCookie } = require_cookies();
	module.exports.deleteCookie = deleteCookie;
	module.exports.getCookies = getCookies;
	module.exports.getSetCookies = getSetCookies;
	module.exports.setCookie = setCookie;
	module.exports.parseCookie = parseCookie;
	const { parseMIMEType, serializeAMimeType } = require_data_url();
	module.exports.parseMIMEType = parseMIMEType;
	module.exports.serializeAMimeType = serializeAMimeType;
	const { CloseEvent, ErrorEvent, MessageEvent } = require_events();
	const { WebSocket, ping } = require_websocket();
	module.exports.WebSocket = WebSocket;
	module.exports.CloseEvent = CloseEvent;
	module.exports.ErrorEvent = ErrorEvent;
	module.exports.MessageEvent = MessageEvent;
	module.exports.ping = ping;
	module.exports.WebSocketStream = require_websocketstream().WebSocketStream;
	module.exports.WebSocketError = require_websocketerror().WebSocketError;
	module.exports.request = makeDispatcher(api.request);
	module.exports.stream = makeDispatcher(api.stream);
	module.exports.pipeline = makeDispatcher(api.pipeline);
	module.exports.connect = makeDispatcher(api.connect);
	module.exports.upgrade = makeDispatcher(api.upgrade);
	module.exports.MockClient = MockClient;
	module.exports.MockCallHistory = MockCallHistory;
	module.exports.MockCallHistoryLog = MockCallHistoryLog;
	module.exports.MockPool = MockPool;
	module.exports.MockAgent = MockAgent;
	module.exports.mockErrors = mockErrors;
	const { EventSource } = require_eventsource();
	module.exports.EventSource = EventSource;
	function install() {
		globalThis.fetch = module.exports.fetch;
		globalThis.Headers = module.exports.Headers;
		globalThis.Response = module.exports.Response;
		globalThis.Request = module.exports.Request;
		globalThis.FormData = module.exports.FormData;
		globalThis.WebSocket = module.exports.WebSocket;
		globalThis.CloseEvent = module.exports.CloseEvent;
		globalThis.ErrorEvent = module.exports.ErrorEvent;
		globalThis.MessageEvent = module.exports.MessageEvent;
		globalThis.EventSource = module.exports.EventSource;
	}
	module.exports.install = install;
} });

//#endregion
//#region node_modules/.pnpm/@ai-sdk+provider@1.1.3/node_modules/@ai-sdk/provider/dist/index.mjs
var marker$1 = "vercel.ai.error";
var symbol$1 = Symbol.for(marker$1);
var _a$1;
var _AISDKError = class _AISDKError$1 extends Error {
	/**
	* Creates an AI SDK Error.
	*
	* @param {Object} params - The parameters for creating the error.
	* @param {string} params.name - The name of the error.
	* @param {string} params.message - The error message.
	* @param {unknown} [params.cause] - The underlying cause of the error.
	*/
	constructor({ name: name14$1, message, cause }) {
		super(message);
		this[_a$1] = true;
		this.name = name14$1;
		this.cause = cause;
	}
	/**
	* Checks if the given error is an AI SDK Error.
	* @param {unknown} error - The error to check.
	* @returns {boolean} True if the error is an AI SDK Error, false otherwise.
	*/
	static isInstance(error$1) {
		return _AISDKError$1.hasMarker(error$1, marker$1);
	}
	static hasMarker(error$1, marker15$1) {
		const markerSymbol = Symbol.for(marker15$1);
		return error$1 != null && typeof error$1 === "object" && markerSymbol in error$1 && typeof error$1[markerSymbol] === "boolean" && error$1[markerSymbol] === true;
	}
};
_a$1 = symbol$1;
var AISDKError = _AISDKError;
var name$1 = "AI_APICallError";
var marker2$1 = `vercel.ai.error.${name$1}`;
var symbol2$1 = Symbol.for(marker2$1);
var _a2$1;
var APICallError = class extends AISDKError {
	constructor({ message, url, requestBodyValues, statusCode, responseHeaders, responseBody, cause, isRetryable = statusCode != null && (statusCode === 408 || statusCode === 409 || statusCode === 429 || statusCode >= 500), data: data$1 }) {
		super({
			name: name$1,
			message,
			cause
		});
		this[_a2$1] = true;
		this.url = url;
		this.requestBodyValues = requestBodyValues;
		this.statusCode = statusCode;
		this.responseHeaders = responseHeaders;
		this.responseBody = responseBody;
		this.isRetryable = isRetryable;
		this.data = data$1;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker2$1);
	}
};
_a2$1 = symbol2$1;
var name2$1 = "AI_EmptyResponseBodyError";
var marker3$1 = `vercel.ai.error.${name2$1}`;
var symbol3$1 = Symbol.for(marker3$1);
var _a3$1;
var EmptyResponseBodyError = class extends AISDKError {
	constructor({ message = "Empty response body" } = {}) {
		super({
			name: name2$1,
			message
		});
		this[_a3$1] = true;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker3$1);
	}
};
_a3$1 = symbol3$1;
function getErrorMessage$1(error$1) {
	if (error$1 == null) return "unknown error";
	if (typeof error$1 === "string") return error$1;
	if (error$1 instanceof Error) return error$1.message;
	return JSON.stringify(error$1);
}
var name3$1 = "AI_InvalidArgumentError";
var marker4$1 = `vercel.ai.error.${name3$1}`;
var symbol4$1 = Symbol.for(marker4$1);
var _a4$1;
var InvalidArgumentError$1 = class extends AISDKError {
	constructor({ message, cause, argument }) {
		super({
			name: name3$1,
			message,
			cause
		});
		this[_a4$1] = true;
		this.argument = argument;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker4$1);
	}
};
_a4$1 = symbol4$1;
var name4$1 = "AI_InvalidPromptError";
var marker5$1 = `vercel.ai.error.${name4$1}`;
var symbol5$1 = Symbol.for(marker5$1);
var _a5$1;
var InvalidPromptError = class extends AISDKError {
	constructor({ prompt, message, cause }) {
		super({
			name: name4$1,
			message: `Invalid prompt: ${message}`,
			cause
		});
		this[_a5$1] = true;
		this.prompt = prompt;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker5$1);
	}
};
_a5$1 = symbol5$1;
var name5$1 = "AI_InvalidResponseDataError";
var marker6$1 = `vercel.ai.error.${name5$1}`;
var symbol6$1 = Symbol.for(marker6$1);
var _a6$1;
var InvalidResponseDataError = class extends AISDKError {
	constructor({ data: data$1, message = `Invalid response data: ${JSON.stringify(data$1)}.` }) {
		super({
			name: name5$1,
			message
		});
		this[_a6$1] = true;
		this.data = data$1;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker6$1);
	}
};
_a6$1 = symbol6$1;
var name6$1 = "AI_JSONParseError";
var marker7$1 = `vercel.ai.error.${name6$1}`;
var symbol7$1 = Symbol.for(marker7$1);
var _a7$1;
var JSONParseError = class extends AISDKError {
	constructor({ text: text$1, cause }) {
		super({
			name: name6$1,
			message: `JSON parsing failed: Text: ${text$1}.
Error message: ${getErrorMessage$1(cause)}`,
			cause
		});
		this[_a7$1] = true;
		this.text = text$1;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker7$1);
	}
};
_a7$1 = symbol7$1;
var name7$1 = "AI_LoadAPIKeyError";
var marker8$1 = `vercel.ai.error.${name7$1}`;
var symbol8$1 = Symbol.for(marker8$1);
var _a8$1;
var LoadAPIKeyError = class extends AISDKError {
	constructor({ message }) {
		super({
			name: name7$1,
			message
		});
		this[_a8$1] = true;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker8$1);
	}
};
_a8$1 = symbol8$1;
var name8$1 = "AI_LoadSettingError";
var marker9$1 = `vercel.ai.error.${name8$1}`;
var symbol9$1 = Symbol.for(marker9$1);
var _a9$1;
_a9$1 = symbol9$1;
var name9$1 = "AI_NoContentGeneratedError";
var marker10$1 = `vercel.ai.error.${name9$1}`;
var symbol10$1 = Symbol.for(marker10$1);
var _a10$1;
_a10$1 = symbol10$1;
var name10$1 = "AI_NoSuchModelError";
var marker11$1 = `vercel.ai.error.${name10$1}`;
var symbol11$1 = Symbol.for(marker11$1);
var _a11$1;
var NoSuchModelError = class extends AISDKError {
	constructor({ errorName = name10$1, modelId, modelType, message = `No such ${modelType}: ${modelId}` }) {
		super({
			name: errorName,
			message
		});
		this[_a11$1] = true;
		this.modelId = modelId;
		this.modelType = modelType;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker11$1);
	}
};
_a11$1 = symbol11$1;
var name11$1 = "AI_TooManyEmbeddingValuesForCallError";
var marker12$1 = `vercel.ai.error.${name11$1}`;
var symbol12$1 = Symbol.for(marker12$1);
var _a12$1;
var TooManyEmbeddingValuesForCallError = class extends AISDKError {
	constructor(options) {
		super({
			name: name11$1,
			message: `Too many values for a single embedding call. The ${options.provider} model "${options.modelId}" can only embed up to ${options.maxEmbeddingsPerCall} values per call, but ${options.values.length} values were provided.`
		});
		this[_a12$1] = true;
		this.provider = options.provider;
		this.modelId = options.modelId;
		this.maxEmbeddingsPerCall = options.maxEmbeddingsPerCall;
		this.values = options.values;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker12$1);
	}
};
_a12$1 = symbol12$1;
var name12$1 = "AI_TypeValidationError";
var marker13$1 = `vercel.ai.error.${name12$1}`;
var symbol13$1 = Symbol.for(marker13$1);
var _a13$1;
var _TypeValidationError = class _TypeValidationError$1 extends AISDKError {
	constructor({ value, cause }) {
		super({
			name: name12$1,
			message: `Type validation failed: Value: ${JSON.stringify(value)}.
Error message: ${getErrorMessage$1(cause)}`,
			cause
		});
		this[_a13$1] = true;
		this.value = value;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker13$1);
	}
	/**
	* Wraps an error into a TypeValidationError.
	* If the cause is already a TypeValidationError with the same value, it returns the cause.
	* Otherwise, it creates a new TypeValidationError.
	*
	* @param {Object} params - The parameters for wrapping the error.
	* @param {unknown} params.value - The value that failed validation.
	* @param {unknown} params.cause - The original error or cause of the validation failure.
	* @returns {TypeValidationError} A TypeValidationError instance.
	*/
	static wrap({ value, cause }) {
		return _TypeValidationError$1.isInstance(cause) && cause.value === value ? cause : new _TypeValidationError$1({
			value,
			cause
		});
	}
};
_a13$1 = symbol13$1;
var TypeValidationError = _TypeValidationError;
var name13$1 = "AI_UnsupportedFunctionalityError";
var marker14$1 = `vercel.ai.error.${name13$1}`;
var symbol14$1 = Symbol.for(marker14$1);
var _a14$1;
var UnsupportedFunctionalityError = class extends AISDKError {
	constructor({ functionality, message = `'${functionality}' functionality not supported.` }) {
		super({
			name: name13$1,
			message
		});
		this[_a14$1] = true;
		this.functionality = functionality;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker14$1);
	}
};
_a14$1 = symbol14$1;

//#endregion
//#region node_modules/.pnpm/nanoid@3.3.8/node_modules/nanoid/non-secure/index.js
let customAlphabet = (alphabet, defaultSize = 21) => {
	return (size = defaultSize) => {
		let id$1 = "";
		let i$1 = size | 0;
		while (i$1--) id$1 += alphabet[Math.random() * alphabet.length | 0];
		return id$1;
	};
};

//#endregion
//#region node_modules/.pnpm/secure-json-parse@2.7.0/node_modules/secure-json-parse/index.js
var require_secure_json_parse = __commonJS({ "node_modules/.pnpm/secure-json-parse@2.7.0/node_modules/secure-json-parse/index.js"(exports, module) {
	const hasBuffer = typeof Buffer !== "undefined";
	const suspectProtoRx = /"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*:/;
	const suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
	function _parse(text$1, reviver, options) {
		if (options == null) {
			if (reviver !== null && typeof reviver === "object") {
				options = reviver;
				reviver = void 0;
			}
		}
		if (hasBuffer && Buffer.isBuffer(text$1)) text$1 = text$1.toString();
		if (text$1 && text$1.charCodeAt(0) === 65279) text$1 = text$1.slice(1);
		const obj = JSON.parse(text$1, reviver);
		if (obj === null || typeof obj !== "object") return obj;
		const protoAction = options && options.protoAction || "error";
		const constructorAction = options && options.constructorAction || "error";
		if (protoAction === "ignore" && constructorAction === "ignore") return obj;
		if (protoAction !== "ignore" && constructorAction !== "ignore") {
			if (suspectProtoRx.test(text$1) === false && suspectConstructorRx.test(text$1) === false) return obj;
		} else if (protoAction !== "ignore" && constructorAction === "ignore") {
			if (suspectProtoRx.test(text$1) === false) return obj;
		} else if (suspectConstructorRx.test(text$1) === false) return obj;
		return filter(obj, {
			protoAction,
			constructorAction,
			safe: options && options.safe
		});
	}
	function filter(obj, { protoAction = "error", constructorAction = "error", safe } = {}) {
		let next = [obj];
		while (next.length) {
			const nodes = next;
			next = [];
			for (const node of nodes) {
				if (protoAction !== "ignore" && Object.prototype.hasOwnProperty.call(node, "__proto__")) {
					if (safe === true) return null;
					else if (protoAction === "error") throw new SyntaxError("Object contains forbidden prototype property");
					delete node.__proto__;
				}
				if (constructorAction !== "ignore" && Object.prototype.hasOwnProperty.call(node, "constructor") && Object.prototype.hasOwnProperty.call(node.constructor, "prototype")) {
					if (safe === true) return null;
					else if (constructorAction === "error") throw new SyntaxError("Object contains forbidden prototype property");
					delete node.constructor;
				}
				for (const key in node) {
					const value = node[key];
					if (value && typeof value === "object") next.push(value);
				}
			}
		}
		return obj;
	}
	function parse$2(text$1, reviver, options) {
		const stackTraceLimit = Error.stackTraceLimit;
		Error.stackTraceLimit = 0;
		try {
			return _parse(text$1, reviver, options);
		} finally {
			Error.stackTraceLimit = stackTraceLimit;
		}
	}
	function safeParse(text$1, reviver) {
		const stackTraceLimit = Error.stackTraceLimit;
		Error.stackTraceLimit = 0;
		try {
			return _parse(text$1, reviver, { safe: true });
		} catch (_e) {
			return null;
		} finally {
			Error.stackTraceLimit = stackTraceLimit;
		}
	}
	module.exports = parse$2;
	module.exports.default = parse$2;
	module.exports.parse = parse$2;
	module.exports.safeParse = safeParse;
	module.exports.scan = filter;
} });

//#endregion
//#region node_modules/.pnpm/@ai-sdk+provider-utils@2.2.8_zod@3.25.76/node_modules/@ai-sdk/provider-utils/dist/index.mjs
var import_secure_json_parse = __toESM$1(require_secure_json_parse(), 1);
function combineHeaders(...headers) {
	return headers.reduce((combinedHeaders, currentHeaders) => ({
		...combinedHeaders,
		...currentHeaders != null ? currentHeaders : {}
	}), {});
}
function convertAsyncIteratorToReadableStream(iterator$1) {
	return new ReadableStream({
		async pull(controller) {
			try {
				const { value, done } = await iterator$1.next();
				if (done) controller.close();
				else controller.enqueue(value);
			} catch (error$1) {
				controller.error(error$1);
			}
		},
		cancel() {}
	});
}
async function delay(delayInMs) {
	return delayInMs == null ? Promise.resolve() : new Promise((resolve2) => setTimeout(resolve2, delayInMs));
}
function createEventSourceParserStream() {
	let buffer$1 = "";
	let event = void 0;
	let data$1 = [];
	let lastEventId = void 0;
	let retry = void 0;
	function parseLine(line, controller) {
		if (line === "") {
			dispatchEvent(controller);
			return;
		}
		if (line.startsWith(":")) return;
		const colonIndex = line.indexOf(":");
		if (colonIndex === -1) {
			handleField(line, "");
			return;
		}
		const field = line.slice(0, colonIndex);
		const valueStart = colonIndex + 1;
		const value = valueStart < line.length && line[valueStart] === " " ? line.slice(valueStart + 1) : line.slice(valueStart);
		handleField(field, value);
	}
	function dispatchEvent(controller) {
		if (data$1.length > 0) {
			controller.enqueue({
				event,
				data: data$1.join("\n"),
				id: lastEventId,
				retry
			});
			data$1 = [];
			event = void 0;
			retry = void 0;
		}
	}
	function handleField(field, value) {
		switch (field) {
			case "event":
				event = value;
				break;
			case "data":
				data$1.push(value);
				break;
			case "id":
				lastEventId = value;
				break;
			case "retry":
				const parsedRetry = parseInt(value, 10);
				if (!isNaN(parsedRetry)) retry = parsedRetry;
				break;
		}
	}
	return new TransformStream({
		transform(chunk, controller) {
			const { lines, incompleteLine } = splitLines(buffer$1, chunk);
			buffer$1 = incompleteLine;
			for (let i$1 = 0; i$1 < lines.length; i$1++) parseLine(lines[i$1], controller);
		},
		flush(controller) {
			parseLine(buffer$1, controller);
			dispatchEvent(controller);
		}
	});
}
function splitLines(buffer$1, chunk) {
	const lines = [];
	let currentLine = buffer$1;
	for (let i$1 = 0; i$1 < chunk.length;) {
		const char = chunk[i$1++];
		if (char === "\n") {
			lines.push(currentLine);
			currentLine = "";
		} else if (char === "\r") {
			lines.push(currentLine);
			currentLine = "";
			if (chunk[i$1] === "\n") i$1++;
		} else currentLine += char;
	}
	return {
		lines,
		incompleteLine: currentLine
	};
}
function extractResponseHeaders(response) {
	const headers = {};
	response.headers.forEach((value, key) => {
		headers[key] = value;
	});
	return headers;
}
var createIdGenerator = ({ prefix, size: defaultSize = 16, alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", separator = "-" } = {}) => {
	const generator = customAlphabet(alphabet, defaultSize);
	if (prefix == null) return generator;
	if (alphabet.includes(separator)) throw new InvalidArgumentError$1({
		argument: "separator",
		message: `The separator "${separator}" must not be part of the alphabet "${alphabet}".`
	});
	return (size) => `${prefix}${separator}${generator(size)}`;
};
var generateId = createIdGenerator();
function getErrorMessage(error$1) {
	if (error$1 == null) return "unknown error";
	if (typeof error$1 === "string") return error$1;
	if (error$1 instanceof Error) return error$1.message;
	return JSON.stringify(error$1);
}
function removeUndefinedEntries(record) {
	return Object.fromEntries(Object.entries(record).filter(([_key, value]) => value != null));
}
function isAbortError$1(error$1) {
	return error$1 instanceof Error && (error$1.name === "AbortError" || error$1.name === "TimeoutError");
}
function loadApiKey({ apiKey, environmentVariableName, apiKeyParameterName = "apiKey", description }) {
	if (typeof apiKey === "string") return apiKey;
	if (apiKey != null) throw new LoadAPIKeyError({ message: `${description} API key must be a string.` });
	if (typeof process === "undefined") throw new LoadAPIKeyError({ message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter. Environment variables is not supported in this environment.` });
	apiKey = process.env[environmentVariableName];
	if (apiKey == null) throw new LoadAPIKeyError({ message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter or the ${environmentVariableName} environment variable.` });
	if (typeof apiKey !== "string") throw new LoadAPIKeyError({ message: `${description} API key must be a string. The value of the ${environmentVariableName} environment variable is not a string.` });
	return apiKey;
}
var validatorSymbol = Symbol.for("vercel.ai.validator");
function validator(validate) {
	return {
		[validatorSymbol]: true,
		validate
	};
}
function isValidator(value) {
	return typeof value === "object" && value !== null && validatorSymbol in value && value[validatorSymbol] === true && "validate" in value;
}
function asValidator(value) {
	return isValidator(value) ? value : zodValidator(value);
}
function zodValidator(zodSchema$1) {
	return validator((value) => {
		const result = zodSchema$1.safeParse(value);
		return result.success ? {
			success: true,
			value: result.data
		} : {
			success: false,
			error: result.error
		};
	});
}
function validateTypes({ value, schema: inputSchema }) {
	const result = safeValidateTypes({
		value,
		schema: inputSchema
	});
	if (!result.success) throw TypeValidationError.wrap({
		value,
		cause: result.error
	});
	return result.value;
}
function safeValidateTypes({ value, schema }) {
	const validator2 = asValidator(schema);
	try {
		if (validator2.validate == null) return {
			success: true,
			value
		};
		const result = validator2.validate(value);
		if (result.success) return result;
		return {
			success: false,
			error: TypeValidationError.wrap({
				value,
				cause: result.error
			})
		};
	} catch (error$1) {
		return {
			success: false,
			error: TypeValidationError.wrap({
				value,
				cause: error$1
			})
		};
	}
}
function parseJSON({ text: text$1, schema }) {
	try {
		const value = import_secure_json_parse.default.parse(text$1);
		if (schema == null) return value;
		return validateTypes({
			value,
			schema
		});
	} catch (error$1) {
		if (JSONParseError.isInstance(error$1) || TypeValidationError.isInstance(error$1)) throw error$1;
		throw new JSONParseError({
			text: text$1,
			cause: error$1
		});
	}
}
function safeParseJSON({ text: text$1, schema }) {
	try {
		const value = import_secure_json_parse.default.parse(text$1);
		if (schema == null) return {
			success: true,
			value,
			rawValue: value
		};
		const validationResult = safeValidateTypes({
			value,
			schema
		});
		return validationResult.success ? {
			...validationResult,
			rawValue: value
		} : validationResult;
	} catch (error$1) {
		return {
			success: false,
			error: JSONParseError.isInstance(error$1) ? error$1 : new JSONParseError({
				text: text$1,
				cause: error$1
			})
		};
	}
}
function isParsableJson(input) {
	try {
		import_secure_json_parse.default.parse(input);
		return true;
	} catch (e) {
		return false;
	}
}
function parseProviderOptions({ provider, providerOptions, schema }) {
	if ((providerOptions == null ? void 0 : providerOptions[provider]) == null) return void 0;
	const parsedProviderOptions = safeValidateTypes({
		value: providerOptions[provider],
		schema
	});
	if (!parsedProviderOptions.success) throw new InvalidArgumentError$1({
		argument: "providerOptions",
		message: `invalid ${provider} provider options`,
		cause: parsedProviderOptions.error
	});
	return parsedProviderOptions.value;
}
var getOriginalFetch2 = () => globalThis.fetch;
var postJsonToApi = async ({ url, headers, body, failedResponseHandler, successfulResponseHandler, abortSignal, fetch: fetch$4 }) => postToApi({
	url,
	headers: {
		"Content-Type": "application/json",
		...headers
	},
	body: {
		content: JSON.stringify(body),
		values: body
	},
	failedResponseHandler,
	successfulResponseHandler,
	abortSignal,
	fetch: fetch$4
});
var postFormDataToApi = async ({ url, headers, formData, failedResponseHandler, successfulResponseHandler, abortSignal, fetch: fetch$4 }) => postToApi({
	url,
	headers,
	body: {
		content: formData,
		values: Object.fromEntries(formData.entries())
	},
	failedResponseHandler,
	successfulResponseHandler,
	abortSignal,
	fetch: fetch$4
});
var postToApi = async ({ url, headers = {}, body, successfulResponseHandler, failedResponseHandler, abortSignal, fetch: fetch$4 = getOriginalFetch2() }) => {
	try {
		const response = await fetch$4(url, {
			method: "POST",
			headers: removeUndefinedEntries(headers),
			body: body.content,
			signal: abortSignal
		});
		const responseHeaders = extractResponseHeaders(response);
		if (!response.ok) {
			let errorInformation;
			try {
				errorInformation = await failedResponseHandler({
					response,
					url,
					requestBodyValues: body.values
				});
			} catch (error$1) {
				if (isAbortError$1(error$1) || APICallError.isInstance(error$1)) throw error$1;
				throw new APICallError({
					message: "Failed to process error response",
					cause: error$1,
					statusCode: response.status,
					url,
					responseHeaders,
					requestBodyValues: body.values
				});
			}
			throw errorInformation.value;
		}
		try {
			return await successfulResponseHandler({
				response,
				url,
				requestBodyValues: body.values
			});
		} catch (error$1) {
			if (error$1 instanceof Error) {
				if (isAbortError$1(error$1) || APICallError.isInstance(error$1)) throw error$1;
			}
			throw new APICallError({
				message: "Failed to process successful response",
				cause: error$1,
				statusCode: response.status,
				url,
				responseHeaders,
				requestBodyValues: body.values
			});
		}
	} catch (error$1) {
		if (isAbortError$1(error$1)) throw error$1;
		if (error$1 instanceof TypeError && error$1.message === "fetch failed") {
			const cause = error$1.cause;
			if (cause != null) throw new APICallError({
				message: `Cannot connect to API: ${cause.message}`,
				cause,
				url,
				requestBodyValues: body.values,
				isRetryable: true
			});
		}
		throw error$1;
	}
};
async function resolve(value) {
	if (typeof value === "function") value = value();
	return Promise.resolve(value);
}
var createJsonErrorResponseHandler = ({ errorSchema, errorToMessage, isRetryable }) => async ({ response, url, requestBodyValues }) => {
	const responseBody = await response.text();
	const responseHeaders = extractResponseHeaders(response);
	if (responseBody.trim() === "") return {
		responseHeaders,
		value: new APICallError({
			message: response.statusText,
			url,
			requestBodyValues,
			statusCode: response.status,
			responseHeaders,
			responseBody,
			isRetryable: isRetryable == null ? void 0 : isRetryable(response)
		})
	};
	try {
		const parsedError = parseJSON({
			text: responseBody,
			schema: errorSchema
		});
		return {
			responseHeaders,
			value: new APICallError({
				message: errorToMessage(parsedError),
				url,
				requestBodyValues,
				statusCode: response.status,
				responseHeaders,
				responseBody,
				data: parsedError,
				isRetryable: isRetryable == null ? void 0 : isRetryable(response, parsedError)
			})
		};
	} catch (parseError) {
		return {
			responseHeaders,
			value: new APICallError({
				message: response.statusText,
				url,
				requestBodyValues,
				statusCode: response.status,
				responseHeaders,
				responseBody,
				isRetryable: isRetryable == null ? void 0 : isRetryable(response)
			})
		};
	}
};
var createEventSourceResponseHandler = (chunkSchema$1) => async ({ response }) => {
	const responseHeaders = extractResponseHeaders(response);
	if (response.body == null) throw new EmptyResponseBodyError({});
	return {
		responseHeaders,
		value: response.body.pipeThrough(new TextDecoderStream()).pipeThrough(createEventSourceParserStream()).pipeThrough(new TransformStream({ transform({ data: data$1 }, controller) {
			if (data$1 === "[DONE]") return;
			controller.enqueue(safeParseJSON({
				text: data$1,
				schema: chunkSchema$1
			}));
		} }))
	};
};
var createJsonResponseHandler = (responseSchema$1) => async ({ response, url, requestBodyValues }) => {
	const responseBody = await response.text();
	const parsedResult = safeParseJSON({
		text: responseBody,
		schema: responseSchema$1
	});
	const responseHeaders = extractResponseHeaders(response);
	if (!parsedResult.success) throw new APICallError({
		message: "Invalid JSON response",
		cause: parsedResult.error,
		statusCode: response.status,
		responseHeaders,
		responseBody,
		url,
		requestBodyValues
	});
	return {
		responseHeaders,
		value: parsedResult.value,
		rawValue: parsedResult.rawValue
	};
};
var createBinaryResponseHandler = () => async ({ response, url, requestBodyValues }) => {
	const responseHeaders = extractResponseHeaders(response);
	if (!response.body) throw new APICallError({
		message: "Response body is empty",
		url,
		requestBodyValues,
		statusCode: response.status,
		responseHeaders,
		responseBody: void 0
	});
	try {
		const buffer$1 = await response.arrayBuffer();
		return {
			responseHeaders,
			value: new Uint8Array(buffer$1)
		};
	} catch (error$1) {
		throw new APICallError({
			message: "Failed to read response as array buffer",
			url,
			requestBodyValues,
			statusCode: response.status,
			responseHeaders,
			responseBody: void 0,
			cause: error$1
		});
	}
};
var { btoa, atob: atob$1 } = globalThis;
function convertBase64ToUint8Array(base64String) {
	const base64Url = base64String.replace(/-/g, "+").replace(/_/g, "/");
	const latin1string = atob$1(base64Url);
	return Uint8Array.from(latin1string, (byte) => byte.codePointAt(0));
}
function convertUint8ArrayToBase64(array) {
	let latin1string = "";
	for (let i$1 = 0; i$1 < array.length; i$1++) latin1string += String.fromCodePoint(array[i$1]);
	return btoa(latin1string);
}
function withoutTrailingSlash(url) {
	return url == null ? void 0 : url.replace(/\/$/, "");
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/Options.js
const ignoreOverride = Symbol("Let zodToJsonSchema decide on which parser to use");
const defaultOptions = {
	name: void 0,
	$refStrategy: "root",
	basePath: ["#"],
	effectStrategy: "input",
	pipeStrategy: "all",
	dateStrategy: "format:date-time",
	mapStrategy: "entries",
	removeAdditionalStrategy: "passthrough",
	allowedAdditionalProperties: true,
	rejectedAdditionalProperties: false,
	definitionPath: "definitions",
	target: "jsonSchema7",
	strictUnions: false,
	definitions: {},
	errorMessages: false,
	markdownDescription: false,
	patternStrategy: "escape",
	applyRegexFlags: false,
	emailStrategy: "format:email",
	base64Strategy: "contentEncoding:base64",
	nameStrategy: "ref",
	openAiAnyTypeName: "OpenAiAnyType"
};
const getDefaultOptions = (options) => typeof options === "string" ? {
	...defaultOptions,
	name: options
} : {
	...defaultOptions,
	...options
};

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/Refs.js
const getRefs = (options) => {
	const _options = getDefaultOptions(options);
	const currentPath = _options.name !== void 0 ? [
		..._options.basePath,
		_options.definitionPath,
		_options.name
	] : _options.basePath;
	return {
		..._options,
		flags: { hasReferencedOpenAiAnyType: false },
		currentPath,
		propertyPath: void 0,
		seen: new Map(Object.entries(_options.definitions).map(([name$2, def]) => [def._def, {
			def: def._def,
			path: [
				..._options.basePath,
				_options.definitionPath,
				name$2
			],
			jsonSchema: void 0
		}]))
	};
};

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/errorMessages.js
function addErrorMessage(res, key, errorMessage, refs) {
	if (!refs?.errorMessages) return;
	if (errorMessage) res.errorMessage = {
		...res.errorMessage,
		[key]: errorMessage
	};
}
function setResponseValueAndErrors(res, key, value, errorMessage, refs) {
	res[key] = value;
	addErrorMessage(res, key, errorMessage, refs);
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/getRelativePath.js
const getRelativePath = (pathA, pathB) => {
	let i$1 = 0;
	for (; i$1 < pathA.length && i$1 < pathB.length; i$1++) if (pathA[i$1] !== pathB[i$1]) break;
	return [(pathA.length - i$1).toString(), ...pathB.slice(i$1)].join("/");
};

//#endregion
//#region node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/util.js
var util;
(function(util$40) {
	util$40.assertEqual = (_) => {};
	function assertIs(_arg) {}
	util$40.assertIs = assertIs;
	function assertNever(_x) {
		throw new Error();
	}
	util$40.assertNever = assertNever;
	util$40.arrayToEnum = (items) => {
		const obj = {};
		for (const item of items) obj[item] = item;
		return obj;
	};
	util$40.getValidEnumValues = (obj) => {
		const validKeys = util$40.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
		const filtered = {};
		for (const k of validKeys) filtered[k] = obj[k];
		return util$40.objectValues(filtered);
	};
	util$40.objectValues = (obj) => {
		return util$40.objectKeys(obj).map(function(e) {
			return obj[e];
		});
	};
	util$40.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object$1) => {
		const keys$1 = [];
		for (const key in object$1) if (Object.prototype.hasOwnProperty.call(object$1, key)) keys$1.push(key);
		return keys$1;
	};
	util$40.find = (arr, checker) => {
		for (const item of arr) if (checker(item)) return item;
		return void 0;
	};
	util$40.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
	function joinValues(array, separator = " | ") {
		return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
	}
	util$40.joinValues = joinValues;
	util$40.jsonStringifyReplacer = (_, value) => {
		if (typeof value === "bigint") return value.toString();
		return value;
	};
})(util || (util = {}));
var objectUtil;
(function(objectUtil$1) {
	objectUtil$1.mergeShapes = (first, second) => {
		return {
			...first,
			...second
		};
	};
})(objectUtil || (objectUtil = {}));
const ZodParsedType = util.arrayToEnum([
	"string",
	"nan",
	"number",
	"integer",
	"float",
	"boolean",
	"date",
	"bigint",
	"symbol",
	"function",
	"undefined",
	"null",
	"array",
	"object",
	"unknown",
	"promise",
	"void",
	"never",
	"map",
	"set"
]);
const getParsedType = (data$1) => {
	const t = typeof data$1;
	switch (t) {
		case "undefined": return ZodParsedType.undefined;
		case "string": return ZodParsedType.string;
		case "number": return Number.isNaN(data$1) ? ZodParsedType.nan : ZodParsedType.number;
		case "boolean": return ZodParsedType.boolean;
		case "function": return ZodParsedType.function;
		case "bigint": return ZodParsedType.bigint;
		case "symbol": return ZodParsedType.symbol;
		case "object":
			if (Array.isArray(data$1)) return ZodParsedType.array;
			if (data$1 === null) return ZodParsedType.null;
			if (data$1.then && typeof data$1.then === "function" && data$1.catch && typeof data$1.catch === "function") return ZodParsedType.promise;
			if (typeof Map !== "undefined" && data$1 instanceof Map) return ZodParsedType.map;
			if (typeof Set !== "undefined" && data$1 instanceof Set) return ZodParsedType.set;
			if (typeof Date !== "undefined" && data$1 instanceof Date) return ZodParsedType.date;
			return ZodParsedType.object;
		default: return ZodParsedType.unknown;
	}
};

//#endregion
//#region node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/ZodError.js
const ZodIssueCode = util.arrayToEnum([
	"invalid_type",
	"invalid_literal",
	"custom",
	"invalid_union",
	"invalid_union_discriminator",
	"invalid_enum_value",
	"unrecognized_keys",
	"invalid_arguments",
	"invalid_return_type",
	"invalid_date",
	"invalid_string",
	"too_small",
	"too_big",
	"invalid_intersection_types",
	"not_multiple_of",
	"not_finite"
]);
var ZodError = class ZodError extends Error {
	get errors() {
		return this.issues;
	}
	constructor(issues) {
		super();
		this.issues = [];
		this.addIssue = (sub) => {
			this.issues = [...this.issues, sub];
		};
		this.addIssues = (subs = []) => {
			this.issues = [...this.issues, ...subs];
		};
		const actualProto = new.target.prototype;
		if (Object.setPrototypeOf) Object.setPrototypeOf(this, actualProto);
		else this.__proto__ = actualProto;
		this.name = "ZodError";
		this.issues = issues;
	}
	format(_mapper) {
		const mapper = _mapper || function(issue$1) {
			return issue$1.message;
		};
		const fieldErrors = { _errors: [] };
		const processError = (error$1) => {
			for (const issue$1 of error$1.issues) if (issue$1.code === "invalid_union") issue$1.unionErrors.map(processError);
			else if (issue$1.code === "invalid_return_type") processError(issue$1.returnTypeError);
			else if (issue$1.code === "invalid_arguments") processError(issue$1.argumentsError);
			else if (issue$1.path.length === 0) fieldErrors._errors.push(mapper(issue$1));
			else {
				let curr = fieldErrors;
				let i$1 = 0;
				while (i$1 < issue$1.path.length) {
					const el = issue$1.path[i$1];
					const terminal = i$1 === issue$1.path.length - 1;
					if (!terminal) curr[el] = curr[el] || { _errors: [] };
					else {
						curr[el] = curr[el] || { _errors: [] };
						curr[el]._errors.push(mapper(issue$1));
					}
					curr = curr[el];
					i$1++;
				}
			}
		};
		processError(this);
		return fieldErrors;
	}
	static assert(value) {
		if (!(value instanceof ZodError)) throw new Error(`Not a ZodError: ${value}`);
	}
	toString() {
		return this.message;
	}
	get message() {
		return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
	}
	get isEmpty() {
		return this.issues.length === 0;
	}
	flatten(mapper = (issue$1) => issue$1.message) {
		const fieldErrors = {};
		const formErrors = [];
		for (const sub of this.issues) if (sub.path.length > 0) {
			const firstEl = sub.path[0];
			fieldErrors[firstEl] = fieldErrors[firstEl] || [];
			fieldErrors[firstEl].push(mapper(sub));
		} else formErrors.push(mapper(sub));
		return {
			formErrors,
			fieldErrors
		};
	}
	get formErrors() {
		return this.flatten();
	}
};
ZodError.create = (issues) => {
	const error$1 = new ZodError(issues);
	return error$1;
};

//#endregion
//#region node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/locales/en.js
const errorMap = (issue$1, _ctx) => {
	let message;
	switch (issue$1.code) {
		case ZodIssueCode.invalid_type:
			if (issue$1.received === ZodParsedType.undefined) message = "Required";
			else message = `Expected ${issue$1.expected}, received ${issue$1.received}`;
			break;
		case ZodIssueCode.invalid_literal:
			message = `Invalid literal value, expected ${JSON.stringify(issue$1.expected, util.jsonStringifyReplacer)}`;
			break;
		case ZodIssueCode.unrecognized_keys:
			message = `Unrecognized key(s) in object: ${util.joinValues(issue$1.keys, ", ")}`;
			break;
		case ZodIssueCode.invalid_union:
			message = `Invalid input`;
			break;
		case ZodIssueCode.invalid_union_discriminator:
			message = `Invalid discriminator value. Expected ${util.joinValues(issue$1.options)}`;
			break;
		case ZodIssueCode.invalid_enum_value:
			message = `Invalid enum value. Expected ${util.joinValues(issue$1.options)}, received '${issue$1.received}'`;
			break;
		case ZodIssueCode.invalid_arguments:
			message = `Invalid function arguments`;
			break;
		case ZodIssueCode.invalid_return_type:
			message = `Invalid function return type`;
			break;
		case ZodIssueCode.invalid_date:
			message = `Invalid date`;
			break;
		case ZodIssueCode.invalid_string:
			if (typeof issue$1.validation === "object") if ("includes" in issue$1.validation) {
				message = `Invalid input: must include "${issue$1.validation.includes}"`;
				if (typeof issue$1.validation.position === "number") message = `${message} at one or more positions greater than or equal to ${issue$1.validation.position}`;
			} else if ("startsWith" in issue$1.validation) message = `Invalid input: must start with "${issue$1.validation.startsWith}"`;
			else if ("endsWith" in issue$1.validation) message = `Invalid input: must end with "${issue$1.validation.endsWith}"`;
			else util.assertNever(issue$1.validation);
			else if (issue$1.validation !== "regex") message = `Invalid ${issue$1.validation}`;
			else message = "Invalid";
			break;
		case ZodIssueCode.too_small:
			if (issue$1.type === "array") message = `Array must contain ${issue$1.exact ? "exactly" : issue$1.inclusive ? `at least` : `more than`} ${issue$1.minimum} element(s)`;
			else if (issue$1.type === "string") message = `String must contain ${issue$1.exact ? "exactly" : issue$1.inclusive ? `at least` : `over`} ${issue$1.minimum} character(s)`;
			else if (issue$1.type === "number") message = `Number must be ${issue$1.exact ? `exactly equal to ` : issue$1.inclusive ? `greater than or equal to ` : `greater than `}${issue$1.minimum}`;
			else if (issue$1.type === "bigint") message = `Number must be ${issue$1.exact ? `exactly equal to ` : issue$1.inclusive ? `greater than or equal to ` : `greater than `}${issue$1.minimum}`;
			else if (issue$1.type === "date") message = `Date must be ${issue$1.exact ? `exactly equal to ` : issue$1.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue$1.minimum))}`;
			else message = "Invalid input";
			break;
		case ZodIssueCode.too_big:
			if (issue$1.type === "array") message = `Array must contain ${issue$1.exact ? `exactly` : issue$1.inclusive ? `at most` : `less than`} ${issue$1.maximum} element(s)`;
			else if (issue$1.type === "string") message = `String must contain ${issue$1.exact ? `exactly` : issue$1.inclusive ? `at most` : `under`} ${issue$1.maximum} character(s)`;
			else if (issue$1.type === "number") message = `Number must be ${issue$1.exact ? `exactly` : issue$1.inclusive ? `less than or equal to` : `less than`} ${issue$1.maximum}`;
			else if (issue$1.type === "bigint") message = `BigInt must be ${issue$1.exact ? `exactly` : issue$1.inclusive ? `less than or equal to` : `less than`} ${issue$1.maximum}`;
			else if (issue$1.type === "date") message = `Date must be ${issue$1.exact ? `exactly` : issue$1.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue$1.maximum))}`;
			else message = "Invalid input";
			break;
		case ZodIssueCode.custom:
			message = `Invalid input`;
			break;
		case ZodIssueCode.invalid_intersection_types:
			message = `Intersection results could not be merged`;
			break;
		case ZodIssueCode.not_multiple_of:
			message = `Number must be a multiple of ${issue$1.multipleOf}`;
			break;
		case ZodIssueCode.not_finite:
			message = "Number must be finite";
			break;
		default:
			message = _ctx.defaultError;
			util.assertNever(issue$1);
	}
	return { message };
};
var en_default = errorMap;

//#endregion
//#region node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/errors.js
let overrideErrorMap = en_default;
function getErrorMap() {
	return overrideErrorMap;
}

//#endregion
//#region node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/parseUtil.js
const makeIssue = (params) => {
	const { data: data$1, path: path$9, errorMaps, issueData } = params;
	const fullPath = [...path$9, ...issueData.path || []];
	const fullIssue = {
		...issueData,
		path: fullPath
	};
	if (issueData.message !== void 0) return {
		...issueData,
		path: fullPath,
		message: issueData.message
	};
	let errorMessage = "";
	const maps = errorMaps.filter((m) => !!m).slice().reverse();
	for (const map of maps) errorMessage = map(fullIssue, {
		data: data$1,
		defaultError: errorMessage
	}).message;
	return {
		...issueData,
		path: fullPath,
		message: errorMessage
	};
};
function addIssueToContext(ctx, issueData) {
	const overrideMap = getErrorMap();
	const issue$1 = makeIssue({
		issueData,
		data: ctx.data,
		path: ctx.path,
		errorMaps: [
			ctx.common.contextualErrorMap,
			ctx.schemaErrorMap,
			overrideMap,
			overrideMap === en_default ? void 0 : en_default
		].filter((x) => !!x)
	});
	ctx.common.issues.push(issue$1);
}
var ParseStatus = class ParseStatus {
	constructor() {
		this.value = "valid";
	}
	dirty() {
		if (this.value === "valid") this.value = "dirty";
	}
	abort() {
		if (this.value !== "aborted") this.value = "aborted";
	}
	static mergeArray(status, results) {
		const arrayValue = [];
		for (const s of results) {
			if (s.status === "aborted") return INVALID;
			if (s.status === "dirty") status.dirty();
			arrayValue.push(s.value);
		}
		return {
			status: status.value,
			value: arrayValue
		};
	}
	static async mergeObjectAsync(status, pairs) {
		const syncPairs = [];
		for (const pair of pairs) {
			const key = await pair.key;
			const value = await pair.value;
			syncPairs.push({
				key,
				value
			});
		}
		return ParseStatus.mergeObjectSync(status, syncPairs);
	}
	static mergeObjectSync(status, pairs) {
		const finalObject = {};
		for (const pair of pairs) {
			const { key, value } = pair;
			if (key.status === "aborted") return INVALID;
			if (value.status === "aborted") return INVALID;
			if (key.status === "dirty") status.dirty();
			if (value.status === "dirty") status.dirty();
			if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) finalObject[key.value] = value.value;
		}
		return {
			status: status.value,
			value: finalObject
		};
	}
};
const INVALID = Object.freeze({ status: "aborted" });
const DIRTY = (value) => ({
	status: "dirty",
	value
});
const OK = (value) => ({
	status: "valid",
	value
});
const isAborted = (x) => x.status === "aborted";
const isDirty = (x) => x.status === "dirty";
const isValid = (x) => x.status === "valid";
const isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;

//#endregion
//#region node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/helpers/errorUtil.js
var errorUtil;
(function(errorUtil$1) {
	errorUtil$1.errToObj = (message) => typeof message === "string" ? { message } : message || {};
	errorUtil$1.toString = (message) => typeof message === "string" ? message : message?.message;
})(errorUtil || (errorUtil = {}));

//#endregion
//#region node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/types.js
var ParseInputLazyPath = class {
	constructor(parent, value, path$9, key) {
		this._cachedPath = [];
		this.parent = parent;
		this.data = value;
		this._path = path$9;
		this._key = key;
	}
	get path() {
		if (!this._cachedPath.length) if (Array.isArray(this._key)) this._cachedPath.push(...this._path, ...this._key);
		else this._cachedPath.push(...this._path, this._key);
		return this._cachedPath;
	}
};
const handleResult$1 = (ctx, result) => {
	if (isValid(result)) return {
		success: true,
		data: result.value
	};
	else {
		if (!ctx.common.issues.length) throw new Error("Validation failed but no issues detected.");
		return {
			success: false,
			get error() {
				if (this._error) return this._error;
				const error$1 = new ZodError(ctx.common.issues);
				this._error = error$1;
				return this._error;
			}
		};
	}
};
function processCreateParams(params) {
	if (!params) return {};
	const { errorMap: errorMap$1, invalid_type_error, required_error, description } = params;
	if (errorMap$1 && (invalid_type_error || required_error)) throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
	if (errorMap$1) return {
		errorMap: errorMap$1,
		description
	};
	const customMap = (iss, ctx) => {
		const { message } = params;
		if (iss.code === "invalid_enum_value") return { message: message ?? ctx.defaultError };
		if (typeof ctx.data === "undefined") return { message: message ?? required_error ?? ctx.defaultError };
		if (iss.code !== "invalid_type") return { message: ctx.defaultError };
		return { message: message ?? invalid_type_error ?? ctx.defaultError };
	};
	return {
		errorMap: customMap,
		description
	};
}
var ZodType = class {
	get description() {
		return this._def.description;
	}
	_getType(input) {
		return getParsedType(input.data);
	}
	_getOrReturnCtx(input, ctx) {
		return ctx || {
			common: input.parent.common,
			data: input.data,
			parsedType: getParsedType(input.data),
			schemaErrorMap: this._def.errorMap,
			path: input.path,
			parent: input.parent
		};
	}
	_processInputParams(input) {
		return {
			status: new ParseStatus(),
			ctx: {
				common: input.parent.common,
				data: input.data,
				parsedType: getParsedType(input.data),
				schemaErrorMap: this._def.errorMap,
				path: input.path,
				parent: input.parent
			}
		};
	}
	_parseSync(input) {
		const result = this._parse(input);
		if (isAsync(result)) throw new Error("Synchronous parse encountered promise.");
		return result;
	}
	_parseAsync(input) {
		const result = this._parse(input);
		return Promise.resolve(result);
	}
	parse(data$1, params) {
		const result = this.safeParse(data$1, params);
		if (result.success) return result.data;
		throw result.error;
	}
	safeParse(data$1, params) {
		const ctx = {
			common: {
				issues: [],
				async: params?.async ?? false,
				contextualErrorMap: params?.errorMap
			},
			path: params?.path || [],
			schemaErrorMap: this._def.errorMap,
			parent: null,
			data: data$1,
			parsedType: getParsedType(data$1)
		};
		const result = this._parseSync({
			data: data$1,
			path: ctx.path,
			parent: ctx
		});
		return handleResult$1(ctx, result);
	}
	"~validate"(data$1) {
		const ctx = {
			common: {
				issues: [],
				async: !!this["~standard"].async
			},
			path: [],
			schemaErrorMap: this._def.errorMap,
			parent: null,
			data: data$1,
			parsedType: getParsedType(data$1)
		};
		if (!this["~standard"].async) try {
			const result = this._parseSync({
				data: data$1,
				path: [],
				parent: ctx
			});
			return isValid(result) ? { value: result.value } : { issues: ctx.common.issues };
		} catch (err) {
			if (err?.message?.toLowerCase()?.includes("encountered")) this["~standard"].async = true;
			ctx.common = {
				issues: [],
				async: true
			};
		}
		return this._parseAsync({
			data: data$1,
			path: [],
			parent: ctx
		}).then((result) => isValid(result) ? { value: result.value } : { issues: ctx.common.issues });
	}
	async parseAsync(data$1, params) {
		const result = await this.safeParseAsync(data$1, params);
		if (result.success) return result.data;
		throw result.error;
	}
	async safeParseAsync(data$1, params) {
		const ctx = {
			common: {
				issues: [],
				contextualErrorMap: params?.errorMap,
				async: true
			},
			path: params?.path || [],
			schemaErrorMap: this._def.errorMap,
			parent: null,
			data: data$1,
			parsedType: getParsedType(data$1)
		};
		const maybeAsyncResult = this._parse({
			data: data$1,
			path: ctx.path,
			parent: ctx
		});
		const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
		return handleResult$1(ctx, result);
	}
	refine(check$1, message) {
		const getIssueProperties = (val) => {
			if (typeof message === "string" || typeof message === "undefined") return { message };
			else if (typeof message === "function") return message(val);
			else return message;
		};
		return this._refinement((val, ctx) => {
			const result = check$1(val);
			const setError = () => ctx.addIssue({
				code: ZodIssueCode.custom,
				...getIssueProperties(val)
			});
			if (typeof Promise !== "undefined" && result instanceof Promise) return result.then((data$1) => {
				if (!data$1) {
					setError();
					return false;
				} else return true;
			});
			if (!result) {
				setError();
				return false;
			} else return true;
		});
	}
	refinement(check$1, refinementData) {
		return this._refinement((val, ctx) => {
			if (!check$1(val)) {
				ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
				return false;
			} else return true;
		});
	}
	_refinement(refinement) {
		return new ZodEffects({
			schema: this,
			typeName: ZodFirstPartyTypeKind.ZodEffects,
			effect: {
				type: "refinement",
				refinement
			}
		});
	}
	superRefine(refinement) {
		return this._refinement(refinement);
	}
	constructor(def) {
		/** Alias of safeParseAsync */
		this.spa = this.safeParseAsync;
		this._def = def;
		this.parse = this.parse.bind(this);
		this.safeParse = this.safeParse.bind(this);
		this.parseAsync = this.parseAsync.bind(this);
		this.safeParseAsync = this.safeParseAsync.bind(this);
		this.spa = this.spa.bind(this);
		this.refine = this.refine.bind(this);
		this.refinement = this.refinement.bind(this);
		this.superRefine = this.superRefine.bind(this);
		this.optional = this.optional.bind(this);
		this.nullable = this.nullable.bind(this);
		this.nullish = this.nullish.bind(this);
		this.array = this.array.bind(this);
		this.promise = this.promise.bind(this);
		this.or = this.or.bind(this);
		this.and = this.and.bind(this);
		this.transform = this.transform.bind(this);
		this.brand = this.brand.bind(this);
		this.default = this.default.bind(this);
		this.catch = this.catch.bind(this);
		this.describe = this.describe.bind(this);
		this.pipe = this.pipe.bind(this);
		this.readonly = this.readonly.bind(this);
		this.isNullable = this.isNullable.bind(this);
		this.isOptional = this.isOptional.bind(this);
		this["~standard"] = {
			version: 1,
			vendor: "zod",
			validate: (data$1) => this["~validate"](data$1)
		};
	}
	optional() {
		return ZodOptional.create(this, this._def);
	}
	nullable() {
		return ZodNullable.create(this, this._def);
	}
	nullish() {
		return this.nullable().optional();
	}
	array() {
		return ZodArray.create(this);
	}
	promise() {
		return ZodPromise.create(this, this._def);
	}
	or(option) {
		return ZodUnion.create([this, option], this._def);
	}
	and(incoming) {
		return ZodIntersection.create(this, incoming, this._def);
	}
	transform(transform) {
		return new ZodEffects({
			...processCreateParams(this._def),
			schema: this,
			typeName: ZodFirstPartyTypeKind.ZodEffects,
			effect: {
				type: "transform",
				transform
			}
		});
	}
	default(def) {
		const defaultValueFunc = typeof def === "function" ? def : () => def;
		return new ZodDefault({
			...processCreateParams(this._def),
			innerType: this,
			defaultValue: defaultValueFunc,
			typeName: ZodFirstPartyTypeKind.ZodDefault
		});
	}
	brand() {
		return new ZodBranded({
			typeName: ZodFirstPartyTypeKind.ZodBranded,
			type: this,
			...processCreateParams(this._def)
		});
	}
	catch(def) {
		const catchValueFunc = typeof def === "function" ? def : () => def;
		return new ZodCatch({
			...processCreateParams(this._def),
			innerType: this,
			catchValue: catchValueFunc,
			typeName: ZodFirstPartyTypeKind.ZodCatch
		});
	}
	describe(description) {
		const This = this.constructor;
		return new This({
			...this._def,
			description
		});
	}
	pipe(target) {
		return ZodPipeline.create(this, target);
	}
	readonly() {
		return ZodReadonly.create(this);
	}
	isOptional() {
		return this.safeParse(void 0).success;
	}
	isNullable() {
		return this.safeParse(null).success;
	}
};
const cuidRegex = /^c[^\s-]{8,}$/i;
const cuid2Regex = /^[0-9a-z]+$/;
const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
const nanoidRegex = /^[a-z0-9_-]{21}$/i;
const jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
const durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
let emojiRegex$1;
const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
const ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
const ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
const ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
const base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
const base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
const dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
const dateRegex = /* @__PURE__ */ new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
	let secondsRegexSource = `[0-5]\\d`;
	if (args.precision) secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
	else if (args.precision == null) secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
	const secondsQuantifier = args.precision ? "+" : "?";
	return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
}
function timeRegex(args) {
	return /* @__PURE__ */ new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
	let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
	const opts = [];
	opts.push(args.local ? `Z?` : `Z`);
	if (args.offset) opts.push(`([+-]\\d{2}:?\\d{2})`);
	regex = `${regex}(${opts.join("|")})`;
	return /* @__PURE__ */ new RegExp(`^${regex}$`);
}
function isValidIP(ip, version$1) {
	if ((version$1 === "v4" || !version$1) && ipv4Regex.test(ip)) return true;
	if ((version$1 === "v6" || !version$1) && ipv6Regex.test(ip)) return true;
	return false;
}
function isValidJWT(jwt, alg) {
	if (!jwtRegex.test(jwt)) return false;
	try {
		const [header] = jwt.split(".");
		if (!header) return false;
		const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
		const decoded = JSON.parse(atob(base64));
		if (typeof decoded !== "object" || decoded === null) return false;
		if ("typ" in decoded && decoded?.typ !== "JWT") return false;
		if (!decoded.alg) return false;
		if (alg && decoded.alg !== alg) return false;
		return true;
	} catch {
		return false;
	}
}
function isValidCidr(ip, version$1) {
	if ((version$1 === "v4" || !version$1) && ipv4CidrRegex.test(ip)) return true;
	if ((version$1 === "v6" || !version$1) && ipv6CidrRegex.test(ip)) return true;
	return false;
}
var ZodString = class ZodString extends ZodType {
	_parse(input) {
		if (this._def.coerce) input.data = String(input.data);
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.string) {
			const ctx$1 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.string,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		const status = new ParseStatus();
		let ctx = void 0;
		for (const check$1 of this._def.checks) if (check$1.kind === "min") {
			if (input.data.length < check$1.value) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.too_small,
					minimum: check$1.value,
					type: "string",
					inclusive: true,
					exact: false,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "max") {
			if (input.data.length > check$1.value) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.too_big,
					maximum: check$1.value,
					type: "string",
					inclusive: true,
					exact: false,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "length") {
			const tooBig = input.data.length > check$1.value;
			const tooSmall = input.data.length < check$1.value;
			if (tooBig || tooSmall) {
				ctx = this._getOrReturnCtx(input, ctx);
				if (tooBig) addIssueToContext(ctx, {
					code: ZodIssueCode.too_big,
					maximum: check$1.value,
					type: "string",
					inclusive: true,
					exact: true,
					message: check$1.message
				});
				else if (tooSmall) addIssueToContext(ctx, {
					code: ZodIssueCode.too_small,
					minimum: check$1.value,
					type: "string",
					inclusive: true,
					exact: true,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "email") {
			if (!emailRegex.test(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "email",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "emoji") {
			if (!emojiRegex$1) emojiRegex$1 = new RegExp(_emojiRegex, "u");
			if (!emojiRegex$1.test(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "emoji",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "uuid") {
			if (!uuidRegex.test(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "uuid",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "nanoid") {
			if (!nanoidRegex.test(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "nanoid",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "cuid") {
			if (!cuidRegex.test(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "cuid",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "cuid2") {
			if (!cuid2Regex.test(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "cuid2",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "ulid") {
			if (!ulidRegex.test(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "ulid",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "url") try {
			new URL(input.data);
		} catch {
			ctx = this._getOrReturnCtx(input, ctx);
			addIssueToContext(ctx, {
				validation: "url",
				code: ZodIssueCode.invalid_string,
				message: check$1.message
			});
			status.dirty();
		}
		else if (check$1.kind === "regex") {
			check$1.regex.lastIndex = 0;
			const testResult = check$1.regex.test(input.data);
			if (!testResult) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "regex",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "trim") input.data = input.data.trim();
		else if (check$1.kind === "includes") {
			if (!input.data.includes(check$1.value, check$1.position)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.invalid_string,
					validation: {
						includes: check$1.value,
						position: check$1.position
					},
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "toLowerCase") input.data = input.data.toLowerCase();
		else if (check$1.kind === "toUpperCase") input.data = input.data.toUpperCase();
		else if (check$1.kind === "startsWith") {
			if (!input.data.startsWith(check$1.value)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.invalid_string,
					validation: { startsWith: check$1.value },
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "endsWith") {
			if (!input.data.endsWith(check$1.value)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.invalid_string,
					validation: { endsWith: check$1.value },
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "datetime") {
			const regex = datetimeRegex(check$1);
			if (!regex.test(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.invalid_string,
					validation: "datetime",
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "date") {
			const regex = dateRegex;
			if (!regex.test(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.invalid_string,
					validation: "date",
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "time") {
			const regex = timeRegex(check$1);
			if (!regex.test(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.invalid_string,
					validation: "time",
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "duration") {
			if (!durationRegex.test(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "duration",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "ip") {
			if (!isValidIP(input.data, check$1.version)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "ip",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "jwt") {
			if (!isValidJWT(input.data, check$1.alg)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "jwt",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "cidr") {
			if (!isValidCidr(input.data, check$1.version)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "cidr",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "base64") {
			if (!base64Regex.test(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "base64",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "base64url") {
			if (!base64urlRegex.test(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					validation: "base64url",
					code: ZodIssueCode.invalid_string,
					message: check$1.message
				});
				status.dirty();
			}
		} else util.assertNever(check$1);
		return {
			status: status.value,
			value: input.data
		};
	}
	_regex(regex, validation, message) {
		return this.refinement((data$1) => regex.test(data$1), {
			validation,
			code: ZodIssueCode.invalid_string,
			...errorUtil.errToObj(message)
		});
	}
	_addCheck(check$1) {
		return new ZodString({
			...this._def,
			checks: [...this._def.checks, check$1]
		});
	}
	email(message) {
		return this._addCheck({
			kind: "email",
			...errorUtil.errToObj(message)
		});
	}
	url(message) {
		return this._addCheck({
			kind: "url",
			...errorUtil.errToObj(message)
		});
	}
	emoji(message) {
		return this._addCheck({
			kind: "emoji",
			...errorUtil.errToObj(message)
		});
	}
	uuid(message) {
		return this._addCheck({
			kind: "uuid",
			...errorUtil.errToObj(message)
		});
	}
	nanoid(message) {
		return this._addCheck({
			kind: "nanoid",
			...errorUtil.errToObj(message)
		});
	}
	cuid(message) {
		return this._addCheck({
			kind: "cuid",
			...errorUtil.errToObj(message)
		});
	}
	cuid2(message) {
		return this._addCheck({
			kind: "cuid2",
			...errorUtil.errToObj(message)
		});
	}
	ulid(message) {
		return this._addCheck({
			kind: "ulid",
			...errorUtil.errToObj(message)
		});
	}
	base64(message) {
		return this._addCheck({
			kind: "base64",
			...errorUtil.errToObj(message)
		});
	}
	base64url(message) {
		return this._addCheck({
			kind: "base64url",
			...errorUtil.errToObj(message)
		});
	}
	jwt(options) {
		return this._addCheck({
			kind: "jwt",
			...errorUtil.errToObj(options)
		});
	}
	ip(options) {
		return this._addCheck({
			kind: "ip",
			...errorUtil.errToObj(options)
		});
	}
	cidr(options) {
		return this._addCheck({
			kind: "cidr",
			...errorUtil.errToObj(options)
		});
	}
	datetime(options) {
		if (typeof options === "string") return this._addCheck({
			kind: "datetime",
			precision: null,
			offset: false,
			local: false,
			message: options
		});
		return this._addCheck({
			kind: "datetime",
			precision: typeof options?.precision === "undefined" ? null : options?.precision,
			offset: options?.offset ?? false,
			local: options?.local ?? false,
			...errorUtil.errToObj(options?.message)
		});
	}
	date(message) {
		return this._addCheck({
			kind: "date",
			message
		});
	}
	time(options) {
		if (typeof options === "string") return this._addCheck({
			kind: "time",
			precision: null,
			message: options
		});
		return this._addCheck({
			kind: "time",
			precision: typeof options?.precision === "undefined" ? null : options?.precision,
			...errorUtil.errToObj(options?.message)
		});
	}
	duration(message) {
		return this._addCheck({
			kind: "duration",
			...errorUtil.errToObj(message)
		});
	}
	regex(regex, message) {
		return this._addCheck({
			kind: "regex",
			regex,
			...errorUtil.errToObj(message)
		});
	}
	includes(value, options) {
		return this._addCheck({
			kind: "includes",
			value,
			position: options?.position,
			...errorUtil.errToObj(options?.message)
		});
	}
	startsWith(value, message) {
		return this._addCheck({
			kind: "startsWith",
			value,
			...errorUtil.errToObj(message)
		});
	}
	endsWith(value, message) {
		return this._addCheck({
			kind: "endsWith",
			value,
			...errorUtil.errToObj(message)
		});
	}
	min(minLength, message) {
		return this._addCheck({
			kind: "min",
			value: minLength,
			...errorUtil.errToObj(message)
		});
	}
	max(maxLength, message) {
		return this._addCheck({
			kind: "max",
			value: maxLength,
			...errorUtil.errToObj(message)
		});
	}
	length(len, message) {
		return this._addCheck({
			kind: "length",
			value: len,
			...errorUtil.errToObj(message)
		});
	}
	/**
	* Equivalent to `.min(1)`
	*/
	nonempty(message) {
		return this.min(1, errorUtil.errToObj(message));
	}
	trim() {
		return new ZodString({
			...this._def,
			checks: [...this._def.checks, { kind: "trim" }]
		});
	}
	toLowerCase() {
		return new ZodString({
			...this._def,
			checks: [...this._def.checks, { kind: "toLowerCase" }]
		});
	}
	toUpperCase() {
		return new ZodString({
			...this._def,
			checks: [...this._def.checks, { kind: "toUpperCase" }]
		});
	}
	get isDatetime() {
		return !!this._def.checks.find((ch) => ch.kind === "datetime");
	}
	get isDate() {
		return !!this._def.checks.find((ch) => ch.kind === "date");
	}
	get isTime() {
		return !!this._def.checks.find((ch) => ch.kind === "time");
	}
	get isDuration() {
		return !!this._def.checks.find((ch) => ch.kind === "duration");
	}
	get isEmail() {
		return !!this._def.checks.find((ch) => ch.kind === "email");
	}
	get isURL() {
		return !!this._def.checks.find((ch) => ch.kind === "url");
	}
	get isEmoji() {
		return !!this._def.checks.find((ch) => ch.kind === "emoji");
	}
	get isUUID() {
		return !!this._def.checks.find((ch) => ch.kind === "uuid");
	}
	get isNANOID() {
		return !!this._def.checks.find((ch) => ch.kind === "nanoid");
	}
	get isCUID() {
		return !!this._def.checks.find((ch) => ch.kind === "cuid");
	}
	get isCUID2() {
		return !!this._def.checks.find((ch) => ch.kind === "cuid2");
	}
	get isULID() {
		return !!this._def.checks.find((ch) => ch.kind === "ulid");
	}
	get isIP() {
		return !!this._def.checks.find((ch) => ch.kind === "ip");
	}
	get isCIDR() {
		return !!this._def.checks.find((ch) => ch.kind === "cidr");
	}
	get isBase64() {
		return !!this._def.checks.find((ch) => ch.kind === "base64");
	}
	get isBase64url() {
		return !!this._def.checks.find((ch) => ch.kind === "base64url");
	}
	get minLength() {
		let min$2 = null;
		for (const ch of this._def.checks) if (ch.kind === "min") {
			if (min$2 === null || ch.value > min$2) min$2 = ch.value;
		}
		return min$2;
	}
	get maxLength() {
		let max$1 = null;
		for (const ch of this._def.checks) if (ch.kind === "max") {
			if (max$1 === null || ch.value < max$1) max$1 = ch.value;
		}
		return max$1;
	}
};
ZodString.create = (params) => {
	return new ZodString({
		checks: [],
		typeName: ZodFirstPartyTypeKind.ZodString,
		coerce: params?.coerce ?? false,
		...processCreateParams(params)
	});
};
function floatSafeRemainder(val, step) {
	const valDecCount = (val.toString().split(".")[1] || "").length;
	const stepDecCount = (step.toString().split(".")[1] || "").length;
	const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
	const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
	const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
	return valInt % stepInt / 10 ** decCount;
}
var ZodNumber = class ZodNumber extends ZodType {
	constructor() {
		super(...arguments);
		this.min = this.gte;
		this.max = this.lte;
		this.step = this.multipleOf;
	}
	_parse(input) {
		if (this._def.coerce) input.data = Number(input.data);
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.number) {
			const ctx$1 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.number,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		let ctx = void 0;
		const status = new ParseStatus();
		for (const check$1 of this._def.checks) if (check$1.kind === "int") {
			if (!util.isInteger(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.invalid_type,
					expected: "integer",
					received: "float",
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "min") {
			const tooSmall = check$1.inclusive ? input.data < check$1.value : input.data <= check$1.value;
			if (tooSmall) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.too_small,
					minimum: check$1.value,
					type: "number",
					inclusive: check$1.inclusive,
					exact: false,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "max") {
			const tooBig = check$1.inclusive ? input.data > check$1.value : input.data >= check$1.value;
			if (tooBig) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.too_big,
					maximum: check$1.value,
					type: "number",
					inclusive: check$1.inclusive,
					exact: false,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "multipleOf") {
			if (floatSafeRemainder(input.data, check$1.value) !== 0) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.not_multiple_of,
					multipleOf: check$1.value,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "finite") {
			if (!Number.isFinite(input.data)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.not_finite,
					message: check$1.message
				});
				status.dirty();
			}
		} else util.assertNever(check$1);
		return {
			status: status.value,
			value: input.data
		};
	}
	gte(value, message) {
		return this.setLimit("min", value, true, errorUtil.toString(message));
	}
	gt(value, message) {
		return this.setLimit("min", value, false, errorUtil.toString(message));
	}
	lte(value, message) {
		return this.setLimit("max", value, true, errorUtil.toString(message));
	}
	lt(value, message) {
		return this.setLimit("max", value, false, errorUtil.toString(message));
	}
	setLimit(kind, value, inclusive, message) {
		return new ZodNumber({
			...this._def,
			checks: [...this._def.checks, {
				kind,
				value,
				inclusive,
				message: errorUtil.toString(message)
			}]
		});
	}
	_addCheck(check$1) {
		return new ZodNumber({
			...this._def,
			checks: [...this._def.checks, check$1]
		});
	}
	int(message) {
		return this._addCheck({
			kind: "int",
			message: errorUtil.toString(message)
		});
	}
	positive(message) {
		return this._addCheck({
			kind: "min",
			value: 0,
			inclusive: false,
			message: errorUtil.toString(message)
		});
	}
	negative(message) {
		return this._addCheck({
			kind: "max",
			value: 0,
			inclusive: false,
			message: errorUtil.toString(message)
		});
	}
	nonpositive(message) {
		return this._addCheck({
			kind: "max",
			value: 0,
			inclusive: true,
			message: errorUtil.toString(message)
		});
	}
	nonnegative(message) {
		return this._addCheck({
			kind: "min",
			value: 0,
			inclusive: true,
			message: errorUtil.toString(message)
		});
	}
	multipleOf(value, message) {
		return this._addCheck({
			kind: "multipleOf",
			value,
			message: errorUtil.toString(message)
		});
	}
	finite(message) {
		return this._addCheck({
			kind: "finite",
			message: errorUtil.toString(message)
		});
	}
	safe(message) {
		return this._addCheck({
			kind: "min",
			inclusive: true,
			value: Number.MIN_SAFE_INTEGER,
			message: errorUtil.toString(message)
		})._addCheck({
			kind: "max",
			inclusive: true,
			value: Number.MAX_SAFE_INTEGER,
			message: errorUtil.toString(message)
		});
	}
	get minValue() {
		let min$2 = null;
		for (const ch of this._def.checks) if (ch.kind === "min") {
			if (min$2 === null || ch.value > min$2) min$2 = ch.value;
		}
		return min$2;
	}
	get maxValue() {
		let max$1 = null;
		for (const ch of this._def.checks) if (ch.kind === "max") {
			if (max$1 === null || ch.value < max$1) max$1 = ch.value;
		}
		return max$1;
	}
	get isInt() {
		return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
	}
	get isFinite() {
		let max$1 = null;
		let min$2 = null;
		for (const ch of this._def.checks) if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") return true;
		else if (ch.kind === "min") {
			if (min$2 === null || ch.value > min$2) min$2 = ch.value;
		} else if (ch.kind === "max") {
			if (max$1 === null || ch.value < max$1) max$1 = ch.value;
		}
		return Number.isFinite(min$2) && Number.isFinite(max$1);
	}
};
ZodNumber.create = (params) => {
	return new ZodNumber({
		checks: [],
		typeName: ZodFirstPartyTypeKind.ZodNumber,
		coerce: params?.coerce || false,
		...processCreateParams(params)
	});
};
var ZodBigInt = class ZodBigInt extends ZodType {
	constructor() {
		super(...arguments);
		this.min = this.gte;
		this.max = this.lte;
	}
	_parse(input) {
		if (this._def.coerce) try {
			input.data = BigInt(input.data);
		} catch {
			return this._getInvalidInput(input);
		}
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.bigint) return this._getInvalidInput(input);
		let ctx = void 0;
		const status = new ParseStatus();
		for (const check$1 of this._def.checks) if (check$1.kind === "min") {
			const tooSmall = check$1.inclusive ? input.data < check$1.value : input.data <= check$1.value;
			if (tooSmall) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.too_small,
					type: "bigint",
					minimum: check$1.value,
					inclusive: check$1.inclusive,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "max") {
			const tooBig = check$1.inclusive ? input.data > check$1.value : input.data >= check$1.value;
			if (tooBig) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.too_big,
					type: "bigint",
					maximum: check$1.value,
					inclusive: check$1.inclusive,
					message: check$1.message
				});
				status.dirty();
			}
		} else if (check$1.kind === "multipleOf") {
			if (input.data % check$1.value !== BigInt(0)) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.not_multiple_of,
					multipleOf: check$1.value,
					message: check$1.message
				});
				status.dirty();
			}
		} else util.assertNever(check$1);
		return {
			status: status.value,
			value: input.data
		};
	}
	_getInvalidInput(input) {
		const ctx = this._getOrReturnCtx(input);
		addIssueToContext(ctx, {
			code: ZodIssueCode.invalid_type,
			expected: ZodParsedType.bigint,
			received: ctx.parsedType
		});
		return INVALID;
	}
	gte(value, message) {
		return this.setLimit("min", value, true, errorUtil.toString(message));
	}
	gt(value, message) {
		return this.setLimit("min", value, false, errorUtil.toString(message));
	}
	lte(value, message) {
		return this.setLimit("max", value, true, errorUtil.toString(message));
	}
	lt(value, message) {
		return this.setLimit("max", value, false, errorUtil.toString(message));
	}
	setLimit(kind, value, inclusive, message) {
		return new ZodBigInt({
			...this._def,
			checks: [...this._def.checks, {
				kind,
				value,
				inclusive,
				message: errorUtil.toString(message)
			}]
		});
	}
	_addCheck(check$1) {
		return new ZodBigInt({
			...this._def,
			checks: [...this._def.checks, check$1]
		});
	}
	positive(message) {
		return this._addCheck({
			kind: "min",
			value: BigInt(0),
			inclusive: false,
			message: errorUtil.toString(message)
		});
	}
	negative(message) {
		return this._addCheck({
			kind: "max",
			value: BigInt(0),
			inclusive: false,
			message: errorUtil.toString(message)
		});
	}
	nonpositive(message) {
		return this._addCheck({
			kind: "max",
			value: BigInt(0),
			inclusive: true,
			message: errorUtil.toString(message)
		});
	}
	nonnegative(message) {
		return this._addCheck({
			kind: "min",
			value: BigInt(0),
			inclusive: true,
			message: errorUtil.toString(message)
		});
	}
	multipleOf(value, message) {
		return this._addCheck({
			kind: "multipleOf",
			value,
			message: errorUtil.toString(message)
		});
	}
	get minValue() {
		let min$2 = null;
		for (const ch of this._def.checks) if (ch.kind === "min") {
			if (min$2 === null || ch.value > min$2) min$2 = ch.value;
		}
		return min$2;
	}
	get maxValue() {
		let max$1 = null;
		for (const ch of this._def.checks) if (ch.kind === "max") {
			if (max$1 === null || ch.value < max$1) max$1 = ch.value;
		}
		return max$1;
	}
};
ZodBigInt.create = (params) => {
	return new ZodBigInt({
		checks: [],
		typeName: ZodFirstPartyTypeKind.ZodBigInt,
		coerce: params?.coerce ?? false,
		...processCreateParams(params)
	});
};
var ZodBoolean = class extends ZodType {
	_parse(input) {
		if (this._def.coerce) input.data = Boolean(input.data);
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.boolean) {
			const ctx = this._getOrReturnCtx(input);
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.boolean,
				received: ctx.parsedType
			});
			return INVALID;
		}
		return OK(input.data);
	}
};
ZodBoolean.create = (params) => {
	return new ZodBoolean({
		typeName: ZodFirstPartyTypeKind.ZodBoolean,
		coerce: params?.coerce || false,
		...processCreateParams(params)
	});
};
var ZodDate = class ZodDate extends ZodType {
	_parse(input) {
		if (this._def.coerce) input.data = new Date(input.data);
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.date) {
			const ctx$1 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.date,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		if (Number.isNaN(input.data.getTime())) {
			const ctx$1 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$1, { code: ZodIssueCode.invalid_date });
			return INVALID;
		}
		const status = new ParseStatus();
		let ctx = void 0;
		for (const check$1 of this._def.checks) if (check$1.kind === "min") {
			if (input.data.getTime() < check$1.value) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.too_small,
					message: check$1.message,
					inclusive: true,
					exact: false,
					minimum: check$1.value,
					type: "date"
				});
				status.dirty();
			}
		} else if (check$1.kind === "max") {
			if (input.data.getTime() > check$1.value) {
				ctx = this._getOrReturnCtx(input, ctx);
				addIssueToContext(ctx, {
					code: ZodIssueCode.too_big,
					message: check$1.message,
					inclusive: true,
					exact: false,
					maximum: check$1.value,
					type: "date"
				});
				status.dirty();
			}
		} else util.assertNever(check$1);
		return {
			status: status.value,
			value: new Date(input.data.getTime())
		};
	}
	_addCheck(check$1) {
		return new ZodDate({
			...this._def,
			checks: [...this._def.checks, check$1]
		});
	}
	min(minDate, message) {
		return this._addCheck({
			kind: "min",
			value: minDate.getTime(),
			message: errorUtil.toString(message)
		});
	}
	max(maxDate, message) {
		return this._addCheck({
			kind: "max",
			value: maxDate.getTime(),
			message: errorUtil.toString(message)
		});
	}
	get minDate() {
		let min$2 = null;
		for (const ch of this._def.checks) if (ch.kind === "min") {
			if (min$2 === null || ch.value > min$2) min$2 = ch.value;
		}
		return min$2 != null ? new Date(min$2) : null;
	}
	get maxDate() {
		let max$1 = null;
		for (const ch of this._def.checks) if (ch.kind === "max") {
			if (max$1 === null || ch.value < max$1) max$1 = ch.value;
		}
		return max$1 != null ? new Date(max$1) : null;
	}
};
ZodDate.create = (params) => {
	return new ZodDate({
		checks: [],
		coerce: params?.coerce || false,
		typeName: ZodFirstPartyTypeKind.ZodDate,
		...processCreateParams(params)
	});
};
var ZodSymbol = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.symbol) {
			const ctx = this._getOrReturnCtx(input);
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.symbol,
				received: ctx.parsedType
			});
			return INVALID;
		}
		return OK(input.data);
	}
};
ZodSymbol.create = (params) => {
	return new ZodSymbol({
		typeName: ZodFirstPartyTypeKind.ZodSymbol,
		...processCreateParams(params)
	});
};
var ZodUndefined = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.undefined) {
			const ctx = this._getOrReturnCtx(input);
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.undefined,
				received: ctx.parsedType
			});
			return INVALID;
		}
		return OK(input.data);
	}
};
ZodUndefined.create = (params) => {
	return new ZodUndefined({
		typeName: ZodFirstPartyTypeKind.ZodUndefined,
		...processCreateParams(params)
	});
};
var ZodNull = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.null) {
			const ctx = this._getOrReturnCtx(input);
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.null,
				received: ctx.parsedType
			});
			return INVALID;
		}
		return OK(input.data);
	}
};
ZodNull.create = (params) => {
	return new ZodNull({
		typeName: ZodFirstPartyTypeKind.ZodNull,
		...processCreateParams(params)
	});
};
var ZodAny = class extends ZodType {
	constructor() {
		super(...arguments);
		this._any = true;
	}
	_parse(input) {
		return OK(input.data);
	}
};
ZodAny.create = (params) => {
	return new ZodAny({
		typeName: ZodFirstPartyTypeKind.ZodAny,
		...processCreateParams(params)
	});
};
var ZodUnknown = class extends ZodType {
	constructor() {
		super(...arguments);
		this._unknown = true;
	}
	_parse(input) {
		return OK(input.data);
	}
};
ZodUnknown.create = (params) => {
	return new ZodUnknown({
		typeName: ZodFirstPartyTypeKind.ZodUnknown,
		...processCreateParams(params)
	});
};
var ZodNever = class extends ZodType {
	_parse(input) {
		const ctx = this._getOrReturnCtx(input);
		addIssueToContext(ctx, {
			code: ZodIssueCode.invalid_type,
			expected: ZodParsedType.never,
			received: ctx.parsedType
		});
		return INVALID;
	}
};
ZodNever.create = (params) => {
	return new ZodNever({
		typeName: ZodFirstPartyTypeKind.ZodNever,
		...processCreateParams(params)
	});
};
var ZodVoid = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.undefined) {
			const ctx = this._getOrReturnCtx(input);
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.void,
				received: ctx.parsedType
			});
			return INVALID;
		}
		return OK(input.data);
	}
};
ZodVoid.create = (params) => {
	return new ZodVoid({
		typeName: ZodFirstPartyTypeKind.ZodVoid,
		...processCreateParams(params)
	});
};
var ZodArray = class ZodArray extends ZodType {
	_parse(input) {
		const { ctx, status } = this._processInputParams(input);
		const def = this._def;
		if (ctx.parsedType !== ZodParsedType.array) {
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.array,
				received: ctx.parsedType
			});
			return INVALID;
		}
		if (def.exactLength !== null) {
			const tooBig = ctx.data.length > def.exactLength.value;
			const tooSmall = ctx.data.length < def.exactLength.value;
			if (tooBig || tooSmall) {
				addIssueToContext(ctx, {
					code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
					minimum: tooSmall ? def.exactLength.value : void 0,
					maximum: tooBig ? def.exactLength.value : void 0,
					type: "array",
					inclusive: true,
					exact: true,
					message: def.exactLength.message
				});
				status.dirty();
			}
		}
		if (def.minLength !== null) {
			if (ctx.data.length < def.minLength.value) {
				addIssueToContext(ctx, {
					code: ZodIssueCode.too_small,
					minimum: def.minLength.value,
					type: "array",
					inclusive: true,
					exact: false,
					message: def.minLength.message
				});
				status.dirty();
			}
		}
		if (def.maxLength !== null) {
			if (ctx.data.length > def.maxLength.value) {
				addIssueToContext(ctx, {
					code: ZodIssueCode.too_big,
					maximum: def.maxLength.value,
					type: "array",
					inclusive: true,
					exact: false,
					message: def.maxLength.message
				});
				status.dirty();
			}
		}
		if (ctx.common.async) return Promise.all([...ctx.data].map((item, i$1) => {
			return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i$1));
		})).then((result$1) => {
			return ParseStatus.mergeArray(status, result$1);
		});
		const result = [...ctx.data].map((item, i$1) => {
			return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i$1));
		});
		return ParseStatus.mergeArray(status, result);
	}
	get element() {
		return this._def.type;
	}
	min(minLength, message) {
		return new ZodArray({
			...this._def,
			minLength: {
				value: minLength,
				message: errorUtil.toString(message)
			}
		});
	}
	max(maxLength, message) {
		return new ZodArray({
			...this._def,
			maxLength: {
				value: maxLength,
				message: errorUtil.toString(message)
			}
		});
	}
	length(len, message) {
		return new ZodArray({
			...this._def,
			exactLength: {
				value: len,
				message: errorUtil.toString(message)
			}
		});
	}
	nonempty(message) {
		return this.min(1, message);
	}
};
ZodArray.create = (schema, params) => {
	return new ZodArray({
		type: schema,
		minLength: null,
		maxLength: null,
		exactLength: null,
		typeName: ZodFirstPartyTypeKind.ZodArray,
		...processCreateParams(params)
	});
};
function deepPartialify(schema) {
	if (schema instanceof ZodObject) {
		const newShape = {};
		for (const key in schema.shape) {
			const fieldSchema = schema.shape[key];
			newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
		}
		return new ZodObject({
			...schema._def,
			shape: () => newShape
		});
	} else if (schema instanceof ZodArray) return new ZodArray({
		...schema._def,
		type: deepPartialify(schema.element)
	});
	else if (schema instanceof ZodOptional) return ZodOptional.create(deepPartialify(schema.unwrap()));
	else if (schema instanceof ZodNullable) return ZodNullable.create(deepPartialify(schema.unwrap()));
	else if (schema instanceof ZodTuple) return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
	else return schema;
}
var ZodObject = class ZodObject extends ZodType {
	constructor() {
		super(...arguments);
		this._cached = null;
		/**
		* @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.
		* If you want to pass through unknown properties, use `.passthrough()` instead.
		*/
		this.nonstrict = this.passthrough;
		/**
		* @deprecated Use `.extend` instead
		*  */
		this.augment = this.extend;
	}
	_getCached() {
		if (this._cached !== null) return this._cached;
		const shape = this._def.shape();
		const keys$1 = util.objectKeys(shape);
		this._cached = {
			shape,
			keys: keys$1
		};
		return this._cached;
	}
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.object) {
			const ctx$1 = this._getOrReturnCtx(input);
			addIssueToContext(ctx$1, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.object,
				received: ctx$1.parsedType
			});
			return INVALID;
		}
		const { status, ctx } = this._processInputParams(input);
		const { shape, keys: shapeKeys } = this._getCached();
		const extraKeys = [];
		if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
			for (const key in ctx.data) if (!shapeKeys.includes(key)) extraKeys.push(key);
		}
		const pairs = [];
		for (const key of shapeKeys) {
			const keyValidator = shape[key];
			const value = ctx.data[key];
			pairs.push({
				key: {
					status: "valid",
					value: key
				},
				value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
				alwaysSet: key in ctx.data
			});
		}
		if (this._def.catchall instanceof ZodNever) {
			const unknownKeys = this._def.unknownKeys;
			if (unknownKeys === "passthrough") for (const key of extraKeys) pairs.push({
				key: {
					status: "valid",
					value: key
				},
				value: {
					status: "valid",
					value: ctx.data[key]
				}
			});
			else if (unknownKeys === "strict") {
				if (extraKeys.length > 0) {
					addIssueToContext(ctx, {
						code: ZodIssueCode.unrecognized_keys,
						keys: extraKeys
					});
					status.dirty();
				}
			} else if (unknownKeys === "strip") {} else throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
		} else {
			const catchall = this._def.catchall;
			for (const key of extraKeys) {
				const value = ctx.data[key];
				pairs.push({
					key: {
						status: "valid",
						value: key
					},
					value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
					alwaysSet: key in ctx.data
				});
			}
		}
		if (ctx.common.async) return Promise.resolve().then(async () => {
			const syncPairs = [];
			for (const pair of pairs) {
				const key = await pair.key;
				const value = await pair.value;
				syncPairs.push({
					key,
					value,
					alwaysSet: pair.alwaysSet
				});
			}
			return syncPairs;
		}).then((syncPairs) => {
			return ParseStatus.mergeObjectSync(status, syncPairs);
		});
		else return ParseStatus.mergeObjectSync(status, pairs);
	}
	get shape() {
		return this._def.shape();
	}
	strict(message) {
		errorUtil.errToObj;
		return new ZodObject({
			...this._def,
			unknownKeys: "strict",
			...message !== void 0 ? { errorMap: (issue$1, ctx) => {
				const defaultError = this._def.errorMap?.(issue$1, ctx).message ?? ctx.defaultError;
				if (issue$1.code === "unrecognized_keys") return { message: errorUtil.errToObj(message).message ?? defaultError };
				return { message: defaultError };
			} } : {}
		});
	}
	strip() {
		return new ZodObject({
			...this._def,
			unknownKeys: "strip"
		});
	}
	passthrough() {
		return new ZodObject({
			...this._def,
			unknownKeys: "passthrough"
		});
	}
	extend(augmentation) {
		return new ZodObject({
			...this._def,
			shape: () => ({
				...this._def.shape(),
				...augmentation
			})
		});
	}
	/**
	* Prior to zod@1.0.12 there was a bug in the
	* inferred type of merged objects. Please
	* upgrade if you are experiencing issues.
	*/
	merge(merging) {
		const merged = new ZodObject({
			unknownKeys: merging._def.unknownKeys,
			catchall: merging._def.catchall,
			shape: () => ({
				...this._def.shape(),
				...merging._def.shape()
			}),
			typeName: ZodFirstPartyTypeKind.ZodObject
		});
		return merged;
	}
	setKey(key, schema) {
		return this.augment({ [key]: schema });
	}
	catchall(index) {
		return new ZodObject({
			...this._def,
			catchall: index
		});
	}
	pick(mask) {
		const shape = {};
		for (const key of util.objectKeys(mask)) if (mask[key] && this.shape[key]) shape[key] = this.shape[key];
		return new ZodObject({
			...this._def,
			shape: () => shape
		});
	}
	omit(mask) {
		const shape = {};
		for (const key of util.objectKeys(this.shape)) if (!mask[key]) shape[key] = this.shape[key];
		return new ZodObject({
			...this._def,
			shape: () => shape
		});
	}
	/**
	* @deprecated
	*/
	deepPartial() {
		return deepPartialify(this);
	}
	partial(mask) {
		const newShape = {};
		for (const key of util.objectKeys(this.shape)) {
			const fieldSchema = this.shape[key];
			if (mask && !mask[key]) newShape[key] = fieldSchema;
			else newShape[key] = fieldSchema.optional();
		}
		return new ZodObject({
			...this._def,
			shape: () => newShape
		});
	}
	required(mask) {
		const newShape = {};
		for (const key of util.objectKeys(this.shape)) if (mask && !mask[key]) newShape[key] = this.shape[key];
		else {
			const fieldSchema = this.shape[key];
			let newField = fieldSchema;
			while (newField instanceof ZodOptional) newField = newField._def.innerType;
			newShape[key] = newField;
		}
		return new ZodObject({
			...this._def,
			shape: () => newShape
		});
	}
	keyof() {
		return createZodEnum(util.objectKeys(this.shape));
	}
};
ZodObject.create = (shape, params) => {
	return new ZodObject({
		shape: () => shape,
		unknownKeys: "strip",
		catchall: ZodNever.create(),
		typeName: ZodFirstPartyTypeKind.ZodObject,
		...processCreateParams(params)
	});
};
ZodObject.strictCreate = (shape, params) => {
	return new ZodObject({
		shape: () => shape,
		unknownKeys: "strict",
		catchall: ZodNever.create(),
		typeName: ZodFirstPartyTypeKind.ZodObject,
		...processCreateParams(params)
	});
};
ZodObject.lazycreate = (shape, params) => {
	return new ZodObject({
		shape,
		unknownKeys: "strip",
		catchall: ZodNever.create(),
		typeName: ZodFirstPartyTypeKind.ZodObject,
		...processCreateParams(params)
	});
};
var ZodUnion = class extends ZodType {
	_parse(input) {
		const { ctx } = this._processInputParams(input);
		const options = this._def.options;
		function handleResults(results) {
			for (const result of results) if (result.result.status === "valid") return result.result;
			for (const result of results) if (result.result.status === "dirty") {
				ctx.common.issues.push(...result.ctx.common.issues);
				return result.result;
			}
			const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_union,
				unionErrors
			});
			return INVALID;
		}
		if (ctx.common.async) return Promise.all(options.map(async (option) => {
			const childCtx = {
				...ctx,
				common: {
					...ctx.common,
					issues: []
				},
				parent: null
			};
			return {
				result: await option._parseAsync({
					data: ctx.data,
					path: ctx.path,
					parent: childCtx
				}),
				ctx: childCtx
			};
		})).then(handleResults);
		else {
			let dirty = void 0;
			const issues = [];
			for (const option of options) {
				const childCtx = {
					...ctx,
					common: {
						...ctx.common,
						issues: []
					},
					parent: null
				};
				const result = option._parseSync({
					data: ctx.data,
					path: ctx.path,
					parent: childCtx
				});
				if (result.status === "valid") return result;
				else if (result.status === "dirty" && !dirty) dirty = {
					result,
					ctx: childCtx
				};
				if (childCtx.common.issues.length) issues.push(childCtx.common.issues);
			}
			if (dirty) {
				ctx.common.issues.push(...dirty.ctx.common.issues);
				return dirty.result;
			}
			const unionErrors = issues.map((issues$1) => new ZodError(issues$1));
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_union,
				unionErrors
			});
			return INVALID;
		}
	}
	get options() {
		return this._def.options;
	}
};
ZodUnion.create = (types$9, params) => {
	return new ZodUnion({
		options: types$9,
		typeName: ZodFirstPartyTypeKind.ZodUnion,
		...processCreateParams(params)
	});
};
const getDiscriminator = (type) => {
	if (type instanceof ZodLazy) return getDiscriminator(type.schema);
	else if (type instanceof ZodEffects) return getDiscriminator(type.innerType());
	else if (type instanceof ZodLiteral) return [type.value];
	else if (type instanceof ZodEnum) return type.options;
	else if (type instanceof ZodNativeEnum) return util.objectValues(type.enum);
	else if (type instanceof ZodDefault) return getDiscriminator(type._def.innerType);
	else if (type instanceof ZodUndefined) return [void 0];
	else if (type instanceof ZodNull) return [null];
	else if (type instanceof ZodOptional) return [void 0, ...getDiscriminator(type.unwrap())];
	else if (type instanceof ZodNullable) return [null, ...getDiscriminator(type.unwrap())];
	else if (type instanceof ZodBranded) return getDiscriminator(type.unwrap());
	else if (type instanceof ZodReadonly) return getDiscriminator(type.unwrap());
	else if (type instanceof ZodCatch) return getDiscriminator(type._def.innerType);
	else return [];
};
var ZodDiscriminatedUnion = class ZodDiscriminatedUnion extends ZodType {
	_parse(input) {
		const { ctx } = this._processInputParams(input);
		if (ctx.parsedType !== ZodParsedType.object) {
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.object,
				received: ctx.parsedType
			});
			return INVALID;
		}
		const discriminator = this.discriminator;
		const discriminatorValue = ctx.data[discriminator];
		const option = this.optionsMap.get(discriminatorValue);
		if (!option) {
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_union_discriminator,
				options: Array.from(this.optionsMap.keys()),
				path: [discriminator]
			});
			return INVALID;
		}
		if (ctx.common.async) return option._parseAsync({
			data: ctx.data,
			path: ctx.path,
			parent: ctx
		});
		else return option._parseSync({
			data: ctx.data,
			path: ctx.path,
			parent: ctx
		});
	}
	get discriminator() {
		return this._def.discriminator;
	}
	get options() {
		return this._def.options;
	}
	get optionsMap() {
		return this._def.optionsMap;
	}
	/**
	* The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
	* However, it only allows a union of objects, all of which need to share a discriminator property. This property must
	* have a different value for each object in the union.
	* @param discriminator the name of the discriminator property
	* @param types an array of object schemas
	* @param params
	*/
	static create(discriminator, options, params) {
		const optionsMap = /* @__PURE__ */ new Map();
		for (const type of options) {
			const discriminatorValues = getDiscriminator(type.shape[discriminator]);
			if (!discriminatorValues.length) throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
			for (const value of discriminatorValues) {
				if (optionsMap.has(value)) throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
				optionsMap.set(value, type);
			}
		}
		return new ZodDiscriminatedUnion({
			typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
			discriminator,
			options,
			optionsMap,
			...processCreateParams(params)
		});
	}
};
function mergeValues(a$1, b) {
	const aType = getParsedType(a$1);
	const bType = getParsedType(b);
	if (a$1 === b) return {
		valid: true,
		data: a$1
	};
	else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
		const bKeys = util.objectKeys(b);
		const sharedKeys = util.objectKeys(a$1).filter((key) => bKeys.indexOf(key) !== -1);
		const newObj = {
			...a$1,
			...b
		};
		for (const key of sharedKeys) {
			const sharedValue = mergeValues(a$1[key], b[key]);
			if (!sharedValue.valid) return { valid: false };
			newObj[key] = sharedValue.data;
		}
		return {
			valid: true,
			data: newObj
		};
	} else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
		if (a$1.length !== b.length) return { valid: false };
		const newArray = [];
		for (let index = 0; index < a$1.length; index++) {
			const itemA = a$1[index];
			const itemB = b[index];
			const sharedValue = mergeValues(itemA, itemB);
			if (!sharedValue.valid) return { valid: false };
			newArray.push(sharedValue.data);
		}
		return {
			valid: true,
			data: newArray
		};
	} else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a$1 === +b) return {
		valid: true,
		data: a$1
	};
	else return { valid: false };
}
var ZodIntersection = class extends ZodType {
	_parse(input) {
		const { status, ctx } = this._processInputParams(input);
		const handleParsed = (parsedLeft, parsedRight) => {
			if (isAborted(parsedLeft) || isAborted(parsedRight)) return INVALID;
			const merged = mergeValues(parsedLeft.value, parsedRight.value);
			if (!merged.valid) {
				addIssueToContext(ctx, { code: ZodIssueCode.invalid_intersection_types });
				return INVALID;
			}
			if (isDirty(parsedLeft) || isDirty(parsedRight)) status.dirty();
			return {
				status: status.value,
				value: merged.data
			};
		};
		if (ctx.common.async) return Promise.all([this._def.left._parseAsync({
			data: ctx.data,
			path: ctx.path,
			parent: ctx
		}), this._def.right._parseAsync({
			data: ctx.data,
			path: ctx.path,
			parent: ctx
		})]).then(([left, right]) => handleParsed(left, right));
		else return handleParsed(this._def.left._parseSync({
			data: ctx.data,
			path: ctx.path,
			parent: ctx
		}), this._def.right._parseSync({
			data: ctx.data,
			path: ctx.path,
			parent: ctx
		}));
	}
};
ZodIntersection.create = (left, right, params) => {
	return new ZodIntersection({
		left,
		right,
		typeName: ZodFirstPartyTypeKind.ZodIntersection,
		...processCreateParams(params)
	});
};
var ZodTuple = class ZodTuple extends ZodType {
	_parse(input) {
		const { status, ctx } = this._processInputParams(input);
		if (ctx.parsedType !== ZodParsedType.array) {
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.array,
				received: ctx.parsedType
			});
			return INVALID;
		}
		if (ctx.data.length < this._def.items.length) {
			addIssueToContext(ctx, {
				code: ZodIssueCode.too_small,
				minimum: this._def.items.length,
				inclusive: true,
				exact: false,
				type: "array"
			});
			return INVALID;
		}
		const rest = this._def.rest;
		if (!rest && ctx.data.length > this._def.items.length) {
			addIssueToContext(ctx, {
				code: ZodIssueCode.too_big,
				maximum: this._def.items.length,
				inclusive: true,
				exact: false,
				type: "array"
			});
			status.dirty();
		}
		const items = [...ctx.data].map((item, itemIndex) => {
			const schema = this._def.items[itemIndex] || this._def.rest;
			if (!schema) return null;
			return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
		}).filter((x) => !!x);
		if (ctx.common.async) return Promise.all(items).then((results) => {
			return ParseStatus.mergeArray(status, results);
		});
		else return ParseStatus.mergeArray(status, items);
	}
	get items() {
		return this._def.items;
	}
	rest(rest) {
		return new ZodTuple({
			...this._def,
			rest
		});
	}
};
ZodTuple.create = (schemas, params) => {
	if (!Array.isArray(schemas)) throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
	return new ZodTuple({
		items: schemas,
		typeName: ZodFirstPartyTypeKind.ZodTuple,
		rest: null,
		...processCreateParams(params)
	});
};
var ZodRecord = class ZodRecord extends ZodType {
	get keySchema() {
		return this._def.keyType;
	}
	get valueSchema() {
		return this._def.valueType;
	}
	_parse(input) {
		const { status, ctx } = this._processInputParams(input);
		if (ctx.parsedType !== ZodParsedType.object) {
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.object,
				received: ctx.parsedType
			});
			return INVALID;
		}
		const pairs = [];
		const keyType = this._def.keyType;
		const valueType = this._def.valueType;
		for (const key in ctx.data) pairs.push({
			key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
			value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
			alwaysSet: key in ctx.data
		});
		if (ctx.common.async) return ParseStatus.mergeObjectAsync(status, pairs);
		else return ParseStatus.mergeObjectSync(status, pairs);
	}
	get element() {
		return this._def.valueType;
	}
	static create(first, second, third) {
		if (second instanceof ZodType) return new ZodRecord({
			keyType: first,
			valueType: second,
			typeName: ZodFirstPartyTypeKind.ZodRecord,
			...processCreateParams(third)
		});
		return new ZodRecord({
			keyType: ZodString.create(),
			valueType: first,
			typeName: ZodFirstPartyTypeKind.ZodRecord,
			...processCreateParams(second)
		});
	}
};
var ZodMap = class extends ZodType {
	get keySchema() {
		return this._def.keyType;
	}
	get valueSchema() {
		return this._def.valueType;
	}
	_parse(input) {
		const { status, ctx } = this._processInputParams(input);
		if (ctx.parsedType !== ZodParsedType.map) {
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.map,
				received: ctx.parsedType
			});
			return INVALID;
		}
		const keyType = this._def.keyType;
		const valueType = this._def.valueType;
		const pairs = [...ctx.data.entries()].map(([key, value], index) => {
			return {
				key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
				value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
			};
		});
		if (ctx.common.async) {
			const finalMap = /* @__PURE__ */ new Map();
			return Promise.resolve().then(async () => {
				for (const pair of pairs) {
					const key = await pair.key;
					const value = await pair.value;
					if (key.status === "aborted" || value.status === "aborted") return INVALID;
					if (key.status === "dirty" || value.status === "dirty") status.dirty();
					finalMap.set(key.value, value.value);
				}
				return {
					status: status.value,
					value: finalMap
				};
			});
		} else {
			const finalMap = /* @__PURE__ */ new Map();
			for (const pair of pairs) {
				const key = pair.key;
				const value = pair.value;
				if (key.status === "aborted" || value.status === "aborted") return INVALID;
				if (key.status === "dirty" || value.status === "dirty") status.dirty();
				finalMap.set(key.value, value.value);
			}
			return {
				status: status.value,
				value: finalMap
			};
		}
	}
};
ZodMap.create = (keyType, valueType, params) => {
	return new ZodMap({
		valueType,
		keyType,
		typeName: ZodFirstPartyTypeKind.ZodMap,
		...processCreateParams(params)
	});
};
var ZodSet = class ZodSet extends ZodType {
	_parse(input) {
		const { status, ctx } = this._processInputParams(input);
		if (ctx.parsedType !== ZodParsedType.set) {
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.set,
				received: ctx.parsedType
			});
			return INVALID;
		}
		const def = this._def;
		if (def.minSize !== null) {
			if (ctx.data.size < def.minSize.value) {
				addIssueToContext(ctx, {
					code: ZodIssueCode.too_small,
					minimum: def.minSize.value,
					type: "set",
					inclusive: true,
					exact: false,
					message: def.minSize.message
				});
				status.dirty();
			}
		}
		if (def.maxSize !== null) {
			if (ctx.data.size > def.maxSize.value) {
				addIssueToContext(ctx, {
					code: ZodIssueCode.too_big,
					maximum: def.maxSize.value,
					type: "set",
					inclusive: true,
					exact: false,
					message: def.maxSize.message
				});
				status.dirty();
			}
		}
		const valueType = this._def.valueType;
		function finalizeSet(elements$1) {
			const parsedSet = /* @__PURE__ */ new Set();
			for (const element of elements$1) {
				if (element.status === "aborted") return INVALID;
				if (element.status === "dirty") status.dirty();
				parsedSet.add(element.value);
			}
			return {
				status: status.value,
				value: parsedSet
			};
		}
		const elements = [...ctx.data.values()].map((item, i$1) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i$1)));
		if (ctx.common.async) return Promise.all(elements).then((elements$1) => finalizeSet(elements$1));
		else return finalizeSet(elements);
	}
	min(minSize, message) {
		return new ZodSet({
			...this._def,
			minSize: {
				value: minSize,
				message: errorUtil.toString(message)
			}
		});
	}
	max(maxSize, message) {
		return new ZodSet({
			...this._def,
			maxSize: {
				value: maxSize,
				message: errorUtil.toString(message)
			}
		});
	}
	size(size, message) {
		return this.min(size, message).max(size, message);
	}
	nonempty(message) {
		return this.min(1, message);
	}
};
ZodSet.create = (valueType, params) => {
	return new ZodSet({
		valueType,
		minSize: null,
		maxSize: null,
		typeName: ZodFirstPartyTypeKind.ZodSet,
		...processCreateParams(params)
	});
};
var ZodFunction = class ZodFunction extends ZodType {
	constructor() {
		super(...arguments);
		this.validate = this.implement;
	}
	_parse(input) {
		const { ctx } = this._processInputParams(input);
		if (ctx.parsedType !== ZodParsedType.function) {
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.function,
				received: ctx.parsedType
			});
			return INVALID;
		}
		function makeArgsIssue(args, error$1) {
			return makeIssue({
				data: args,
				path: ctx.path,
				errorMaps: [
					ctx.common.contextualErrorMap,
					ctx.schemaErrorMap,
					getErrorMap(),
					en_default
				].filter((x) => !!x),
				issueData: {
					code: ZodIssueCode.invalid_arguments,
					argumentsError: error$1
				}
			});
		}
		function makeReturnsIssue(returns, error$1) {
			return makeIssue({
				data: returns,
				path: ctx.path,
				errorMaps: [
					ctx.common.contextualErrorMap,
					ctx.schemaErrorMap,
					getErrorMap(),
					en_default
				].filter((x) => !!x),
				issueData: {
					code: ZodIssueCode.invalid_return_type,
					returnTypeError: error$1
				}
			});
		}
		const params = { errorMap: ctx.common.contextualErrorMap };
		const fn = ctx.data;
		if (this._def.returns instanceof ZodPromise) {
			const me = this;
			return OK(async function(...args) {
				const error$1 = new ZodError([]);
				const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
					error$1.addIssue(makeArgsIssue(args, e));
					throw error$1;
				});
				const result = await Reflect.apply(fn, this, parsedArgs);
				const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
					error$1.addIssue(makeReturnsIssue(result, e));
					throw error$1;
				});
				return parsedReturns;
			});
		} else {
			const me = this;
			return OK(function(...args) {
				const parsedArgs = me._def.args.safeParse(args, params);
				if (!parsedArgs.success) throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
				const result = Reflect.apply(fn, this, parsedArgs.data);
				const parsedReturns = me._def.returns.safeParse(result, params);
				if (!parsedReturns.success) throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
				return parsedReturns.data;
			});
		}
	}
	parameters() {
		return this._def.args;
	}
	returnType() {
		return this._def.returns;
	}
	args(...items) {
		return new ZodFunction({
			...this._def,
			args: ZodTuple.create(items).rest(ZodUnknown.create())
		});
	}
	returns(returnType) {
		return new ZodFunction({
			...this._def,
			returns: returnType
		});
	}
	implement(func) {
		const validatedFunc = this.parse(func);
		return validatedFunc;
	}
	strictImplement(func) {
		const validatedFunc = this.parse(func);
		return validatedFunc;
	}
	static create(args, returns, params) {
		return new ZodFunction({
			args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
			returns: returns || ZodUnknown.create(),
			typeName: ZodFirstPartyTypeKind.ZodFunction,
			...processCreateParams(params)
		});
	}
};
var ZodLazy = class extends ZodType {
	get schema() {
		return this._def.getter();
	}
	_parse(input) {
		const { ctx } = this._processInputParams(input);
		const lazySchema = this._def.getter();
		return lazySchema._parse({
			data: ctx.data,
			path: ctx.path,
			parent: ctx
		});
	}
};
ZodLazy.create = (getter, params) => {
	return new ZodLazy({
		getter,
		typeName: ZodFirstPartyTypeKind.ZodLazy,
		...processCreateParams(params)
	});
};
var ZodLiteral = class extends ZodType {
	_parse(input) {
		if (input.data !== this._def.value) {
			const ctx = this._getOrReturnCtx(input);
			addIssueToContext(ctx, {
				received: ctx.data,
				code: ZodIssueCode.invalid_literal,
				expected: this._def.value
			});
			return INVALID;
		}
		return {
			status: "valid",
			value: input.data
		};
	}
	get value() {
		return this._def.value;
	}
};
ZodLiteral.create = (value, params) => {
	return new ZodLiteral({
		value,
		typeName: ZodFirstPartyTypeKind.ZodLiteral,
		...processCreateParams(params)
	});
};
function createZodEnum(values, params) {
	return new ZodEnum({
		values,
		typeName: ZodFirstPartyTypeKind.ZodEnum,
		...processCreateParams(params)
	});
}
var ZodEnum = class ZodEnum extends ZodType {
	_parse(input) {
		if (typeof input.data !== "string") {
			const ctx = this._getOrReturnCtx(input);
			const expectedValues = this._def.values;
			addIssueToContext(ctx, {
				expected: util.joinValues(expectedValues),
				received: ctx.parsedType,
				code: ZodIssueCode.invalid_type
			});
			return INVALID;
		}
		if (!this._cache) this._cache = new Set(this._def.values);
		if (!this._cache.has(input.data)) {
			const ctx = this._getOrReturnCtx(input);
			const expectedValues = this._def.values;
			addIssueToContext(ctx, {
				received: ctx.data,
				code: ZodIssueCode.invalid_enum_value,
				options: expectedValues
			});
			return INVALID;
		}
		return OK(input.data);
	}
	get options() {
		return this._def.values;
	}
	get enum() {
		const enumValues = {};
		for (const val of this._def.values) enumValues[val] = val;
		return enumValues;
	}
	get Values() {
		const enumValues = {};
		for (const val of this._def.values) enumValues[val] = val;
		return enumValues;
	}
	get Enum() {
		const enumValues = {};
		for (const val of this._def.values) enumValues[val] = val;
		return enumValues;
	}
	extract(values, newDef = this._def) {
		return ZodEnum.create(values, {
			...this._def,
			...newDef
		});
	}
	exclude(values, newDef = this._def) {
		return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
			...this._def,
			...newDef
		});
	}
};
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
	_parse(input) {
		const nativeEnumValues = util.getValidEnumValues(this._def.values);
		const ctx = this._getOrReturnCtx(input);
		if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
			const expectedValues = util.objectValues(nativeEnumValues);
			addIssueToContext(ctx, {
				expected: util.joinValues(expectedValues),
				received: ctx.parsedType,
				code: ZodIssueCode.invalid_type
			});
			return INVALID;
		}
		if (!this._cache) this._cache = new Set(util.getValidEnumValues(this._def.values));
		if (!this._cache.has(input.data)) {
			const expectedValues = util.objectValues(nativeEnumValues);
			addIssueToContext(ctx, {
				received: ctx.data,
				code: ZodIssueCode.invalid_enum_value,
				options: expectedValues
			});
			return INVALID;
		}
		return OK(input.data);
	}
	get enum() {
		return this._def.values;
	}
};
ZodNativeEnum.create = (values, params) => {
	return new ZodNativeEnum({
		values,
		typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
		...processCreateParams(params)
	});
};
var ZodPromise = class extends ZodType {
	unwrap() {
		return this._def.type;
	}
	_parse(input) {
		const { ctx } = this._processInputParams(input);
		if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.promise,
				received: ctx.parsedType
			});
			return INVALID;
		}
		const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
		return OK(promisified.then((data$1) => {
			return this._def.type.parseAsync(data$1, {
				path: ctx.path,
				errorMap: ctx.common.contextualErrorMap
			});
		}));
	}
};
ZodPromise.create = (schema, params) => {
	return new ZodPromise({
		type: schema,
		typeName: ZodFirstPartyTypeKind.ZodPromise,
		...processCreateParams(params)
	});
};
var ZodEffects = class extends ZodType {
	innerType() {
		return this._def.schema;
	}
	sourceType() {
		return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
	}
	_parse(input) {
		const { status, ctx } = this._processInputParams(input);
		const effect = this._def.effect || null;
		const checkCtx = {
			addIssue: (arg) => {
				addIssueToContext(ctx, arg);
				if (arg.fatal) status.abort();
				else status.dirty();
			},
			get path() {
				return ctx.path;
			}
		};
		checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
		if (effect.type === "preprocess") {
			const processed = effect.transform(ctx.data, checkCtx);
			if (ctx.common.async) return Promise.resolve(processed).then(async (processed$1) => {
				if (status.value === "aborted") return INVALID;
				const result = await this._def.schema._parseAsync({
					data: processed$1,
					path: ctx.path,
					parent: ctx
				});
				if (result.status === "aborted") return INVALID;
				if (result.status === "dirty") return DIRTY(result.value);
				if (status.value === "dirty") return DIRTY(result.value);
				return result;
			});
			else {
				if (status.value === "aborted") return INVALID;
				const result = this._def.schema._parseSync({
					data: processed,
					path: ctx.path,
					parent: ctx
				});
				if (result.status === "aborted") return INVALID;
				if (result.status === "dirty") return DIRTY(result.value);
				if (status.value === "dirty") return DIRTY(result.value);
				return result;
			}
		}
		if (effect.type === "refinement") {
			const executeRefinement = (acc) => {
				const result = effect.refinement(acc, checkCtx);
				if (ctx.common.async) return Promise.resolve(result);
				if (result instanceof Promise) throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
				return acc;
			};
			if (ctx.common.async === false) {
				const inner = this._def.schema._parseSync({
					data: ctx.data,
					path: ctx.path,
					parent: ctx
				});
				if (inner.status === "aborted") return INVALID;
				if (inner.status === "dirty") status.dirty();
				executeRefinement(inner.value);
				return {
					status: status.value,
					value: inner.value
				};
			} else return this._def.schema._parseAsync({
				data: ctx.data,
				path: ctx.path,
				parent: ctx
			}).then((inner) => {
				if (inner.status === "aborted") return INVALID;
				if (inner.status === "dirty") status.dirty();
				return executeRefinement(inner.value).then(() => {
					return {
						status: status.value,
						value: inner.value
					};
				});
			});
		}
		if (effect.type === "transform") if (ctx.common.async === false) {
			const base = this._def.schema._parseSync({
				data: ctx.data,
				path: ctx.path,
				parent: ctx
			});
			if (!isValid(base)) return INVALID;
			const result = effect.transform(base.value, checkCtx);
			if (result instanceof Promise) throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
			return {
				status: status.value,
				value: result
			};
		} else return this._def.schema._parseAsync({
			data: ctx.data,
			path: ctx.path,
			parent: ctx
		}).then((base) => {
			if (!isValid(base)) return INVALID;
			return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({
				status: status.value,
				value: result
			}));
		});
		util.assertNever(effect);
	}
};
ZodEffects.create = (schema, effect, params) => {
	return new ZodEffects({
		schema,
		typeName: ZodFirstPartyTypeKind.ZodEffects,
		effect,
		...processCreateParams(params)
	});
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
	return new ZodEffects({
		schema,
		effect: {
			type: "preprocess",
			transform: preprocess
		},
		typeName: ZodFirstPartyTypeKind.ZodEffects,
		...processCreateParams(params)
	});
};
var ZodOptional = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType === ZodParsedType.undefined) return OK(void 0);
		return this._def.innerType._parse(input);
	}
	unwrap() {
		return this._def.innerType;
	}
};
ZodOptional.create = (type, params) => {
	return new ZodOptional({
		innerType: type,
		typeName: ZodFirstPartyTypeKind.ZodOptional,
		...processCreateParams(params)
	});
};
var ZodNullable = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType === ZodParsedType.null) return OK(null);
		return this._def.innerType._parse(input);
	}
	unwrap() {
		return this._def.innerType;
	}
};
ZodNullable.create = (type, params) => {
	return new ZodNullable({
		innerType: type,
		typeName: ZodFirstPartyTypeKind.ZodNullable,
		...processCreateParams(params)
	});
};
var ZodDefault = class extends ZodType {
	_parse(input) {
		const { ctx } = this._processInputParams(input);
		let data$1 = ctx.data;
		if (ctx.parsedType === ZodParsedType.undefined) data$1 = this._def.defaultValue();
		return this._def.innerType._parse({
			data: data$1,
			path: ctx.path,
			parent: ctx
		});
	}
	removeDefault() {
		return this._def.innerType;
	}
};
ZodDefault.create = (type, params) => {
	return new ZodDefault({
		innerType: type,
		typeName: ZodFirstPartyTypeKind.ZodDefault,
		defaultValue: typeof params.default === "function" ? params.default : () => params.default,
		...processCreateParams(params)
	});
};
var ZodCatch = class extends ZodType {
	_parse(input) {
		const { ctx } = this._processInputParams(input);
		const newCtx = {
			...ctx,
			common: {
				...ctx.common,
				issues: []
			}
		};
		const result = this._def.innerType._parse({
			data: newCtx.data,
			path: newCtx.path,
			parent: { ...newCtx }
		});
		if (isAsync(result)) return result.then((result$1) => {
			return {
				status: "valid",
				value: result$1.status === "valid" ? result$1.value : this._def.catchValue({
					get error() {
						return new ZodError(newCtx.common.issues);
					},
					input: newCtx.data
				})
			};
		});
		else return {
			status: "valid",
			value: result.status === "valid" ? result.value : this._def.catchValue({
				get error() {
					return new ZodError(newCtx.common.issues);
				},
				input: newCtx.data
			})
		};
	}
	removeCatch() {
		return this._def.innerType;
	}
};
ZodCatch.create = (type, params) => {
	return new ZodCatch({
		innerType: type,
		typeName: ZodFirstPartyTypeKind.ZodCatch,
		catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
		...processCreateParams(params)
	});
};
var ZodNaN = class extends ZodType {
	_parse(input) {
		const parsedType = this._getType(input);
		if (parsedType !== ZodParsedType.nan) {
			const ctx = this._getOrReturnCtx(input);
			addIssueToContext(ctx, {
				code: ZodIssueCode.invalid_type,
				expected: ZodParsedType.nan,
				received: ctx.parsedType
			});
			return INVALID;
		}
		return {
			status: "valid",
			value: input.data
		};
	}
};
ZodNaN.create = (params) => {
	return new ZodNaN({
		typeName: ZodFirstPartyTypeKind.ZodNaN,
		...processCreateParams(params)
	});
};
const BRAND = Symbol("zod_brand");
var ZodBranded = class extends ZodType {
	_parse(input) {
		const { ctx } = this._processInputParams(input);
		const data$1 = ctx.data;
		return this._def.type._parse({
			data: data$1,
			path: ctx.path,
			parent: ctx
		});
	}
	unwrap() {
		return this._def.type;
	}
};
var ZodPipeline = class ZodPipeline extends ZodType {
	_parse(input) {
		const { status, ctx } = this._processInputParams(input);
		if (ctx.common.async) {
			const handleAsync = async () => {
				const inResult = await this._def.in._parseAsync({
					data: ctx.data,
					path: ctx.path,
					parent: ctx
				});
				if (inResult.status === "aborted") return INVALID;
				if (inResult.status === "dirty") {
					status.dirty();
					return DIRTY(inResult.value);
				} else return this._def.out._parseAsync({
					data: inResult.value,
					path: ctx.path,
					parent: ctx
				});
			};
			return handleAsync();
		} else {
			const inResult = this._def.in._parseSync({
				data: ctx.data,
				path: ctx.path,
				parent: ctx
			});
			if (inResult.status === "aborted") return INVALID;
			if (inResult.status === "dirty") {
				status.dirty();
				return {
					status: "dirty",
					value: inResult.value
				};
			} else return this._def.out._parseSync({
				data: inResult.value,
				path: ctx.path,
				parent: ctx
			});
		}
	}
	static create(a$1, b) {
		return new ZodPipeline({
			in: a$1,
			out: b,
			typeName: ZodFirstPartyTypeKind.ZodPipeline
		});
	}
};
var ZodReadonly = class extends ZodType {
	_parse(input) {
		const result = this._def.innerType._parse(input);
		const freeze = (data$1) => {
			if (isValid(data$1)) data$1.value = Object.freeze(data$1.value);
			return data$1;
		};
		return isAsync(result) ? result.then((data$1) => freeze(data$1)) : freeze(result);
	}
	unwrap() {
		return this._def.innerType;
	}
};
ZodReadonly.create = (type, params) => {
	return new ZodReadonly({
		innerType: type,
		typeName: ZodFirstPartyTypeKind.ZodReadonly,
		...processCreateParams(params)
	});
};
function cleanParams(params, data$1) {
	const p = typeof params === "function" ? params(data$1) : typeof params === "string" ? { message: params } : params;
	const p2 = typeof p === "string" ? { message: p } : p;
	return p2;
}
function custom(check$1, _params = {}, fatal) {
	if (check$1) return ZodAny.create().superRefine((data$1, ctx) => {
		const r = check$1(data$1);
		if (r instanceof Promise) return r.then((r$1) => {
			if (!r$1) {
				const params = cleanParams(_params, data$1);
				const _fatal = params.fatal ?? fatal ?? true;
				ctx.addIssue({
					code: "custom",
					...params,
					fatal: _fatal
				});
			}
		});
		if (!r) {
			const params = cleanParams(_params, data$1);
			const _fatal = params.fatal ?? fatal ?? true;
			ctx.addIssue({
				code: "custom",
				...params,
				fatal: _fatal
			});
		}
		return;
	});
	return ZodAny.create();
}
const late = { object: ZodObject.lazycreate };
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind$1) {
	ZodFirstPartyTypeKind$1["ZodString"] = "ZodString";
	ZodFirstPartyTypeKind$1["ZodNumber"] = "ZodNumber";
	ZodFirstPartyTypeKind$1["ZodNaN"] = "ZodNaN";
	ZodFirstPartyTypeKind$1["ZodBigInt"] = "ZodBigInt";
	ZodFirstPartyTypeKind$1["ZodBoolean"] = "ZodBoolean";
	ZodFirstPartyTypeKind$1["ZodDate"] = "ZodDate";
	ZodFirstPartyTypeKind$1["ZodSymbol"] = "ZodSymbol";
	ZodFirstPartyTypeKind$1["ZodUndefined"] = "ZodUndefined";
	ZodFirstPartyTypeKind$1["ZodNull"] = "ZodNull";
	ZodFirstPartyTypeKind$1["ZodAny"] = "ZodAny";
	ZodFirstPartyTypeKind$1["ZodUnknown"] = "ZodUnknown";
	ZodFirstPartyTypeKind$1["ZodNever"] = "ZodNever";
	ZodFirstPartyTypeKind$1["ZodVoid"] = "ZodVoid";
	ZodFirstPartyTypeKind$1["ZodArray"] = "ZodArray";
	ZodFirstPartyTypeKind$1["ZodObject"] = "ZodObject";
	ZodFirstPartyTypeKind$1["ZodUnion"] = "ZodUnion";
	ZodFirstPartyTypeKind$1["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
	ZodFirstPartyTypeKind$1["ZodIntersection"] = "ZodIntersection";
	ZodFirstPartyTypeKind$1["ZodTuple"] = "ZodTuple";
	ZodFirstPartyTypeKind$1["ZodRecord"] = "ZodRecord";
	ZodFirstPartyTypeKind$1["ZodMap"] = "ZodMap";
	ZodFirstPartyTypeKind$1["ZodSet"] = "ZodSet";
	ZodFirstPartyTypeKind$1["ZodFunction"] = "ZodFunction";
	ZodFirstPartyTypeKind$1["ZodLazy"] = "ZodLazy";
	ZodFirstPartyTypeKind$1["ZodLiteral"] = "ZodLiteral";
	ZodFirstPartyTypeKind$1["ZodEnum"] = "ZodEnum";
	ZodFirstPartyTypeKind$1["ZodEffects"] = "ZodEffects";
	ZodFirstPartyTypeKind$1["ZodNativeEnum"] = "ZodNativeEnum";
	ZodFirstPartyTypeKind$1["ZodOptional"] = "ZodOptional";
	ZodFirstPartyTypeKind$1["ZodNullable"] = "ZodNullable";
	ZodFirstPartyTypeKind$1["ZodDefault"] = "ZodDefault";
	ZodFirstPartyTypeKind$1["ZodCatch"] = "ZodCatch";
	ZodFirstPartyTypeKind$1["ZodPromise"] = "ZodPromise";
	ZodFirstPartyTypeKind$1["ZodBranded"] = "ZodBranded";
	ZodFirstPartyTypeKind$1["ZodPipeline"] = "ZodPipeline";
	ZodFirstPartyTypeKind$1["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
const instanceOfType = (cls, params = { message: `Input not instance of ${cls.name}` }) => custom((data$1) => data$1 instanceof cls, params);
const stringType = ZodString.create;
const numberType = ZodNumber.create;
const nanType = ZodNaN.create;
const bigIntType = ZodBigInt.create;
const booleanType = ZodBoolean.create;
const dateType = ZodDate.create;
const symbolType = ZodSymbol.create;
const undefinedType = ZodUndefined.create;
const nullType = ZodNull.create;
const anyType = ZodAny.create;
const unknownType = ZodUnknown.create;
const neverType = ZodNever.create;
const voidType = ZodVoid.create;
const arrayType = ZodArray.create;
const objectType = ZodObject.create;
const strictObjectType = ZodObject.strictCreate;
const unionType = ZodUnion.create;
const discriminatedUnionType = ZodDiscriminatedUnion.create;
const intersectionType = ZodIntersection.create;
const tupleType = ZodTuple.create;
const recordType = ZodRecord.create;
const mapType = ZodMap.create;
const setType = ZodSet.create;
const functionType = ZodFunction.create;
const lazyType = ZodLazy.create;
const literalType = ZodLiteral.create;
const enumType = ZodEnum.create;
const nativeEnumType = ZodNativeEnum.create;
const promiseType = ZodPromise.create;
const effectsType = ZodEffects.create;
const optionalType = ZodOptional.create;
const nullableType = ZodNullable.create;
const preprocessType = ZodEffects.createWithPreprocess;
const pipelineType = ZodPipeline.create;

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/any.js
function parseAnyDef(refs) {
	if (refs.target !== "openAi") return {};
	const anyDefinitionPath = [
		...refs.basePath,
		refs.definitionPath,
		refs.openAiAnyTypeName
	];
	refs.flags.hasReferencedOpenAiAnyType = true;
	return { $ref: refs.$refStrategy === "relative" ? getRelativePath(anyDefinitionPath, refs.currentPath) : anyDefinitionPath.join("/") };
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/array.js
function parseArrayDef(def, refs) {
	const res = { type: "array" };
	if (def.type?._def && def.type?._def?.typeName !== ZodFirstPartyTypeKind.ZodAny) res.items = parseDef(def.type._def, {
		...refs,
		currentPath: [...refs.currentPath, "items"]
	});
	if (def.minLength) setResponseValueAndErrors(res, "minItems", def.minLength.value, def.minLength.message, refs);
	if (def.maxLength) setResponseValueAndErrors(res, "maxItems", def.maxLength.value, def.maxLength.message, refs);
	if (def.exactLength) {
		setResponseValueAndErrors(res, "minItems", def.exactLength.value, def.exactLength.message, refs);
		setResponseValueAndErrors(res, "maxItems", def.exactLength.value, def.exactLength.message, refs);
	}
	return res;
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/bigint.js
function parseBigintDef(def, refs) {
	const res = {
		type: "integer",
		format: "int64"
	};
	if (!def.checks) return res;
	for (const check$1 of def.checks) switch (check$1.kind) {
		case "min":
			if (refs.target === "jsonSchema7") if (check$1.inclusive) setResponseValueAndErrors(res, "minimum", check$1.value, check$1.message, refs);
			else setResponseValueAndErrors(res, "exclusiveMinimum", check$1.value, check$1.message, refs);
			else {
				if (!check$1.inclusive) res.exclusiveMinimum = true;
				setResponseValueAndErrors(res, "minimum", check$1.value, check$1.message, refs);
			}
			break;
		case "max":
			if (refs.target === "jsonSchema7") if (check$1.inclusive) setResponseValueAndErrors(res, "maximum", check$1.value, check$1.message, refs);
			else setResponseValueAndErrors(res, "exclusiveMaximum", check$1.value, check$1.message, refs);
			else {
				if (!check$1.inclusive) res.exclusiveMaximum = true;
				setResponseValueAndErrors(res, "maximum", check$1.value, check$1.message, refs);
			}
			break;
		case "multipleOf":
			setResponseValueAndErrors(res, "multipleOf", check$1.value, check$1.message, refs);
			break;
	}
	return res;
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/boolean.js
function parseBooleanDef() {
	return { type: "boolean" };
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/branded.js
function parseBrandedDef(_def, refs) {
	return parseDef(_def.type._def, refs);
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/catch.js
const parseCatchDef = (def, refs) => {
	return parseDef(def.innerType._def, refs);
};

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/date.js
function parseDateDef(def, refs, overrideDateStrategy) {
	const strategy = overrideDateStrategy ?? refs.dateStrategy;
	if (Array.isArray(strategy)) return { anyOf: strategy.map((item, i$1) => parseDateDef(def, refs, item)) };
	switch (strategy) {
		case "string":
		case "format:date-time": return {
			type: "string",
			format: "date-time"
		};
		case "format:date": return {
			type: "string",
			format: "date"
		};
		case "integer": return integerDateParser(def, refs);
	}
}
const integerDateParser = (def, refs) => {
	const res = {
		type: "integer",
		format: "unix-time"
	};
	if (refs.target === "openApi3") return res;
	for (const check$1 of def.checks) switch (check$1.kind) {
		case "min":
			setResponseValueAndErrors(res, "minimum", check$1.value, check$1.message, refs);
			break;
		case "max":
			setResponseValueAndErrors(res, "maximum", check$1.value, check$1.message, refs);
			break;
	}
	return res;
};

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/default.js
function parseDefaultDef(_def, refs) {
	return {
		...parseDef(_def.innerType._def, refs),
		default: _def.defaultValue()
	};
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/effects.js
function parseEffectsDef(_def, refs) {
	return refs.effectStrategy === "input" ? parseDef(_def.schema._def, refs) : parseAnyDef(refs);
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/enum.js
function parseEnumDef(def) {
	return {
		type: "string",
		enum: Array.from(def.values)
	};
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/intersection.js
const isJsonSchema7AllOfType = (type) => {
	if ("type" in type && type.type === "string") return false;
	return "allOf" in type;
};
function parseIntersectionDef(def, refs) {
	const allOf = [parseDef(def.left._def, {
		...refs,
		currentPath: [
			...refs.currentPath,
			"allOf",
			"0"
		]
	}), parseDef(def.right._def, {
		...refs,
		currentPath: [
			...refs.currentPath,
			"allOf",
			"1"
		]
	})].filter((x) => !!x);
	let unevaluatedProperties = refs.target === "jsonSchema2019-09" ? { unevaluatedProperties: false } : void 0;
	const mergedAllOf = [];
	allOf.forEach((schema) => {
		if (isJsonSchema7AllOfType(schema)) {
			mergedAllOf.push(...schema.allOf);
			if (schema.unevaluatedProperties === void 0) unevaluatedProperties = void 0;
		} else {
			let nestedSchema = schema;
			if ("additionalProperties" in schema && schema.additionalProperties === false) {
				const { additionalProperties,...rest } = schema;
				nestedSchema = rest;
			} else unevaluatedProperties = void 0;
			mergedAllOf.push(nestedSchema);
		}
	});
	return mergedAllOf.length ? {
		allOf: mergedAllOf,
		...unevaluatedProperties
	} : void 0;
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/literal.js
function parseLiteralDef(def, refs) {
	const parsedType = typeof def.value;
	if (parsedType !== "bigint" && parsedType !== "number" && parsedType !== "boolean" && parsedType !== "string") return { type: Array.isArray(def.value) ? "array" : "object" };
	if (refs.target === "openApi3") return {
		type: parsedType === "bigint" ? "integer" : parsedType,
		enum: [def.value]
	};
	return {
		type: parsedType === "bigint" ? "integer" : parsedType,
		const: def.value
	};
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/string.js
let emojiRegex = void 0;
/**
* Generated from the regular expressions found here as of 2024-05-22:
* https://github.com/colinhacks/zod/blob/master/src/types.ts.
*
* Expressions with /i flag have been changed accordingly.
*/
const zodPatterns = {
	cuid: /^[cC][^\s-]{8,}$/,
	cuid2: /^[0-9a-z]+$/,
	ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
	email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
	emoji: () => {
		if (emojiRegex === void 0) emojiRegex = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u");
		return emojiRegex;
	},
	uuid: /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/,
	ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
	ipv4Cidr: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,
	ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,
	ipv6Cidr: /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,
	base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
	base64url: /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,
	nanoid: /^[a-zA-Z0-9_-]{21}$/,
	jwt: /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/
};
function parseStringDef(def, refs) {
	const res = { type: "string" };
	if (def.checks) for (const check$1 of def.checks) switch (check$1.kind) {
		case "min":
			setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check$1.value) : check$1.value, check$1.message, refs);
			break;
		case "max":
			setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check$1.value) : check$1.value, check$1.message, refs);
			break;
		case "email":
			switch (refs.emailStrategy) {
				case "format:email":
					addFormat(res, "email", check$1.message, refs);
					break;
				case "format:idn-email":
					addFormat(res, "idn-email", check$1.message, refs);
					break;
				case "pattern:zod":
					addPattern(res, zodPatterns.email, check$1.message, refs);
					break;
			}
			break;
		case "url":
			addFormat(res, "uri", check$1.message, refs);
			break;
		case "uuid":
			addFormat(res, "uuid", check$1.message, refs);
			break;
		case "regex":
			addPattern(res, check$1.regex, check$1.message, refs);
			break;
		case "cuid":
			addPattern(res, zodPatterns.cuid, check$1.message, refs);
			break;
		case "cuid2":
			addPattern(res, zodPatterns.cuid2, check$1.message, refs);
			break;
		case "startsWith":
			addPattern(res, RegExp(`^${escapeLiteralCheckValue(check$1.value, refs)}`), check$1.message, refs);
			break;
		case "endsWith":
			addPattern(res, RegExp(`${escapeLiteralCheckValue(check$1.value, refs)}$`), check$1.message, refs);
			break;
		case "datetime":
			addFormat(res, "date-time", check$1.message, refs);
			break;
		case "date":
			addFormat(res, "date", check$1.message, refs);
			break;
		case "time":
			addFormat(res, "time", check$1.message, refs);
			break;
		case "duration":
			addFormat(res, "duration", check$1.message, refs);
			break;
		case "length":
			setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check$1.value) : check$1.value, check$1.message, refs);
			setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check$1.value) : check$1.value, check$1.message, refs);
			break;
		case "includes": {
			addPattern(res, RegExp(escapeLiteralCheckValue(check$1.value, refs)), check$1.message, refs);
			break;
		}
		case "ip": {
			if (check$1.version !== "v6") addFormat(res, "ipv4", check$1.message, refs);
			if (check$1.version !== "v4") addFormat(res, "ipv6", check$1.message, refs);
			break;
		}
		case "base64url":
			addPattern(res, zodPatterns.base64url, check$1.message, refs);
			break;
		case "jwt":
			addPattern(res, zodPatterns.jwt, check$1.message, refs);
			break;
		case "cidr": {
			if (check$1.version !== "v6") addPattern(res, zodPatterns.ipv4Cidr, check$1.message, refs);
			if (check$1.version !== "v4") addPattern(res, zodPatterns.ipv6Cidr, check$1.message, refs);
			break;
		}
		case "emoji":
			addPattern(res, zodPatterns.emoji(), check$1.message, refs);
			break;
		case "ulid": {
			addPattern(res, zodPatterns.ulid, check$1.message, refs);
			break;
		}
		case "base64": {
			switch (refs.base64Strategy) {
				case "format:binary": {
					addFormat(res, "binary", check$1.message, refs);
					break;
				}
				case "contentEncoding:base64": {
					setResponseValueAndErrors(res, "contentEncoding", "base64", check$1.message, refs);
					break;
				}
				case "pattern:zod": {
					addPattern(res, zodPatterns.base64, check$1.message, refs);
					break;
				}
			}
			break;
		}
		case "nanoid": addPattern(res, zodPatterns.nanoid, check$1.message, refs);
		case "toLowerCase":
		case "toUpperCase":
		case "trim": break;
		default:
 /* c8 ignore next */
		((_) => {})(check$1);
	}
	return res;
}
function escapeLiteralCheckValue(literal, refs) {
	return refs.patternStrategy === "escape" ? escapeNonAlphaNumeric(literal) : literal;
}
const ALPHA_NUMERIC = /* @__PURE__ */ new Set("ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789");
function escapeNonAlphaNumeric(source) {
	let result = "";
	for (let i$1 = 0; i$1 < source.length; i$1++) {
		if (!ALPHA_NUMERIC.has(source[i$1])) result += "\\";
		result += source[i$1];
	}
	return result;
}
function addFormat(schema, value, message, refs) {
	if (schema.format || schema.anyOf?.some((x) => x.format)) {
		if (!schema.anyOf) schema.anyOf = [];
		if (schema.format) {
			schema.anyOf.push({
				format: schema.format,
				...schema.errorMessage && refs.errorMessages && { errorMessage: { format: schema.errorMessage.format } }
			});
			delete schema.format;
			if (schema.errorMessage) {
				delete schema.errorMessage.format;
				if (Object.keys(schema.errorMessage).length === 0) delete schema.errorMessage;
			}
		}
		schema.anyOf.push({
			format: value,
			...message && refs.errorMessages && { errorMessage: { format: message } }
		});
	} else setResponseValueAndErrors(schema, "format", value, message, refs);
}
function addPattern(schema, regex, message, refs) {
	if (schema.pattern || schema.allOf?.some((x) => x.pattern)) {
		if (!schema.allOf) schema.allOf = [];
		if (schema.pattern) {
			schema.allOf.push({
				pattern: schema.pattern,
				...schema.errorMessage && refs.errorMessages && { errorMessage: { pattern: schema.errorMessage.pattern } }
			});
			delete schema.pattern;
			if (schema.errorMessage) {
				delete schema.errorMessage.pattern;
				if (Object.keys(schema.errorMessage).length === 0) delete schema.errorMessage;
			}
		}
		schema.allOf.push({
			pattern: stringifyRegExpWithFlags(regex, refs),
			...message && refs.errorMessages && { errorMessage: { pattern: message } }
		});
	} else setResponseValueAndErrors(schema, "pattern", stringifyRegExpWithFlags(regex, refs), message, refs);
}
function stringifyRegExpWithFlags(regex, refs) {
	if (!refs.applyRegexFlags || !regex.flags) return regex.source;
	const flags = {
		i: regex.flags.includes("i"),
		m: regex.flags.includes("m"),
		s: regex.flags.includes("s")
	};
	const source = flags.i ? regex.source.toLowerCase() : regex.source;
	let pattern = "";
	let isEscaped = false;
	let inCharGroup = false;
	let inCharRange = false;
	for (let i$1 = 0; i$1 < source.length; i$1++) {
		if (isEscaped) {
			pattern += source[i$1];
			isEscaped = false;
			continue;
		}
		if (flags.i) {
			if (inCharGroup) {
				if (source[i$1].match(/[a-z]/)) {
					if (inCharRange) {
						pattern += source[i$1];
						pattern += `${source[i$1 - 2]}-${source[i$1]}`.toUpperCase();
						inCharRange = false;
					} else if (source[i$1 + 1] === "-" && source[i$1 + 2]?.match(/[a-z]/)) {
						pattern += source[i$1];
						inCharRange = true;
					} else pattern += `${source[i$1]}${source[i$1].toUpperCase()}`;
					continue;
				}
			} else if (source[i$1].match(/[a-z]/)) {
				pattern += `[${source[i$1]}${source[i$1].toUpperCase()}]`;
				continue;
			}
		}
		if (flags.m) {
			if (source[i$1] === "^") {
				pattern += `(^|(?<=[\r\n]))`;
				continue;
			} else if (source[i$1] === "$") {
				pattern += `($|(?=[\r\n]))`;
				continue;
			}
		}
		if (flags.s && source[i$1] === ".") {
			pattern += inCharGroup ? `${source[i$1]}\r\n` : `[${source[i$1]}\r\n]`;
			continue;
		}
		pattern += source[i$1];
		if (source[i$1] === "\\") isEscaped = true;
		else if (inCharGroup && source[i$1] === "]") inCharGroup = false;
		else if (!inCharGroup && source[i$1] === "[") inCharGroup = true;
	}
	try {
		new RegExp(pattern);
	} catch {
		console.warn(`Could not convert regex pattern at ${refs.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`);
		return regex.source;
	}
	return pattern;
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/record.js
function parseRecordDef(def, refs) {
	if (refs.target === "openAi") console.warn("Warning: OpenAI may not support records in schemas! Try an array of key-value pairs instead.");
	if (refs.target === "openApi3" && def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) return {
		type: "object",
		required: def.keyType._def.values,
		properties: def.keyType._def.values.reduce((acc, key) => ({
			...acc,
			[key]: parseDef(def.valueType._def, {
				...refs,
				currentPath: [
					...refs.currentPath,
					"properties",
					key
				]
			}) ?? parseAnyDef(refs)
		}), {}),
		additionalProperties: refs.rejectedAdditionalProperties
	};
	const schema = {
		type: "object",
		additionalProperties: parseDef(def.valueType._def, {
			...refs,
			currentPath: [...refs.currentPath, "additionalProperties"]
		}) ?? refs.allowedAdditionalProperties
	};
	if (refs.target === "openApi3") return schema;
	if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.checks?.length) {
		const { type,...keyType } = parseStringDef(def.keyType._def, refs);
		return {
			...schema,
			propertyNames: keyType
		};
	} else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) return {
		...schema,
		propertyNames: { enum: def.keyType._def.values }
	};
	else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodBranded && def.keyType._def.type._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.type._def.checks?.length) {
		const { type,...keyType } = parseBrandedDef(def.keyType._def, refs);
		return {
			...schema,
			propertyNames: keyType
		};
	}
	return schema;
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/map.js
function parseMapDef(def, refs) {
	if (refs.mapStrategy === "record") return parseRecordDef(def, refs);
	const keys$1 = parseDef(def.keyType._def, {
		...refs,
		currentPath: [
			...refs.currentPath,
			"items",
			"items",
			"0"
		]
	}) || parseAnyDef(refs);
	const values = parseDef(def.valueType._def, {
		...refs,
		currentPath: [
			...refs.currentPath,
			"items",
			"items",
			"1"
		]
	}) || parseAnyDef(refs);
	return {
		type: "array",
		maxItems: 125,
		items: {
			type: "array",
			items: [keys$1, values],
			minItems: 2,
			maxItems: 2
		}
	};
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/nativeEnum.js
function parseNativeEnumDef(def) {
	const object$1 = def.values;
	const actualKeys = Object.keys(def.values).filter((key) => {
		return typeof object$1[object$1[key]] !== "number";
	});
	const actualValues = actualKeys.map((key) => object$1[key]);
	const parsedTypes = Array.from(new Set(actualValues.map((values) => typeof values)));
	return {
		type: parsedTypes.length === 1 ? parsedTypes[0] === "string" ? "string" : "number" : ["string", "number"],
		enum: actualValues
	};
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/never.js
function parseNeverDef(refs) {
	return refs.target === "openAi" ? void 0 : { not: parseAnyDef({
		...refs,
		currentPath: [...refs.currentPath, "not"]
	}) };
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/null.js
function parseNullDef(refs) {
	return refs.target === "openApi3" ? {
		enum: ["null"],
		nullable: true
	} : { type: "null" };
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/union.js
const primitiveMappings = {
	ZodString: "string",
	ZodNumber: "number",
	ZodBigInt: "integer",
	ZodBoolean: "boolean",
	ZodNull: "null"
};
function parseUnionDef(def, refs) {
	if (refs.target === "openApi3") return asAnyOf(def, refs);
	const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;
	if (options.every((x) => x._def.typeName in primitiveMappings && (!x._def.checks || !x._def.checks.length))) {
		const types$9 = options.reduce((types$10, x) => {
			const type = primitiveMappings[x._def.typeName];
			return type && !types$10.includes(type) ? [...types$10, type] : types$10;
		}, []);
		return { type: types$9.length > 1 ? types$9 : types$9[0] };
	} else if (options.every((x) => x._def.typeName === "ZodLiteral" && !x.description)) {
		const types$9 = options.reduce((acc, x) => {
			const type = typeof x._def.value;
			switch (type) {
				case "string":
				case "number":
				case "boolean": return [...acc, type];
				case "bigint": return [...acc, "integer"];
				case "object": if (x._def.value === null) return [...acc, "null"];
				case "symbol":
				case "undefined":
				case "function":
				default: return acc;
			}
		}, []);
		if (types$9.length === options.length) {
			const uniqueTypes = types$9.filter((x, i$1, a$1) => a$1.indexOf(x) === i$1);
			return {
				type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],
				enum: options.reduce((acc, x) => {
					return acc.includes(x._def.value) ? acc : [...acc, x._def.value];
				}, [])
			};
		}
	} else if (options.every((x) => x._def.typeName === "ZodEnum")) return {
		type: "string",
		enum: options.reduce((acc, x) => [...acc, ...x._def.values.filter((x$1) => !acc.includes(x$1))], [])
	};
	return asAnyOf(def, refs);
}
const asAnyOf = (def, refs) => {
	const anyOf = (def.options instanceof Map ? Array.from(def.options.values()) : def.options).map((x, i$1) => parseDef(x._def, {
		...refs,
		currentPath: [
			...refs.currentPath,
			"anyOf",
			`${i$1}`
		]
	})).filter((x) => !!x && (!refs.strictUnions || typeof x === "object" && Object.keys(x).length > 0));
	return anyOf.length ? { anyOf } : void 0;
};

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/nullable.js
function parseNullableDef(def, refs) {
	if ([
		"ZodString",
		"ZodNumber",
		"ZodBigInt",
		"ZodBoolean",
		"ZodNull"
	].includes(def.innerType._def.typeName) && (!def.innerType._def.checks || !def.innerType._def.checks.length)) {
		if (refs.target === "openApi3") return {
			type: primitiveMappings[def.innerType._def.typeName],
			nullable: true
		};
		return { type: [primitiveMappings[def.innerType._def.typeName], "null"] };
	}
	if (refs.target === "openApi3") {
		const base$1 = parseDef(def.innerType._def, {
			...refs,
			currentPath: [...refs.currentPath]
		});
		if (base$1 && "$ref" in base$1) return {
			allOf: [base$1],
			nullable: true
		};
		return base$1 && {
			...base$1,
			nullable: true
		};
	}
	const base = parseDef(def.innerType._def, {
		...refs,
		currentPath: [
			...refs.currentPath,
			"anyOf",
			"0"
		]
	});
	return base && { anyOf: [base, { type: "null" }] };
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/number.js
function parseNumberDef(def, refs) {
	const res = { type: "number" };
	if (!def.checks) return res;
	for (const check$1 of def.checks) switch (check$1.kind) {
		case "int":
			res.type = "integer";
			addErrorMessage(res, "type", check$1.message, refs);
			break;
		case "min":
			if (refs.target === "jsonSchema7") if (check$1.inclusive) setResponseValueAndErrors(res, "minimum", check$1.value, check$1.message, refs);
			else setResponseValueAndErrors(res, "exclusiveMinimum", check$1.value, check$1.message, refs);
			else {
				if (!check$1.inclusive) res.exclusiveMinimum = true;
				setResponseValueAndErrors(res, "minimum", check$1.value, check$1.message, refs);
			}
			break;
		case "max":
			if (refs.target === "jsonSchema7") if (check$1.inclusive) setResponseValueAndErrors(res, "maximum", check$1.value, check$1.message, refs);
			else setResponseValueAndErrors(res, "exclusiveMaximum", check$1.value, check$1.message, refs);
			else {
				if (!check$1.inclusive) res.exclusiveMaximum = true;
				setResponseValueAndErrors(res, "maximum", check$1.value, check$1.message, refs);
			}
			break;
		case "multipleOf":
			setResponseValueAndErrors(res, "multipleOf", check$1.value, check$1.message, refs);
			break;
	}
	return res;
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/object.js
function parseObjectDef(def, refs) {
	const forceOptionalIntoNullable = refs.target === "openAi";
	const result = {
		type: "object",
		properties: {}
	};
	const required = [];
	const shape = def.shape();
	for (const propName in shape) {
		let propDef = shape[propName];
		if (propDef === void 0 || propDef._def === void 0) continue;
		let propOptional = safeIsOptional(propDef);
		if (propOptional && forceOptionalIntoNullable) {
			if (propDef._def.typeName === "ZodOptional") propDef = propDef._def.innerType;
			if (!propDef.isNullable()) propDef = propDef.nullable();
			propOptional = false;
		}
		const parsedDef = parseDef(propDef._def, {
			...refs,
			currentPath: [
				...refs.currentPath,
				"properties",
				propName
			],
			propertyPath: [
				...refs.currentPath,
				"properties",
				propName
			]
		});
		if (parsedDef === void 0) continue;
		result.properties[propName] = parsedDef;
		if (!propOptional) required.push(propName);
	}
	if (required.length) result.required = required;
	const additionalProperties = decideAdditionalProperties(def, refs);
	if (additionalProperties !== void 0) result.additionalProperties = additionalProperties;
	return result;
}
function decideAdditionalProperties(def, refs) {
	if (def.catchall._def.typeName !== "ZodNever") return parseDef(def.catchall._def, {
		...refs,
		currentPath: [...refs.currentPath, "additionalProperties"]
	});
	switch (def.unknownKeys) {
		case "passthrough": return refs.allowedAdditionalProperties;
		case "strict": return refs.rejectedAdditionalProperties;
		case "strip": return refs.removeAdditionalStrategy === "strict" ? refs.allowedAdditionalProperties : refs.rejectedAdditionalProperties;
	}
}
function safeIsOptional(schema) {
	try {
		return schema.isOptional();
	} catch {
		return true;
	}
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/optional.js
const parseOptionalDef = (def, refs) => {
	if (refs.currentPath.toString() === refs.propertyPath?.toString()) return parseDef(def.innerType._def, refs);
	const innerSchema = parseDef(def.innerType._def, {
		...refs,
		currentPath: [
			...refs.currentPath,
			"anyOf",
			"1"
		]
	});
	return innerSchema ? { anyOf: [{ not: parseAnyDef(refs) }, innerSchema] } : parseAnyDef(refs);
};

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/pipeline.js
const parsePipelineDef = (def, refs) => {
	if (refs.pipeStrategy === "input") return parseDef(def.in._def, refs);
	else if (refs.pipeStrategy === "output") return parseDef(def.out._def, refs);
	const a$1 = parseDef(def.in._def, {
		...refs,
		currentPath: [
			...refs.currentPath,
			"allOf",
			"0"
		]
	});
	const b = parseDef(def.out._def, {
		...refs,
		currentPath: [
			...refs.currentPath,
			"allOf",
			a$1 ? "1" : "0"
		]
	});
	return { allOf: [a$1, b].filter((x) => x !== void 0) };
};

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/promise.js
function parsePromiseDef(def, refs) {
	return parseDef(def.type._def, refs);
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/set.js
function parseSetDef(def, refs) {
	const items = parseDef(def.valueType._def, {
		...refs,
		currentPath: [...refs.currentPath, "items"]
	});
	const schema = {
		type: "array",
		uniqueItems: true,
		items
	};
	if (def.minSize) setResponseValueAndErrors(schema, "minItems", def.minSize.value, def.minSize.message, refs);
	if (def.maxSize) setResponseValueAndErrors(schema, "maxItems", def.maxSize.value, def.maxSize.message, refs);
	return schema;
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/tuple.js
function parseTupleDef(def, refs) {
	if (def.rest) return {
		type: "array",
		minItems: def.items.length,
		items: def.items.map((x, i$1) => parseDef(x._def, {
			...refs,
			currentPath: [
				...refs.currentPath,
				"items",
				`${i$1}`
			]
		})).reduce((acc, x) => x === void 0 ? acc : [...acc, x], []),
		additionalItems: parseDef(def.rest._def, {
			...refs,
			currentPath: [...refs.currentPath, "additionalItems"]
		})
	};
	else return {
		type: "array",
		minItems: def.items.length,
		maxItems: def.items.length,
		items: def.items.map((x, i$1) => parseDef(x._def, {
			...refs,
			currentPath: [
				...refs.currentPath,
				"items",
				`${i$1}`
			]
		})).reduce((acc, x) => x === void 0 ? acc : [...acc, x], [])
	};
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/undefined.js
function parseUndefinedDef(refs) {
	return { not: parseAnyDef(refs) };
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/unknown.js
function parseUnknownDef(refs) {
	return parseAnyDef(refs);
}

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/readonly.js
const parseReadonlyDef = (def, refs) => {
	return parseDef(def.innerType._def, refs);
};

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/selectParser.js
const selectParser = (def, typeName, refs) => {
	switch (typeName) {
		case ZodFirstPartyTypeKind.ZodString: return parseStringDef(def, refs);
		case ZodFirstPartyTypeKind.ZodNumber: return parseNumberDef(def, refs);
		case ZodFirstPartyTypeKind.ZodObject: return parseObjectDef(def, refs);
		case ZodFirstPartyTypeKind.ZodBigInt: return parseBigintDef(def, refs);
		case ZodFirstPartyTypeKind.ZodBoolean: return parseBooleanDef();
		case ZodFirstPartyTypeKind.ZodDate: return parseDateDef(def, refs);
		case ZodFirstPartyTypeKind.ZodUndefined: return parseUndefinedDef(refs);
		case ZodFirstPartyTypeKind.ZodNull: return parseNullDef(refs);
		case ZodFirstPartyTypeKind.ZodArray: return parseArrayDef(def, refs);
		case ZodFirstPartyTypeKind.ZodUnion:
		case ZodFirstPartyTypeKind.ZodDiscriminatedUnion: return parseUnionDef(def, refs);
		case ZodFirstPartyTypeKind.ZodIntersection: return parseIntersectionDef(def, refs);
		case ZodFirstPartyTypeKind.ZodTuple: return parseTupleDef(def, refs);
		case ZodFirstPartyTypeKind.ZodRecord: return parseRecordDef(def, refs);
		case ZodFirstPartyTypeKind.ZodLiteral: return parseLiteralDef(def, refs);
		case ZodFirstPartyTypeKind.ZodEnum: return parseEnumDef(def);
		case ZodFirstPartyTypeKind.ZodNativeEnum: return parseNativeEnumDef(def);
		case ZodFirstPartyTypeKind.ZodNullable: return parseNullableDef(def, refs);
		case ZodFirstPartyTypeKind.ZodOptional: return parseOptionalDef(def, refs);
		case ZodFirstPartyTypeKind.ZodMap: return parseMapDef(def, refs);
		case ZodFirstPartyTypeKind.ZodSet: return parseSetDef(def, refs);
		case ZodFirstPartyTypeKind.ZodLazy: return () => def.getter()._def;
		case ZodFirstPartyTypeKind.ZodPromise: return parsePromiseDef(def, refs);
		case ZodFirstPartyTypeKind.ZodNaN:
		case ZodFirstPartyTypeKind.ZodNever: return parseNeverDef(refs);
		case ZodFirstPartyTypeKind.ZodEffects: return parseEffectsDef(def, refs);
		case ZodFirstPartyTypeKind.ZodAny: return parseAnyDef(refs);
		case ZodFirstPartyTypeKind.ZodUnknown: return parseUnknownDef(refs);
		case ZodFirstPartyTypeKind.ZodDefault: return parseDefaultDef(def, refs);
		case ZodFirstPartyTypeKind.ZodBranded: return parseBrandedDef(def, refs);
		case ZodFirstPartyTypeKind.ZodReadonly: return parseReadonlyDef(def, refs);
		case ZodFirstPartyTypeKind.ZodCatch: return parseCatchDef(def, refs);
		case ZodFirstPartyTypeKind.ZodPipeline: return parsePipelineDef(def, refs);
		case ZodFirstPartyTypeKind.ZodFunction:
		case ZodFirstPartyTypeKind.ZodVoid:
		case ZodFirstPartyTypeKind.ZodSymbol: return void 0;
		default:
 /* c8 ignore next */
		return ((_) => void 0)(typeName);
	}
};

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parseDef.js
function parseDef(def, refs, forceResolution = false) {
	const seenItem = refs.seen.get(def);
	if (refs.override) {
		const overrideResult = refs.override?.(def, refs, seenItem, forceResolution);
		if (overrideResult !== ignoreOverride) return overrideResult;
	}
	if (seenItem && !forceResolution) {
		const seenSchema = get$ref(seenItem, refs);
		if (seenSchema !== void 0) return seenSchema;
	}
	const newItem = {
		def,
		path: refs.currentPath,
		jsonSchema: void 0
	};
	refs.seen.set(def, newItem);
	const jsonSchemaOrGetter = selectParser(def, def.typeName, refs);
	const jsonSchema$1 = typeof jsonSchemaOrGetter === "function" ? parseDef(jsonSchemaOrGetter(), refs) : jsonSchemaOrGetter;
	if (jsonSchema$1) addMeta(def, refs, jsonSchema$1);
	if (refs.postProcess) {
		const postProcessResult = refs.postProcess(jsonSchema$1, def, refs);
		newItem.jsonSchema = jsonSchema$1;
		return postProcessResult;
	}
	newItem.jsonSchema = jsonSchema$1;
	return jsonSchema$1;
}
const get$ref = (item, refs) => {
	switch (refs.$refStrategy) {
		case "root": return { $ref: item.path.join("/") };
		case "relative": return { $ref: getRelativePath(refs.currentPath, item.path) };
		case "none":
		case "seen": {
			if (item.path.length < refs.currentPath.length && item.path.every((value, index) => refs.currentPath[index] === value)) {
				console.warn(`Recursive reference detected at ${refs.currentPath.join("/")}! Defaulting to any`);
				return parseAnyDef(refs);
			}
			return refs.$refStrategy === "seen" ? parseAnyDef(refs) : void 0;
		}
	}
};
const addMeta = (def, refs, jsonSchema$1) => {
	if (def.description) {
		jsonSchema$1.description = def.description;
		if (refs.markdownDescription) jsonSchema$1.markdownDescription = def.description;
	}
	return jsonSchema$1;
};

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js
const zodToJsonSchema = (schema, options) => {
	const refs = getRefs(options);
	let definitions = typeof options === "object" && options.definitions ? Object.entries(options.definitions).reduce((acc, [name$3, schema$1]) => ({
		...acc,
		[name$3]: parseDef(schema$1._def, {
			...refs,
			currentPath: [
				...refs.basePath,
				refs.definitionPath,
				name$3
			]
		}, true) ?? parseAnyDef(refs)
	}), {}) : void 0;
	const name$2 = typeof options === "string" ? options : options?.nameStrategy === "title" ? void 0 : options?.name;
	const main = parseDef(schema._def, name$2 === void 0 ? refs : {
		...refs,
		currentPath: [
			...refs.basePath,
			refs.definitionPath,
			name$2
		]
	}, false) ?? parseAnyDef(refs);
	const title = typeof options === "object" && options.name !== void 0 && options.nameStrategy === "title" ? options.name : void 0;
	if (title !== void 0) main.title = title;
	if (refs.flags.hasReferencedOpenAiAnyType) {
		if (!definitions) definitions = {};
		if (!definitions[refs.openAiAnyTypeName]) definitions[refs.openAiAnyTypeName] = {
			type: [
				"string",
				"number",
				"integer",
				"boolean",
				"array",
				"null"
			],
			items: { $ref: refs.$refStrategy === "relative" ? "1" : [
				...refs.basePath,
				refs.definitionPath,
				refs.openAiAnyTypeName
			].join("/") }
		};
	}
	const combined = name$2 === void 0 ? definitions ? {
		...main,
		[refs.definitionPath]: definitions
	} : main : {
		$ref: [
			...refs.$refStrategy === "relative" ? [] : refs.basePath,
			refs.definitionPath,
			name$2
		].join("/"),
		[refs.definitionPath]: {
			...definitions,
			[name$2]: main
		}
	};
	if (refs.target === "jsonSchema7") combined.$schema = "http://json-schema.org/draft-07/schema#";
	else if (refs.target === "jsonSchema2019-09" || refs.target === "openAi") combined.$schema = "https://json-schema.org/draft/2019-09/schema#";
	if (refs.target === "openAi" && ("anyOf" in combined || "oneOf" in combined || "allOf" in combined || "type" in combined && Array.isArray(combined.type))) console.warn("Warning: OpenAI may not support schemas with unions as roots! Try wrapping it in an object property.");
	return combined;
};

//#endregion
//#region node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/index.js
var esm_default = zodToJsonSchema;

//#endregion
//#region node_modules/.pnpm/@ai-sdk+ui-utils@1.2.11_zod@3.25.76/node_modules/@ai-sdk/ui-utils/dist/index.mjs
var textStreamPart = {
	code: "0",
	name: "text",
	parse: (value) => {
		if (typeof value !== "string") throw new Error("\"text\" parts expect a string value.");
		return {
			type: "text",
			value
		};
	}
};
var errorStreamPart = {
	code: "3",
	name: "error",
	parse: (value) => {
		if (typeof value !== "string") throw new Error("\"error\" parts expect a string value.");
		return {
			type: "error",
			value
		};
	}
};
var assistantMessageStreamPart = {
	code: "4",
	name: "assistant_message",
	parse: (value) => {
		if (value == null || typeof value !== "object" || !("id" in value) || !("role" in value) || !("content" in value) || typeof value.id !== "string" || typeof value.role !== "string" || value.role !== "assistant" || !Array.isArray(value.content) || !value.content.every((item) => item != null && typeof item === "object" && "type" in item && item.type === "text" && "text" in item && item.text != null && typeof item.text === "object" && "value" in item.text && typeof item.text.value === "string")) throw new Error("\"assistant_message\" parts expect an object with an \"id\", \"role\", and \"content\" property.");
		return {
			type: "assistant_message",
			value
		};
	}
};
var assistantControlDataStreamPart = {
	code: "5",
	name: "assistant_control_data",
	parse: (value) => {
		if (value == null || typeof value !== "object" || !("threadId" in value) || !("messageId" in value) || typeof value.threadId !== "string" || typeof value.messageId !== "string") throw new Error("\"assistant_control_data\" parts expect an object with a \"threadId\" and \"messageId\" property.");
		return {
			type: "assistant_control_data",
			value: {
				threadId: value.threadId,
				messageId: value.messageId
			}
		};
	}
};
var dataMessageStreamPart = {
	code: "6",
	name: "data_message",
	parse: (value) => {
		if (value == null || typeof value !== "object" || !("role" in value) || !("data" in value) || typeof value.role !== "string" || value.role !== "data") throw new Error("\"data_message\" parts expect an object with a \"role\" and \"data\" property.");
		return {
			type: "data_message",
			value
		};
	}
};
var assistantStreamParts = [
	textStreamPart,
	errorStreamPart,
	assistantMessageStreamPart,
	assistantControlDataStreamPart,
	dataMessageStreamPart
];
var assistantStreamPartsByCode = {
	[textStreamPart.code]: textStreamPart,
	[errorStreamPart.code]: errorStreamPart,
	[assistantMessageStreamPart.code]: assistantMessageStreamPart,
	[assistantControlDataStreamPart.code]: assistantControlDataStreamPart,
	[dataMessageStreamPart.code]: dataMessageStreamPart
};
var StreamStringPrefixes = {
	[textStreamPart.name]: textStreamPart.code,
	[errorStreamPart.name]: errorStreamPart.code,
	[assistantMessageStreamPart.name]: assistantMessageStreamPart.code,
	[assistantControlDataStreamPart.name]: assistantControlDataStreamPart.code,
	[dataMessageStreamPart.name]: dataMessageStreamPart.code
};
var validCodes = assistantStreamParts.map((part) => part.code);
function fixJson(input) {
	const stack = ["ROOT"];
	let lastValidIndex = -1;
	let literalStart = null;
	function processValueStart(char, i$1, swapState) {
		switch (char) {
			case "\"": {
				lastValidIndex = i$1;
				stack.pop();
				stack.push(swapState);
				stack.push("INSIDE_STRING");
				break;
			}
			case "f":
			case "t":
			case "n": {
				lastValidIndex = i$1;
				literalStart = i$1;
				stack.pop();
				stack.push(swapState);
				stack.push("INSIDE_LITERAL");
				break;
			}
			case "-": {
				stack.pop();
				stack.push(swapState);
				stack.push("INSIDE_NUMBER");
				break;
			}
			case "0":
			case "1":
			case "2":
			case "3":
			case "4":
			case "5":
			case "6":
			case "7":
			case "8":
			case "9": {
				lastValidIndex = i$1;
				stack.pop();
				stack.push(swapState);
				stack.push("INSIDE_NUMBER");
				break;
			}
			case "{": {
				lastValidIndex = i$1;
				stack.pop();
				stack.push(swapState);
				stack.push("INSIDE_OBJECT_START");
				break;
			}
			case "[": {
				lastValidIndex = i$1;
				stack.pop();
				stack.push(swapState);
				stack.push("INSIDE_ARRAY_START");
				break;
			}
		}
	}
	function processAfterObjectValue(char, i$1) {
		switch (char) {
			case ",": {
				stack.pop();
				stack.push("INSIDE_OBJECT_AFTER_COMMA");
				break;
			}
			case "}": {
				lastValidIndex = i$1;
				stack.pop();
				break;
			}
		}
	}
	function processAfterArrayValue(char, i$1) {
		switch (char) {
			case ",": {
				stack.pop();
				stack.push("INSIDE_ARRAY_AFTER_COMMA");
				break;
			}
			case "]": {
				lastValidIndex = i$1;
				stack.pop();
				break;
			}
		}
	}
	for (let i$1 = 0; i$1 < input.length; i$1++) {
		const char = input[i$1];
		const currentState = stack[stack.length - 1];
		switch (currentState) {
			case "ROOT":
				processValueStart(char, i$1, "FINISH");
				break;
			case "INSIDE_OBJECT_START": {
				switch (char) {
					case "\"": {
						stack.pop();
						stack.push("INSIDE_OBJECT_KEY");
						break;
					}
					case "}": {
						lastValidIndex = i$1;
						stack.pop();
						break;
					}
				}
				break;
			}
			case "INSIDE_OBJECT_AFTER_COMMA": {
				switch (char) {
					case "\"": {
						stack.pop();
						stack.push("INSIDE_OBJECT_KEY");
						break;
					}
				}
				break;
			}
			case "INSIDE_OBJECT_KEY": {
				switch (char) {
					case "\"": {
						stack.pop();
						stack.push("INSIDE_OBJECT_AFTER_KEY");
						break;
					}
				}
				break;
			}
			case "INSIDE_OBJECT_AFTER_KEY": {
				switch (char) {
					case ":": {
						stack.pop();
						stack.push("INSIDE_OBJECT_BEFORE_VALUE");
						break;
					}
				}
				break;
			}
			case "INSIDE_OBJECT_BEFORE_VALUE": {
				processValueStart(char, i$1, "INSIDE_OBJECT_AFTER_VALUE");
				break;
			}
			case "INSIDE_OBJECT_AFTER_VALUE": {
				processAfterObjectValue(char, i$1);
				break;
			}
			case "INSIDE_STRING": {
				switch (char) {
					case "\"": {
						stack.pop();
						lastValidIndex = i$1;
						break;
					}
					case "\\": {
						stack.push("INSIDE_STRING_ESCAPE");
						break;
					}
					default: lastValidIndex = i$1;
				}
				break;
			}
			case "INSIDE_ARRAY_START": {
				switch (char) {
					case "]": {
						lastValidIndex = i$1;
						stack.pop();
						break;
					}
					default: {
						lastValidIndex = i$1;
						processValueStart(char, i$1, "INSIDE_ARRAY_AFTER_VALUE");
						break;
					}
				}
				break;
			}
			case "INSIDE_ARRAY_AFTER_VALUE": {
				switch (char) {
					case ",": {
						stack.pop();
						stack.push("INSIDE_ARRAY_AFTER_COMMA");
						break;
					}
					case "]": {
						lastValidIndex = i$1;
						stack.pop();
						break;
					}
					default: {
						lastValidIndex = i$1;
						break;
					}
				}
				break;
			}
			case "INSIDE_ARRAY_AFTER_COMMA": {
				processValueStart(char, i$1, "INSIDE_ARRAY_AFTER_VALUE");
				break;
			}
			case "INSIDE_STRING_ESCAPE": {
				stack.pop();
				lastValidIndex = i$1;
				break;
			}
			case "INSIDE_NUMBER": {
				switch (char) {
					case "0":
					case "1":
					case "2":
					case "3":
					case "4":
					case "5":
					case "6":
					case "7":
					case "8":
					case "9": {
						lastValidIndex = i$1;
						break;
					}
					case "e":
					case "E":
					case "-":
					case ".": break;
					case ",": {
						stack.pop();
						if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") processAfterArrayValue(char, i$1);
						if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") processAfterObjectValue(char, i$1);
						break;
					}
					case "}": {
						stack.pop();
						if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") processAfterObjectValue(char, i$1);
						break;
					}
					case "]": {
						stack.pop();
						if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") processAfterArrayValue(char, i$1);
						break;
					}
					default: {
						stack.pop();
						break;
					}
				}
				break;
			}
			case "INSIDE_LITERAL": {
				const partialLiteral = input.substring(literalStart, i$1 + 1);
				if (!"false".startsWith(partialLiteral) && !"true".startsWith(partialLiteral) && !"null".startsWith(partialLiteral)) {
					stack.pop();
					if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") processAfterObjectValue(char, i$1);
					else if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") processAfterArrayValue(char, i$1);
				} else lastValidIndex = i$1;
				break;
			}
		}
	}
	let result = input.slice(0, lastValidIndex + 1);
	for (let i$1 = stack.length - 1; i$1 >= 0; i$1--) {
		const state = stack[i$1];
		switch (state) {
			case "INSIDE_STRING": {
				result += "\"";
				break;
			}
			case "INSIDE_OBJECT_KEY":
			case "INSIDE_OBJECT_AFTER_KEY":
			case "INSIDE_OBJECT_AFTER_COMMA":
			case "INSIDE_OBJECT_START":
			case "INSIDE_OBJECT_BEFORE_VALUE":
			case "INSIDE_OBJECT_AFTER_VALUE": {
				result += "}";
				break;
			}
			case "INSIDE_ARRAY_START":
			case "INSIDE_ARRAY_AFTER_COMMA":
			case "INSIDE_ARRAY_AFTER_VALUE": {
				result += "]";
				break;
			}
			case "INSIDE_LITERAL": {
				const partialLiteral = input.substring(literalStart, input.length);
				if ("true".startsWith(partialLiteral)) result += "true".slice(partialLiteral.length);
				else if ("false".startsWith(partialLiteral)) result += "false".slice(partialLiteral.length);
				else if ("null".startsWith(partialLiteral)) result += "null".slice(partialLiteral.length);
			}
		}
	}
	return result;
}
function parsePartialJson(jsonText) {
	if (jsonText === void 0) return {
		value: void 0,
		state: "undefined-input"
	};
	let result = safeParseJSON({ text: jsonText });
	if (result.success) return {
		value: result.value,
		state: "successful-parse"
	};
	result = safeParseJSON({ text: fixJson(jsonText) });
	if (result.success) return {
		value: result.value,
		state: "repaired-parse"
	};
	return {
		value: void 0,
		state: "failed-parse"
	};
}
var textStreamPart2 = {
	code: "0",
	name: "text",
	parse: (value) => {
		if (typeof value !== "string") throw new Error("\"text\" parts expect a string value.");
		return {
			type: "text",
			value
		};
	}
};
var dataStreamPart = {
	code: "2",
	name: "data",
	parse: (value) => {
		if (!Array.isArray(value)) throw new Error("\"data\" parts expect an array value.");
		return {
			type: "data",
			value
		};
	}
};
var errorStreamPart2 = {
	code: "3",
	name: "error",
	parse: (value) => {
		if (typeof value !== "string") throw new Error("\"error\" parts expect a string value.");
		return {
			type: "error",
			value
		};
	}
};
var messageAnnotationsStreamPart = {
	code: "8",
	name: "message_annotations",
	parse: (value) => {
		if (!Array.isArray(value)) throw new Error("\"message_annotations\" parts expect an array value.");
		return {
			type: "message_annotations",
			value
		};
	}
};
var toolCallStreamPart = {
	code: "9",
	name: "tool_call",
	parse: (value) => {
		if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("toolName" in value) || typeof value.toolName !== "string" || !("args" in value) || typeof value.args !== "object") throw new Error("\"tool_call\" parts expect an object with a \"toolCallId\", \"toolName\", and \"args\" property.");
		return {
			type: "tool_call",
			value
		};
	}
};
var toolResultStreamPart = {
	code: "a",
	name: "tool_result",
	parse: (value) => {
		if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("result" in value)) throw new Error("\"tool_result\" parts expect an object with a \"toolCallId\" and a \"result\" property.");
		return {
			type: "tool_result",
			value
		};
	}
};
var toolCallStreamingStartStreamPart = {
	code: "b",
	name: "tool_call_streaming_start",
	parse: (value) => {
		if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("toolName" in value) || typeof value.toolName !== "string") throw new Error("\"tool_call_streaming_start\" parts expect an object with a \"toolCallId\" and \"toolName\" property.");
		return {
			type: "tool_call_streaming_start",
			value
		};
	}
};
var toolCallDeltaStreamPart = {
	code: "c",
	name: "tool_call_delta",
	parse: (value) => {
		if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("argsTextDelta" in value) || typeof value.argsTextDelta !== "string") throw new Error("\"tool_call_delta\" parts expect an object with a \"toolCallId\" and \"argsTextDelta\" property.");
		return {
			type: "tool_call_delta",
			value
		};
	}
};
var finishMessageStreamPart = {
	code: "d",
	name: "finish_message",
	parse: (value) => {
		if (value == null || typeof value !== "object" || !("finishReason" in value) || typeof value.finishReason !== "string") throw new Error("\"finish_message\" parts expect an object with a \"finishReason\" property.");
		const result = { finishReason: value.finishReason };
		if ("usage" in value && value.usage != null && typeof value.usage === "object" && "promptTokens" in value.usage && "completionTokens" in value.usage) result.usage = {
			promptTokens: typeof value.usage.promptTokens === "number" ? value.usage.promptTokens : NaN,
			completionTokens: typeof value.usage.completionTokens === "number" ? value.usage.completionTokens : NaN
		};
		return {
			type: "finish_message",
			value: result
		};
	}
};
var finishStepStreamPart = {
	code: "e",
	name: "finish_step",
	parse: (value) => {
		if (value == null || typeof value !== "object" || !("finishReason" in value) || typeof value.finishReason !== "string") throw new Error("\"finish_step\" parts expect an object with a \"finishReason\" property.");
		const result = {
			finishReason: value.finishReason,
			isContinued: false
		};
		if ("usage" in value && value.usage != null && typeof value.usage === "object" && "promptTokens" in value.usage && "completionTokens" in value.usage) result.usage = {
			promptTokens: typeof value.usage.promptTokens === "number" ? value.usage.promptTokens : NaN,
			completionTokens: typeof value.usage.completionTokens === "number" ? value.usage.completionTokens : NaN
		};
		if ("isContinued" in value && typeof value.isContinued === "boolean") result.isContinued = value.isContinued;
		return {
			type: "finish_step",
			value: result
		};
	}
};
var startStepStreamPart = {
	code: "f",
	name: "start_step",
	parse: (value) => {
		if (value == null || typeof value !== "object" || !("messageId" in value) || typeof value.messageId !== "string") throw new Error("\"start_step\" parts expect an object with an \"id\" property.");
		return {
			type: "start_step",
			value: { messageId: value.messageId }
		};
	}
};
var reasoningStreamPart = {
	code: "g",
	name: "reasoning",
	parse: (value) => {
		if (typeof value !== "string") throw new Error("\"reasoning\" parts expect a string value.");
		return {
			type: "reasoning",
			value
		};
	}
};
var sourcePart = {
	code: "h",
	name: "source",
	parse: (value) => {
		if (value == null || typeof value !== "object") throw new Error("\"source\" parts expect a Source object.");
		return {
			type: "source",
			value
		};
	}
};
var redactedReasoningStreamPart = {
	code: "i",
	name: "redacted_reasoning",
	parse: (value) => {
		if (value == null || typeof value !== "object" || !("data" in value) || typeof value.data !== "string") throw new Error("\"redacted_reasoning\" parts expect an object with a \"data\" property.");
		return {
			type: "redacted_reasoning",
			value: { data: value.data }
		};
	}
};
var reasoningSignatureStreamPart = {
	code: "j",
	name: "reasoning_signature",
	parse: (value) => {
		if (value == null || typeof value !== "object" || !("signature" in value) || typeof value.signature !== "string") throw new Error("\"reasoning_signature\" parts expect an object with a \"signature\" property.");
		return {
			type: "reasoning_signature",
			value: { signature: value.signature }
		};
	}
};
var fileStreamPart = {
	code: "k",
	name: "file",
	parse: (value) => {
		if (value == null || typeof value !== "object" || !("data" in value) || typeof value.data !== "string" || !("mimeType" in value) || typeof value.mimeType !== "string") throw new Error("\"file\" parts expect an object with a \"data\" and \"mimeType\" property.");
		return {
			type: "file",
			value
		};
	}
};
var dataStreamParts = [
	textStreamPart2,
	dataStreamPart,
	errorStreamPart2,
	messageAnnotationsStreamPart,
	toolCallStreamPart,
	toolResultStreamPart,
	toolCallStreamingStartStreamPart,
	toolCallDeltaStreamPart,
	finishMessageStreamPart,
	finishStepStreamPart,
	startStepStreamPart,
	reasoningStreamPart,
	sourcePart,
	redactedReasoningStreamPart,
	reasoningSignatureStreamPart,
	fileStreamPart
];
var dataStreamPartsByCode = Object.fromEntries(dataStreamParts.map((part) => [part.code, part]));
var DataStreamStringPrefixes = Object.fromEntries(dataStreamParts.map((part) => [part.name, part.code]));
var validCodes2 = dataStreamParts.map((part) => part.code);
function formatDataStreamPart(type, value) {
	const streamPart = dataStreamParts.find((part) => part.name === type);
	if (!streamPart) throw new Error(`Invalid stream part type: ${type}`);
	return `${streamPart.code}:${JSON.stringify(value)}
`;
}
var NEWLINE = "\n".charCodeAt(0);
var NEWLINE2 = "\n".charCodeAt(0);
function zodSchema(zodSchema2, options) {
	var _a$3;
	const useReferences = (_a$3 = options == null ? void 0 : options.useReferences) != null ? _a$3 : false;
	return jsonSchema(esm_default(zodSchema2, {
		$refStrategy: useReferences ? "root" : "none",
		target: "jsonSchema7"
	}), { validate: (value) => {
		const result = zodSchema2.safeParse(value);
		return result.success ? {
			success: true,
			value: result.data
		} : {
			success: false,
			error: result.error
		};
	} });
}
var schemaSymbol = Symbol.for("vercel.ai.schema");
function jsonSchema(jsonSchema2, { validate } = {}) {
	return {
		[schemaSymbol]: true,
		_type: void 0,
		[validatorSymbol]: true,
		jsonSchema: jsonSchema2,
		validate
	};
}
function isSchema(value) {
	return typeof value === "object" && value !== null && schemaSymbol in value && value[schemaSymbol] === true && "jsonSchema" in value && "validate" in value;
}
function asSchema(schema) {
	return isSchema(schema) ? schema : zodSchema(schema);
}

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/platform/node/globalThis.js
/** only globals that common to node and browsers are allowed */
var _globalThis = typeof globalThis === "object" ? globalThis : global;

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/version.js
var VERSION = "1.9.0";

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/internal/semver.js
var re = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
/**
* Create a function to test an API version to see if it is compatible with the provided ownVersion.
*
* The returned function has the following semantics:
* - Exact match is always compatible
* - Major versions must match exactly
*    - 1.x package cannot use global 2.x package
*    - 2.x package cannot use global 1.x package
* - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API
*    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects
*    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3
* - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor
* - Patch and build tag differences are not considered at this time
*
* @param ownVersion version which should be checked against
*/
function _makeCompatibilityCheck(ownVersion) {
	var acceptedVersions = new Set([ownVersion]);
	var rejectedVersions = /* @__PURE__ */ new Set();
	var myVersionMatch = ownVersion.match(re);
	if (!myVersionMatch) return function() {
		return false;
	};
	var ownVersionParsed = {
		major: +myVersionMatch[1],
		minor: +myVersionMatch[2],
		patch: +myVersionMatch[3],
		prerelease: myVersionMatch[4]
	};
	if (ownVersionParsed.prerelease != null) return function isExactmatch(globalVersion) {
		return globalVersion === ownVersion;
	};
	function _reject(v) {
		rejectedVersions.add(v);
		return false;
	}
	function _accept(v) {
		acceptedVersions.add(v);
		return true;
	}
	return function isCompatible$1(globalVersion) {
		if (acceptedVersions.has(globalVersion)) return true;
		if (rejectedVersions.has(globalVersion)) return false;
		var globalVersionMatch = globalVersion.match(re);
		if (!globalVersionMatch) return _reject(globalVersion);
		var globalVersionParsed = {
			major: +globalVersionMatch[1],
			minor: +globalVersionMatch[2],
			patch: +globalVersionMatch[3],
			prerelease: globalVersionMatch[4]
		};
		if (globalVersionParsed.prerelease != null) return _reject(globalVersion);
		if (ownVersionParsed.major !== globalVersionParsed.major) return _reject(globalVersion);
		if (ownVersionParsed.major === 0) {
			if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) return _accept(globalVersion);
			return _reject(globalVersion);
		}
		if (ownVersionParsed.minor <= globalVersionParsed.minor) return _accept(globalVersion);
		return _reject(globalVersion);
	};
}
/**
* Test an API version to see if it is compatible with this API.
*
* - Exact match is always compatible
* - Major versions must match exactly
*    - 1.x package cannot use global 2.x package
*    - 2.x package cannot use global 1.x package
* - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API
*    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects
*    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3
* - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor
* - Patch and build tag differences are not considered at this time
*
* @param version version of the API requesting an instance of the global API
*/
var isCompatible = _makeCompatibilityCheck(VERSION);

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/internal/global-utils.js
var major = VERSION.split(".")[0];
var GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for("opentelemetry.js.api." + major);
var _global = _globalThis;
function registerGlobal(type, instance, diag, allowOverride) {
	var _a$3;
	if (allowOverride === void 0) allowOverride = false;
	var api$2 = _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a$3 = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a$3 !== void 0 ? _a$3 : { version: VERSION };
	if (!allowOverride && api$2[type]) {
		var err = /* @__PURE__ */ new Error("@opentelemetry/api: Attempted duplicate registration of API: " + type);
		diag.error(err.stack || err.message);
		return false;
	}
	if (api$2.version !== VERSION) {
		var err = /* @__PURE__ */ new Error("@opentelemetry/api: Registration of version v" + api$2.version + " for " + type + " does not match previously registered API v" + VERSION);
		diag.error(err.stack || err.message);
		return false;
	}
	api$2[type] = instance;
	diag.debug("@opentelemetry/api: Registered a global for " + type + " v" + VERSION + ".");
	return true;
}
function getGlobal(type) {
	var _a$3, _b;
	var globalVersion = (_a$3 = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a$3 === void 0 ? void 0 : _a$3.version;
	if (!globalVersion || !isCompatible(globalVersion)) return;
	return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];
}
function unregisterGlobal(type, diag) {
	diag.debug("@opentelemetry/api: Unregistering a global for " + type + " v" + VERSION + ".");
	var api$2 = _global[GLOBAL_OPENTELEMETRY_API_KEY];
	if (api$2) delete api$2[type];
}

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js
var __read$3 = void 0 && (void 0).__read || function(o$1, n$1) {
	var m = typeof Symbol === "function" && o$1[Symbol.iterator];
	if (!m) return o$1;
	var i$1 = m.call(o$1), r, ar = [], e;
	try {
		while ((n$1 === void 0 || n$1-- > 0) && !(r = i$1.next()).done) ar.push(r.value);
	} catch (error$1) {
		e = { error: error$1 };
	} finally {
		try {
			if (r && !r.done && (m = i$1["return"])) m.call(i$1);
		} finally {
			if (e) throw e.error;
		}
	}
	return ar;
};
var __spreadArray$3 = void 0 && (void 0).__spreadArray || function(to$1, from, pack) {
	if (pack || arguments.length === 2) {
		for (var i$1 = 0, l = from.length, ar; i$1 < l; i$1++) if (ar || !(i$1 in from)) {
			if (!ar) ar = Array.prototype.slice.call(from, 0, i$1);
			ar[i$1] = from[i$1];
		}
	}
	return to$1.concat(ar || Array.prototype.slice.call(from));
};
/**
* Component Logger which is meant to be used as part of any component which
* will add automatically additional namespace in front of the log message.
* It will then forward all message to global diag logger
* @example
* const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });
* cLogger.debug('test');
* // @opentelemetry/instrumentation-http test
*/
var DiagComponentLogger = function() {
	function DiagComponentLogger$1(props) {
		this._namespace = props.namespace || "DiagComponentLogger";
	}
	DiagComponentLogger$1.prototype.debug = function() {
		var args = [];
		for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
		return logProxy("debug", this._namespace, args);
	};
	DiagComponentLogger$1.prototype.error = function() {
		var args = [];
		for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
		return logProxy("error", this._namespace, args);
	};
	DiagComponentLogger$1.prototype.info = function() {
		var args = [];
		for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
		return logProxy("info", this._namespace, args);
	};
	DiagComponentLogger$1.prototype.warn = function() {
		var args = [];
		for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
		return logProxy("warn", this._namespace, args);
	};
	DiagComponentLogger$1.prototype.verbose = function() {
		var args = [];
		for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
		return logProxy("verbose", this._namespace, args);
	};
	return DiagComponentLogger$1;
}();
function logProxy(funcName, namespace, args) {
	var logger = getGlobal("diag");
	if (!logger) return;
	args.unshift(namespace);
	return logger[funcName].apply(logger, __spreadArray$3([], __read$3(args), false));
}

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/types.js
/**
* Defines the available internal logging levels for the diagnostic logger, the numeric values
* of the levels are defined to match the original values from the initial LogLevel to avoid
* compatibility/migration issues for any implementation that assume the numeric ordering.
*/
var DiagLogLevel;
(function(DiagLogLevel$1) {
	/** Diagnostic Logging level setting to disable all logging (except and forced logs) */
	DiagLogLevel$1[DiagLogLevel$1["NONE"] = 0] = "NONE";
	/** Identifies an error scenario */
	DiagLogLevel$1[DiagLogLevel$1["ERROR"] = 30] = "ERROR";
	/** Identifies a warning scenario */
	DiagLogLevel$1[DiagLogLevel$1["WARN"] = 50] = "WARN";
	/** General informational log message */
	DiagLogLevel$1[DiagLogLevel$1["INFO"] = 60] = "INFO";
	/** General debug log message */
	DiagLogLevel$1[DiagLogLevel$1["DEBUG"] = 70] = "DEBUG";
	/**
	* Detailed trace level logging should only be used for development, should only be set
	* in a development environment.
	*/
	DiagLogLevel$1[DiagLogLevel$1["VERBOSE"] = 80] = "VERBOSE";
	/** Used to set the logging level to include all logging */
	DiagLogLevel$1[DiagLogLevel$1["ALL"] = 9999] = "ALL";
})(DiagLogLevel || (DiagLogLevel = {}));

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js
function createLogLevelDiagLogger(maxLevel, logger) {
	if (maxLevel < DiagLogLevel.NONE) maxLevel = DiagLogLevel.NONE;
	else if (maxLevel > DiagLogLevel.ALL) maxLevel = DiagLogLevel.ALL;
	logger = logger || {};
	function _filterFunc(funcName, theLevel) {
		var theFunc = logger[funcName];
		if (typeof theFunc === "function" && maxLevel >= theLevel) return theFunc.bind(logger);
		return function() {};
	}
	return {
		error: _filterFunc("error", DiagLogLevel.ERROR),
		warn: _filterFunc("warn", DiagLogLevel.WARN),
		info: _filterFunc("info", DiagLogLevel.INFO),
		debug: _filterFunc("debug", DiagLogLevel.DEBUG),
		verbose: _filterFunc("verbose", DiagLogLevel.VERBOSE)
	};
}

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/diag.js
var __read$2 = void 0 && (void 0).__read || function(o$1, n$1) {
	var m = typeof Symbol === "function" && o$1[Symbol.iterator];
	if (!m) return o$1;
	var i$1 = m.call(o$1), r, ar = [], e;
	try {
		while ((n$1 === void 0 || n$1-- > 0) && !(r = i$1.next()).done) ar.push(r.value);
	} catch (error$1) {
		e = { error: error$1 };
	} finally {
		try {
			if (r && !r.done && (m = i$1["return"])) m.call(i$1);
		} finally {
			if (e) throw e.error;
		}
	}
	return ar;
};
var __spreadArray$2 = void 0 && (void 0).__spreadArray || function(to$1, from, pack) {
	if (pack || arguments.length === 2) {
		for (var i$1 = 0, l = from.length, ar; i$1 < l; i$1++) if (ar || !(i$1 in from)) {
			if (!ar) ar = Array.prototype.slice.call(from, 0, i$1);
			ar[i$1] = from[i$1];
		}
	}
	return to$1.concat(ar || Array.prototype.slice.call(from));
};
var API_NAME$2 = "diag";
/**
* Singleton object which represents the entry point to the OpenTelemetry internal
* diagnostic API
*/
var DiagAPI = function() {
	/**
	* Private internal constructor
	* @private
	*/
	function DiagAPI$1() {
		function _logProxy(funcName) {
			return function() {
				var args = [];
				for (var _i = 0; _i < arguments.length; _i++) args[_i] = arguments[_i];
				var logger = getGlobal("diag");
				if (!logger) return;
				return logger[funcName].apply(logger, __spreadArray$2([], __read$2(args), false));
			};
		}
		var self$1 = this;
		var setLogger = function(logger, optionsOrLogLevel) {
			var _a$3, _b, _c;
			if (optionsOrLogLevel === void 0) optionsOrLogLevel = { logLevel: DiagLogLevel.INFO };
			if (logger === self$1) {
				var err = /* @__PURE__ */ new Error("Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation");
				self$1.error((_a$3 = err.stack) !== null && _a$3 !== void 0 ? _a$3 : err.message);
				return false;
			}
			if (typeof optionsOrLogLevel === "number") optionsOrLogLevel = { logLevel: optionsOrLogLevel };
			var oldLogger = getGlobal("diag");
			var newLogger = createLogLevelDiagLogger((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : DiagLogLevel.INFO, logger);
			if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {
				var stack = (_c = (/* @__PURE__ */ new Error()).stack) !== null && _c !== void 0 ? _c : "<failed to generate stacktrace>";
				oldLogger.warn("Current logger will be overwritten from " + stack);
				newLogger.warn("Current logger will overwrite one already registered from " + stack);
			}
			return registerGlobal("diag", newLogger, self$1, true);
		};
		self$1.setLogger = setLogger;
		self$1.disable = function() {
			unregisterGlobal(API_NAME$2, self$1);
		};
		self$1.createComponentLogger = function(options) {
			return new DiagComponentLogger(options);
		};
		self$1.verbose = _logProxy("verbose");
		self$1.debug = _logProxy("debug");
		self$1.info = _logProxy("info");
		self$1.warn = _logProxy("warn");
		self$1.error = _logProxy("error");
	}
	/** Get the singleton instance of the DiagAPI API */
	DiagAPI$1.instance = function() {
		if (!this._instance) this._instance = new DiagAPI$1();
		return this._instance;
	};
	return DiagAPI$1;
}();

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context/context.js
/** Get a key to uniquely identify a context value */
function createContextKey(description) {
	return Symbol.for(description);
}
var BaseContext = function() {
	/**
	* Construct a new context which inherits values from an optional parent context.
	*
	* @param parentContext a context from which to inherit values
	*/
	function BaseContext$1(parentContext) {
		var self$1 = this;
		self$1._currentContext = parentContext ? new Map(parentContext) : /* @__PURE__ */ new Map();
		self$1.getValue = function(key) {
			return self$1._currentContext.get(key);
		};
		self$1.setValue = function(key, value) {
			var context$1 = new BaseContext$1(self$1._currentContext);
			context$1._currentContext.set(key, value);
			return context$1;
		};
		self$1.deleteValue = function(key) {
			var context$1 = new BaseContext$1(self$1._currentContext);
			context$1._currentContext.delete(key);
			return context$1;
		};
	}
	return BaseContext$1;
}();
/** The root context is used as the default parent context when there is no active context */
var ROOT_CONTEXT = new BaseContext();

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js
var __read$1 = void 0 && (void 0).__read || function(o$1, n$1) {
	var m = typeof Symbol === "function" && o$1[Symbol.iterator];
	if (!m) return o$1;
	var i$1 = m.call(o$1), r, ar = [], e;
	try {
		while ((n$1 === void 0 || n$1-- > 0) && !(r = i$1.next()).done) ar.push(r.value);
	} catch (error$1) {
		e = { error: error$1 };
	} finally {
		try {
			if (r && !r.done && (m = i$1["return"])) m.call(i$1);
		} finally {
			if (e) throw e.error;
		}
	}
	return ar;
};
var __spreadArray$1 = void 0 && (void 0).__spreadArray || function(to$1, from, pack) {
	if (pack || arguments.length === 2) {
		for (var i$1 = 0, l = from.length, ar; i$1 < l; i$1++) if (ar || !(i$1 in from)) {
			if (!ar) ar = Array.prototype.slice.call(from, 0, i$1);
			ar[i$1] = from[i$1];
		}
	}
	return to$1.concat(ar || Array.prototype.slice.call(from));
};
var NoopContextManager = function() {
	function NoopContextManager$1() {}
	NoopContextManager$1.prototype.active = function() {
		return ROOT_CONTEXT;
	};
	NoopContextManager$1.prototype.with = function(_context, fn, thisArg) {
		var args = [];
		for (var _i = 3; _i < arguments.length; _i++) args[_i - 3] = arguments[_i];
		return fn.call.apply(fn, __spreadArray$1([thisArg], __read$1(args), false));
	};
	NoopContextManager$1.prototype.bind = function(_context, target) {
		return target;
	};
	NoopContextManager$1.prototype.enable = function() {
		return this;
	};
	NoopContextManager$1.prototype.disable = function() {
		return this;
	};
	return NoopContextManager$1;
}();

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/context.js
var __read = void 0 && (void 0).__read || function(o$1, n$1) {
	var m = typeof Symbol === "function" && o$1[Symbol.iterator];
	if (!m) return o$1;
	var i$1 = m.call(o$1), r, ar = [], e;
	try {
		while ((n$1 === void 0 || n$1-- > 0) && !(r = i$1.next()).done) ar.push(r.value);
	} catch (error$1) {
		e = { error: error$1 };
	} finally {
		try {
			if (r && !r.done && (m = i$1["return"])) m.call(i$1);
		} finally {
			if (e) throw e.error;
		}
	}
	return ar;
};
var __spreadArray = void 0 && (void 0).__spreadArray || function(to$1, from, pack) {
	if (pack || arguments.length === 2) {
		for (var i$1 = 0, l = from.length, ar; i$1 < l; i$1++) if (ar || !(i$1 in from)) {
			if (!ar) ar = Array.prototype.slice.call(from, 0, i$1);
			ar[i$1] = from[i$1];
		}
	}
	return to$1.concat(ar || Array.prototype.slice.call(from));
};
var API_NAME$1 = "context";
var NOOP_CONTEXT_MANAGER = new NoopContextManager();
/**
* Singleton object which represents the entry point to the OpenTelemetry Context API
*/
var ContextAPI = function() {
	/** Empty private constructor prevents end users from constructing a new instance of the API */
	function ContextAPI$1() {}
	/** Get the singleton instance of the Context API */
	ContextAPI$1.getInstance = function() {
		if (!this._instance) this._instance = new ContextAPI$1();
		return this._instance;
	};
	/**
	* Set the current context manager.
	*
	* @returns true if the context manager was successfully registered, else false
	*/
	ContextAPI$1.prototype.setGlobalContextManager = function(contextManager) {
		return registerGlobal(API_NAME$1, contextManager, DiagAPI.instance());
	};
	/**
	* Get the currently active context
	*/
	ContextAPI$1.prototype.active = function() {
		return this._getContextManager().active();
	};
	/**
	* Execute a function with an active context
	*
	* @param context context to be active during function execution
	* @param fn function to execute in a context
	* @param thisArg optional receiver to be used for calling fn
	* @param args optional arguments forwarded to fn
	*/
	ContextAPI$1.prototype.with = function(context$1, fn, thisArg) {
		var _a$3;
		var args = [];
		for (var _i = 3; _i < arguments.length; _i++) args[_i - 3] = arguments[_i];
		return (_a$3 = this._getContextManager()).with.apply(_a$3, __spreadArray([
			context$1,
			fn,
			thisArg
		], __read(args), false));
	};
	/**
	* Bind a context to a target function or event emitter
	*
	* @param context context to bind to the event emitter or function. Defaults to the currently active context
	* @param target function or event emitter to bind
	*/
	ContextAPI$1.prototype.bind = function(context$1, target) {
		return this._getContextManager().bind(context$1, target);
	};
	ContextAPI$1.prototype._getContextManager = function() {
		return getGlobal(API_NAME$1) || NOOP_CONTEXT_MANAGER;
	};
	/** Disable and remove the global context manager */
	ContextAPI$1.prototype.disable = function() {
		this._getContextManager().disable();
		unregisterGlobal(API_NAME$1, DiagAPI.instance());
	};
	return ContextAPI$1;
}();

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js
var TraceFlags;
(function(TraceFlags$1) {
	/** Represents no flag set. */
	TraceFlags$1[TraceFlags$1["NONE"] = 0] = "NONE";
	/** Bit to represent whether trace is sampled in trace flags. */
	TraceFlags$1[TraceFlags$1["SAMPLED"] = 1] = "SAMPLED";
})(TraceFlags || (TraceFlags = {}));

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js
var INVALID_SPANID = "0000000000000000";
var INVALID_TRACEID = "00000000000000000000000000000000";
var INVALID_SPAN_CONTEXT = {
	traceId: INVALID_TRACEID,
	spanId: INVALID_SPANID,
	traceFlags: TraceFlags.NONE
};

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js
/**
* The NonRecordingSpan is the default {@link Span} that is used when no Span
* implementation is available. All operations are no-op including context
* propagation.
*/
var NonRecordingSpan = function() {
	function NonRecordingSpan$1(_spanContext) {
		if (_spanContext === void 0) _spanContext = INVALID_SPAN_CONTEXT;
		this._spanContext = _spanContext;
	}
	NonRecordingSpan$1.prototype.spanContext = function() {
		return this._spanContext;
	};
	NonRecordingSpan$1.prototype.setAttribute = function(_key, _value) {
		return this;
	};
	NonRecordingSpan$1.prototype.setAttributes = function(_attributes) {
		return this;
	};
	NonRecordingSpan$1.prototype.addEvent = function(_name, _attributes) {
		return this;
	};
	NonRecordingSpan$1.prototype.addLink = function(_link) {
		return this;
	};
	NonRecordingSpan$1.prototype.addLinks = function(_links) {
		return this;
	};
	NonRecordingSpan$1.prototype.setStatus = function(_status) {
		return this;
	};
	NonRecordingSpan$1.prototype.updateName = function(_name) {
		return this;
	};
	NonRecordingSpan$1.prototype.end = function(_endTime) {};
	NonRecordingSpan$1.prototype.isRecording = function() {
		return false;
	};
	NonRecordingSpan$1.prototype.recordException = function(_exception, _time) {};
	return NonRecordingSpan$1;
}();

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/context-utils.js
/**
* span key
*/
var SPAN_KEY = createContextKey("OpenTelemetry Context Key SPAN");
/**
* Return the span if one exists
*
* @param context context to get span from
*/
function getSpan(context$1) {
	return context$1.getValue(SPAN_KEY) || void 0;
}
/**
* Gets the span from the current context, if one exists.
*/
function getActiveSpan() {
	return getSpan(ContextAPI.getInstance().active());
}
/**
* Set the span on a context
*
* @param context context to use as parent
* @param span span to set active
*/
function setSpan(context$1, span) {
	return context$1.setValue(SPAN_KEY, span);
}
/**
* Remove current span stored in the context
*
* @param context context to delete span from
*/
function deleteSpan(context$1) {
	return context$1.deleteValue(SPAN_KEY);
}
/**
* Wrap span context in a NoopSpan and set as span in a new
* context
*
* @param context context to set active span on
* @param spanContext span context to be wrapped
*/
function setSpanContext(context$1, spanContext) {
	return setSpan(context$1, new NonRecordingSpan(spanContext));
}
/**
* Get the span context of the span if it exists.
*
* @param context context to get values from
*/
function getSpanContext(context$1) {
	var _a$3;
	return (_a$3 = getSpan(context$1)) === null || _a$3 === void 0 ? void 0 : _a$3.spanContext();
}

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js
var VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;
var VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;
function isValidTraceId(traceId) {
	return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;
}
function isValidSpanId(spanId) {
	return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;
}
/**
* Returns true if this {@link SpanContext} is valid.
* @return true if this {@link SpanContext} is valid.
*/
function isSpanContextValid(spanContext) {
	return isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId);
}
/**
* Wrap the given {@link SpanContext} in a new non-recording {@link Span}
*
* @param spanContext span context to be wrapped
* @returns a new non-recording {@link Span} with the provided context
*/
function wrapSpanContext(spanContext) {
	return new NonRecordingSpan(spanContext);
}

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js
var contextApi = ContextAPI.getInstance();
/**
* No-op implementations of {@link Tracer}.
*/
var NoopTracer = function() {
	function NoopTracer$1() {}
	NoopTracer$1.prototype.startSpan = function(name$2, options, context$1) {
		if (context$1 === void 0) context$1 = contextApi.active();
		var root = Boolean(options === null || options === void 0 ? void 0 : options.root);
		if (root) return new NonRecordingSpan();
		var parentFromContext = context$1 && getSpanContext(context$1);
		if (isSpanContext(parentFromContext) && isSpanContextValid(parentFromContext)) return new NonRecordingSpan(parentFromContext);
		else return new NonRecordingSpan();
	};
	NoopTracer$1.prototype.startActiveSpan = function(name$2, arg2, arg3, arg4) {
		var opts;
		var ctx;
		var fn;
		if (arguments.length < 2) return;
		else if (arguments.length === 2) fn = arg2;
		else if (arguments.length === 3) {
			opts = arg2;
			fn = arg3;
		} else {
			opts = arg2;
			ctx = arg3;
			fn = arg4;
		}
		var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();
		var span = this.startSpan(name$2, opts, parentContext);
		var contextWithSpanSet = setSpan(parentContext, span);
		return contextApi.with(contextWithSpanSet, fn, void 0, span);
	};
	return NoopTracer$1;
}();
function isSpanContext(spanContext) {
	return typeof spanContext === "object" && typeof spanContext["spanId"] === "string" && typeof spanContext["traceId"] === "string" && typeof spanContext["traceFlags"] === "number";
}

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js
var NOOP_TRACER = new NoopTracer();
/**
* Proxy tracer provided by the proxy tracer provider
*/
var ProxyTracer = function() {
	function ProxyTracer$1(_provider, name$2, version$1, options) {
		this._provider = _provider;
		this.name = name$2;
		this.version = version$1;
		this.options = options;
	}
	ProxyTracer$1.prototype.startSpan = function(name$2, options, context$1) {
		return this._getTracer().startSpan(name$2, options, context$1);
	};
	ProxyTracer$1.prototype.startActiveSpan = function(_name, _options, _context, _fn) {
		var tracer = this._getTracer();
		return Reflect.apply(tracer.startActiveSpan, tracer, arguments);
	};
	/**
	* Try to get a tracer from the proxy tracer provider.
	* If the proxy tracer provider has no delegate, return a noop tracer.
	*/
	ProxyTracer$1.prototype._getTracer = function() {
		if (this._delegate) return this._delegate;
		var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);
		if (!tracer) return NOOP_TRACER;
		this._delegate = tracer;
		return this._delegate;
	};
	return ProxyTracer$1;
}();

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js
/**
* An implementation of the {@link TracerProvider} which returns an impotent
* Tracer for all calls to `getTracer`.
*
* All operations are no-op.
*/
var NoopTracerProvider = function() {
	function NoopTracerProvider$1() {}
	NoopTracerProvider$1.prototype.getTracer = function(_name, _version, _options) {
		return new NoopTracer();
	};
	return NoopTracerProvider$1;
}();

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js
var NOOP_TRACER_PROVIDER = new NoopTracerProvider();
/**
* Tracer provider which provides {@link ProxyTracer}s.
*
* Before a delegate is set, tracers provided are NoOp.
*   When a delegate is set, traces are provided from the delegate.
*   When a delegate is set after tracers have already been provided,
*   all tracers already provided will use the provided delegate implementation.
*/
var ProxyTracerProvider = function() {
	function ProxyTracerProvider$1() {}
	/**
	* Get a {@link ProxyTracer}
	*/
	ProxyTracerProvider$1.prototype.getTracer = function(name$2, version$1, options) {
		var _a$3;
		return (_a$3 = this.getDelegateTracer(name$2, version$1, options)) !== null && _a$3 !== void 0 ? _a$3 : new ProxyTracer(this, name$2, version$1, options);
	};
	ProxyTracerProvider$1.prototype.getDelegate = function() {
		var _a$3;
		return (_a$3 = this._delegate) !== null && _a$3 !== void 0 ? _a$3 : NOOP_TRACER_PROVIDER;
	};
	/**
	* Set the delegate tracer provider
	*/
	ProxyTracerProvider$1.prototype.setDelegate = function(delegate) {
		this._delegate = delegate;
	};
	ProxyTracerProvider$1.prototype.getDelegateTracer = function(name$2, version$1, options) {
		var _a$3;
		return (_a$3 = this._delegate) === null || _a$3 === void 0 ? void 0 : _a$3.getTracer(name$2, version$1, options);
	};
	return ProxyTracerProvider$1;
}();

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/status.js
/**
* An enumeration of status codes.
*/
var SpanStatusCode;
(function(SpanStatusCode$1) {
	/**
	* The default status.
	*/
	SpanStatusCode$1[SpanStatusCode$1["UNSET"] = 0] = "UNSET";
	/**
	* The operation has been validated by an Application developer or
	* Operator to have completed successfully.
	*/
	SpanStatusCode$1[SpanStatusCode$1["OK"] = 1] = "OK";
	/**
	* The operation contains an error.
	*/
	SpanStatusCode$1[SpanStatusCode$1["ERROR"] = 2] = "ERROR";
})(SpanStatusCode || (SpanStatusCode = {}));

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/trace.js
var API_NAME = "trace";
/**
* Singleton object which represents the entry point to the OpenTelemetry Tracing API
*/
var TraceAPI = function() {
	/** Empty private constructor prevents end users from constructing a new instance of the API */
	function TraceAPI$1() {
		this._proxyTracerProvider = new ProxyTracerProvider();
		this.wrapSpanContext = wrapSpanContext;
		this.isSpanContextValid = isSpanContextValid;
		this.deleteSpan = deleteSpan;
		this.getSpan = getSpan;
		this.getActiveSpan = getActiveSpan;
		this.getSpanContext = getSpanContext;
		this.setSpan = setSpan;
		this.setSpanContext = setSpanContext;
	}
	/** Get the singleton instance of the Trace API */
	TraceAPI$1.getInstance = function() {
		if (!this._instance) this._instance = new TraceAPI$1();
		return this._instance;
	};
	/**
	* Set the current global tracer.
	*
	* @returns true if the tracer provider was successfully registered, else false
	*/
	TraceAPI$1.prototype.setGlobalTracerProvider = function(provider) {
		var success = registerGlobal(API_NAME, this._proxyTracerProvider, DiagAPI.instance());
		if (success) this._proxyTracerProvider.setDelegate(provider);
		return success;
	};
	/**
	* Returns the global tracer provider.
	*/
	TraceAPI$1.prototype.getTracerProvider = function() {
		return getGlobal(API_NAME) || this._proxyTracerProvider;
	};
	/**
	* Returns a tracer from the global tracer provider.
	*/
	TraceAPI$1.prototype.getTracer = function(name$2, version$1) {
		return this.getTracerProvider().getTracer(name$2, version$1);
	};
	/** Remove the global tracer provider */
	TraceAPI$1.prototype.disable = function() {
		unregisterGlobal(API_NAME, DiagAPI.instance());
		this._proxyTracerProvider = new ProxyTracerProvider();
	};
	return TraceAPI$1;
}();

//#endregion
//#region node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace-api.js
/** Entrypoint for trace API */
var trace = TraceAPI.getInstance();

//#endregion
//#region node_modules/.pnpm/ai@4.3.19_react@19.1.0_zod@3.25.76/node_modules/ai/dist/index.mjs
var __defProp = Object.defineProperty;
var __export = (target, all) => {
	for (var name17 in all) __defProp(target, name17, {
		get: all[name17],
		enumerable: true
	});
};
function prepareResponseHeaders(headers, { contentType, dataStreamVersion }) {
	const responseHeaders = new Headers(headers != null ? headers : {});
	if (!responseHeaders.has("Content-Type")) responseHeaders.set("Content-Type", contentType);
	if (dataStreamVersion !== void 0) responseHeaders.set("X-Vercel-AI-Data-Stream", dataStreamVersion);
	return responseHeaders;
}
function prepareOutgoingHttpHeaders(headers, { contentType, dataStreamVersion }) {
	const outgoingHeaders = {};
	if (headers != null) for (const [key, value] of Object.entries(headers)) outgoingHeaders[key] = value;
	if (outgoingHeaders["Content-Type"] == null) outgoingHeaders["Content-Type"] = contentType;
	if (dataStreamVersion !== void 0) outgoingHeaders["X-Vercel-AI-Data-Stream"] = dataStreamVersion;
	return outgoingHeaders;
}
function writeToServerResponse({ response, status, statusText, headers, stream: stream$4 }) {
	response.writeHead(status != null ? status : 200, statusText, headers);
	const reader = stream$4.getReader();
	const read = async () => {
		try {
			while (true) {
				const { done, value } = await reader.read();
				if (done) break;
				response.write(value);
			}
		} catch (error$1) {
			throw error$1;
		} finally {
			response.end();
		}
	};
	read();
}
var UnsupportedModelVersionError = class extends AISDKError {
	constructor() {
		super({
			name: "AI_UnsupportedModelVersionError",
			message: `Unsupported model version. AI SDK 4 only supports models that implement specification version "v1". Please upgrade to AI SDK 5 to use this model.`
		});
	}
};
var name = "AI_InvalidArgumentError";
var marker = `vercel.ai.error.${name}`;
var symbol = Symbol.for(marker);
var _a;
var InvalidArgumentError = class extends AISDKError {
	constructor({ parameter, value, message }) {
		super({
			name,
			message: `Invalid argument for parameter ${parameter}: ${message}`
		});
		this[_a] = true;
		this.parameter = parameter;
		this.value = value;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker);
	}
};
_a = symbol;
var name2 = "AI_RetryError";
var marker2 = `vercel.ai.error.${name2}`;
var symbol2 = Symbol.for(marker2);
var _a2;
var RetryError = class extends AISDKError {
	constructor({ message, reason, errors: errors$2 }) {
		super({
			name: name2,
			message
		});
		this[_a2] = true;
		this.reason = reason;
		this.errors = errors$2;
		this.lastError = errors$2[errors$2.length - 1];
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker2);
	}
};
_a2 = symbol2;
var retryWithExponentialBackoff = ({ maxRetries = 2, initialDelayInMs = 2e3, backoffFactor = 2 } = {}) => async (f) => _retryWithExponentialBackoff(f, {
	maxRetries,
	delayInMs: initialDelayInMs,
	backoffFactor
});
async function _retryWithExponentialBackoff(f, { maxRetries, delayInMs, backoffFactor }, errors$2 = []) {
	try {
		return await f();
	} catch (error$1) {
		if (isAbortError$1(error$1)) throw error$1;
		if (maxRetries === 0) throw error$1;
		const errorMessage = getErrorMessage(error$1);
		const newErrors = [...errors$2, error$1];
		const tryNumber = newErrors.length;
		if (tryNumber > maxRetries) throw new RetryError({
			message: `Failed after ${tryNumber} attempts. Last error: ${errorMessage}`,
			reason: "maxRetriesExceeded",
			errors: newErrors
		});
		if (error$1 instanceof Error && APICallError.isInstance(error$1) && error$1.isRetryable === true && tryNumber <= maxRetries) {
			await delay(delayInMs);
			return _retryWithExponentialBackoff(f, {
				maxRetries,
				delayInMs: backoffFactor * delayInMs,
				backoffFactor
			}, newErrors);
		}
		if (tryNumber === 1) throw error$1;
		throw new RetryError({
			message: `Failed after ${tryNumber} attempts with non-retryable error: '${errorMessage}'`,
			reason: "errorNotRetryable",
			errors: newErrors
		});
	}
}
function prepareRetries({ maxRetries }) {
	if (maxRetries != null) {
		if (!Number.isInteger(maxRetries)) throw new InvalidArgumentError({
			parameter: "maxRetries",
			value: maxRetries,
			message: "maxRetries must be an integer"
		});
		if (maxRetries < 0) throw new InvalidArgumentError({
			parameter: "maxRetries",
			value: maxRetries,
			message: "maxRetries must be >= 0"
		});
	}
	const maxRetriesResult = maxRetries != null ? maxRetries : 2;
	return {
		maxRetries: maxRetriesResult,
		retry: retryWithExponentialBackoff({ maxRetries: maxRetriesResult })
	};
}
function assembleOperationName({ operationId, telemetry }) {
	return {
		"operation.name": `${operationId}${(telemetry == null ? void 0 : telemetry.functionId) != null ? ` ${telemetry.functionId}` : ""}`,
		"resource.name": telemetry == null ? void 0 : telemetry.functionId,
		"ai.operationId": operationId,
		"ai.telemetry.functionId": telemetry == null ? void 0 : telemetry.functionId
	};
}
function getBaseTelemetryAttributes({ model, settings, telemetry, headers }) {
	var _a17;
	return {
		"ai.model.provider": model.provider,
		"ai.model.id": model.modelId,
		...Object.entries(settings).reduce((attributes, [key, value]) => {
			attributes[`ai.settings.${key}`] = value;
			return attributes;
		}, {}),
		...Object.entries((_a17 = telemetry == null ? void 0 : telemetry.metadata) != null ? _a17 : {}).reduce((attributes, [key, value]) => {
			attributes[`ai.telemetry.metadata.${key}`] = value;
			return attributes;
		}, {}),
		...Object.entries(headers != null ? headers : {}).reduce((attributes, [key, value]) => {
			if (value !== void 0) attributes[`ai.request.headers.${key}`] = value;
			return attributes;
		}, {})
	};
}
var noopTracer = {
	startSpan() {
		return noopSpan;
	},
	startActiveSpan(name17, arg1, arg2, arg3) {
		if (typeof arg1 === "function") return arg1(noopSpan);
		if (typeof arg2 === "function") return arg2(noopSpan);
		if (typeof arg3 === "function") return arg3(noopSpan);
	}
};
var noopSpan = {
	spanContext() {
		return noopSpanContext;
	},
	setAttribute() {
		return this;
	},
	setAttributes() {
		return this;
	},
	addEvent() {
		return this;
	},
	addLink() {
		return this;
	},
	addLinks() {
		return this;
	},
	setStatus() {
		return this;
	},
	updateName() {
		return this;
	},
	end() {
		return this;
	},
	isRecording() {
		return false;
	},
	recordException() {
		return this;
	}
};
var noopSpanContext = {
	traceId: "",
	spanId: "",
	traceFlags: 0
};
function getTracer({ isEnabled = false, tracer } = {}) {
	if (!isEnabled) return noopTracer;
	if (tracer) return tracer;
	return trace.getTracer("ai");
}
function recordSpan({ name: name17, tracer, attributes, fn, endWhenDone = true }) {
	return tracer.startActiveSpan(name17, { attributes }, async (span) => {
		try {
			const result = await fn(span);
			if (endWhenDone) span.end();
			return result;
		} catch (error$1) {
			try {
				recordErrorOnSpan(span, error$1);
			} finally {
				span.end();
			}
			throw error$1;
		}
	});
}
function recordErrorOnSpan(span, error$1) {
	if (error$1 instanceof Error) {
		span.recordException({
			name: error$1.name,
			message: error$1.message,
			stack: error$1.stack
		});
		span.setStatus({
			code: SpanStatusCode.ERROR,
			message: error$1.message
		});
	} else span.setStatus({ code: SpanStatusCode.ERROR });
}
function selectTelemetryAttributes({ telemetry, attributes }) {
	if ((telemetry == null ? void 0 : telemetry.isEnabled) !== true) return {};
	return Object.entries(attributes).reduce((attributes2, [key, value]) => {
		if (value === void 0) return attributes2;
		if (typeof value === "object" && "input" in value && typeof value.input === "function") {
			if ((telemetry == null ? void 0 : telemetry.recordInputs) === false) return attributes2;
			const result = value.input();
			return result === void 0 ? attributes2 : {
				...attributes2,
				[key]: result
			};
		}
		if (typeof value === "object" && "output" in value && typeof value.output === "function") {
			if ((telemetry == null ? void 0 : telemetry.recordOutputs) === false) return attributes2;
			const result = value.output();
			return result === void 0 ? attributes2 : {
				...attributes2,
				[key]: result
			};
		}
		return {
			...attributes2,
			[key]: value
		};
	}, {});
}
var name3 = "AI_NoImageGeneratedError";
var marker3 = `vercel.ai.error.${name3}`;
var symbol3 = Symbol.for(marker3);
var _a3;
_a3 = symbol3;
var DefaultGeneratedFile = class {
	constructor({ data: data$1, mimeType }) {
		const isUint8Array$4 = data$1 instanceof Uint8Array;
		this.base64Data = isUint8Array$4 ? void 0 : data$1;
		this.uint8ArrayData = isUint8Array$4 ? data$1 : void 0;
		this.mimeType = mimeType;
	}
	get base64() {
		if (this.base64Data == null) this.base64Data = convertUint8ArrayToBase64(this.uint8ArrayData);
		return this.base64Data;
	}
	get uint8Array() {
		if (this.uint8ArrayData == null) this.uint8ArrayData = convertBase64ToUint8Array(this.base64Data);
		return this.uint8ArrayData;
	}
};
var DefaultGeneratedFileWithType = class extends DefaultGeneratedFile {
	constructor(options) {
		super(options);
		this.type = "file";
	}
};
var imageMimeTypeSignatures = [
	{
		mimeType: "image/gif",
		bytesPrefix: [
			71,
			73,
			70
		],
		base64Prefix: "R0lG"
	},
	{
		mimeType: "image/png",
		bytesPrefix: [
			137,
			80,
			78,
			71
		],
		base64Prefix: "iVBORw"
	},
	{
		mimeType: "image/jpeg",
		bytesPrefix: [255, 216],
		base64Prefix: "/9j/"
	},
	{
		mimeType: "image/webp",
		bytesPrefix: [
			82,
			73,
			70,
			70
		],
		base64Prefix: "UklGRg"
	},
	{
		mimeType: "image/bmp",
		bytesPrefix: [66, 77],
		base64Prefix: "Qk"
	},
	{
		mimeType: "image/tiff",
		bytesPrefix: [
			73,
			73,
			42,
			0
		],
		base64Prefix: "SUkqAA"
	},
	{
		mimeType: "image/tiff",
		bytesPrefix: [
			77,
			77,
			0,
			42
		],
		base64Prefix: "TU0AKg"
	},
	{
		mimeType: "image/avif",
		bytesPrefix: [
			0,
			0,
			0,
			32,
			102,
			116,
			121,
			112,
			97,
			118,
			105,
			102
		],
		base64Prefix: "AAAAIGZ0eXBhdmlm"
	},
	{
		mimeType: "image/heic",
		bytesPrefix: [
			0,
			0,
			0,
			32,
			102,
			116,
			121,
			112,
			104,
			101,
			105,
			99
		],
		base64Prefix: "AAAAIGZ0eXBoZWlj"
	}
];
var stripID3 = (data$1) => {
	const bytes = typeof data$1 === "string" ? convertBase64ToUint8Array(data$1) : data$1;
	const id3Size = (bytes[6] & 127) << 21 | (bytes[7] & 127) << 14 | (bytes[8] & 127) << 7 | bytes[9] & 127;
	return bytes.slice(id3Size + 10);
};
function stripID3TagsIfPresent(data$1) {
	const hasId3 = typeof data$1 === "string" && data$1.startsWith("SUQz") || typeof data$1 !== "string" && data$1.length > 10 && data$1[0] === 73 && data$1[1] === 68 && data$1[2] === 51;
	return hasId3 ? stripID3(data$1) : data$1;
}
function detectMimeType({ data: data$1, signatures }) {
	const processedData = stripID3TagsIfPresent(data$1);
	for (const signature of signatures) if (typeof processedData === "string" ? processedData.startsWith(signature.base64Prefix) : processedData.length >= signature.bytesPrefix.length && signature.bytesPrefix.every((byte, index) => processedData[index] === byte)) return signature.mimeType;
	return void 0;
}
var name4 = "AI_NoObjectGeneratedError";
var marker4 = `vercel.ai.error.${name4}`;
var symbol4 = Symbol.for(marker4);
var _a4;
var NoObjectGeneratedError = class extends AISDKError {
	constructor({ message = "No object generated.", cause, text: text2, response, usage, finishReason }) {
		super({
			name: name4,
			message,
			cause
		});
		this[_a4] = true;
		this.text = text2;
		this.response = response;
		this.usage = usage;
		this.finishReason = finishReason;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker4);
	}
};
_a4 = symbol4;
var name5 = "AI_DownloadError";
var marker5 = `vercel.ai.error.${name5}`;
var symbol5 = Symbol.for(marker5);
var _a5;
var DownloadError = class extends AISDKError {
	constructor({ url, statusCode, statusText, cause, message = cause == null ? `Failed to download ${url}: ${statusCode} ${statusText}` : `Failed to download ${url}: ${cause}` }) {
		super({
			name: name5,
			message,
			cause
		});
		this[_a5] = true;
		this.url = url;
		this.statusCode = statusCode;
		this.statusText = statusText;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker5);
	}
};
_a5 = symbol5;
async function download({ url }) {
	var _a17;
	const urlText = url.toString();
	try {
		const response = await fetch(urlText);
		if (!response.ok) throw new DownloadError({
			url: urlText,
			statusCode: response.status,
			statusText: response.statusText
		});
		return {
			data: new Uint8Array(await response.arrayBuffer()),
			mimeType: (_a17 = response.headers.get("content-type")) != null ? _a17 : void 0
		};
	} catch (error$1) {
		if (DownloadError.isInstance(error$1)) throw error$1;
		throw new DownloadError({
			url: urlText,
			cause: error$1
		});
	}
}
var name6 = "AI_InvalidDataContentError";
var marker6 = `vercel.ai.error.${name6}`;
var symbol6 = Symbol.for(marker6);
var _a6;
var InvalidDataContentError = class extends AISDKError {
	constructor({ content, cause, message = `Invalid data content. Expected a base64 string, Uint8Array, ArrayBuffer, or Buffer, but got ${typeof content}.` }) {
		super({
			name: name6,
			message,
			cause
		});
		this[_a6] = true;
		this.content = content;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker6);
	}
};
_a6 = symbol6;
var dataContentSchema = unionType([
	stringType(),
	instanceOfType(Uint8Array),
	instanceOfType(ArrayBuffer),
	custom((value) => {
		var _a17, _b;
		return (_b = (_a17 = globalThis.Buffer) == null ? void 0 : _a17.isBuffer(value)) != null ? _b : false;
	}, { message: "Must be a Buffer" })
]);
function convertDataContentToBase64String(content) {
	if (typeof content === "string") return content;
	if (content instanceof ArrayBuffer) return convertUint8ArrayToBase64(new Uint8Array(content));
	return convertUint8ArrayToBase64(content);
}
function convertDataContentToUint8Array(content) {
	if (content instanceof Uint8Array) return content;
	if (typeof content === "string") try {
		return convertBase64ToUint8Array(content);
	} catch (error$1) {
		throw new InvalidDataContentError({
			message: "Invalid data content. Content string is not a base64-encoded media.",
			content,
			cause: error$1
		});
	}
	if (content instanceof ArrayBuffer) return new Uint8Array(content);
	throw new InvalidDataContentError({ content });
}
function convertUint8ArrayToText(uint8Array) {
	try {
		return new TextDecoder().decode(uint8Array);
	} catch (error$1) {
		throw new Error("Error decoding Uint8Array to text");
	}
}
var name7 = "AI_InvalidMessageRoleError";
var marker7 = `vercel.ai.error.${name7}`;
var symbol7 = Symbol.for(marker7);
var _a7;
var InvalidMessageRoleError = class extends AISDKError {
	constructor({ role, message = `Invalid message role: '${role}'. Must be one of: "system", "user", "assistant", "tool".` }) {
		super({
			name: name7,
			message
		});
		this[_a7] = true;
		this.role = role;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker7);
	}
};
_a7 = symbol7;
function splitDataUrl(dataUrl) {
	try {
		const [header, base64Content] = dataUrl.split(",");
		return {
			mimeType: header.split(";")[0].split(":")[1],
			base64Content
		};
	} catch (error$1) {
		return {
			mimeType: void 0,
			base64Content: void 0
		};
	}
}
async function convertToLanguageModelPrompt({ prompt, modelSupportsImageUrls = true, modelSupportsUrl = () => false, downloadImplementation = download }) {
	const downloadedAssets = await downloadAssets(prompt.messages, downloadImplementation, modelSupportsImageUrls, modelSupportsUrl);
	return [...prompt.system != null ? [{
		role: "system",
		content: prompt.system
	}] : [], ...prompt.messages.map((message) => convertToLanguageModelMessage(message, downloadedAssets))];
}
function convertToLanguageModelMessage(message, downloadedAssets) {
	var _a17, _b, _c, _d, _e, _f;
	const role = message.role;
	switch (role) {
		case "system": return {
			role: "system",
			content: message.content,
			providerMetadata: (_a17 = message.providerOptions) != null ? _a17 : message.experimental_providerMetadata
		};
		case "user": {
			if (typeof message.content === "string") return {
				role: "user",
				content: [{
					type: "text",
					text: message.content
				}],
				providerMetadata: (_b = message.providerOptions) != null ? _b : message.experimental_providerMetadata
			};
			return {
				role: "user",
				content: message.content.map((part) => convertPartToLanguageModelPart(part, downloadedAssets)).filter((part) => part.type !== "text" || part.text !== ""),
				providerMetadata: (_c = message.providerOptions) != null ? _c : message.experimental_providerMetadata
			};
		}
		case "assistant": {
			if (typeof message.content === "string") return {
				role: "assistant",
				content: [{
					type: "text",
					text: message.content
				}],
				providerMetadata: (_d = message.providerOptions) != null ? _d : message.experimental_providerMetadata
			};
			return {
				role: "assistant",
				content: message.content.filter((part) => part.type !== "text" || part.text !== "").map((part) => {
					var _a18;
					const providerOptions = (_a18 = part.providerOptions) != null ? _a18 : part.experimental_providerMetadata;
					switch (part.type) {
						case "file": return {
							type: "file",
							data: part.data instanceof URL ? part.data : convertDataContentToBase64String(part.data),
							filename: part.filename,
							mimeType: part.mimeType,
							providerMetadata: providerOptions
						};
						case "reasoning": return {
							type: "reasoning",
							text: part.text,
							signature: part.signature,
							providerMetadata: providerOptions
						};
						case "redacted-reasoning": return {
							type: "redacted-reasoning",
							data: part.data,
							providerMetadata: providerOptions
						};
						case "text": return {
							type: "text",
							text: part.text,
							providerMetadata: providerOptions
						};
						case "tool-call": return {
							type: "tool-call",
							toolCallId: part.toolCallId,
							toolName: part.toolName,
							args: part.args,
							providerMetadata: providerOptions
						};
					}
				}),
				providerMetadata: (_e = message.providerOptions) != null ? _e : message.experimental_providerMetadata
			};
		}
		case "tool": return {
			role: "tool",
			content: message.content.map((part) => {
				var _a18;
				return {
					type: "tool-result",
					toolCallId: part.toolCallId,
					toolName: part.toolName,
					result: part.result,
					content: part.experimental_content,
					isError: part.isError,
					providerMetadata: (_a18 = part.providerOptions) != null ? _a18 : part.experimental_providerMetadata
				};
			}),
			providerMetadata: (_f = message.providerOptions) != null ? _f : message.experimental_providerMetadata
		};
		default: {
			const _exhaustiveCheck = role;
			throw new InvalidMessageRoleError({ role: _exhaustiveCheck });
		}
	}
}
async function downloadAssets(messages, downloadImplementation, modelSupportsImageUrls, modelSupportsUrl) {
	const urls = messages.filter((message) => message.role === "user").map((message) => message.content).filter((content) => Array.isArray(content)).flat().filter((part) => part.type === "image" || part.type === "file").filter((part) => !(part.type === "image" && modelSupportsImageUrls === true)).map((part) => part.type === "image" ? part.image : part.data).map((part) => typeof part === "string" && (part.startsWith("http:") || part.startsWith("https:")) ? new URL(part) : part).filter((image) => image instanceof URL).filter((url) => !modelSupportsUrl(url));
	const downloadedImages = await Promise.all(urls.map(async (url) => ({
		url,
		data: await downloadImplementation({ url })
	})));
	return Object.fromEntries(downloadedImages.map(({ url, data: data$1 }) => [url.toString(), data$1]));
}
function convertPartToLanguageModelPart(part, downloadedAssets) {
	var _a17, _b, _c, _d;
	if (part.type === "text") return {
		type: "text",
		text: part.text,
		providerMetadata: (_a17 = part.providerOptions) != null ? _a17 : part.experimental_providerMetadata
	};
	let mimeType = part.mimeType;
	let data$1;
	let content;
	let normalizedData;
	const type = part.type;
	switch (type) {
		case "image":
			data$1 = part.image;
			break;
		case "file":
			data$1 = part.data;
			break;
		default: throw new Error(`Unsupported part type: ${type}`);
	}
	try {
		content = typeof data$1 === "string" ? new URL(data$1) : data$1;
	} catch (error$1) {
		content = data$1;
	}
	if (content instanceof URL) if (content.protocol === "data:") {
		const { mimeType: dataUrlMimeType, base64Content } = splitDataUrl(content.toString());
		if (dataUrlMimeType == null || base64Content == null) throw new Error(`Invalid data URL format in part ${type}`);
		mimeType = dataUrlMimeType;
		normalizedData = convertDataContentToUint8Array(base64Content);
	} else {
		const downloadedFile = downloadedAssets[content.toString()];
		if (downloadedFile) {
			normalizedData = downloadedFile.data;
			mimeType != null || (mimeType = downloadedFile.mimeType);
		} else normalizedData = content;
	}
	else normalizedData = convertDataContentToUint8Array(content);
	switch (type) {
		case "image": {
			if (normalizedData instanceof Uint8Array) mimeType = (_b = detectMimeType({
				data: normalizedData,
				signatures: imageMimeTypeSignatures
			})) != null ? _b : mimeType;
			return {
				type: "image",
				image: normalizedData,
				mimeType,
				providerMetadata: (_c = part.providerOptions) != null ? _c : part.experimental_providerMetadata
			};
		}
		case "file": {
			if (mimeType == null) throw new Error(`Mime type is missing for file part`);
			return {
				type: "file",
				data: normalizedData instanceof Uint8Array ? convertDataContentToBase64String(normalizedData) : normalizedData,
				filename: part.filename,
				mimeType,
				providerMetadata: (_d = part.providerOptions) != null ? _d : part.experimental_providerMetadata
			};
		}
	}
}
function prepareCallSettings({ maxTokens, temperature, topP, topK, presencePenalty, frequencyPenalty, stopSequences, seed }) {
	if (maxTokens != null) {
		if (!Number.isInteger(maxTokens)) throw new InvalidArgumentError({
			parameter: "maxTokens",
			value: maxTokens,
			message: "maxTokens must be an integer"
		});
		if (maxTokens < 1) throw new InvalidArgumentError({
			parameter: "maxTokens",
			value: maxTokens,
			message: "maxTokens must be >= 1"
		});
	}
	if (temperature != null) {
		if (typeof temperature !== "number") throw new InvalidArgumentError({
			parameter: "temperature",
			value: temperature,
			message: "temperature must be a number"
		});
	}
	if (topP != null) {
		if (typeof topP !== "number") throw new InvalidArgumentError({
			parameter: "topP",
			value: topP,
			message: "topP must be a number"
		});
	}
	if (topK != null) {
		if (typeof topK !== "number") throw new InvalidArgumentError({
			parameter: "topK",
			value: topK,
			message: "topK must be a number"
		});
	}
	if (presencePenalty != null) {
		if (typeof presencePenalty !== "number") throw new InvalidArgumentError({
			parameter: "presencePenalty",
			value: presencePenalty,
			message: "presencePenalty must be a number"
		});
	}
	if (frequencyPenalty != null) {
		if (typeof frequencyPenalty !== "number") throw new InvalidArgumentError({
			parameter: "frequencyPenalty",
			value: frequencyPenalty,
			message: "frequencyPenalty must be a number"
		});
	}
	if (seed != null) {
		if (!Number.isInteger(seed)) throw new InvalidArgumentError({
			parameter: "seed",
			value: seed,
			message: "seed must be an integer"
		});
	}
	return {
		maxTokens,
		temperature: temperature != null ? temperature : 0,
		topP,
		topK,
		presencePenalty,
		frequencyPenalty,
		stopSequences: stopSequences != null && stopSequences.length > 0 ? stopSequences : void 0,
		seed
	};
}
function attachmentsToParts(attachments) {
	var _a17, _b, _c;
	const parts = [];
	for (const attachment of attachments) {
		let url;
		try {
			url = new URL(attachment.url);
		} catch (error$1) {
			throw new Error(`Invalid URL: ${attachment.url}`);
		}
		switch (url.protocol) {
			case "http:":
			case "https:": {
				if ((_a17 = attachment.contentType) == null ? void 0 : _a17.startsWith("image/")) parts.push({
					type: "image",
					image: url
				});
				else {
					if (!attachment.contentType) throw new Error("If the attachment is not an image, it must specify a content type");
					parts.push({
						type: "file",
						data: url,
						mimeType: attachment.contentType
					});
				}
				break;
			}
			case "data:": {
				let header;
				let base64Content;
				let mimeType;
				try {
					[header, base64Content] = attachment.url.split(",");
					mimeType = header.split(";")[0].split(":")[1];
				} catch (error$1) {
					throw new Error(`Error processing data URL: ${attachment.url}`);
				}
				if (mimeType == null || base64Content == null) throw new Error(`Invalid data URL format: ${attachment.url}`);
				if ((_b = attachment.contentType) == null ? void 0 : _b.startsWith("image/")) parts.push({
					type: "image",
					image: convertDataContentToUint8Array(base64Content)
				});
				else if ((_c = attachment.contentType) == null ? void 0 : _c.startsWith("text/")) parts.push({
					type: "text",
					text: convertUint8ArrayToText(convertDataContentToUint8Array(base64Content))
				});
				else {
					if (!attachment.contentType) throw new Error("If the attachment is not an image or text, it must specify a content type");
					parts.push({
						type: "file",
						data: base64Content,
						mimeType: attachment.contentType
					});
				}
				break;
			}
			default: throw new Error(`Unsupported URL protocol: ${url.protocol}`);
		}
	}
	return parts;
}
var name8 = "AI_MessageConversionError";
var marker8 = `vercel.ai.error.${name8}`;
var symbol8 = Symbol.for(marker8);
var _a8;
var MessageConversionError = class extends AISDKError {
	constructor({ originalMessage, message }) {
		super({
			name: name8,
			message
		});
		this[_a8] = true;
		this.originalMessage = originalMessage;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker8);
	}
};
_a8 = symbol8;
function convertToCoreMessages(messages, options) {
	var _a17, _b;
	const tools$1 = (_a17 = options == null ? void 0 : options.tools) != null ? _a17 : {};
	const coreMessages = [];
	for (let i$1 = 0; i$1 < messages.length; i$1++) {
		const message = messages[i$1];
		const isLastMessage = i$1 === messages.length - 1;
		const { role, content, experimental_attachments } = message;
		switch (role) {
			case "system": {
				coreMessages.push({
					role: "system",
					content
				});
				break;
			}
			case "user": {
				if (message.parts == null) coreMessages.push({
					role: "user",
					content: experimental_attachments ? [{
						type: "text",
						text: content
					}, ...attachmentsToParts(experimental_attachments)] : content
				});
				else {
					const textParts = message.parts.filter((part) => part.type === "text").map((part) => ({
						type: "text",
						text: part.text
					}));
					coreMessages.push({
						role: "user",
						content: experimental_attachments ? [...textParts, ...attachmentsToParts(experimental_attachments)] : textParts
					});
				}
				break;
			}
			case "assistant": {
				if (message.parts != null) {
					let processBlock2 = function() {
						const content2 = [];
						for (const part of block) switch (part.type) {
							case "file":
							case "text": {
								content2.push(part);
								break;
							}
							case "reasoning": {
								for (const detail of part.details) switch (detail.type) {
									case "text":
										content2.push({
											type: "reasoning",
											text: detail.text,
											signature: detail.signature
										});
										break;
									case "redacted":
										content2.push({
											type: "redacted-reasoning",
											data: detail.data
										});
										break;
								}
								break;
							}
							case "tool-invocation":
								content2.push({
									type: "tool-call",
									toolCallId: part.toolInvocation.toolCallId,
									toolName: part.toolInvocation.toolName,
									args: part.toolInvocation.args
								});
								break;
							default: {
								const _exhaustiveCheck = part;
								throw new Error(`Unsupported part: ${_exhaustiveCheck}`);
							}
						}
						coreMessages.push({
							role: "assistant",
							content: content2
						});
						const stepInvocations = block.filter((part) => part.type === "tool-invocation").map((part) => part.toolInvocation);
						if (stepInvocations.length > 0) coreMessages.push({
							role: "tool",
							content: stepInvocations.map((toolInvocation) => {
								if (!("result" in toolInvocation)) throw new MessageConversionError({
									originalMessage: message,
									message: "ToolInvocation must have a result: " + JSON.stringify(toolInvocation)
								});
								const { toolCallId, toolName, result } = toolInvocation;
								const tool2 = tools$1[toolName];
								return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {
									type: "tool-result",
									toolCallId,
									toolName,
									result: tool2.experimental_toToolResultContent(result),
									experimental_content: tool2.experimental_toToolResultContent(result)
								} : {
									type: "tool-result",
									toolCallId,
									toolName,
									result
								};
							})
						});
						block = [];
						blockHasToolInvocations = false;
						currentStep++;
					};
					var processBlock = processBlock2;
					let currentStep = 0;
					let blockHasToolInvocations = false;
					let block = [];
					for (const part of message.parts) switch (part.type) {
						case "text": {
							if (blockHasToolInvocations) processBlock2();
							block.push(part);
							break;
						}
						case "file":
						case "reasoning": {
							block.push(part);
							break;
						}
						case "tool-invocation": {
							if (((_b = part.toolInvocation.step) != null ? _b : 0) !== currentStep) processBlock2();
							block.push(part);
							blockHasToolInvocations = true;
							break;
						}
					}
					processBlock2();
					break;
				}
				const toolInvocations = message.toolInvocations;
				if (toolInvocations == null || toolInvocations.length === 0) {
					coreMessages.push({
						role: "assistant",
						content
					});
					break;
				}
				const maxStep = toolInvocations.reduce((max$1, toolInvocation) => {
					var _a18;
					return Math.max(max$1, (_a18 = toolInvocation.step) != null ? _a18 : 0);
				}, 0);
				for (let i2 = 0; i2 <= maxStep; i2++) {
					const stepInvocations = toolInvocations.filter((toolInvocation) => {
						var _a18;
						return ((_a18 = toolInvocation.step) != null ? _a18 : 0) === i2;
					});
					if (stepInvocations.length === 0) continue;
					coreMessages.push({
						role: "assistant",
						content: [...isLastMessage && content && i2 === 0 ? [{
							type: "text",
							text: content
						}] : [], ...stepInvocations.map(({ toolCallId, toolName, args }) => ({
							type: "tool-call",
							toolCallId,
							toolName,
							args
						}))]
					});
					coreMessages.push({
						role: "tool",
						content: stepInvocations.map((toolInvocation) => {
							if (!("result" in toolInvocation)) throw new MessageConversionError({
								originalMessage: message,
								message: "ToolInvocation must have a result: " + JSON.stringify(toolInvocation)
							});
							const { toolCallId, toolName, result } = toolInvocation;
							const tool2 = tools$1[toolName];
							return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {
								type: "tool-result",
								toolCallId,
								toolName,
								result: tool2.experimental_toToolResultContent(result),
								experimental_content: tool2.experimental_toToolResultContent(result)
							} : {
								type: "tool-result",
								toolCallId,
								toolName,
								result
							};
						})
					});
				}
				if (content && !isLastMessage) coreMessages.push({
					role: "assistant",
					content
				});
				break;
			}
			case "data": break;
			default: {
				const _exhaustiveCheck = role;
				throw new MessageConversionError({
					originalMessage: message,
					message: `Unsupported role: ${_exhaustiveCheck}`
				});
			}
		}
	}
	return coreMessages;
}
var jsonValueSchema = lazyType(() => unionType([
	nullType(),
	stringType(),
	numberType(),
	booleanType(),
	recordType(stringType(), jsonValueSchema),
	arrayType(jsonValueSchema)
]));
var providerMetadataSchema = recordType(stringType(), recordType(stringType(), jsonValueSchema));
var toolResultContentSchema = arrayType(unionType([objectType({
	type: literalType("text"),
	text: stringType()
}), objectType({
	type: literalType("image"),
	data: stringType(),
	mimeType: stringType().optional()
})]));
var textPartSchema = objectType({
	type: literalType("text"),
	text: stringType(),
	providerOptions: providerMetadataSchema.optional(),
	experimental_providerMetadata: providerMetadataSchema.optional()
});
var imagePartSchema = objectType({
	type: literalType("image"),
	image: unionType([dataContentSchema, instanceOfType(URL)]),
	mimeType: stringType().optional(),
	providerOptions: providerMetadataSchema.optional(),
	experimental_providerMetadata: providerMetadataSchema.optional()
});
var filePartSchema = objectType({
	type: literalType("file"),
	data: unionType([dataContentSchema, instanceOfType(URL)]),
	filename: stringType().optional(),
	mimeType: stringType(),
	providerOptions: providerMetadataSchema.optional(),
	experimental_providerMetadata: providerMetadataSchema.optional()
});
var reasoningPartSchema = objectType({
	type: literalType("reasoning"),
	text: stringType(),
	providerOptions: providerMetadataSchema.optional(),
	experimental_providerMetadata: providerMetadataSchema.optional()
});
var redactedReasoningPartSchema = objectType({
	type: literalType("redacted-reasoning"),
	data: stringType(),
	providerOptions: providerMetadataSchema.optional(),
	experimental_providerMetadata: providerMetadataSchema.optional()
});
var toolCallPartSchema = objectType({
	type: literalType("tool-call"),
	toolCallId: stringType(),
	toolName: stringType(),
	args: unknownType(),
	providerOptions: providerMetadataSchema.optional(),
	experimental_providerMetadata: providerMetadataSchema.optional()
});
var toolResultPartSchema = objectType({
	type: literalType("tool-result"),
	toolCallId: stringType(),
	toolName: stringType(),
	result: unknownType(),
	content: toolResultContentSchema.optional(),
	isError: booleanType().optional(),
	providerOptions: providerMetadataSchema.optional(),
	experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreSystemMessageSchema = objectType({
	role: literalType("system"),
	content: stringType(),
	providerOptions: providerMetadataSchema.optional(),
	experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreUserMessageSchema = objectType({
	role: literalType("user"),
	content: unionType([stringType(), arrayType(unionType([
		textPartSchema,
		imagePartSchema,
		filePartSchema
	]))]),
	providerOptions: providerMetadataSchema.optional(),
	experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreAssistantMessageSchema = objectType({
	role: literalType("assistant"),
	content: unionType([stringType(), arrayType(unionType([
		textPartSchema,
		filePartSchema,
		reasoningPartSchema,
		redactedReasoningPartSchema,
		toolCallPartSchema
	]))]),
	providerOptions: providerMetadataSchema.optional(),
	experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreToolMessageSchema = objectType({
	role: literalType("tool"),
	content: arrayType(toolResultPartSchema),
	providerOptions: providerMetadataSchema.optional(),
	experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreMessageSchema = unionType([
	coreSystemMessageSchema,
	coreUserMessageSchema,
	coreAssistantMessageSchema,
	coreToolMessageSchema
]);
function standardizePrompt({ prompt, tools: tools$1 }) {
	if (prompt.prompt == null && prompt.messages == null) throw new InvalidPromptError({
		prompt,
		message: "prompt or messages must be defined"
	});
	if (prompt.prompt != null && prompt.messages != null) throw new InvalidPromptError({
		prompt,
		message: "prompt and messages cannot be defined at the same time"
	});
	if (prompt.system != null && typeof prompt.system !== "string") throw new InvalidPromptError({
		prompt,
		message: "system must be a string"
	});
	if (prompt.prompt != null) {
		if (typeof prompt.prompt !== "string") throw new InvalidPromptError({
			prompt,
			message: "prompt must be a string"
		});
		return {
			type: "prompt",
			system: prompt.system,
			messages: [{
				role: "user",
				content: prompt.prompt
			}]
		};
	}
	if (prompt.messages != null) {
		const promptType = detectPromptType(prompt.messages);
		const messages = promptType === "ui-messages" ? convertToCoreMessages(prompt.messages, { tools: tools$1 }) : prompt.messages;
		if (messages.length === 0) throw new InvalidPromptError({
			prompt,
			message: "messages must not be empty"
		});
		const validationResult = safeValidateTypes({
			value: messages,
			schema: arrayType(coreMessageSchema)
		});
		if (!validationResult.success) throw new InvalidPromptError({
			prompt,
			message: ["message must be a CoreMessage or a UI message", `Validation error: ${validationResult.error.message}`].join("\n"),
			cause: validationResult.error
		});
		return {
			type: "messages",
			messages,
			system: prompt.system
		};
	}
	throw new Error("unreachable");
}
function detectPromptType(prompt) {
	if (!Array.isArray(prompt)) throw new InvalidPromptError({
		prompt,
		message: ["messages must be an array of CoreMessage or UIMessage", `Received non-array value: ${JSON.stringify(prompt)}`].join("\n"),
		cause: prompt
	});
	if (prompt.length === 0) return "messages";
	const characteristics = prompt.map(detectSingleMessageCharacteristics);
	if (characteristics.some((c$1) => c$1 === "has-ui-specific-parts")) return "ui-messages";
	const nonMessageIndex = characteristics.findIndex((c$1) => c$1 !== "has-core-specific-parts" && c$1 !== "message");
	if (nonMessageIndex === -1) return "messages";
	throw new InvalidPromptError({
		prompt,
		message: [
			"messages must be an array of CoreMessage or UIMessage",
			`Received message of type: "${characteristics[nonMessageIndex]}" at index ${nonMessageIndex}`,
			`messages[${nonMessageIndex}]: ${JSON.stringify(prompt[nonMessageIndex])}`
		].join("\n"),
		cause: prompt
	});
}
function detectSingleMessageCharacteristics(message) {
	if (typeof message === "object" && message !== null && (message.role === "function" || message.role === "data" || "toolInvocations" in message || "parts" in message || "experimental_attachments" in message)) return "has-ui-specific-parts";
	else if (typeof message === "object" && message !== null && "content" in message && (Array.isArray(message.content) || "experimental_providerMetadata" in message || "providerOptions" in message)) return "has-core-specific-parts";
	else if (typeof message === "object" && message !== null && "role" in message && "content" in message && typeof message.content === "string" && [
		"system",
		"user",
		"assistant",
		"tool"
	].includes(message.role)) return "message";
	else return "other";
}
function calculateLanguageModelUsage({ promptTokens, completionTokens }) {
	return {
		promptTokens,
		completionTokens,
		totalTokens: promptTokens + completionTokens
	};
}
function addLanguageModelUsage(usage1, usage2) {
	return {
		promptTokens: usage1.promptTokens + usage2.promptTokens,
		completionTokens: usage1.completionTokens + usage2.completionTokens,
		totalTokens: usage1.totalTokens + usage2.totalTokens
	};
}
var DEFAULT_SCHEMA_PREFIX = "JSON schema:";
var DEFAULT_SCHEMA_SUFFIX = "You MUST answer with a JSON object that matches the JSON schema above.";
var DEFAULT_GENERIC_SUFFIX = "You MUST answer with JSON.";
function injectJsonInstruction({ prompt, schema, schemaPrefix = schema != null ? DEFAULT_SCHEMA_PREFIX : void 0, schemaSuffix = schema != null ? DEFAULT_SCHEMA_SUFFIX : DEFAULT_GENERIC_SUFFIX }) {
	return [
		prompt != null && prompt.length > 0 ? prompt : void 0,
		prompt != null && prompt.length > 0 ? "" : void 0,
		schemaPrefix,
		schema != null ? JSON.stringify(schema) : void 0,
		schemaSuffix
	].filter((line) => line != null).join("\n");
}
function createAsyncIterableStream(source) {
	const stream$4 = source.pipeThrough(new TransformStream());
	stream$4[Symbol.asyncIterator] = () => {
		const reader = stream$4.getReader();
		return { async next() {
			const { done, value } = await reader.read();
			return done ? {
				done: true,
				value: void 0
			} : {
				done: false,
				value
			};
		} };
	};
	return stream$4;
}
function stringifyForTelemetry(prompt) {
	const processedPrompt = prompt.map((message) => {
		return {
			...message,
			content: typeof message.content === "string" ? message.content : message.content.map(processPart)
		};
	});
	return JSON.stringify(processedPrompt);
}
function processPart(part) {
	if (part.type === "image") return {
		...part,
		image: part.image instanceof Uint8Array ? convertDataContentToBase64String(part.image) : part.image
	};
	return part;
}
var originalGenerateId = createIdGenerator({
	prefix: "aiobj",
	size: 24
});
var DelayedPromise = class {
	constructor() {
		this.status = { type: "pending" };
		this._resolve = void 0;
		this._reject = void 0;
	}
	get value() {
		if (this.promise) return this.promise;
		this.promise = new Promise((resolve$1, reject) => {
			if (this.status.type === "resolved") resolve$1(this.status.value);
			else if (this.status.type === "rejected") reject(this.status.error);
			this._resolve = resolve$1;
			this._reject = reject;
		});
		return this.promise;
	}
	resolve(value) {
		var _a17;
		this.status = {
			type: "resolved",
			value
		};
		if (this.promise) (_a17 = this._resolve) == null || _a17.call(this, value);
	}
	reject(error$1) {
		var _a17;
		this.status = {
			type: "rejected",
			error: error$1
		};
		if (this.promise) (_a17 = this._reject) == null || _a17.call(this, error$1);
	}
};
function createResolvablePromise() {
	let resolve$1;
	let reject;
	const promise = new Promise((res, rej) => {
		resolve$1 = res;
		reject = rej;
	});
	return {
		promise,
		resolve: resolve$1,
		reject
	};
}
function createStitchableStream() {
	let innerStreamReaders = [];
	let controller = null;
	let isClosed$4 = false;
	let waitForNewStream = createResolvablePromise();
	const processPull = async () => {
		if (isClosed$4 && innerStreamReaders.length === 0) {
			controller == null || controller.close();
			return;
		}
		if (innerStreamReaders.length === 0) {
			waitForNewStream = createResolvablePromise();
			await waitForNewStream.promise;
			return processPull();
		}
		try {
			const { value, done } = await innerStreamReaders[0].read();
			if (done) {
				innerStreamReaders.shift();
				if (innerStreamReaders.length > 0) await processPull();
				else if (isClosed$4) controller?.close();
			} else controller?.enqueue(value);
		} catch (error$1) {
			controller == null || controller.error(error$1);
			innerStreamReaders.shift();
			if (isClosed$4 && innerStreamReaders.length === 0) controller?.close();
		}
	};
	return {
		stream: new ReadableStream({
			start(controllerParam) {
				controller = controllerParam;
			},
			pull: processPull,
			async cancel() {
				for (const reader of innerStreamReaders) await reader.cancel();
				innerStreamReaders = [];
				isClosed$4 = true;
			}
		}),
		addStream: (innerStream) => {
			if (isClosed$4) throw new Error("Cannot add inner stream: outer stream is closed");
			innerStreamReaders.push(innerStream.getReader());
			waitForNewStream.resolve();
		},
		close: () => {
			isClosed$4 = true;
			waitForNewStream.resolve();
			if (innerStreamReaders.length === 0) controller?.close();
		},
		terminate: () => {
			isClosed$4 = true;
			waitForNewStream.resolve();
			innerStreamReaders.forEach((reader) => reader.cancel());
			innerStreamReaders = [];
			controller == null || controller.close();
		}
	};
}
function now() {
	var _a17, _b;
	return (_b = (_a17 = globalThis == null ? void 0 : globalThis.performance) == null ? void 0 : _a17.now()) != null ? _b : Date.now();
}
var originalGenerateId2 = createIdGenerator({
	prefix: "aiobj",
	size: 24
});
var name9 = "AI_NoOutputSpecifiedError";
var marker9 = `vercel.ai.error.${name9}`;
var symbol9 = Symbol.for(marker9);
var _a9;
var NoOutputSpecifiedError = class extends AISDKError {
	constructor({ message = "No output specified." } = {}) {
		super({
			name: name9,
			message
		});
		this[_a9] = true;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker9);
	}
};
_a9 = symbol9;
var name10 = "AI_ToolExecutionError";
var marker10 = `vercel.ai.error.${name10}`;
var symbol10 = Symbol.for(marker10);
var _a10;
var ToolExecutionError = class extends AISDKError {
	constructor({ toolArgs, toolName, toolCallId, cause, message = `Error executing tool ${toolName}: ${getErrorMessage$1(cause)}` }) {
		super({
			name: name10,
			message,
			cause
		});
		this[_a10] = true;
		this.toolArgs = toolArgs;
		this.toolName = toolName;
		this.toolCallId = toolCallId;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker10);
	}
};
_a10 = symbol10;
function isNonEmptyObject(object2) {
	return object2 != null && Object.keys(object2).length > 0;
}
function prepareToolsAndToolChoice({ tools: tools$1, toolChoice, activeTools }) {
	if (!isNonEmptyObject(tools$1)) return {
		tools: void 0,
		toolChoice: void 0
	};
	const filteredTools = activeTools != null ? Object.entries(tools$1).filter(([name17]) => activeTools.includes(name17)) : Object.entries(tools$1);
	return {
		tools: filteredTools.map(([name17, tool2]) => {
			const toolType = tool2.type;
			switch (toolType) {
				case void 0:
				case "function": return {
					type: "function",
					name: name17,
					description: tool2.description,
					parameters: asSchema(tool2.parameters).jsonSchema
				};
				case "provider-defined": return {
					type: "provider-defined",
					name: name17,
					id: tool2.id,
					args: tool2.args
				};
				default: {
					const exhaustiveCheck = toolType;
					throw new Error(`Unsupported tool type: ${exhaustiveCheck}`);
				}
			}
		}),
		toolChoice: toolChoice == null ? { type: "auto" } : typeof toolChoice === "string" ? { type: toolChoice } : {
			type: "tool",
			toolName: toolChoice.toolName
		}
	};
}
var lastWhitespaceRegexp = /^([\s\S]*?)(\s+)(\S*)$/;
function splitOnLastWhitespace(text2) {
	const match$1 = text2.match(lastWhitespaceRegexp);
	return match$1 ? {
		prefix: match$1[1],
		whitespace: match$1[2],
		suffix: match$1[3]
	} : void 0;
}
var name11 = "AI_InvalidToolArgumentsError";
var marker11 = `vercel.ai.error.${name11}`;
var symbol11 = Symbol.for(marker11);
var _a11;
var InvalidToolArgumentsError = class extends AISDKError {
	constructor({ toolArgs, toolName, cause, message = `Invalid arguments for tool ${toolName}: ${getErrorMessage$1(cause)}` }) {
		super({
			name: name11,
			message,
			cause
		});
		this[_a11] = true;
		this.toolArgs = toolArgs;
		this.toolName = toolName;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker11);
	}
};
_a11 = symbol11;
var name12 = "AI_NoSuchToolError";
var marker12 = `vercel.ai.error.${name12}`;
var symbol12 = Symbol.for(marker12);
var _a12;
var NoSuchToolError = class extends AISDKError {
	constructor({ toolName, availableTools = void 0, message = `Model tried to call unavailable tool '${toolName}'. ${availableTools === void 0 ? "No tools are available." : `Available tools: ${availableTools.join(", ")}.`}` }) {
		super({
			name: name12,
			message
		});
		this[_a12] = true;
		this.toolName = toolName;
		this.availableTools = availableTools;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker12);
	}
};
_a12 = symbol12;
var name13 = "AI_ToolCallRepairError";
var marker13 = `vercel.ai.error.${name13}`;
var symbol13 = Symbol.for(marker13);
var _a13;
var ToolCallRepairError = class extends AISDKError {
	constructor({ cause, originalError, message = `Error repairing tool call: ${getErrorMessage$1(cause)}` }) {
		super({
			name: name13,
			message,
			cause
		});
		this[_a13] = true;
		this.originalError = originalError;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker13);
	}
};
_a13 = symbol13;
async function parseToolCall({ toolCall, tools: tools$1, repairToolCall, system, messages }) {
	if (tools$1 == null) throw new NoSuchToolError({ toolName: toolCall.toolName });
	try {
		return await doParseToolCall({
			toolCall,
			tools: tools$1
		});
	} catch (error$1) {
		if (repairToolCall == null || !(NoSuchToolError.isInstance(error$1) || InvalidToolArgumentsError.isInstance(error$1))) throw error$1;
		let repairedToolCall = null;
		try {
			repairedToolCall = await repairToolCall({
				toolCall,
				tools: tools$1,
				parameterSchema: ({ toolName }) => asSchema(tools$1[toolName].parameters).jsonSchema,
				system,
				messages,
				error: error$1
			});
		} catch (repairError) {
			throw new ToolCallRepairError({
				cause: repairError,
				originalError: error$1
			});
		}
		if (repairedToolCall == null) throw error$1;
		return await doParseToolCall({
			toolCall: repairedToolCall,
			tools: tools$1
		});
	}
}
async function doParseToolCall({ toolCall, tools: tools$1 }) {
	const toolName = toolCall.toolName;
	const tool2 = tools$1[toolName];
	if (tool2 == null) throw new NoSuchToolError({
		toolName: toolCall.toolName,
		availableTools: Object.keys(tools$1)
	});
	const schema = asSchema(tool2.parameters);
	const parseResult = toolCall.args.trim() === "" ? safeValidateTypes({
		value: {},
		schema
	}) : safeParseJSON({
		text: toolCall.args,
		schema
	});
	if (parseResult.success === false) throw new InvalidToolArgumentsError({
		toolName,
		toolArgs: toolCall.args,
		cause: parseResult.error
	});
	return {
		type: "tool-call",
		toolCallId: toolCall.toolCallId,
		toolName,
		args: parseResult.value
	};
}
function asReasoningText(reasoning) {
	const reasoningText = reasoning.filter((part) => part.type === "text").map((part) => part.text).join("");
	return reasoningText.length > 0 ? reasoningText : void 0;
}
function toResponseMessages({ text: text2 = "", files, reasoning, tools: tools$1, toolCalls, toolResults, messageId, generateMessageId }) {
	const responseMessages = [];
	const content = [];
	if (reasoning.length > 0) content.push(...reasoning.map((part) => part.type === "text" ? {
		...part,
		type: "reasoning"
	} : {
		...part,
		type: "redacted-reasoning"
	}));
	if (files.length > 0) content.push(...files.map((file) => ({
		type: "file",
		data: file.base64,
		mimeType: file.mimeType
	})));
	if (text2.length > 0) content.push({
		type: "text",
		text: text2
	});
	if (toolCalls.length > 0) content.push(...toolCalls);
	if (content.length > 0) responseMessages.push({
		role: "assistant",
		content,
		id: messageId
	});
	if (toolResults.length > 0) responseMessages.push({
		role: "tool",
		id: generateMessageId(),
		content: toolResults.map((toolResult) => {
			const tool2 = tools$1[toolResult.toolName];
			return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {
				type: "tool-result",
				toolCallId: toolResult.toolCallId,
				toolName: toolResult.toolName,
				result: tool2.experimental_toToolResultContent(toolResult.result),
				experimental_content: tool2.experimental_toToolResultContent(toolResult.result)
			} : {
				type: "tool-result",
				toolCallId: toolResult.toolCallId,
				toolName: toolResult.toolName,
				result: toolResult.result
			};
		})
	});
	return responseMessages;
}
var originalGenerateId3 = createIdGenerator({
	prefix: "aitxt",
	size: 24
});
var originalGenerateMessageId = createIdGenerator({
	prefix: "msg",
	size: 24
});
var output_exports = {};
__export(output_exports, {
	object: () => object,
	text: () => text
});
var name14 = "AI_InvalidStreamPartError";
var marker14 = `vercel.ai.error.${name14}`;
var symbol14 = Symbol.for(marker14);
var _a14;
var InvalidStreamPartError = class extends AISDKError {
	constructor({ chunk, message }) {
		super({
			name: name14,
			message
		});
		this[_a14] = true;
		this.chunk = chunk;
	}
	static isInstance(error$1) {
		return AISDKError.hasMarker(error$1, marker14);
	}
};
_a14 = symbol14;
var name15 = "AI_MCPClientError";
var marker15 = `vercel.ai.error.${name15}`;
var symbol15 = Symbol.for(marker15);
var _a15;
_a15 = symbol15;
var text = () => ({
	type: "text",
	responseFormat: () => ({ type: "text" }),
	injectIntoSystemPrompt({ system }) {
		return system;
	},
	parsePartial({ text: text2 }) {
		return { partial: text2 };
	},
	parseOutput({ text: text2 }) {
		return text2;
	}
});
var object = ({ schema: inputSchema }) => {
	const schema = asSchema(inputSchema);
	return {
		type: "object",
		responseFormat: ({ model }) => ({
			type: "json",
			schema: model.supportsStructuredOutputs ? schema.jsonSchema : void 0
		}),
		injectIntoSystemPrompt({ system, model }) {
			return model.supportsStructuredOutputs ? system : injectJsonInstruction({
				prompt: system,
				schema: schema.jsonSchema
			});
		},
		parsePartial({ text: text2 }) {
			const result = parsePartialJson(text2);
			switch (result.state) {
				case "failed-parse":
				case "undefined-input": return void 0;
				case "repaired-parse":
				case "successful-parse": return { partial: result.value };
				default: {
					const _exhaustiveCheck = result.state;
					throw new Error(`Unsupported parse state: ${_exhaustiveCheck}`);
				}
			}
		},
		parseOutput({ text: text2 }, context$1) {
			const parseResult = safeParseJSON({ text: text2 });
			if (!parseResult.success) throw new NoObjectGeneratedError({
				message: "No object generated: could not parse the response.",
				cause: parseResult.error,
				text: text2,
				response: context$1.response,
				usage: context$1.usage,
				finishReason: context$1.finishReason
			});
			const validationResult = safeValidateTypes({
				value: parseResult.value,
				schema
			});
			if (!validationResult.success) throw new NoObjectGeneratedError({
				message: "No object generated: response did not match schema.",
				cause: validationResult.error,
				text: text2,
				response: context$1.response,
				usage: context$1.usage,
				finishReason: context$1.finishReason
			});
			return validationResult.value;
		}
	};
};
function asArray(value) {
	return value === void 0 ? [] : Array.isArray(value) ? value : [value];
}
async function consumeStream({ stream: stream$4, onError: onError$2 }) {
	const reader = stream$4.getReader();
	try {
		while (true) {
			const { done } = await reader.read();
			if (done) break;
		}
	} catch (error$1) {
		onError$2 == null || onError$2(error$1);
	} finally {
		reader.releaseLock();
	}
}
function mergeStreams$1(stream1, stream2) {
	const reader1 = stream1.getReader();
	const reader2 = stream2.getReader();
	let lastRead1 = void 0;
	let lastRead2 = void 0;
	let stream1Done = false;
	let stream2Done = false;
	async function readStream1(controller) {
		try {
			if (lastRead1 == null) lastRead1 = reader1.read();
			const result = await lastRead1;
			lastRead1 = void 0;
			if (!result.done) controller.enqueue(result.value);
			else controller.close();
		} catch (error$1) {
			controller.error(error$1);
		}
	}
	async function readStream2(controller) {
		try {
			if (lastRead2 == null) lastRead2 = reader2.read();
			const result = await lastRead2;
			lastRead2 = void 0;
			if (!result.done) controller.enqueue(result.value);
			else controller.close();
		} catch (error$1) {
			controller.error(error$1);
		}
	}
	return new ReadableStream({
		async pull(controller) {
			try {
				if (stream1Done) {
					await readStream2(controller);
					return;
				}
				if (stream2Done) {
					await readStream1(controller);
					return;
				}
				if (lastRead1 == null) lastRead1 = reader1.read();
				if (lastRead2 == null) lastRead2 = reader2.read();
				const { result, reader } = await Promise.race([lastRead1.then((result2) => ({
					result: result2,
					reader: reader1
				})), lastRead2.then((result2) => ({
					result: result2,
					reader: reader2
				}))]);
				if (!result.done) controller.enqueue(result.value);
				if (reader === reader1) {
					lastRead1 = void 0;
					if (result.done) {
						await readStream2(controller);
						stream1Done = true;
					}
				} else {
					lastRead2 = void 0;
					if (result.done) {
						stream2Done = true;
						await readStream1(controller);
					}
				}
			} catch (error$1) {
				controller.error(error$1);
			}
		},
		cancel() {
			reader1.cancel();
			reader2.cancel();
		}
	});
}
function runToolsTransformation({ tools: tools$1, generatorStream, toolCallStreaming, tracer, telemetry, system, messages, abortSignal, repairToolCall }) {
	let toolResultsStreamController = null;
	const toolResultsStream = new ReadableStream({ start(controller) {
		toolResultsStreamController = controller;
	} });
	const activeToolCalls = {};
	const outstandingToolResults = /* @__PURE__ */ new Set();
	let canClose = false;
	let finishChunk = void 0;
	function attemptClose() {
		if (canClose && outstandingToolResults.size === 0) {
			if (finishChunk != null) toolResultsStreamController.enqueue(finishChunk);
			toolResultsStreamController.close();
		}
	}
	const forwardStream = new TransformStream({
		async transform(chunk, controller) {
			const chunkType = chunk.type;
			switch (chunkType) {
				case "text-delta":
				case "reasoning":
				case "reasoning-signature":
				case "redacted-reasoning":
				case "source":
				case "response-metadata":
				case "error": {
					controller.enqueue(chunk);
					break;
				}
				case "file": {
					controller.enqueue(new DefaultGeneratedFileWithType({
						data: chunk.data,
						mimeType: chunk.mimeType
					}));
					break;
				}
				case "tool-call-delta": {
					if (toolCallStreaming) {
						if (!activeToolCalls[chunk.toolCallId]) {
							controller.enqueue({
								type: "tool-call-streaming-start",
								toolCallId: chunk.toolCallId,
								toolName: chunk.toolName
							});
							activeToolCalls[chunk.toolCallId] = true;
						}
						controller.enqueue({
							type: "tool-call-delta",
							toolCallId: chunk.toolCallId,
							toolName: chunk.toolName,
							argsTextDelta: chunk.argsTextDelta
						});
					}
					break;
				}
				case "tool-call": {
					try {
						const toolCall = await parseToolCall({
							toolCall: chunk,
							tools: tools$1,
							repairToolCall,
							system,
							messages
						});
						controller.enqueue(toolCall);
						const tool2 = tools$1[toolCall.toolName];
						if (tool2.execute != null) {
							const toolExecutionId = generateId();
							outstandingToolResults.add(toolExecutionId);
							recordSpan({
								name: "ai.toolCall",
								attributes: selectTelemetryAttributes({
									telemetry,
									attributes: {
										...assembleOperationName({
											operationId: "ai.toolCall",
											telemetry
										}),
										"ai.toolCall.name": toolCall.toolName,
										"ai.toolCall.id": toolCall.toolCallId,
										"ai.toolCall.args": { output: () => JSON.stringify(toolCall.args) }
									}
								}),
								tracer,
								fn: async (span) => tool2.execute(toolCall.args, {
									toolCallId: toolCall.toolCallId,
									messages,
									abortSignal
								}).then((result) => {
									toolResultsStreamController.enqueue({
										...toolCall,
										type: "tool-result",
										result
									});
									outstandingToolResults.delete(toolExecutionId);
									attemptClose();
									try {
										span.setAttributes(selectTelemetryAttributes({
											telemetry,
											attributes: { "ai.toolCall.result": { output: () => JSON.stringify(result) } }
										}));
									} catch (ignored) {}
								}, (error$1) => {
									recordErrorOnSpan(span, error$1);
									toolResultsStreamController.enqueue({
										type: "error",
										error: new ToolExecutionError({
											toolCallId: toolCall.toolCallId,
											toolName: toolCall.toolName,
											toolArgs: toolCall.args,
											cause: error$1
										})
									});
									outstandingToolResults.delete(toolExecutionId);
									attemptClose();
								})
							});
						}
					} catch (error$1) {
						toolResultsStreamController.enqueue({
							type: "error",
							error: error$1
						});
					}
					break;
				}
				case "finish": {
					finishChunk = {
						type: "finish",
						finishReason: chunk.finishReason,
						logprobs: chunk.logprobs,
						usage: calculateLanguageModelUsage(chunk.usage),
						experimental_providerMetadata: chunk.providerMetadata
					};
					break;
				}
				default: {
					const _exhaustiveCheck = chunkType;
					throw new Error(`Unhandled chunk type: ${_exhaustiveCheck}`);
				}
			}
		},
		flush() {
			canClose = true;
			attemptClose();
		}
	});
	return new ReadableStream({ async start(controller) {
		return Promise.all([generatorStream.pipeThrough(forwardStream).pipeTo(new WritableStream({
			write(chunk) {
				controller.enqueue(chunk);
			},
			close() {}
		})), toolResultsStream.pipeTo(new WritableStream({
			write(chunk) {
				controller.enqueue(chunk);
			},
			close() {
				controller.close();
			}
		}))]);
	} });
}
var originalGenerateId4 = createIdGenerator({
	prefix: "aitxt",
	size: 24
});
var originalGenerateMessageId2 = createIdGenerator({
	prefix: "msg",
	size: 24
});
function streamText({ model, tools: tools$1, toolChoice, system, prompt, messages, maxRetries, abortSignal, headers, maxSteps = 1, experimental_generateMessageId: generateMessageId = originalGenerateMessageId2, experimental_output: output, experimental_continueSteps: continueSteps = false, experimental_telemetry: telemetry, experimental_providerMetadata, providerOptions = experimental_providerMetadata, experimental_toolCallStreaming = false, toolCallStreaming = experimental_toolCallStreaming, experimental_activeTools: activeTools, experimental_repairToolCall: repairToolCall, experimental_transform: transform, onChunk, onError: onError$2, onFinish, onStepFinish, _internal: { now: now2 = now, generateId: generateId3 = originalGenerateId4, currentDate = () => /* @__PURE__ */ new Date() } = {},...settings }) {
	if (typeof model === "string" || model.specificationVersion !== "v1") throw new UnsupportedModelVersionError();
	return new DefaultStreamTextResult({
		model,
		telemetry,
		headers,
		settings,
		maxRetries,
		abortSignal,
		system,
		prompt,
		messages,
		tools: tools$1,
		toolChoice,
		toolCallStreaming,
		transforms: asArray(transform),
		activeTools,
		repairToolCall,
		maxSteps,
		output,
		continueSteps,
		providerOptions,
		onChunk,
		onError: onError$2,
		onFinish,
		onStepFinish,
		now: now2,
		currentDate,
		generateId: generateId3,
		generateMessageId
	});
}
function createOutputTransformStream(output) {
	if (!output) return new TransformStream({ transform(chunk, controller) {
		controller.enqueue({
			part: chunk,
			partialOutput: void 0
		});
	} });
	let text2 = "";
	let textChunk = "";
	let lastPublishedJson = "";
	function publishTextChunk({ controller, partialOutput = void 0 }) {
		controller.enqueue({
			part: {
				type: "text-delta",
				textDelta: textChunk
			},
			partialOutput
		});
		textChunk = "";
	}
	return new TransformStream({
		transform(chunk, controller) {
			if (chunk.type === "step-finish") publishTextChunk({ controller });
			if (chunk.type !== "text-delta") {
				controller.enqueue({
					part: chunk,
					partialOutput: void 0
				});
				return;
			}
			text2 += chunk.textDelta;
			textChunk += chunk.textDelta;
			const result = output.parsePartial({ text: text2 });
			if (result != null) {
				const currentJson = JSON.stringify(result.partial);
				if (currentJson !== lastPublishedJson) {
					publishTextChunk({
						controller,
						partialOutput: result.partial
					});
					lastPublishedJson = currentJson;
				}
			}
		},
		flush(controller) {
			if (textChunk.length > 0) publishTextChunk({ controller });
		}
	});
}
var DefaultStreamTextResult = class {
	constructor({ model, telemetry, headers, settings, maxRetries: maxRetriesArg, abortSignal, system, prompt, messages, tools: tools$1, toolChoice, toolCallStreaming, transforms, activeTools, repairToolCall, maxSteps, output, continueSteps, providerOptions, now: now2, currentDate, generateId: generateId3, generateMessageId, onChunk, onError: onError$2, onFinish, onStepFinish }) {
		this.warningsPromise = new DelayedPromise();
		this.usagePromise = new DelayedPromise();
		this.finishReasonPromise = new DelayedPromise();
		this.providerMetadataPromise = new DelayedPromise();
		this.textPromise = new DelayedPromise();
		this.reasoningPromise = new DelayedPromise();
		this.reasoningDetailsPromise = new DelayedPromise();
		this.sourcesPromise = new DelayedPromise();
		this.filesPromise = new DelayedPromise();
		this.toolCallsPromise = new DelayedPromise();
		this.toolResultsPromise = new DelayedPromise();
		this.requestPromise = new DelayedPromise();
		this.responsePromise = new DelayedPromise();
		this.stepsPromise = new DelayedPromise();
		var _a17;
		if (maxSteps < 1) throw new InvalidArgumentError({
			parameter: "maxSteps",
			value: maxSteps,
			message: "maxSteps must be at least 1"
		});
		this.output = output;
		let recordedStepText = "";
		let recordedContinuationText = "";
		let recordedFullText = "";
		let stepReasoning = [];
		let stepFiles = [];
		let activeReasoningText = void 0;
		let recordedStepSources = [];
		const recordedSources = [];
		const recordedResponse = {
			id: generateId3(),
			timestamp: currentDate(),
			modelId: model.modelId,
			messages: []
		};
		let recordedToolCalls = [];
		let recordedToolResults = [];
		let recordedFinishReason = void 0;
		let recordedUsage = void 0;
		let stepType = "initial";
		const recordedSteps = [];
		let rootSpan;
		const eventProcessor = new TransformStream({
			async transform(chunk, controller) {
				controller.enqueue(chunk);
				const { part } = chunk;
				if (part.type === "text-delta" || part.type === "reasoning" || part.type === "source" || part.type === "tool-call" || part.type === "tool-result" || part.type === "tool-call-streaming-start" || part.type === "tool-call-delta") await (onChunk == null ? void 0 : onChunk({ chunk: part }));
				if (part.type === "error") await (onError$2 == null ? void 0 : onError$2({ error: part.error }));
				if (part.type === "text-delta") {
					recordedStepText += part.textDelta;
					recordedContinuationText += part.textDelta;
					recordedFullText += part.textDelta;
				}
				if (part.type === "reasoning") if (activeReasoningText == null) {
					activeReasoningText = {
						type: "text",
						text: part.textDelta
					};
					stepReasoning.push(activeReasoningText);
				} else activeReasoningText.text += part.textDelta;
				if (part.type === "reasoning-signature") {
					if (activeReasoningText == null) throw new AISDKError({
						name: "InvalidStreamPart",
						message: "reasoning-signature without reasoning"
					});
					activeReasoningText.signature = part.signature;
					activeReasoningText = void 0;
				}
				if (part.type === "redacted-reasoning") stepReasoning.push({
					type: "redacted",
					data: part.data
				});
				if (part.type === "file") stepFiles.push(part);
				if (part.type === "source") {
					recordedSources.push(part.source);
					recordedStepSources.push(part.source);
				}
				if (part.type === "tool-call") recordedToolCalls.push(part);
				if (part.type === "tool-result") recordedToolResults.push(part);
				if (part.type === "step-finish") {
					const stepMessages = toResponseMessages({
						text: recordedContinuationText,
						files: stepFiles,
						reasoning: stepReasoning,
						tools: tools$1 != null ? tools$1 : {},
						toolCalls: recordedToolCalls,
						toolResults: recordedToolResults,
						messageId: part.messageId,
						generateMessageId
					});
					const currentStep = recordedSteps.length;
					let nextStepType = "done";
					if (currentStep + 1 < maxSteps) {
						if (continueSteps && part.finishReason === "length" && recordedToolCalls.length === 0) nextStepType = "continue";
						else if (recordedToolCalls.length > 0 && recordedToolResults.length === recordedToolCalls.length) nextStepType = "tool-result";
					}
					const currentStepResult = {
						stepType,
						text: recordedStepText,
						reasoning: asReasoningText(stepReasoning),
						reasoningDetails: stepReasoning,
						files: stepFiles,
						sources: recordedStepSources,
						toolCalls: recordedToolCalls,
						toolResults: recordedToolResults,
						finishReason: part.finishReason,
						usage: part.usage,
						warnings: part.warnings,
						logprobs: part.logprobs,
						request: part.request,
						response: {
							...part.response,
							messages: [...recordedResponse.messages, ...stepMessages]
						},
						providerMetadata: part.experimental_providerMetadata,
						experimental_providerMetadata: part.experimental_providerMetadata,
						isContinued: part.isContinued
					};
					await (onStepFinish == null ? void 0 : onStepFinish(currentStepResult));
					recordedSteps.push(currentStepResult);
					recordedToolCalls = [];
					recordedToolResults = [];
					recordedStepText = "";
					recordedStepSources = [];
					stepReasoning = [];
					stepFiles = [];
					activeReasoningText = void 0;
					if (nextStepType !== "done") stepType = nextStepType;
					if (nextStepType !== "continue") {
						recordedResponse.messages.push(...stepMessages);
						recordedContinuationText = "";
					}
				}
				if (part.type === "finish") {
					recordedResponse.id = part.response.id;
					recordedResponse.timestamp = part.response.timestamp;
					recordedResponse.modelId = part.response.modelId;
					recordedResponse.headers = part.response.headers;
					recordedUsage = part.usage;
					recordedFinishReason = part.finishReason;
				}
			},
			async flush(controller) {
				var _a18;
				try {
					if (recordedSteps.length === 0) return;
					const lastStep = recordedSteps[recordedSteps.length - 1];
					self$1.warningsPromise.resolve(lastStep.warnings);
					self$1.requestPromise.resolve(lastStep.request);
					self$1.responsePromise.resolve(lastStep.response);
					self$1.toolCallsPromise.resolve(lastStep.toolCalls);
					self$1.toolResultsPromise.resolve(lastStep.toolResults);
					self$1.providerMetadataPromise.resolve(lastStep.experimental_providerMetadata);
					self$1.reasoningPromise.resolve(lastStep.reasoning);
					self$1.reasoningDetailsPromise.resolve(lastStep.reasoningDetails);
					const finishReason = recordedFinishReason != null ? recordedFinishReason : "unknown";
					const usage = recordedUsage != null ? recordedUsage : {
						completionTokens: NaN,
						promptTokens: NaN,
						totalTokens: NaN
					};
					self$1.finishReasonPromise.resolve(finishReason);
					self$1.usagePromise.resolve(usage);
					self$1.textPromise.resolve(recordedFullText);
					self$1.sourcesPromise.resolve(recordedSources);
					self$1.filesPromise.resolve(lastStep.files);
					self$1.stepsPromise.resolve(recordedSteps);
					await (onFinish == null ? void 0 : onFinish({
						finishReason,
						logprobs: void 0,
						usage,
						text: recordedFullText,
						reasoning: lastStep.reasoning,
						reasoningDetails: lastStep.reasoningDetails,
						files: lastStep.files,
						sources: lastStep.sources,
						toolCalls: lastStep.toolCalls,
						toolResults: lastStep.toolResults,
						request: (_a18 = lastStep.request) != null ? _a18 : {},
						response: lastStep.response,
						warnings: lastStep.warnings,
						providerMetadata: lastStep.providerMetadata,
						experimental_providerMetadata: lastStep.experimental_providerMetadata,
						steps: recordedSteps
					}));
					rootSpan.setAttributes(selectTelemetryAttributes({
						telemetry,
						attributes: {
							"ai.response.finishReason": finishReason,
							"ai.response.text": { output: () => recordedFullText },
							"ai.response.toolCalls": { output: () => {
								var _a19;
								return ((_a19 = lastStep.toolCalls) == null ? void 0 : _a19.length) ? JSON.stringify(lastStep.toolCalls) : void 0;
							} },
							"ai.usage.promptTokens": usage.promptTokens,
							"ai.usage.completionTokens": usage.completionTokens,
							"ai.response.providerMetadata": JSON.stringify(lastStep.providerMetadata)
						}
					}));
				} catch (error$1) {
					controller.error(error$1);
				} finally {
					rootSpan.end();
				}
			}
		});
		const stitchableStream = createStitchableStream();
		this.addStream = stitchableStream.addStream;
		this.closeStream = stitchableStream.close;
		let stream$4 = stitchableStream.stream;
		for (const transform of transforms) stream$4 = stream$4.pipeThrough(transform({
			tools: tools$1,
			stopStream() {
				stitchableStream.terminate();
			}
		}));
		this.baseStream = stream$4.pipeThrough(createOutputTransformStream(output)).pipeThrough(eventProcessor);
		const { maxRetries, retry } = prepareRetries({ maxRetries: maxRetriesArg });
		const tracer = getTracer(telemetry);
		const baseTelemetryAttributes = getBaseTelemetryAttributes({
			model,
			telemetry,
			headers,
			settings: {
				...settings,
				maxRetries
			}
		});
		const initialPrompt = standardizePrompt({
			prompt: {
				system: (_a17 = output == null ? void 0 : output.injectIntoSystemPrompt({
					system,
					model
				})) != null ? _a17 : system,
				prompt,
				messages
			},
			tools: tools$1
		});
		const self$1 = this;
		recordSpan({
			name: "ai.streamText",
			attributes: selectTelemetryAttributes({
				telemetry,
				attributes: {
					...assembleOperationName({
						operationId: "ai.streamText",
						telemetry
					}),
					...baseTelemetryAttributes,
					"ai.prompt": { input: () => JSON.stringify({
						system,
						prompt,
						messages
					}) },
					"ai.settings.maxSteps": maxSteps
				}
			}),
			tracer,
			endWhenDone: false,
			fn: async (rootSpanArg) => {
				rootSpan = rootSpanArg;
				async function streamStep({ currentStep, responseMessages, usage, stepType: stepType2, previousStepText, hasLeadingWhitespace, messageId }) {
					var _a18;
					const promptFormat = responseMessages.length === 0 ? initialPrompt.type : "messages";
					const stepInputMessages = [...initialPrompt.messages, ...responseMessages];
					const promptMessages = await convertToLanguageModelPrompt({
						prompt: {
							type: promptFormat,
							system: initialPrompt.system,
							messages: stepInputMessages
						},
						modelSupportsImageUrls: model.supportsImageUrls,
						modelSupportsUrl: (_a18 = model.supportsUrl) == null ? void 0 : _a18.bind(model)
					});
					const mode = {
						type: "regular",
						...prepareToolsAndToolChoice({
							tools: tools$1,
							toolChoice,
							activeTools
						})
					};
					const { result: { stream: stream2, warnings, rawResponse, request: request$3 }, doStreamSpan, startTimestampMs } = await retry(() => recordSpan({
						name: "ai.streamText.doStream",
						attributes: selectTelemetryAttributes({
							telemetry,
							attributes: {
								...assembleOperationName({
									operationId: "ai.streamText.doStream",
									telemetry
								}),
								...baseTelemetryAttributes,
								"ai.prompt.format": { input: () => promptFormat },
								"ai.prompt.messages": { input: () => stringifyForTelemetry(promptMessages) },
								"ai.prompt.tools": { input: () => {
									var _a19;
									return (_a19 = mode.tools) == null ? void 0 : _a19.map((tool2) => JSON.stringify(tool2));
								} },
								"ai.prompt.toolChoice": { input: () => mode.toolChoice != null ? JSON.stringify(mode.toolChoice) : void 0 },
								"gen_ai.system": model.provider,
								"gen_ai.request.model": model.modelId,
								"gen_ai.request.frequency_penalty": settings.frequencyPenalty,
								"gen_ai.request.max_tokens": settings.maxTokens,
								"gen_ai.request.presence_penalty": settings.presencePenalty,
								"gen_ai.request.stop_sequences": settings.stopSequences,
								"gen_ai.request.temperature": settings.temperature,
								"gen_ai.request.top_k": settings.topK,
								"gen_ai.request.top_p": settings.topP
							}
						}),
						tracer,
						endWhenDone: false,
						fn: async (doStreamSpan2) => ({
							startTimestampMs: now2(),
							doStreamSpan: doStreamSpan2,
							result: await model.doStream({
								mode,
								...prepareCallSettings(settings),
								inputFormat: promptFormat,
								responseFormat: output == null ? void 0 : output.responseFormat({ model }),
								prompt: promptMessages,
								providerMetadata: providerOptions,
								abortSignal,
								headers
							})
						})
					}));
					const transformedStream = runToolsTransformation({
						tools: tools$1,
						generatorStream: stream2,
						toolCallStreaming,
						tracer,
						telemetry,
						system,
						messages: stepInputMessages,
						repairToolCall,
						abortSignal
					});
					const stepRequest = request$3 != null ? request$3 : {};
					const stepToolCalls = [];
					const stepToolResults = [];
					const stepReasoning2 = [];
					const stepFiles2 = [];
					let activeReasoningText2 = void 0;
					let stepFinishReason = "unknown";
					let stepUsage = {
						promptTokens: 0,
						completionTokens: 0,
						totalTokens: 0
					};
					let stepProviderMetadata;
					let stepFirstChunk = true;
					let stepText = "";
					let fullStepText = stepType2 === "continue" ? previousStepText : "";
					let stepLogProbs;
					let stepResponse = {
						id: generateId3(),
						timestamp: currentDate(),
						modelId: model.modelId
					};
					let chunkBuffer = "";
					let chunkTextPublished = false;
					let inWhitespacePrefix = true;
					let hasWhitespaceSuffix = false;
					async function publishTextChunk({ controller, chunk }) {
						controller.enqueue(chunk);
						stepText += chunk.textDelta;
						fullStepText += chunk.textDelta;
						chunkTextPublished = true;
						hasWhitespaceSuffix = chunk.textDelta.trimEnd() !== chunk.textDelta;
					}
					self$1.addStream(transformedStream.pipeThrough(new TransformStream({
						async transform(chunk, controller) {
							var _a19, _b, _c;
							if (stepFirstChunk) {
								const msToFirstChunk = now2() - startTimestampMs;
								stepFirstChunk = false;
								doStreamSpan.addEvent("ai.stream.firstChunk", { "ai.response.msToFirstChunk": msToFirstChunk });
								doStreamSpan.setAttributes({ "ai.response.msToFirstChunk": msToFirstChunk });
								controller.enqueue({
									type: "step-start",
									messageId,
									request: stepRequest,
									warnings: warnings != null ? warnings : []
								});
							}
							if (chunk.type === "text-delta" && chunk.textDelta.length === 0) return;
							const chunkType = chunk.type;
							switch (chunkType) {
								case "text-delta": {
									if (continueSteps) {
										const trimmedChunkText = inWhitespacePrefix && hasLeadingWhitespace ? chunk.textDelta.trimStart() : chunk.textDelta;
										if (trimmedChunkText.length === 0) break;
										inWhitespacePrefix = false;
										chunkBuffer += trimmedChunkText;
										const split$1 = splitOnLastWhitespace(chunkBuffer);
										if (split$1 != null) {
											chunkBuffer = split$1.suffix;
											await publishTextChunk({
												controller,
												chunk: {
													type: "text-delta",
													textDelta: split$1.prefix + split$1.whitespace
												}
											});
										}
									} else await publishTextChunk({
										controller,
										chunk
									});
									break;
								}
								case "reasoning": {
									controller.enqueue(chunk);
									if (activeReasoningText2 == null) {
										activeReasoningText2 = {
											type: "text",
											text: chunk.textDelta
										};
										stepReasoning2.push(activeReasoningText2);
									} else activeReasoningText2.text += chunk.textDelta;
									break;
								}
								case "reasoning-signature": {
									controller.enqueue(chunk);
									if (activeReasoningText2 == null) throw new InvalidStreamPartError({
										chunk,
										message: "reasoning-signature without reasoning"
									});
									activeReasoningText2.signature = chunk.signature;
									activeReasoningText2 = void 0;
									break;
								}
								case "redacted-reasoning": {
									controller.enqueue(chunk);
									stepReasoning2.push({
										type: "redacted",
										data: chunk.data
									});
									break;
								}
								case "tool-call": {
									controller.enqueue(chunk);
									stepToolCalls.push(chunk);
									break;
								}
								case "tool-result": {
									controller.enqueue(chunk);
									stepToolResults.push(chunk);
									break;
								}
								case "response-metadata": {
									stepResponse = {
										id: (_a19 = chunk.id) != null ? _a19 : stepResponse.id,
										timestamp: (_b = chunk.timestamp) != null ? _b : stepResponse.timestamp,
										modelId: (_c = chunk.modelId) != null ? _c : stepResponse.modelId
									};
									break;
								}
								case "finish": {
									stepUsage = chunk.usage;
									stepFinishReason = chunk.finishReason;
									stepProviderMetadata = chunk.experimental_providerMetadata;
									stepLogProbs = chunk.logprobs;
									const msToFinish = now2() - startTimestampMs;
									doStreamSpan.addEvent("ai.stream.finish");
									doStreamSpan.setAttributes({
										"ai.response.msToFinish": msToFinish,
										"ai.response.avgCompletionTokensPerSecond": 1e3 * stepUsage.completionTokens / msToFinish
									});
									break;
								}
								case "file": {
									stepFiles2.push(chunk);
									controller.enqueue(chunk);
									break;
								}
								case "source":
								case "tool-call-streaming-start":
								case "tool-call-delta": {
									controller.enqueue(chunk);
									break;
								}
								case "error": {
									controller.enqueue(chunk);
									stepFinishReason = "error";
									break;
								}
								default: {
									const exhaustiveCheck = chunkType;
									throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);
								}
							}
						},
						async flush(controller) {
							const stepToolCallsJson = stepToolCalls.length > 0 ? JSON.stringify(stepToolCalls) : void 0;
							let nextStepType = "done";
							if (currentStep + 1 < maxSteps) {
								if (continueSteps && stepFinishReason === "length" && stepToolCalls.length === 0) nextStepType = "continue";
								else if (stepToolCalls.length > 0 && stepToolResults.length === stepToolCalls.length) nextStepType = "tool-result";
							}
							if (continueSteps && chunkBuffer.length > 0 && (nextStepType !== "continue" || stepType2 === "continue" && !chunkTextPublished)) {
								await publishTextChunk({
									controller,
									chunk: {
										type: "text-delta",
										textDelta: chunkBuffer
									}
								});
								chunkBuffer = "";
							}
							try {
								doStreamSpan.setAttributes(selectTelemetryAttributes({
									telemetry,
									attributes: {
										"ai.response.finishReason": stepFinishReason,
										"ai.response.text": { output: () => stepText },
										"ai.response.toolCalls": { output: () => stepToolCallsJson },
										"ai.response.id": stepResponse.id,
										"ai.response.model": stepResponse.modelId,
										"ai.response.timestamp": stepResponse.timestamp.toISOString(),
										"ai.response.providerMetadata": JSON.stringify(stepProviderMetadata),
										"ai.usage.promptTokens": stepUsage.promptTokens,
										"ai.usage.completionTokens": stepUsage.completionTokens,
										"gen_ai.response.finish_reasons": [stepFinishReason],
										"gen_ai.response.id": stepResponse.id,
										"gen_ai.response.model": stepResponse.modelId,
										"gen_ai.usage.input_tokens": stepUsage.promptTokens,
										"gen_ai.usage.output_tokens": stepUsage.completionTokens
									}
								}));
							} catch (error$1) {} finally {
								doStreamSpan.end();
							}
							controller.enqueue({
								type: "step-finish",
								finishReason: stepFinishReason,
								usage: stepUsage,
								providerMetadata: stepProviderMetadata,
								experimental_providerMetadata: stepProviderMetadata,
								logprobs: stepLogProbs,
								request: stepRequest,
								response: {
									...stepResponse,
									headers: rawResponse == null ? void 0 : rawResponse.headers
								},
								warnings,
								isContinued: nextStepType === "continue",
								messageId
							});
							const combinedUsage = addLanguageModelUsage(usage, stepUsage);
							if (nextStepType === "done") {
								controller.enqueue({
									type: "finish",
									finishReason: stepFinishReason,
									usage: combinedUsage,
									providerMetadata: stepProviderMetadata,
									experimental_providerMetadata: stepProviderMetadata,
									logprobs: stepLogProbs,
									response: {
										...stepResponse,
										headers: rawResponse == null ? void 0 : rawResponse.headers
									}
								});
								self$1.closeStream();
							} else {
								if (stepType2 === "continue") {
									const lastMessage = responseMessages[responseMessages.length - 1];
									if (typeof lastMessage.content === "string") lastMessage.content += stepText;
									else lastMessage.content.push({
										text: stepText,
										type: "text"
									});
								} else responseMessages.push(...toResponseMessages({
									text: stepText,
									files: stepFiles2,
									reasoning: stepReasoning2,
									tools: tools$1 != null ? tools$1 : {},
									toolCalls: stepToolCalls,
									toolResults: stepToolResults,
									messageId,
									generateMessageId
								}));
								await streamStep({
									currentStep: currentStep + 1,
									responseMessages,
									usage: combinedUsage,
									stepType: nextStepType,
									previousStepText: fullStepText,
									hasLeadingWhitespace: hasWhitespaceSuffix,
									messageId: nextStepType === "continue" ? messageId : generateMessageId()
								});
							}
						}
					})));
				}
				await streamStep({
					currentStep: 0,
					responseMessages: [],
					usage: {
						promptTokens: 0,
						completionTokens: 0,
						totalTokens: 0
					},
					previousStepText: "",
					stepType: "initial",
					hasLeadingWhitespace: false,
					messageId: generateMessageId()
				});
			}
		}).catch((error$1) => {
			self$1.addStream(new ReadableStream({ start(controller) {
				controller.enqueue({
					type: "error",
					error: error$1
				});
				controller.close();
			} }));
			self$1.closeStream();
		});
	}
	get warnings() {
		return this.warningsPromise.value;
	}
	get usage() {
		return this.usagePromise.value;
	}
	get finishReason() {
		return this.finishReasonPromise.value;
	}
	get experimental_providerMetadata() {
		return this.providerMetadataPromise.value;
	}
	get providerMetadata() {
		return this.providerMetadataPromise.value;
	}
	get text() {
		return this.textPromise.value;
	}
	get reasoning() {
		return this.reasoningPromise.value;
	}
	get reasoningDetails() {
		return this.reasoningDetailsPromise.value;
	}
	get sources() {
		return this.sourcesPromise.value;
	}
	get files() {
		return this.filesPromise.value;
	}
	get toolCalls() {
		return this.toolCallsPromise.value;
	}
	get toolResults() {
		return this.toolResultsPromise.value;
	}
	get request() {
		return this.requestPromise.value;
	}
	get response() {
		return this.responsePromise.value;
	}
	get steps() {
		return this.stepsPromise.value;
	}
	/**
	Split out a new stream from the original stream.
	The original stream is replaced to allow for further splitting,
	since we do not know how many times the stream will be split.
	
	Note: this leads to buffering the stream content on the server.
	However, the LLM results are expected to be small enough to not cause issues.
	*/
	teeStream() {
		const [stream1, stream2] = this.baseStream.tee();
		this.baseStream = stream2;
		return stream1;
	}
	get textStream() {
		return createAsyncIterableStream(this.teeStream().pipeThrough(new TransformStream({ transform({ part }, controller) {
			if (part.type === "text-delta") controller.enqueue(part.textDelta);
		} })));
	}
	get fullStream() {
		return createAsyncIterableStream(this.teeStream().pipeThrough(new TransformStream({ transform({ part }, controller) {
			controller.enqueue(part);
		} })));
	}
	async consumeStream(options) {
		var _a17;
		try {
			await consumeStream({
				stream: this.fullStream,
				onError: options == null ? void 0 : options.onError
			});
		} catch (error$1) {
			(_a17 = options == null ? void 0 : options.onError) == null || _a17.call(options, error$1);
		}
	}
	get experimental_partialOutputStream() {
		if (this.output == null) throw new NoOutputSpecifiedError();
		return createAsyncIterableStream(this.teeStream().pipeThrough(new TransformStream({ transform({ partialOutput }, controller) {
			if (partialOutput != null) controller.enqueue(partialOutput);
		} })));
	}
	toDataStreamInternal({ getErrorMessage: getErrorMessage5 = () => "An error occurred.", sendUsage = true, sendReasoning = false, sendSources = false, experimental_sendFinish = true }) {
		return this.fullStream.pipeThrough(new TransformStream({ transform: async (chunk, controller) => {
			const chunkType = chunk.type;
			switch (chunkType) {
				case "text-delta": {
					controller.enqueue(formatDataStreamPart("text", chunk.textDelta));
					break;
				}
				case "reasoning": {
					if (sendReasoning) controller.enqueue(formatDataStreamPart("reasoning", chunk.textDelta));
					break;
				}
				case "redacted-reasoning": {
					if (sendReasoning) controller.enqueue(formatDataStreamPart("redacted_reasoning", { data: chunk.data }));
					break;
				}
				case "reasoning-signature": {
					if (sendReasoning) controller.enqueue(formatDataStreamPart("reasoning_signature", { signature: chunk.signature }));
					break;
				}
				case "file": {
					controller.enqueue(formatDataStreamPart("file", {
						mimeType: chunk.mimeType,
						data: chunk.base64
					}));
					break;
				}
				case "source": {
					if (sendSources) controller.enqueue(formatDataStreamPart("source", chunk.source));
					break;
				}
				case "tool-call-streaming-start": {
					controller.enqueue(formatDataStreamPart("tool_call_streaming_start", {
						toolCallId: chunk.toolCallId,
						toolName: chunk.toolName
					}));
					break;
				}
				case "tool-call-delta": {
					controller.enqueue(formatDataStreamPart("tool_call_delta", {
						toolCallId: chunk.toolCallId,
						argsTextDelta: chunk.argsTextDelta
					}));
					break;
				}
				case "tool-call": {
					controller.enqueue(formatDataStreamPart("tool_call", {
						toolCallId: chunk.toolCallId,
						toolName: chunk.toolName,
						args: chunk.args
					}));
					break;
				}
				case "tool-result": {
					controller.enqueue(formatDataStreamPart("tool_result", {
						toolCallId: chunk.toolCallId,
						result: chunk.result
					}));
					break;
				}
				case "error": {
					controller.enqueue(formatDataStreamPart("error", getErrorMessage5(chunk.error)));
					break;
				}
				case "step-start": {
					controller.enqueue(formatDataStreamPart("start_step", { messageId: chunk.messageId }));
					break;
				}
				case "step-finish": {
					controller.enqueue(formatDataStreamPart("finish_step", {
						finishReason: chunk.finishReason,
						usage: sendUsage ? {
							promptTokens: chunk.usage.promptTokens,
							completionTokens: chunk.usage.completionTokens
						} : void 0,
						isContinued: chunk.isContinued
					}));
					break;
				}
				case "finish": {
					if (experimental_sendFinish) controller.enqueue(formatDataStreamPart("finish_message", {
						finishReason: chunk.finishReason,
						usage: sendUsage ? {
							promptTokens: chunk.usage.promptTokens,
							completionTokens: chunk.usage.completionTokens
						} : void 0
					}));
					break;
				}
				default: {
					const exhaustiveCheck = chunkType;
					throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);
				}
			}
		} }));
	}
	pipeDataStreamToResponse(response, { status, statusText, headers, data: data$1, getErrorMessage: getErrorMessage5, sendUsage, sendReasoning, sendSources, experimental_sendFinish } = {}) {
		writeToServerResponse({
			response,
			status,
			statusText,
			headers: prepareOutgoingHttpHeaders(headers, {
				contentType: "text/plain; charset=utf-8",
				dataStreamVersion: "v1"
			}),
			stream: this.toDataStream({
				data: data$1,
				getErrorMessage: getErrorMessage5,
				sendUsage,
				sendReasoning,
				sendSources,
				experimental_sendFinish
			})
		});
	}
	pipeTextStreamToResponse(response, init) {
		writeToServerResponse({
			response,
			status: init == null ? void 0 : init.status,
			statusText: init == null ? void 0 : init.statusText,
			headers: prepareOutgoingHttpHeaders(init == null ? void 0 : init.headers, { contentType: "text/plain; charset=utf-8" }),
			stream: this.textStream.pipeThrough(new TextEncoderStream())
		});
	}
	toDataStream(options) {
		const stream$4 = this.toDataStreamInternal({
			getErrorMessage: options == null ? void 0 : options.getErrorMessage,
			sendUsage: options == null ? void 0 : options.sendUsage,
			sendReasoning: options == null ? void 0 : options.sendReasoning,
			sendSources: options == null ? void 0 : options.sendSources,
			experimental_sendFinish: options == null ? void 0 : options.experimental_sendFinish
		}).pipeThrough(new TextEncoderStream());
		return (options == null ? void 0 : options.data) ? mergeStreams$1(options == null ? void 0 : options.data.stream, stream$4) : stream$4;
	}
	mergeIntoDataStream(writer, options) {
		writer.merge(this.toDataStreamInternal({
			getErrorMessage: writer.onError,
			sendUsage: options == null ? void 0 : options.sendUsage,
			sendReasoning: options == null ? void 0 : options.sendReasoning,
			sendSources: options == null ? void 0 : options.sendSources,
			experimental_sendFinish: options == null ? void 0 : options.experimental_sendFinish
		}));
	}
	toDataStreamResponse({ headers, status, statusText, data: data$1, getErrorMessage: getErrorMessage5, sendUsage, sendReasoning, sendSources, experimental_sendFinish } = {}) {
		return new Response(this.toDataStream({
			data: data$1,
			getErrorMessage: getErrorMessage5,
			sendUsage,
			sendReasoning,
			sendSources,
			experimental_sendFinish
		}), {
			status,
			statusText,
			headers: prepareResponseHeaders(headers, {
				contentType: "text/plain; charset=utf-8",
				dataStreamVersion: "v1"
			})
		});
	}
	toTextStreamResponse(init) {
		var _a17;
		return new Response(this.textStream.pipeThrough(new TextEncoderStream()), {
			status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,
			headers: prepareResponseHeaders(init == null ? void 0 : init.headers, { contentType: "text/plain; charset=utf-8" })
		});
	}
};
var name16 = "AI_NoSuchProviderError";
var marker16 = `vercel.ai.error.${name16}`;
var symbol16 = Symbol.for(marker16);
var _a16;
_a16 = symbol16;
function tool(tool2) {
	return tool2;
}
var ClientOrServerImplementationSchema = objectType({
	name: stringType(),
	version: stringType()
}).passthrough();
var BaseParamsSchema = objectType({ _meta: optionalType(objectType({}).passthrough()) }).passthrough();
var ResultSchema = BaseParamsSchema;
var RequestSchema = objectType({
	method: stringType(),
	params: optionalType(BaseParamsSchema)
});
var ServerCapabilitiesSchema = objectType({
	experimental: optionalType(objectType({}).passthrough()),
	logging: optionalType(objectType({}).passthrough()),
	prompts: optionalType(objectType({ listChanged: optionalType(booleanType()) }).passthrough()),
	resources: optionalType(objectType({
		subscribe: optionalType(booleanType()),
		listChanged: optionalType(booleanType())
	}).passthrough()),
	tools: optionalType(objectType({ listChanged: optionalType(booleanType()) }).passthrough())
}).passthrough();
var InitializeResultSchema = ResultSchema.extend({
	protocolVersion: stringType(),
	capabilities: ServerCapabilitiesSchema,
	serverInfo: ClientOrServerImplementationSchema,
	instructions: optionalType(stringType())
});
var PaginatedResultSchema = ResultSchema.extend({ nextCursor: optionalType(stringType()) });
var ToolSchema = objectType({
	name: stringType(),
	description: optionalType(stringType()),
	inputSchema: objectType({
		type: literalType("object"),
		properties: optionalType(objectType({}).passthrough())
	}).passthrough()
}).passthrough();
var ListToolsResultSchema = PaginatedResultSchema.extend({ tools: arrayType(ToolSchema) });
var TextContentSchema = objectType({
	type: literalType("text"),
	text: stringType()
}).passthrough();
var ImageContentSchema = objectType({
	type: literalType("image"),
	data: stringType().base64(),
	mimeType: stringType()
}).passthrough();
var ResourceContentsSchema = objectType({
	uri: stringType(),
	mimeType: optionalType(stringType())
}).passthrough();
var TextResourceContentsSchema = ResourceContentsSchema.extend({ text: stringType() });
var BlobResourceContentsSchema = ResourceContentsSchema.extend({ blob: stringType().base64() });
var EmbeddedResourceSchema = objectType({
	type: literalType("resource"),
	resource: unionType([TextResourceContentsSchema, BlobResourceContentsSchema])
}).passthrough();
var CallToolResultSchema = ResultSchema.extend({
	content: arrayType(unionType([
		TextContentSchema,
		ImageContentSchema,
		EmbeddedResourceSchema
	])),
	isError: booleanType().default(false).optional()
}).or(ResultSchema.extend({ toolResult: unknownType() }));
var JSONRPC_VERSION = "2.0";
var JSONRPCRequestSchema = objectType({
	jsonrpc: literalType(JSONRPC_VERSION),
	id: unionType([stringType(), numberType().int()])
}).merge(RequestSchema).strict();
var JSONRPCResponseSchema = objectType({
	jsonrpc: literalType(JSONRPC_VERSION),
	id: unionType([stringType(), numberType().int()]),
	result: ResultSchema
}).strict();
var JSONRPCErrorSchema = objectType({
	jsonrpc: literalType(JSONRPC_VERSION),
	id: unionType([stringType(), numberType().int()]),
	error: objectType({
		code: numberType().int(),
		message: stringType(),
		data: optionalType(unknownType())
	})
}).strict();
var JSONRPCNotificationSchema = objectType({ jsonrpc: literalType(JSONRPC_VERSION) }).merge(objectType({
	method: stringType(),
	params: optionalType(BaseParamsSchema)
})).strict();
var JSONRPCMessageSchema = unionType([
	JSONRPCRequestSchema,
	JSONRPCNotificationSchema,
	JSONRPCResponseSchema,
	JSONRPCErrorSchema
]);
var langchain_adapter_exports = {};
__export(langchain_adapter_exports, {
	mergeIntoDataStream: () => mergeIntoDataStream,
	toDataStream: () => toDataStream,
	toDataStreamResponse: () => toDataStreamResponse
});
function createCallbacksTransformer(callbacks = {}) {
	const textEncoder$6 = new TextEncoder();
	let aggregatedResponse = "";
	return new TransformStream({
		async start() {
			if (callbacks.onStart) await callbacks.onStart();
		},
		async transform(message, controller) {
			controller.enqueue(textEncoder$6.encode(message));
			aggregatedResponse += message;
			if (callbacks.onToken) await callbacks.onToken(message);
			if (callbacks.onText && typeof message === "string") await callbacks.onText(message);
		},
		async flush() {
			if (callbacks.onCompletion) await callbacks.onCompletion(aggregatedResponse);
			if (callbacks.onFinal) await callbacks.onFinal(aggregatedResponse);
		}
	});
}
function toDataStreamInternal(stream$4, callbacks) {
	return stream$4.pipeThrough(new TransformStream({ transform: async (value, controller) => {
		var _a17;
		if (typeof value === "string") {
			controller.enqueue(value);
			return;
		}
		if ("event" in value) {
			if (value.event === "on_chat_model_stream") forwardAIMessageChunk((_a17 = value.data) == null ? void 0 : _a17.chunk, controller);
			return;
		}
		forwardAIMessageChunk(value, controller);
	} })).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(new TextDecoderStream()).pipeThrough(new TransformStream({ transform: async (chunk, controller) => {
		controller.enqueue(formatDataStreamPart("text", chunk));
	} }));
}
function toDataStream(stream$4, callbacks) {
	return toDataStreamInternal(stream$4, callbacks).pipeThrough(new TextEncoderStream());
}
function toDataStreamResponse(stream$4, options) {
	var _a17;
	const dataStream = toDataStreamInternal(stream$4, options == null ? void 0 : options.callbacks).pipeThrough(new TextEncoderStream());
	const data$1 = options == null ? void 0 : options.data;
	const init = options == null ? void 0 : options.init;
	const responseStream = data$1 ? mergeStreams$1(data$1.stream, dataStream) : dataStream;
	return new Response(responseStream, {
		status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,
		statusText: init == null ? void 0 : init.statusText,
		headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {
			contentType: "text/plain; charset=utf-8",
			dataStreamVersion: "v1"
		})
	});
}
function mergeIntoDataStream(stream$4, options) {
	options.dataStream.merge(toDataStreamInternal(stream$4, options.callbacks));
}
function forwardAIMessageChunk(chunk, controller) {
	if (typeof chunk.content === "string") controller.enqueue(chunk.content);
	else {
		const content = chunk.content;
		for (const item of content) if (item.type === "text") controller.enqueue(item.text);
	}
}
var llamaindex_adapter_exports = {};
__export(llamaindex_adapter_exports, {
	mergeIntoDataStream: () => mergeIntoDataStream2,
	toDataStream: () => toDataStream2,
	toDataStreamResponse: () => toDataStreamResponse2
});
function toDataStreamInternal2(stream$4, callbacks) {
	const trimStart = trimStartOfStream();
	return convertAsyncIteratorToReadableStream(stream$4[Symbol.asyncIterator]()).pipeThrough(new TransformStream({ async transform(message, controller) {
		controller.enqueue(trimStart(message.delta));
	} })).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(new TextDecoderStream()).pipeThrough(new TransformStream({ transform: async (chunk, controller) => {
		controller.enqueue(formatDataStreamPart("text", chunk));
	} }));
}
function toDataStream2(stream$4, callbacks) {
	return toDataStreamInternal2(stream$4, callbacks).pipeThrough(new TextEncoderStream());
}
function toDataStreamResponse2(stream$4, options = {}) {
	var _a17;
	const { init, data: data$1, callbacks } = options;
	const dataStream = toDataStreamInternal2(stream$4, callbacks).pipeThrough(new TextEncoderStream());
	const responseStream = data$1 ? mergeStreams$1(data$1.stream, dataStream) : dataStream;
	return new Response(responseStream, {
		status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,
		statusText: init == null ? void 0 : init.statusText,
		headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {
			contentType: "text/plain; charset=utf-8",
			dataStreamVersion: "v1"
		})
	});
}
function mergeIntoDataStream2(stream$4, options) {
	options.dataStream.merge(toDataStreamInternal2(stream$4, options.callbacks));
}
function trimStartOfStream() {
	let isStreamStart = true;
	return (text2) => {
		if (isStreamStart) {
			text2 = text2.trimStart();
			if (text2) isStreamStart = false;
		}
		return text2;
	};
}
var HANGING_STREAM_WARNING_TIME_MS = 15 * 1e3;

//#endregion
//#region node_modules/.pnpm/@ai-sdk+openai@1.3.23_zod@3.25.76/node_modules/@ai-sdk/openai/dist/index.mjs
function convertToOpenAIChatMessages({ prompt, useLegacyFunctionCalling = false, systemMessageMode = "system" }) {
	const messages = [];
	const warnings = [];
	for (const { role, content } of prompt) switch (role) {
		case "system": {
			switch (systemMessageMode) {
				case "system": {
					messages.push({
						role: "system",
						content
					});
					break;
				}
				case "developer": {
					messages.push({
						role: "developer",
						content
					});
					break;
				}
				case "remove": {
					warnings.push({
						type: "other",
						message: "system messages are removed for this model"
					});
					break;
				}
				default: {
					const _exhaustiveCheck = systemMessageMode;
					throw new Error(`Unsupported system message mode: ${_exhaustiveCheck}`);
				}
			}
			break;
		}
		case "user": {
			if (content.length === 1 && content[0].type === "text") {
				messages.push({
					role: "user",
					content: content[0].text
				});
				break;
			}
			messages.push({
				role: "user",
				content: content.map((part, index) => {
					var _a$3, _b, _c, _d;
					switch (part.type) {
						case "text": return {
							type: "text",
							text: part.text
						};
						case "image": return {
							type: "image_url",
							image_url: {
								url: part.image instanceof URL ? part.image.toString() : `data:${(_a$3 = part.mimeType) != null ? _a$3 : "image/jpeg"};base64,${convertUint8ArrayToBase64(part.image)}`,
								detail: (_c = (_b = part.providerMetadata) == null ? void 0 : _b.openai) == null ? void 0 : _c.imageDetail
							}
						};
						case "file": {
							if (part.data instanceof URL) throw new UnsupportedFunctionalityError({ functionality: "'File content parts with URL data' functionality not supported." });
							switch (part.mimeType) {
								case "audio/wav": return {
									type: "input_audio",
									input_audio: {
										data: part.data,
										format: "wav"
									}
								};
								case "audio/mp3":
								case "audio/mpeg": return {
									type: "input_audio",
									input_audio: {
										data: part.data,
										format: "mp3"
									}
								};
								case "application/pdf": return {
									type: "file",
									file: {
										filename: (_d = part.filename) != null ? _d : `part-${index}.pdf`,
										file_data: `data:application/pdf;base64,${part.data}`
									}
								};
								default: throw new UnsupportedFunctionalityError({ functionality: `File content part type ${part.mimeType} in user messages` });
							}
						}
					}
				})
			});
			break;
		}
		case "assistant": {
			let text$1 = "";
			const toolCalls = [];
			for (const part of content) switch (part.type) {
				case "text": {
					text$1 += part.text;
					break;
				}
				case "tool-call": {
					toolCalls.push({
						id: part.toolCallId,
						type: "function",
						function: {
							name: part.toolName,
							arguments: JSON.stringify(part.args)
						}
					});
					break;
				}
			}
			if (useLegacyFunctionCalling) {
				if (toolCalls.length > 1) throw new UnsupportedFunctionalityError({ functionality: "useLegacyFunctionCalling with multiple tool calls in one message" });
				messages.push({
					role: "assistant",
					content: text$1,
					function_call: toolCalls.length > 0 ? toolCalls[0].function : void 0
				});
			} else messages.push({
				role: "assistant",
				content: text$1,
				tool_calls: toolCalls.length > 0 ? toolCalls : void 0
			});
			break;
		}
		case "tool": {
			for (const toolResponse of content) if (useLegacyFunctionCalling) messages.push({
				role: "function",
				name: toolResponse.toolName,
				content: JSON.stringify(toolResponse.result)
			});
			else messages.push({
				role: "tool",
				tool_call_id: toolResponse.toolCallId,
				content: JSON.stringify(toolResponse.result)
			});
			break;
		}
		default: {
			const _exhaustiveCheck = role;
			throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
		}
	}
	return {
		messages,
		warnings
	};
}
function mapOpenAIChatLogProbsOutput(logprobs) {
	var _a$3, _b;
	return (_b = (_a$3 = logprobs == null ? void 0 : logprobs.content) == null ? void 0 : _a$3.map(({ token, logprob, top_logprobs }) => ({
		token,
		logprob,
		topLogprobs: top_logprobs ? top_logprobs.map(({ token: token2, logprob: logprob2 }) => ({
			token: token2,
			logprob: logprob2
		})) : []
	}))) != null ? _b : void 0;
}
function mapOpenAIFinishReason(finishReason) {
	switch (finishReason) {
		case "stop": return "stop";
		case "length": return "length";
		case "content_filter": return "content-filter";
		case "function_call":
		case "tool_calls": return "tool-calls";
		default: return "unknown";
	}
}
var openaiErrorDataSchema = objectType({ error: objectType({
	message: stringType(),
	type: stringType().nullish(),
	param: anyType().nullish(),
	code: unionType([stringType(), numberType()]).nullish()
}) });
var openaiFailedResponseHandler = createJsonErrorResponseHandler({
	errorSchema: openaiErrorDataSchema,
	errorToMessage: (data$1) => data$1.error.message
});
function getResponseMetadata$1({ id: id$1, model, created }) {
	return {
		id: id$1 != null ? id$1 : void 0,
		modelId: model != null ? model : void 0,
		timestamp: created != null ? /* @__PURE__ */ new Date(created * 1e3) : void 0
	};
}
function prepareTools$3({ mode, useLegacyFunctionCalling = false, structuredOutputs }) {
	var _a$3;
	const tools$1 = ((_a$3 = mode.tools) == null ? void 0 : _a$3.length) ? mode.tools : void 0;
	const toolWarnings = [];
	if (tools$1 == null) return {
		tools: void 0,
		tool_choice: void 0,
		toolWarnings
	};
	const toolChoice = mode.toolChoice;
	if (useLegacyFunctionCalling) {
		const openaiFunctions = [];
		for (const tool$1 of tools$1) if (tool$1.type === "provider-defined") toolWarnings.push({
			type: "unsupported-tool",
			tool: tool$1
		});
		else openaiFunctions.push({
			name: tool$1.name,
			description: tool$1.description,
			parameters: tool$1.parameters
		});
		if (toolChoice == null) return {
			functions: openaiFunctions,
			function_call: void 0,
			toolWarnings
		};
		const type2 = toolChoice.type;
		switch (type2) {
			case "auto":
			case "none":
			case void 0: return {
				functions: openaiFunctions,
				function_call: void 0,
				toolWarnings
			};
			case "required": throw new UnsupportedFunctionalityError({ functionality: "useLegacyFunctionCalling and toolChoice: required" });
			default: return {
				functions: openaiFunctions,
				function_call: { name: toolChoice.toolName },
				toolWarnings
			};
		}
	}
	const openaiTools2 = [];
	for (const tool$1 of tools$1) if (tool$1.type === "provider-defined") toolWarnings.push({
		type: "unsupported-tool",
		tool: tool$1
	});
	else openaiTools2.push({
		type: "function",
		function: {
			name: tool$1.name,
			description: tool$1.description,
			parameters: tool$1.parameters,
			strict: structuredOutputs ? true : void 0
		}
	});
	if (toolChoice == null) return {
		tools: openaiTools2,
		tool_choice: void 0,
		toolWarnings
	};
	const type = toolChoice.type;
	switch (type) {
		case "auto":
		case "none":
		case "required": return {
			tools: openaiTools2,
			tool_choice: type,
			toolWarnings
		};
		case "tool": return {
			tools: openaiTools2,
			tool_choice: {
				type: "function",
				function: { name: toolChoice.toolName }
			},
			toolWarnings
		};
		default: {
			const _exhaustiveCheck = type;
			throw new UnsupportedFunctionalityError({ functionality: `Unsupported tool choice type: ${_exhaustiveCheck}` });
		}
	}
}
var OpenAIChatLanguageModel = class {
	constructor(modelId, settings, config) {
		this.specificationVersion = "v1";
		this.modelId = modelId;
		this.settings = settings;
		this.config = config;
	}
	get supportsStructuredOutputs() {
		var _a$3;
		return (_a$3 = this.settings.structuredOutputs) != null ? _a$3 : isReasoningModel(this.modelId);
	}
	get defaultObjectGenerationMode() {
		if (isAudioModel(this.modelId)) return "tool";
		return this.supportsStructuredOutputs ? "json" : "tool";
	}
	get provider() {
		return this.config.provider;
	}
	get supportsImageUrls() {
		return !this.settings.downloadImages;
	}
	getArgs({ mode, prompt, maxTokens, temperature, topP, topK, frequencyPenalty, presencePenalty, stopSequences, responseFormat, seed, providerMetadata }) {
		var _a$3, _b, _c, _d, _e, _f, _g, _h;
		const type = mode.type;
		const warnings = [];
		if (topK != null) warnings.push({
			type: "unsupported-setting",
			setting: "topK"
		});
		if ((responseFormat == null ? void 0 : responseFormat.type) === "json" && responseFormat.schema != null && !this.supportsStructuredOutputs) warnings.push({
			type: "unsupported-setting",
			setting: "responseFormat",
			details: "JSON response format schema is only supported with structuredOutputs"
		});
		const useLegacyFunctionCalling = this.settings.useLegacyFunctionCalling;
		if (useLegacyFunctionCalling && this.settings.parallelToolCalls === true) throw new UnsupportedFunctionalityError({ functionality: "useLegacyFunctionCalling with parallelToolCalls" });
		if (useLegacyFunctionCalling && this.supportsStructuredOutputs) throw new UnsupportedFunctionalityError({ functionality: "structuredOutputs with useLegacyFunctionCalling" });
		const { messages, warnings: messageWarnings } = convertToOpenAIChatMessages({
			prompt,
			useLegacyFunctionCalling,
			systemMessageMode: getSystemMessageMode(this.modelId)
		});
		warnings.push(...messageWarnings);
		const baseArgs = {
			model: this.modelId,
			logit_bias: this.settings.logitBias,
			logprobs: this.settings.logprobs === true || typeof this.settings.logprobs === "number" ? true : void 0,
			top_logprobs: typeof this.settings.logprobs === "number" ? this.settings.logprobs : typeof this.settings.logprobs === "boolean" ? this.settings.logprobs ? 0 : void 0 : void 0,
			user: this.settings.user,
			parallel_tool_calls: this.settings.parallelToolCalls,
			max_tokens: maxTokens,
			temperature,
			top_p: topP,
			frequency_penalty: frequencyPenalty,
			presence_penalty: presencePenalty,
			response_format: (responseFormat == null ? void 0 : responseFormat.type) === "json" ? this.supportsStructuredOutputs && responseFormat.schema != null ? {
				type: "json_schema",
				json_schema: {
					schema: responseFormat.schema,
					strict: true,
					name: (_a$3 = responseFormat.name) != null ? _a$3 : "response",
					description: responseFormat.description
				}
			} : { type: "json_object" } : void 0,
			stop: stopSequences,
			seed,
			max_completion_tokens: (_b = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _b.maxCompletionTokens,
			store: (_c = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _c.store,
			metadata: (_d = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _d.metadata,
			prediction: (_e = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _e.prediction,
			reasoning_effort: (_g = (_f = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _f.reasoningEffort) != null ? _g : this.settings.reasoningEffort,
			messages
		};
		if (isReasoningModel(this.modelId)) {
			if (baseArgs.temperature != null) {
				baseArgs.temperature = void 0;
				warnings.push({
					type: "unsupported-setting",
					setting: "temperature",
					details: "temperature is not supported for reasoning models"
				});
			}
			if (baseArgs.top_p != null) {
				baseArgs.top_p = void 0;
				warnings.push({
					type: "unsupported-setting",
					setting: "topP",
					details: "topP is not supported for reasoning models"
				});
			}
			if (baseArgs.frequency_penalty != null) {
				baseArgs.frequency_penalty = void 0;
				warnings.push({
					type: "unsupported-setting",
					setting: "frequencyPenalty",
					details: "frequencyPenalty is not supported for reasoning models"
				});
			}
			if (baseArgs.presence_penalty != null) {
				baseArgs.presence_penalty = void 0;
				warnings.push({
					type: "unsupported-setting",
					setting: "presencePenalty",
					details: "presencePenalty is not supported for reasoning models"
				});
			}
			if (baseArgs.logit_bias != null) {
				baseArgs.logit_bias = void 0;
				warnings.push({
					type: "other",
					message: "logitBias is not supported for reasoning models"
				});
			}
			if (baseArgs.logprobs != null) {
				baseArgs.logprobs = void 0;
				warnings.push({
					type: "other",
					message: "logprobs is not supported for reasoning models"
				});
			}
			if (baseArgs.top_logprobs != null) {
				baseArgs.top_logprobs = void 0;
				warnings.push({
					type: "other",
					message: "topLogprobs is not supported for reasoning models"
				});
			}
			if (baseArgs.max_tokens != null) {
				if (baseArgs.max_completion_tokens == null) baseArgs.max_completion_tokens = baseArgs.max_tokens;
				baseArgs.max_tokens = void 0;
			}
		} else if (this.modelId.startsWith("gpt-4o-search-preview") || this.modelId.startsWith("gpt-4o-mini-search-preview")) {
			if (baseArgs.temperature != null) {
				baseArgs.temperature = void 0;
				warnings.push({
					type: "unsupported-setting",
					setting: "temperature",
					details: "temperature is not supported for the search preview models and has been removed."
				});
			}
		}
		switch (type) {
			case "regular": {
				const { tools: tools$1, tool_choice, functions, function_call, toolWarnings } = prepareTools$3({
					mode,
					useLegacyFunctionCalling,
					structuredOutputs: this.supportsStructuredOutputs
				});
				return {
					args: {
						...baseArgs,
						tools: tools$1,
						tool_choice,
						functions,
						function_call
					},
					warnings: [...warnings, ...toolWarnings]
				};
			}
			case "object-json": return {
				args: {
					...baseArgs,
					response_format: this.supportsStructuredOutputs && mode.schema != null ? {
						type: "json_schema",
						json_schema: {
							schema: mode.schema,
							strict: true,
							name: (_h = mode.name) != null ? _h : "response",
							description: mode.description
						}
					} : { type: "json_object" }
				},
				warnings
			};
			case "object-tool": return {
				args: useLegacyFunctionCalling ? {
					...baseArgs,
					function_call: { name: mode.tool.name },
					functions: [{
						name: mode.tool.name,
						description: mode.tool.description,
						parameters: mode.tool.parameters
					}]
				} : {
					...baseArgs,
					tool_choice: {
						type: "function",
						function: { name: mode.tool.name }
					},
					tools: [{
						type: "function",
						function: {
							name: mode.tool.name,
							description: mode.tool.description,
							parameters: mode.tool.parameters,
							strict: this.supportsStructuredOutputs ? true : void 0
						}
					}]
				},
				warnings
			};
			default: {
				const _exhaustiveCheck = type;
				throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
			}
		}
	}
	async doGenerate(options) {
		var _a$3, _b, _c, _d, _e, _f, _g, _h;
		const { args: body, warnings } = this.getArgs(options);
		const { responseHeaders, value: response, rawValue: rawResponse } = await postJsonToApi({
			url: this.config.url({
				path: "/chat/completions",
				modelId: this.modelId
			}),
			headers: combineHeaders(this.config.headers(), options.headers),
			body,
			failedResponseHandler: openaiFailedResponseHandler,
			successfulResponseHandler: createJsonResponseHandler(openaiChatResponseSchema),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		const { messages: rawPrompt,...rawSettings } = body;
		const choice = response.choices[0];
		const completionTokenDetails = (_a$3 = response.usage) == null ? void 0 : _a$3.completion_tokens_details;
		const promptTokenDetails = (_b = response.usage) == null ? void 0 : _b.prompt_tokens_details;
		const providerMetadata = { openai: {} };
		if ((completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens) != null) providerMetadata.openai.reasoningTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens;
		if ((completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens) != null) providerMetadata.openai.acceptedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens;
		if ((completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens) != null) providerMetadata.openai.rejectedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens;
		if ((promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens) != null) providerMetadata.openai.cachedPromptTokens = promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens;
		return {
			text: (_c = choice.message.content) != null ? _c : void 0,
			toolCalls: this.settings.useLegacyFunctionCalling && choice.message.function_call ? [{
				toolCallType: "function",
				toolCallId: generateId(),
				toolName: choice.message.function_call.name,
				args: choice.message.function_call.arguments
			}] : (_d = choice.message.tool_calls) == null ? void 0 : _d.map((toolCall) => {
				var _a2$2;
				return {
					toolCallType: "function",
					toolCallId: (_a2$2 = toolCall.id) != null ? _a2$2 : generateId(),
					toolName: toolCall.function.name,
					args: toolCall.function.arguments
				};
			}),
			finishReason: mapOpenAIFinishReason(choice.finish_reason),
			usage: {
				promptTokens: (_f = (_e = response.usage) == null ? void 0 : _e.prompt_tokens) != null ? _f : NaN,
				completionTokens: (_h = (_g = response.usage) == null ? void 0 : _g.completion_tokens) != null ? _h : NaN
			},
			rawCall: {
				rawPrompt,
				rawSettings
			},
			rawResponse: {
				headers: responseHeaders,
				body: rawResponse
			},
			request: { body: JSON.stringify(body) },
			response: getResponseMetadata$1(response),
			warnings,
			logprobs: mapOpenAIChatLogProbsOutput(choice.logprobs),
			providerMetadata
		};
	}
	async doStream(options) {
		if (this.settings.simulateStreaming) {
			const result = await this.doGenerate(options);
			const simulatedStream = new ReadableStream({ start(controller) {
				controller.enqueue({
					type: "response-metadata",
					...result.response
				});
				if (result.text) controller.enqueue({
					type: "text-delta",
					textDelta: result.text
				});
				if (result.toolCalls) for (const toolCall of result.toolCalls) {
					controller.enqueue({
						type: "tool-call-delta",
						toolCallType: "function",
						toolCallId: toolCall.toolCallId,
						toolName: toolCall.toolName,
						argsTextDelta: toolCall.args
					});
					controller.enqueue({
						type: "tool-call",
						...toolCall
					});
				}
				controller.enqueue({
					type: "finish",
					finishReason: result.finishReason,
					usage: result.usage,
					logprobs: result.logprobs,
					providerMetadata: result.providerMetadata
				});
				controller.close();
			} });
			return {
				stream: simulatedStream,
				rawCall: result.rawCall,
				rawResponse: result.rawResponse,
				warnings: result.warnings
			};
		}
		const { args, warnings } = this.getArgs(options);
		const body = {
			...args,
			stream: true,
			stream_options: this.config.compatibility === "strict" ? { include_usage: true } : void 0
		};
		const { responseHeaders, value: response } = await postJsonToApi({
			url: this.config.url({
				path: "/chat/completions",
				modelId: this.modelId
			}),
			headers: combineHeaders(this.config.headers(), options.headers),
			body,
			failedResponseHandler: openaiFailedResponseHandler,
			successfulResponseHandler: createEventSourceResponseHandler(openaiChatChunkSchema),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		const { messages: rawPrompt,...rawSettings } = args;
		const toolCalls = [];
		let finishReason = "unknown";
		let usage = {
			promptTokens: void 0,
			completionTokens: void 0
		};
		let logprobs;
		let isFirstChunk = true;
		const { useLegacyFunctionCalling } = this.settings;
		const providerMetadata = { openai: {} };
		return {
			stream: response.pipeThrough(new TransformStream({
				transform(chunk, controller) {
					var _a$3, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
					if (!chunk.success) {
						finishReason = "error";
						controller.enqueue({
							type: "error",
							error: chunk.error
						});
						return;
					}
					const value = chunk.value;
					if ("error" in value) {
						finishReason = "error";
						controller.enqueue({
							type: "error",
							error: value.error
						});
						return;
					}
					if (isFirstChunk) {
						isFirstChunk = false;
						controller.enqueue({
							type: "response-metadata",
							...getResponseMetadata$1(value)
						});
					}
					if (value.usage != null) {
						const { prompt_tokens, completion_tokens, prompt_tokens_details, completion_tokens_details } = value.usage;
						usage = {
							promptTokens: prompt_tokens != null ? prompt_tokens : void 0,
							completionTokens: completion_tokens != null ? completion_tokens : void 0
						};
						if ((completion_tokens_details == null ? void 0 : completion_tokens_details.reasoning_tokens) != null) providerMetadata.openai.reasoningTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.reasoning_tokens;
						if ((completion_tokens_details == null ? void 0 : completion_tokens_details.accepted_prediction_tokens) != null) providerMetadata.openai.acceptedPredictionTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.accepted_prediction_tokens;
						if ((completion_tokens_details == null ? void 0 : completion_tokens_details.rejected_prediction_tokens) != null) providerMetadata.openai.rejectedPredictionTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.rejected_prediction_tokens;
						if ((prompt_tokens_details == null ? void 0 : prompt_tokens_details.cached_tokens) != null) providerMetadata.openai.cachedPromptTokens = prompt_tokens_details == null ? void 0 : prompt_tokens_details.cached_tokens;
					}
					const choice = value.choices[0];
					if ((choice == null ? void 0 : choice.finish_reason) != null) finishReason = mapOpenAIFinishReason(choice.finish_reason);
					if ((choice == null ? void 0 : choice.delta) == null) return;
					const delta = choice.delta;
					if (delta.content != null) controller.enqueue({
						type: "text-delta",
						textDelta: delta.content
					});
					const mappedLogprobs = mapOpenAIChatLogProbsOutput(choice == null ? void 0 : choice.logprobs);
					if (mappedLogprobs == null ? void 0 : mappedLogprobs.length) {
						if (logprobs === void 0) logprobs = [];
						logprobs.push(...mappedLogprobs);
					}
					const mappedToolCalls = useLegacyFunctionCalling && delta.function_call != null ? [{
						type: "function",
						id: generateId(),
						function: delta.function_call,
						index: 0
					}] : delta.tool_calls;
					if (mappedToolCalls != null) for (const toolCallDelta of mappedToolCalls) {
						const index = toolCallDelta.index;
						if (toolCalls[index] == null) {
							if (toolCallDelta.type !== "function") throw new InvalidResponseDataError({
								data: toolCallDelta,
								message: `Expected 'function' type.`
							});
							if (toolCallDelta.id == null) throw new InvalidResponseDataError({
								data: toolCallDelta,
								message: `Expected 'id' to be a string.`
							});
							if (((_a$3 = toolCallDelta.function) == null ? void 0 : _a$3.name) == null) throw new InvalidResponseDataError({
								data: toolCallDelta,
								message: `Expected 'function.name' to be a string.`
							});
							toolCalls[index] = {
								id: toolCallDelta.id,
								type: "function",
								function: {
									name: toolCallDelta.function.name,
									arguments: (_b = toolCallDelta.function.arguments) != null ? _b : ""
								},
								hasFinished: false
							};
							const toolCall2 = toolCalls[index];
							if (((_c = toolCall2.function) == null ? void 0 : _c.name) != null && ((_d = toolCall2.function) == null ? void 0 : _d.arguments) != null) {
								if (toolCall2.function.arguments.length > 0) controller.enqueue({
									type: "tool-call-delta",
									toolCallType: "function",
									toolCallId: toolCall2.id,
									toolName: toolCall2.function.name,
									argsTextDelta: toolCall2.function.arguments
								});
								if (isParsableJson(toolCall2.function.arguments)) {
									controller.enqueue({
										type: "tool-call",
										toolCallType: "function",
										toolCallId: (_e = toolCall2.id) != null ? _e : generateId(),
										toolName: toolCall2.function.name,
										args: toolCall2.function.arguments
									});
									toolCall2.hasFinished = true;
								}
							}
							continue;
						}
						const toolCall = toolCalls[index];
						if (toolCall.hasFinished) continue;
						if (((_f = toolCallDelta.function) == null ? void 0 : _f.arguments) != null) toolCall.function.arguments += (_h = (_g = toolCallDelta.function) == null ? void 0 : _g.arguments) != null ? _h : "";
						controller.enqueue({
							type: "tool-call-delta",
							toolCallType: "function",
							toolCallId: toolCall.id,
							toolName: toolCall.function.name,
							argsTextDelta: (_i = toolCallDelta.function.arguments) != null ? _i : ""
						});
						if (((_j = toolCall.function) == null ? void 0 : _j.name) != null && ((_k = toolCall.function) == null ? void 0 : _k.arguments) != null && isParsableJson(toolCall.function.arguments)) {
							controller.enqueue({
								type: "tool-call",
								toolCallType: "function",
								toolCallId: (_l = toolCall.id) != null ? _l : generateId(),
								toolName: toolCall.function.name,
								args: toolCall.function.arguments
							});
							toolCall.hasFinished = true;
						}
					}
				},
				flush(controller) {
					var _a$3, _b;
					controller.enqueue({
						type: "finish",
						finishReason,
						logprobs,
						usage: {
							promptTokens: (_a$3 = usage.promptTokens) != null ? _a$3 : NaN,
							completionTokens: (_b = usage.completionTokens) != null ? _b : NaN
						},
						...providerMetadata != null ? { providerMetadata } : {}
					});
				}
			})),
			rawCall: {
				rawPrompt,
				rawSettings
			},
			rawResponse: { headers: responseHeaders },
			request: { body: JSON.stringify(body) },
			warnings
		};
	}
};
var openaiTokenUsageSchema = objectType({
	prompt_tokens: numberType().nullish(),
	completion_tokens: numberType().nullish(),
	prompt_tokens_details: objectType({ cached_tokens: numberType().nullish() }).nullish(),
	completion_tokens_details: objectType({
		reasoning_tokens: numberType().nullish(),
		accepted_prediction_tokens: numberType().nullish(),
		rejected_prediction_tokens: numberType().nullish()
	}).nullish()
}).nullish();
var openaiChatResponseSchema = objectType({
	id: stringType().nullish(),
	created: numberType().nullish(),
	model: stringType().nullish(),
	choices: arrayType(objectType({
		message: objectType({
			role: literalType("assistant").nullish(),
			content: stringType().nullish(),
			function_call: objectType({
				arguments: stringType(),
				name: stringType()
			}).nullish(),
			tool_calls: arrayType(objectType({
				id: stringType().nullish(),
				type: literalType("function"),
				function: objectType({
					name: stringType(),
					arguments: stringType()
				})
			})).nullish()
		}),
		index: numberType(),
		logprobs: objectType({ content: arrayType(objectType({
			token: stringType(),
			logprob: numberType(),
			top_logprobs: arrayType(objectType({
				token: stringType(),
				logprob: numberType()
			}))
		})).nullable() }).nullish(),
		finish_reason: stringType().nullish()
	})),
	usage: openaiTokenUsageSchema
});
var openaiChatChunkSchema = unionType([objectType({
	id: stringType().nullish(),
	created: numberType().nullish(),
	model: stringType().nullish(),
	choices: arrayType(objectType({
		delta: objectType({
			role: enumType(["assistant"]).nullish(),
			content: stringType().nullish(),
			function_call: objectType({
				name: stringType().optional(),
				arguments: stringType().optional()
			}).nullish(),
			tool_calls: arrayType(objectType({
				index: numberType(),
				id: stringType().nullish(),
				type: literalType("function").nullish(),
				function: objectType({
					name: stringType().nullish(),
					arguments: stringType().nullish()
				})
			})).nullish()
		}).nullish(),
		logprobs: objectType({ content: arrayType(objectType({
			token: stringType(),
			logprob: numberType(),
			top_logprobs: arrayType(objectType({
				token: stringType(),
				logprob: numberType()
			}))
		})).nullable() }).nullish(),
		finish_reason: stringType().nullish(),
		index: numberType()
	})),
	usage: openaiTokenUsageSchema
}), openaiErrorDataSchema]);
function isReasoningModel(modelId) {
	return modelId.startsWith("o");
}
function isAudioModel(modelId) {
	return modelId.startsWith("gpt-4o-audio-preview");
}
function getSystemMessageMode(modelId) {
	var _a$3, _b;
	if (!isReasoningModel(modelId)) return "system";
	return (_b = (_a$3 = reasoningModels[modelId]) == null ? void 0 : _a$3.systemMessageMode) != null ? _b : "developer";
}
var reasoningModels = {
	"o1-mini": { systemMessageMode: "remove" },
	"o1-mini-2024-09-12": { systemMessageMode: "remove" },
	"o1-preview": { systemMessageMode: "remove" },
	"o1-preview-2024-09-12": { systemMessageMode: "remove" },
	o3: { systemMessageMode: "developer" },
	"o3-2025-04-16": { systemMessageMode: "developer" },
	"o3-mini": { systemMessageMode: "developer" },
	"o3-mini-2025-01-31": { systemMessageMode: "developer" },
	"o4-mini": { systemMessageMode: "developer" },
	"o4-mini-2025-04-16": { systemMessageMode: "developer" }
};
function convertToOpenAICompletionPrompt({ prompt, inputFormat, user = "user", assistant = "assistant" }) {
	if (inputFormat === "prompt" && prompt.length === 1 && prompt[0].role === "user" && prompt[0].content.length === 1 && prompt[0].content[0].type === "text") return { prompt: prompt[0].content[0].text };
	let text$1 = "";
	if (prompt[0].role === "system") {
		text$1 += `${prompt[0].content}

`;
		prompt = prompt.slice(1);
	}
	for (const { role, content } of prompt) switch (role) {
		case "system": throw new InvalidPromptError({
			message: "Unexpected system message in prompt: ${content}",
			prompt
		});
		case "user": {
			const userMessage = content.map((part) => {
				switch (part.type) {
					case "text": return part.text;
					case "image": throw new UnsupportedFunctionalityError({ functionality: "images" });
				}
			}).join("");
			text$1 += `${user}:
${userMessage}

`;
			break;
		}
		case "assistant": {
			const assistantMessage = content.map((part) => {
				switch (part.type) {
					case "text": return part.text;
					case "tool-call": throw new UnsupportedFunctionalityError({ functionality: "tool-call messages" });
				}
			}).join("");
			text$1 += `${assistant}:
${assistantMessage}

`;
			break;
		}
		case "tool": throw new UnsupportedFunctionalityError({ functionality: "tool messages" });
		default: {
			const _exhaustiveCheck = role;
			throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
		}
	}
	text$1 += `${assistant}:
`;
	return {
		prompt: text$1,
		stopSequences: [`
${user}:`]
	};
}
function mapOpenAICompletionLogProbs(logprobs) {
	return logprobs == null ? void 0 : logprobs.tokens.map((token, index) => ({
		token,
		logprob: logprobs.token_logprobs[index],
		topLogprobs: logprobs.top_logprobs ? Object.entries(logprobs.top_logprobs[index]).map(([token2, logprob]) => ({
			token: token2,
			logprob
		})) : []
	}));
}
var OpenAICompletionLanguageModel = class {
	constructor(modelId, settings, config) {
		this.specificationVersion = "v1";
		this.defaultObjectGenerationMode = void 0;
		this.modelId = modelId;
		this.settings = settings;
		this.config = config;
	}
	get provider() {
		return this.config.provider;
	}
	getArgs({ mode, inputFormat, prompt, maxTokens, temperature, topP, topK, frequencyPenalty, presencePenalty, stopSequences: userStopSequences, responseFormat, seed }) {
		var _a$3;
		const type = mode.type;
		const warnings = [];
		if (topK != null) warnings.push({
			type: "unsupported-setting",
			setting: "topK"
		});
		if (responseFormat != null && responseFormat.type !== "text") warnings.push({
			type: "unsupported-setting",
			setting: "responseFormat",
			details: "JSON response format is not supported."
		});
		const { prompt: completionPrompt, stopSequences } = convertToOpenAICompletionPrompt({
			prompt,
			inputFormat
		});
		const stop = [...stopSequences != null ? stopSequences : [], ...userStopSequences != null ? userStopSequences : []];
		const baseArgs = {
			model: this.modelId,
			echo: this.settings.echo,
			logit_bias: this.settings.logitBias,
			logprobs: typeof this.settings.logprobs === "number" ? this.settings.logprobs : typeof this.settings.logprobs === "boolean" ? this.settings.logprobs ? 0 : void 0 : void 0,
			suffix: this.settings.suffix,
			user: this.settings.user,
			max_tokens: maxTokens,
			temperature,
			top_p: topP,
			frequency_penalty: frequencyPenalty,
			presence_penalty: presencePenalty,
			seed,
			prompt: completionPrompt,
			stop: stop.length > 0 ? stop : void 0
		};
		switch (type) {
			case "regular": {
				if ((_a$3 = mode.tools) == null ? void 0 : _a$3.length) throw new UnsupportedFunctionalityError({ functionality: "tools" });
				if (mode.toolChoice) throw new UnsupportedFunctionalityError({ functionality: "toolChoice" });
				return {
					args: baseArgs,
					warnings
				};
			}
			case "object-json": throw new UnsupportedFunctionalityError({ functionality: "object-json mode" });
			case "object-tool": throw new UnsupportedFunctionalityError({ functionality: "object-tool mode" });
			default: {
				const _exhaustiveCheck = type;
				throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
			}
		}
	}
	async doGenerate(options) {
		const { args, warnings } = this.getArgs(options);
		const { responseHeaders, value: response, rawValue: rawResponse } = await postJsonToApi({
			url: this.config.url({
				path: "/completions",
				modelId: this.modelId
			}),
			headers: combineHeaders(this.config.headers(), options.headers),
			body: args,
			failedResponseHandler: openaiFailedResponseHandler,
			successfulResponseHandler: createJsonResponseHandler(openaiCompletionResponseSchema),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		const { prompt: rawPrompt,...rawSettings } = args;
		const choice = response.choices[0];
		return {
			text: choice.text,
			usage: {
				promptTokens: response.usage.prompt_tokens,
				completionTokens: response.usage.completion_tokens
			},
			finishReason: mapOpenAIFinishReason(choice.finish_reason),
			logprobs: mapOpenAICompletionLogProbs(choice.logprobs),
			rawCall: {
				rawPrompt,
				rawSettings
			},
			rawResponse: {
				headers: responseHeaders,
				body: rawResponse
			},
			response: getResponseMetadata$1(response),
			warnings,
			request: { body: JSON.stringify(args) }
		};
	}
	async doStream(options) {
		const { args, warnings } = this.getArgs(options);
		const body = {
			...args,
			stream: true,
			stream_options: this.config.compatibility === "strict" ? { include_usage: true } : void 0
		};
		const { responseHeaders, value: response } = await postJsonToApi({
			url: this.config.url({
				path: "/completions",
				modelId: this.modelId
			}),
			headers: combineHeaders(this.config.headers(), options.headers),
			body,
			failedResponseHandler: openaiFailedResponseHandler,
			successfulResponseHandler: createEventSourceResponseHandler(openaiCompletionChunkSchema),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		const { prompt: rawPrompt,...rawSettings } = args;
		let finishReason = "unknown";
		let usage = {
			promptTokens: NaN,
			completionTokens: NaN
		};
		let logprobs;
		let isFirstChunk = true;
		return {
			stream: response.pipeThrough(new TransformStream({
				transform(chunk, controller) {
					if (!chunk.success) {
						finishReason = "error";
						controller.enqueue({
							type: "error",
							error: chunk.error
						});
						return;
					}
					const value = chunk.value;
					if ("error" in value) {
						finishReason = "error";
						controller.enqueue({
							type: "error",
							error: value.error
						});
						return;
					}
					if (isFirstChunk) {
						isFirstChunk = false;
						controller.enqueue({
							type: "response-metadata",
							...getResponseMetadata$1(value)
						});
					}
					if (value.usage != null) usage = {
						promptTokens: value.usage.prompt_tokens,
						completionTokens: value.usage.completion_tokens
					};
					const choice = value.choices[0];
					if ((choice == null ? void 0 : choice.finish_reason) != null) finishReason = mapOpenAIFinishReason(choice.finish_reason);
					if ((choice == null ? void 0 : choice.text) != null) controller.enqueue({
						type: "text-delta",
						textDelta: choice.text
					});
					const mappedLogprobs = mapOpenAICompletionLogProbs(choice == null ? void 0 : choice.logprobs);
					if (mappedLogprobs == null ? void 0 : mappedLogprobs.length) {
						if (logprobs === void 0) logprobs = [];
						logprobs.push(...mappedLogprobs);
					}
				},
				flush(controller) {
					controller.enqueue({
						type: "finish",
						finishReason,
						logprobs,
						usage
					});
				}
			})),
			rawCall: {
				rawPrompt,
				rawSettings
			},
			rawResponse: { headers: responseHeaders },
			warnings,
			request: { body: JSON.stringify(body) }
		};
	}
};
var openaiCompletionResponseSchema = objectType({
	id: stringType().nullish(),
	created: numberType().nullish(),
	model: stringType().nullish(),
	choices: arrayType(objectType({
		text: stringType(),
		finish_reason: stringType(),
		logprobs: objectType({
			tokens: arrayType(stringType()),
			token_logprobs: arrayType(numberType()),
			top_logprobs: arrayType(recordType(stringType(), numberType())).nullable()
		}).nullish()
	})),
	usage: objectType({
		prompt_tokens: numberType(),
		completion_tokens: numberType()
	})
});
var openaiCompletionChunkSchema = unionType([objectType({
	id: stringType().nullish(),
	created: numberType().nullish(),
	model: stringType().nullish(),
	choices: arrayType(objectType({
		text: stringType(),
		finish_reason: stringType().nullish(),
		index: numberType(),
		logprobs: objectType({
			tokens: arrayType(stringType()),
			token_logprobs: arrayType(numberType()),
			top_logprobs: arrayType(recordType(stringType(), numberType())).nullable()
		}).nullish()
	})),
	usage: objectType({
		prompt_tokens: numberType(),
		completion_tokens: numberType()
	}).nullish()
}), openaiErrorDataSchema]);
var OpenAIEmbeddingModel = class {
	constructor(modelId, settings, config) {
		this.specificationVersion = "v1";
		this.modelId = modelId;
		this.settings = settings;
		this.config = config;
	}
	get provider() {
		return this.config.provider;
	}
	get maxEmbeddingsPerCall() {
		var _a$3;
		return (_a$3 = this.settings.maxEmbeddingsPerCall) != null ? _a$3 : 2048;
	}
	get supportsParallelCalls() {
		var _a$3;
		return (_a$3 = this.settings.supportsParallelCalls) != null ? _a$3 : true;
	}
	async doEmbed({ values, headers, abortSignal }) {
		if (values.length > this.maxEmbeddingsPerCall) throw new TooManyEmbeddingValuesForCallError({
			provider: this.provider,
			modelId: this.modelId,
			maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,
			values
		});
		const { responseHeaders, value: response } = await postJsonToApi({
			url: this.config.url({
				path: "/embeddings",
				modelId: this.modelId
			}),
			headers: combineHeaders(this.config.headers(), headers),
			body: {
				model: this.modelId,
				input: values,
				encoding_format: "float",
				dimensions: this.settings.dimensions,
				user: this.settings.user
			},
			failedResponseHandler: openaiFailedResponseHandler,
			successfulResponseHandler: createJsonResponseHandler(openaiTextEmbeddingResponseSchema$1),
			abortSignal,
			fetch: this.config.fetch
		});
		return {
			embeddings: response.data.map((item) => item.embedding),
			usage: response.usage ? { tokens: response.usage.prompt_tokens } : void 0,
			rawResponse: { headers: responseHeaders }
		};
	}
};
var openaiTextEmbeddingResponseSchema$1 = objectType({
	data: arrayType(objectType({ embedding: arrayType(numberType()) })),
	usage: objectType({ prompt_tokens: numberType() }).nullish()
});
var modelMaxImagesPerCall = {
	"dall-e-3": 1,
	"dall-e-2": 10,
	"gpt-image-1": 10
};
var hasDefaultResponseFormat = /* @__PURE__ */ new Set(["gpt-image-1"]);
var OpenAIImageModel = class {
	constructor(modelId, settings, config) {
		this.modelId = modelId;
		this.settings = settings;
		this.config = config;
		this.specificationVersion = "v1";
	}
	get maxImagesPerCall() {
		var _a$3, _b;
		return (_b = (_a$3 = this.settings.maxImagesPerCall) != null ? _a$3 : modelMaxImagesPerCall[this.modelId]) != null ? _b : 1;
	}
	get provider() {
		return this.config.provider;
	}
	async doGenerate({ prompt, n: n$1, size, aspectRatio, seed, providerOptions, headers, abortSignal }) {
		var _a$3, _b, _c, _d;
		const warnings = [];
		if (aspectRatio != null) warnings.push({
			type: "unsupported-setting",
			setting: "aspectRatio",
			details: "This model does not support aspect ratio. Use `size` instead."
		});
		if (seed != null) warnings.push({
			type: "unsupported-setting",
			setting: "seed"
		});
		const currentDate = (_c = (_b = (_a$3 = this.config._internal) == null ? void 0 : _a$3.currentDate) == null ? void 0 : _b.call(_a$3)) != null ? _c : /* @__PURE__ */ new Date();
		const { value: response, responseHeaders } = await postJsonToApi({
			url: this.config.url({
				path: "/images/generations",
				modelId: this.modelId
			}),
			headers: combineHeaders(this.config.headers(), headers),
			body: {
				model: this.modelId,
				prompt,
				n: n$1,
				size,
				...(_d = providerOptions.openai) != null ? _d : {},
				...!hasDefaultResponseFormat.has(this.modelId) ? { response_format: "b64_json" } : {}
			},
			failedResponseHandler: openaiFailedResponseHandler,
			successfulResponseHandler: createJsonResponseHandler(openaiImageResponseSchema),
			abortSignal,
			fetch: this.config.fetch
		});
		return {
			images: response.data.map((item) => item.b64_json),
			warnings,
			response: {
				timestamp: currentDate,
				modelId: this.modelId,
				headers: responseHeaders
			}
		};
	}
};
var openaiImageResponseSchema = objectType({ data: arrayType(objectType({ b64_json: stringType() })) });
var openAIProviderOptionsSchema = objectType({
	include: arrayType(stringType()).nullish(),
	language: stringType().nullish(),
	prompt: stringType().nullish(),
	temperature: numberType().min(0).max(1).nullish().default(0),
	timestampGranularities: arrayType(enumType(["word", "segment"])).nullish().default(["segment"])
});
var languageMap = {
	afrikaans: "af",
	arabic: "ar",
	armenian: "hy",
	azerbaijani: "az",
	belarusian: "be",
	bosnian: "bs",
	bulgarian: "bg",
	catalan: "ca",
	chinese: "zh",
	croatian: "hr",
	czech: "cs",
	danish: "da",
	dutch: "nl",
	english: "en",
	estonian: "et",
	finnish: "fi",
	french: "fr",
	galician: "gl",
	german: "de",
	greek: "el",
	hebrew: "he",
	hindi: "hi",
	hungarian: "hu",
	icelandic: "is",
	indonesian: "id",
	italian: "it",
	japanese: "ja",
	kannada: "kn",
	kazakh: "kk",
	korean: "ko",
	latvian: "lv",
	lithuanian: "lt",
	macedonian: "mk",
	malay: "ms",
	marathi: "mr",
	maori: "mi",
	nepali: "ne",
	norwegian: "no",
	persian: "fa",
	polish: "pl",
	portuguese: "pt",
	romanian: "ro",
	russian: "ru",
	serbian: "sr",
	slovak: "sk",
	slovenian: "sl",
	spanish: "es",
	swahili: "sw",
	swedish: "sv",
	tagalog: "tl",
	tamil: "ta",
	thai: "th",
	turkish: "tr",
	ukrainian: "uk",
	urdu: "ur",
	vietnamese: "vi",
	welsh: "cy"
};
var OpenAITranscriptionModel = class {
	constructor(modelId, config) {
		this.modelId = modelId;
		this.config = config;
		this.specificationVersion = "v1";
	}
	get provider() {
		return this.config.provider;
	}
	getArgs({ audio, mediaType, providerOptions }) {
		var _a$3, _b, _c, _d, _e;
		const warnings = [];
		const openAIOptions = parseProviderOptions({
			provider: "openai",
			providerOptions,
			schema: openAIProviderOptionsSchema
		});
		const formData = new FormData();
		const blob = audio instanceof Uint8Array ? new Blob([audio]) : new Blob([convertBase64ToUint8Array(audio)]);
		formData.append("model", this.modelId);
		formData.append("file", new File([blob], "audio", { type: mediaType }));
		if (openAIOptions) {
			const transcriptionModelOptions = {
				include: (_a$3 = openAIOptions.include) != null ? _a$3 : void 0,
				language: (_b = openAIOptions.language) != null ? _b : void 0,
				prompt: (_c = openAIOptions.prompt) != null ? _c : void 0,
				temperature: (_d = openAIOptions.temperature) != null ? _d : void 0,
				timestamp_granularities: (_e = openAIOptions.timestampGranularities) != null ? _e : void 0
			};
			for (const key in transcriptionModelOptions) {
				const value = transcriptionModelOptions[key];
				if (value !== void 0) formData.append(key, String(value));
			}
		}
		return {
			formData,
			warnings
		};
	}
	async doGenerate(options) {
		var _a$3, _b, _c, _d, _e, _f;
		const currentDate = (_c = (_b = (_a$3 = this.config._internal) == null ? void 0 : _a$3.currentDate) == null ? void 0 : _b.call(_a$3)) != null ? _c : /* @__PURE__ */ new Date();
		const { formData, warnings } = this.getArgs(options);
		const { value: response, responseHeaders, rawValue: rawResponse } = await postFormDataToApi({
			url: this.config.url({
				path: "/audio/transcriptions",
				modelId: this.modelId
			}),
			headers: combineHeaders(this.config.headers(), options.headers),
			formData,
			failedResponseHandler: openaiFailedResponseHandler,
			successfulResponseHandler: createJsonResponseHandler(openaiTranscriptionResponseSchema),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		const language = response.language != null && response.language in languageMap ? languageMap[response.language] : void 0;
		return {
			text: response.text,
			segments: (_e = (_d = response.words) == null ? void 0 : _d.map((word) => ({
				text: word.word,
				startSecond: word.start,
				endSecond: word.end
			}))) != null ? _e : [],
			language,
			durationInSeconds: (_f = response.duration) != null ? _f : void 0,
			warnings,
			response: {
				timestamp: currentDate,
				modelId: this.modelId,
				headers: responseHeaders,
				body: rawResponse
			}
		};
	}
};
var openaiTranscriptionResponseSchema = objectType({
	text: stringType(),
	language: stringType().nullish(),
	duration: numberType().nullish(),
	words: arrayType(objectType({
		word: stringType(),
		start: numberType(),
		end: numberType()
	})).nullish()
});
function convertToOpenAIResponsesMessages({ prompt, systemMessageMode }) {
	const messages = [];
	const warnings = [];
	for (const { role, content } of prompt) switch (role) {
		case "system": {
			switch (systemMessageMode) {
				case "system": {
					messages.push({
						role: "system",
						content
					});
					break;
				}
				case "developer": {
					messages.push({
						role: "developer",
						content
					});
					break;
				}
				case "remove": {
					warnings.push({
						type: "other",
						message: "system messages are removed for this model"
					});
					break;
				}
				default: {
					const _exhaustiveCheck = systemMessageMode;
					throw new Error(`Unsupported system message mode: ${_exhaustiveCheck}`);
				}
			}
			break;
		}
		case "user": {
			messages.push({
				role: "user",
				content: content.map((part, index) => {
					var _a$3, _b, _c, _d;
					switch (part.type) {
						case "text": return {
							type: "input_text",
							text: part.text
						};
						case "image": return {
							type: "input_image",
							image_url: part.image instanceof URL ? part.image.toString() : `data:${(_a$3 = part.mimeType) != null ? _a$3 : "image/jpeg"};base64,${convertUint8ArrayToBase64(part.image)}`,
							detail: (_c = (_b = part.providerMetadata) == null ? void 0 : _b.openai) == null ? void 0 : _c.imageDetail
						};
						case "file": {
							if (part.data instanceof URL) throw new UnsupportedFunctionalityError({ functionality: "File URLs in user messages" });
							switch (part.mimeType) {
								case "application/pdf": return {
									type: "input_file",
									filename: (_d = part.filename) != null ? _d : `part-${index}.pdf`,
									file_data: `data:application/pdf;base64,${part.data}`
								};
								default: throw new UnsupportedFunctionalityError({ functionality: "Only PDF files are supported in user messages" });
							}
						}
					}
				})
			});
			break;
		}
		case "assistant": {
			for (const part of content) switch (part.type) {
				case "text": {
					messages.push({
						role: "assistant",
						content: [{
							type: "output_text",
							text: part.text
						}]
					});
					break;
				}
				case "tool-call": {
					messages.push({
						type: "function_call",
						call_id: part.toolCallId,
						name: part.toolName,
						arguments: JSON.stringify(part.args)
					});
					break;
				}
			}
			break;
		}
		case "tool": {
			for (const part of content) messages.push({
				type: "function_call_output",
				call_id: part.toolCallId,
				output: JSON.stringify(part.result)
			});
			break;
		}
		default: {
			const _exhaustiveCheck = role;
			throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
		}
	}
	return {
		messages,
		warnings
	};
}
function mapOpenAIResponseFinishReason({ finishReason, hasToolCalls }) {
	switch (finishReason) {
		case void 0:
		case null: return hasToolCalls ? "tool-calls" : "stop";
		case "max_output_tokens": return "length";
		case "content_filter": return "content-filter";
		default: return hasToolCalls ? "tool-calls" : "unknown";
	}
}
function prepareResponsesTools({ mode, strict }) {
	var _a$3;
	const tools$1 = ((_a$3 = mode.tools) == null ? void 0 : _a$3.length) ? mode.tools : void 0;
	const toolWarnings = [];
	if (tools$1 == null) return {
		tools: void 0,
		tool_choice: void 0,
		toolWarnings
	};
	const toolChoice = mode.toolChoice;
	const openaiTools2 = [];
	for (const tool$1 of tools$1) switch (tool$1.type) {
		case "function":
			openaiTools2.push({
				type: "function",
				name: tool$1.name,
				description: tool$1.description,
				parameters: tool$1.parameters,
				strict: strict ? true : void 0
			});
			break;
		case "provider-defined":
			switch (tool$1.id) {
				case "openai.web_search_preview":
					openaiTools2.push({
						type: "web_search_preview",
						search_context_size: tool$1.args.searchContextSize,
						user_location: tool$1.args.userLocation
					});
					break;
				default:
					toolWarnings.push({
						type: "unsupported-tool",
						tool: tool$1
					});
					break;
			}
			break;
		default:
			toolWarnings.push({
				type: "unsupported-tool",
				tool: tool$1
			});
			break;
	}
	if (toolChoice == null) return {
		tools: openaiTools2,
		tool_choice: void 0,
		toolWarnings
	};
	const type = toolChoice.type;
	switch (type) {
		case "auto":
		case "none":
		case "required": return {
			tools: openaiTools2,
			tool_choice: type,
			toolWarnings
		};
		case "tool": {
			if (toolChoice.toolName === "web_search_preview") return {
				tools: openaiTools2,
				tool_choice: { type: "web_search_preview" },
				toolWarnings
			};
			return {
				tools: openaiTools2,
				tool_choice: {
					type: "function",
					name: toolChoice.toolName
				},
				toolWarnings
			};
		}
		default: {
			const _exhaustiveCheck = type;
			throw new UnsupportedFunctionalityError({ functionality: `Unsupported tool choice type: ${_exhaustiveCheck}` });
		}
	}
}
var OpenAIResponsesLanguageModel = class {
	constructor(modelId, config) {
		this.specificationVersion = "v1";
		this.defaultObjectGenerationMode = "json";
		this.supportsStructuredOutputs = true;
		this.modelId = modelId;
		this.config = config;
	}
	get provider() {
		return this.config.provider;
	}
	getArgs({ mode, maxTokens, temperature, stopSequences, topP, topK, presencePenalty, frequencyPenalty, seed, prompt, providerMetadata, responseFormat }) {
		var _a$3, _b, _c;
		const warnings = [];
		const modelConfig = getResponsesModelConfig(this.modelId);
		const type = mode.type;
		if (topK != null) warnings.push({
			type: "unsupported-setting",
			setting: "topK"
		});
		if (seed != null) warnings.push({
			type: "unsupported-setting",
			setting: "seed"
		});
		if (presencePenalty != null) warnings.push({
			type: "unsupported-setting",
			setting: "presencePenalty"
		});
		if (frequencyPenalty != null) warnings.push({
			type: "unsupported-setting",
			setting: "frequencyPenalty"
		});
		if (stopSequences != null) warnings.push({
			type: "unsupported-setting",
			setting: "stopSequences"
		});
		const { messages, warnings: messageWarnings } = convertToOpenAIResponsesMessages({
			prompt,
			systemMessageMode: modelConfig.systemMessageMode
		});
		warnings.push(...messageWarnings);
		const openaiOptions = parseProviderOptions({
			provider: "openai",
			providerOptions: providerMetadata,
			schema: openaiResponsesProviderOptionsSchema
		});
		const isStrict = (_a$3 = openaiOptions == null ? void 0 : openaiOptions.strictSchemas) != null ? _a$3 : true;
		const baseArgs = {
			model: this.modelId,
			input: messages,
			temperature,
			top_p: topP,
			max_output_tokens: maxTokens,
			...(responseFormat == null ? void 0 : responseFormat.type) === "json" && { text: { format: responseFormat.schema != null ? {
				type: "json_schema",
				strict: isStrict,
				name: (_b = responseFormat.name) != null ? _b : "response",
				description: responseFormat.description,
				schema: responseFormat.schema
			} : { type: "json_object" } } },
			metadata: openaiOptions == null ? void 0 : openaiOptions.metadata,
			parallel_tool_calls: openaiOptions == null ? void 0 : openaiOptions.parallelToolCalls,
			previous_response_id: openaiOptions == null ? void 0 : openaiOptions.previousResponseId,
			store: openaiOptions == null ? void 0 : openaiOptions.store,
			user: openaiOptions == null ? void 0 : openaiOptions.user,
			instructions: openaiOptions == null ? void 0 : openaiOptions.instructions,
			...modelConfig.isReasoningModel && ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null || (openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) && { reasoning: {
				...(openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null && { effort: openaiOptions.reasoningEffort },
				...(openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null && { summary: openaiOptions.reasoningSummary }
			} },
			...modelConfig.requiredAutoTruncation && { truncation: "auto" }
		};
		if (modelConfig.isReasoningModel) {
			if (baseArgs.temperature != null) {
				baseArgs.temperature = void 0;
				warnings.push({
					type: "unsupported-setting",
					setting: "temperature",
					details: "temperature is not supported for reasoning models"
				});
			}
			if (baseArgs.top_p != null) {
				baseArgs.top_p = void 0;
				warnings.push({
					type: "unsupported-setting",
					setting: "topP",
					details: "topP is not supported for reasoning models"
				});
			}
		}
		switch (type) {
			case "regular": {
				const { tools: tools$1, tool_choice, toolWarnings } = prepareResponsesTools({
					mode,
					strict: isStrict
				});
				return {
					args: {
						...baseArgs,
						tools: tools$1,
						tool_choice
					},
					warnings: [...warnings, ...toolWarnings]
				};
			}
			case "object-json": return {
				args: {
					...baseArgs,
					text: { format: mode.schema != null ? {
						type: "json_schema",
						strict: isStrict,
						name: (_c = mode.name) != null ? _c : "response",
						description: mode.description,
						schema: mode.schema
					} : { type: "json_object" } }
				},
				warnings
			};
			case "object-tool": return {
				args: {
					...baseArgs,
					tool_choice: {
						type: "function",
						name: mode.tool.name
					},
					tools: [{
						type: "function",
						name: mode.tool.name,
						description: mode.tool.description,
						parameters: mode.tool.parameters,
						strict: isStrict
					}]
				},
				warnings
			};
			default: {
				const _exhaustiveCheck = type;
				throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
			}
		}
	}
	async doGenerate(options) {
		var _a$3, _b, _c, _d, _e, _f, _g;
		const { args: body, warnings } = this.getArgs(options);
		const url = this.config.url({
			path: "/responses",
			modelId: this.modelId
		});
		const { responseHeaders, value: response, rawValue: rawResponse } = await postJsonToApi({
			url,
			headers: combineHeaders(this.config.headers(), options.headers),
			body,
			failedResponseHandler: openaiFailedResponseHandler,
			successfulResponseHandler: createJsonResponseHandler(objectType({
				id: stringType(),
				created_at: numberType(),
				error: objectType({
					message: stringType(),
					code: stringType()
				}).nullish(),
				model: stringType(),
				output: arrayType(discriminatedUnionType("type", [
					objectType({
						type: literalType("message"),
						role: literalType("assistant"),
						content: arrayType(objectType({
							type: literalType("output_text"),
							text: stringType(),
							annotations: arrayType(objectType({
								type: literalType("url_citation"),
								start_index: numberType(),
								end_index: numberType(),
								url: stringType(),
								title: stringType()
							}))
						}))
					}),
					objectType({
						type: literalType("function_call"),
						call_id: stringType(),
						name: stringType(),
						arguments: stringType()
					}),
					objectType({ type: literalType("web_search_call") }),
					objectType({ type: literalType("computer_call") }),
					objectType({
						type: literalType("reasoning"),
						summary: arrayType(objectType({
							type: literalType("summary_text"),
							text: stringType()
						}))
					})
				])),
				incomplete_details: objectType({ reason: stringType() }).nullable(),
				usage: usageSchema
			})),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		if (response.error) throw new APICallError({
			message: response.error.message,
			url,
			requestBodyValues: body,
			statusCode: 400,
			responseHeaders,
			responseBody: rawResponse,
			isRetryable: false
		});
		const outputTextElements = response.output.filter((output) => output.type === "message").flatMap((output) => output.content).filter((content) => content.type === "output_text");
		const toolCalls = response.output.filter((output) => output.type === "function_call").map((output) => ({
			toolCallType: "function",
			toolCallId: output.call_id,
			toolName: output.name,
			args: output.arguments
		}));
		const reasoningSummary = (_b = (_a$3 = response.output.find((item) => item.type === "reasoning")) == null ? void 0 : _a$3.summary) != null ? _b : null;
		return {
			text: outputTextElements.map((content) => content.text).join("\n"),
			sources: outputTextElements.flatMap((content) => content.annotations.map((annotation) => {
				var _a2$2, _b2, _c2;
				return {
					sourceType: "url",
					id: (_c2 = (_b2 = (_a2$2 = this.config).generateId) == null ? void 0 : _b2.call(_a2$2)) != null ? _c2 : generateId(),
					url: annotation.url,
					title: annotation.title
				};
			})),
			finishReason: mapOpenAIResponseFinishReason({
				finishReason: (_c = response.incomplete_details) == null ? void 0 : _c.reason,
				hasToolCalls: toolCalls.length > 0
			}),
			toolCalls: toolCalls.length > 0 ? toolCalls : void 0,
			reasoning: reasoningSummary ? reasoningSummary.map((summary) => ({
				type: "text",
				text: summary.text
			})) : void 0,
			usage: {
				promptTokens: response.usage.input_tokens,
				completionTokens: response.usage.output_tokens
			},
			rawCall: {
				rawPrompt: void 0,
				rawSettings: {}
			},
			rawResponse: {
				headers: responseHeaders,
				body: rawResponse
			},
			request: { body: JSON.stringify(body) },
			response: {
				id: response.id,
				timestamp: /* @__PURE__ */ new Date(response.created_at * 1e3),
				modelId: response.model
			},
			providerMetadata: { openai: {
				responseId: response.id,
				cachedPromptTokens: (_e = (_d = response.usage.input_tokens_details) == null ? void 0 : _d.cached_tokens) != null ? _e : null,
				reasoningTokens: (_g = (_f = response.usage.output_tokens_details) == null ? void 0 : _f.reasoning_tokens) != null ? _g : null
			} },
			warnings
		};
	}
	async doStream(options) {
		const { args: body, warnings } = this.getArgs(options);
		const { responseHeaders, value: response } = await postJsonToApi({
			url: this.config.url({
				path: "/responses",
				modelId: this.modelId
			}),
			headers: combineHeaders(this.config.headers(), options.headers),
			body: {
				...body,
				stream: true
			},
			failedResponseHandler: openaiFailedResponseHandler,
			successfulResponseHandler: createEventSourceResponseHandler(openaiResponsesChunkSchema),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		const self$1 = this;
		let finishReason = "unknown";
		let promptTokens = NaN;
		let completionTokens = NaN;
		let cachedPromptTokens = null;
		let reasoningTokens = null;
		let responseId = null;
		const ongoingToolCalls = {};
		let hasToolCalls = false;
		return {
			stream: response.pipeThrough(new TransformStream({
				transform(chunk, controller) {
					var _a$3, _b, _c, _d, _e, _f, _g, _h;
					if (!chunk.success) {
						finishReason = "error";
						controller.enqueue({
							type: "error",
							error: chunk.error
						});
						return;
					}
					const value = chunk.value;
					if (isResponseOutputItemAddedChunk(value)) {
						if (value.item.type === "function_call") {
							ongoingToolCalls[value.output_index] = {
								toolName: value.item.name,
								toolCallId: value.item.call_id
							};
							controller.enqueue({
								type: "tool-call-delta",
								toolCallType: "function",
								toolCallId: value.item.call_id,
								toolName: value.item.name,
								argsTextDelta: value.item.arguments
							});
						}
					} else if (isResponseFunctionCallArgumentsDeltaChunk(value)) {
						const toolCall = ongoingToolCalls[value.output_index];
						if (toolCall != null) controller.enqueue({
							type: "tool-call-delta",
							toolCallType: "function",
							toolCallId: toolCall.toolCallId,
							toolName: toolCall.toolName,
							argsTextDelta: value.delta
						});
					} else if (isResponseCreatedChunk(value)) {
						responseId = value.response.id;
						controller.enqueue({
							type: "response-metadata",
							id: value.response.id,
							timestamp: /* @__PURE__ */ new Date(value.response.created_at * 1e3),
							modelId: value.response.model
						});
					} else if (isTextDeltaChunk(value)) controller.enqueue({
						type: "text-delta",
						textDelta: value.delta
					});
					else if (isResponseReasoningSummaryTextDeltaChunk(value)) controller.enqueue({
						type: "reasoning",
						textDelta: value.delta
					});
					else if (isResponseOutputItemDoneChunk(value) && value.item.type === "function_call") {
						ongoingToolCalls[value.output_index] = void 0;
						hasToolCalls = true;
						controller.enqueue({
							type: "tool-call",
							toolCallType: "function",
							toolCallId: value.item.call_id,
							toolName: value.item.name,
							args: value.item.arguments
						});
					} else if (isResponseFinishedChunk(value)) {
						finishReason = mapOpenAIResponseFinishReason({
							finishReason: (_a$3 = value.response.incomplete_details) == null ? void 0 : _a$3.reason,
							hasToolCalls
						});
						promptTokens = value.response.usage.input_tokens;
						completionTokens = value.response.usage.output_tokens;
						cachedPromptTokens = (_c = (_b = value.response.usage.input_tokens_details) == null ? void 0 : _b.cached_tokens) != null ? _c : cachedPromptTokens;
						reasoningTokens = (_e = (_d = value.response.usage.output_tokens_details) == null ? void 0 : _d.reasoning_tokens) != null ? _e : reasoningTokens;
					} else if (isResponseAnnotationAddedChunk(value)) controller.enqueue({
						type: "source",
						source: {
							sourceType: "url",
							id: (_h = (_g = (_f = self$1.config).generateId) == null ? void 0 : _g.call(_f)) != null ? _h : generateId(),
							url: value.annotation.url,
							title: value.annotation.title
						}
					});
					else if (isErrorChunk(value)) controller.enqueue({
						type: "error",
						error: value
					});
				},
				flush(controller) {
					controller.enqueue({
						type: "finish",
						finishReason,
						usage: {
							promptTokens,
							completionTokens
						},
						...(cachedPromptTokens != null || reasoningTokens != null) && { providerMetadata: { openai: {
							responseId,
							cachedPromptTokens,
							reasoningTokens
						} } }
					});
				}
			})),
			rawCall: {
				rawPrompt: void 0,
				rawSettings: {}
			},
			rawResponse: { headers: responseHeaders },
			request: { body: JSON.stringify(body) },
			warnings
		};
	}
};
var usageSchema = objectType({
	input_tokens: numberType(),
	input_tokens_details: objectType({ cached_tokens: numberType().nullish() }).nullish(),
	output_tokens: numberType(),
	output_tokens_details: objectType({ reasoning_tokens: numberType().nullish() }).nullish()
});
var textDeltaChunkSchema = objectType({
	type: literalType("response.output_text.delta"),
	delta: stringType()
});
var responseFinishedChunkSchema = objectType({
	type: enumType(["response.completed", "response.incomplete"]),
	response: objectType({
		incomplete_details: objectType({ reason: stringType() }).nullish(),
		usage: usageSchema
	})
});
var responseCreatedChunkSchema = objectType({
	type: literalType("response.created"),
	response: objectType({
		id: stringType(),
		created_at: numberType(),
		model: stringType()
	})
});
var responseOutputItemDoneSchema = objectType({
	type: literalType("response.output_item.done"),
	output_index: numberType(),
	item: discriminatedUnionType("type", [objectType({ type: literalType("message") }), objectType({
		type: literalType("function_call"),
		id: stringType(),
		call_id: stringType(),
		name: stringType(),
		arguments: stringType(),
		status: literalType("completed")
	})])
});
var responseFunctionCallArgumentsDeltaSchema = objectType({
	type: literalType("response.function_call_arguments.delta"),
	item_id: stringType(),
	output_index: numberType(),
	delta: stringType()
});
var responseOutputItemAddedSchema = objectType({
	type: literalType("response.output_item.added"),
	output_index: numberType(),
	item: discriminatedUnionType("type", [objectType({ type: literalType("message") }), objectType({
		type: literalType("function_call"),
		id: stringType(),
		call_id: stringType(),
		name: stringType(),
		arguments: stringType()
	})])
});
var responseAnnotationAddedSchema = objectType({
	type: literalType("response.output_text.annotation.added"),
	annotation: objectType({
		type: literalType("url_citation"),
		url: stringType(),
		title: stringType()
	})
});
var responseReasoningSummaryTextDeltaSchema = objectType({
	type: literalType("response.reasoning_summary_text.delta"),
	item_id: stringType(),
	output_index: numberType(),
	summary_index: numberType(),
	delta: stringType()
});
var errorChunkSchema = objectType({
	type: literalType("error"),
	code: stringType(),
	message: stringType(),
	param: stringType().nullish(),
	sequence_number: numberType()
});
var openaiResponsesChunkSchema = unionType([
	textDeltaChunkSchema,
	responseFinishedChunkSchema,
	responseCreatedChunkSchema,
	responseOutputItemDoneSchema,
	responseFunctionCallArgumentsDeltaSchema,
	responseOutputItemAddedSchema,
	responseAnnotationAddedSchema,
	responseReasoningSummaryTextDeltaSchema,
	errorChunkSchema,
	objectType({ type: stringType() }).passthrough()
]);
function isTextDeltaChunk(chunk) {
	return chunk.type === "response.output_text.delta";
}
function isResponseOutputItemDoneChunk(chunk) {
	return chunk.type === "response.output_item.done";
}
function isResponseFinishedChunk(chunk) {
	return chunk.type === "response.completed" || chunk.type === "response.incomplete";
}
function isResponseCreatedChunk(chunk) {
	return chunk.type === "response.created";
}
function isResponseFunctionCallArgumentsDeltaChunk(chunk) {
	return chunk.type === "response.function_call_arguments.delta";
}
function isResponseOutputItemAddedChunk(chunk) {
	return chunk.type === "response.output_item.added";
}
function isResponseAnnotationAddedChunk(chunk) {
	return chunk.type === "response.output_text.annotation.added";
}
function isResponseReasoningSummaryTextDeltaChunk(chunk) {
	return chunk.type === "response.reasoning_summary_text.delta";
}
function isErrorChunk(chunk) {
	return chunk.type === "error";
}
function getResponsesModelConfig(modelId) {
	if (modelId.startsWith("o")) {
		if (modelId.startsWith("o1-mini") || modelId.startsWith("o1-preview")) return {
			isReasoningModel: true,
			systemMessageMode: "remove",
			requiredAutoTruncation: false
		};
		return {
			isReasoningModel: true,
			systemMessageMode: "developer",
			requiredAutoTruncation: false
		};
	}
	return {
		isReasoningModel: false,
		systemMessageMode: "system",
		requiredAutoTruncation: false
	};
}
var openaiResponsesProviderOptionsSchema = objectType({
	metadata: anyType().nullish(),
	parallelToolCalls: booleanType().nullish(),
	previousResponseId: stringType().nullish(),
	store: booleanType().nullish(),
	user: stringType().nullish(),
	reasoningEffort: stringType().nullish(),
	strictSchemas: booleanType().nullish(),
	instructions: stringType().nullish(),
	reasoningSummary: stringType().nullish()
});
var WebSearchPreviewParameters = objectType({});
function webSearchPreviewTool({ searchContextSize, userLocation } = {}) {
	return {
		type: "provider-defined",
		id: "openai.web_search_preview",
		args: {
			searchContextSize,
			userLocation
		},
		parameters: WebSearchPreviewParameters
	};
}
var openaiTools = { webSearchPreview: webSearchPreviewTool };
var OpenAIProviderOptionsSchema = objectType({
	instructions: stringType().nullish(),
	speed: numberType().min(.25).max(4).default(1).nullish()
});
var OpenAISpeechModel = class {
	constructor(modelId, config) {
		this.modelId = modelId;
		this.config = config;
		this.specificationVersion = "v1";
	}
	get provider() {
		return this.config.provider;
	}
	getArgs({ text: text$1, voice = "alloy", outputFormat = "mp3", speed, instructions, providerOptions }) {
		const warnings = [];
		const openAIOptions = parseProviderOptions({
			provider: "openai",
			providerOptions,
			schema: OpenAIProviderOptionsSchema
		});
		const requestBody = {
			model: this.modelId,
			input: text$1,
			voice,
			response_format: "mp3",
			speed,
			instructions
		};
		if (outputFormat) if ([
			"mp3",
			"opus",
			"aac",
			"flac",
			"wav",
			"pcm"
		].includes(outputFormat)) requestBody.response_format = outputFormat;
		else warnings.push({
			type: "unsupported-setting",
			setting: "outputFormat",
			details: `Unsupported output format: ${outputFormat}. Using mp3 instead.`
		});
		if (openAIOptions) {
			const speechModelOptions = {};
			for (const key in speechModelOptions) {
				const value = speechModelOptions[key];
				if (value !== void 0) requestBody[key] = value;
			}
		}
		return {
			requestBody,
			warnings
		};
	}
	async doGenerate(options) {
		var _a$3, _b, _c;
		const currentDate = (_c = (_b = (_a$3 = this.config._internal) == null ? void 0 : _a$3.currentDate) == null ? void 0 : _b.call(_a$3)) != null ? _c : /* @__PURE__ */ new Date();
		const { requestBody, warnings } = this.getArgs(options);
		const { value: audio, responseHeaders, rawValue: rawResponse } = await postJsonToApi({
			url: this.config.url({
				path: "/audio/speech",
				modelId: this.modelId
			}),
			headers: combineHeaders(this.config.headers(), options.headers),
			body: requestBody,
			failedResponseHandler: openaiFailedResponseHandler,
			successfulResponseHandler: createBinaryResponseHandler(),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		return {
			audio,
			warnings,
			request: { body: JSON.stringify(requestBody) },
			response: {
				timestamp: currentDate,
				modelId: this.modelId,
				headers: responseHeaders,
				body: rawResponse
			}
		};
	}
};
function createOpenAI(options = {}) {
	var _a$3, _b, _c;
	const baseURL = (_a$3 = withoutTrailingSlash(options.baseURL)) != null ? _a$3 : "https://api.openai.com/v1";
	const compatibility = (_b = options.compatibility) != null ? _b : "compatible";
	const providerName = (_c = options.name) != null ? _c : "openai";
	const getHeaders = () => ({
		Authorization: `Bearer ${loadApiKey({
			apiKey: options.apiKey,
			environmentVariableName: "OPENAI_API_KEY",
			description: "OpenAI"
		})}`,
		"OpenAI-Organization": options.organization,
		"OpenAI-Project": options.project,
		...options.headers
	});
	const createChatModel = (modelId, settings = {}) => new OpenAIChatLanguageModel(modelId, settings, {
		provider: `${providerName}.chat`,
		url: ({ path: path$9 }) => `${baseURL}${path$9}`,
		headers: getHeaders,
		compatibility,
		fetch: options.fetch
	});
	const createCompletionModel = (modelId, settings = {}) => new OpenAICompletionLanguageModel(modelId, settings, {
		provider: `${providerName}.completion`,
		url: ({ path: path$9 }) => `${baseURL}${path$9}`,
		headers: getHeaders,
		compatibility,
		fetch: options.fetch
	});
	const createEmbeddingModel = (modelId, settings = {}) => new OpenAIEmbeddingModel(modelId, settings, {
		provider: `${providerName}.embedding`,
		url: ({ path: path$9 }) => `${baseURL}${path$9}`,
		headers: getHeaders,
		fetch: options.fetch
	});
	const createImageModel = (modelId, settings = {}) => new OpenAIImageModel(modelId, settings, {
		provider: `${providerName}.image`,
		url: ({ path: path$9 }) => `${baseURL}${path$9}`,
		headers: getHeaders,
		fetch: options.fetch
	});
	const createTranscriptionModel = (modelId) => new OpenAITranscriptionModel(modelId, {
		provider: `${providerName}.transcription`,
		url: ({ path: path$9 }) => `${baseURL}${path$9}`,
		headers: getHeaders,
		fetch: options.fetch
	});
	const createSpeechModel = (modelId) => new OpenAISpeechModel(modelId, {
		provider: `${providerName}.speech`,
		url: ({ path: path$9 }) => `${baseURL}${path$9}`,
		headers: getHeaders,
		fetch: options.fetch
	});
	const createLanguageModel = (modelId, settings) => {
		if (new.target) throw new Error("The OpenAI model function cannot be called with the new keyword.");
		if (modelId === "gpt-3.5-turbo-instruct") return createCompletionModel(modelId, settings);
		return createChatModel(modelId, settings);
	};
	const createResponsesModel = (modelId) => {
		return new OpenAIResponsesLanguageModel(modelId, {
			provider: `${providerName}.responses`,
			url: ({ path: path$9 }) => `${baseURL}${path$9}`,
			headers: getHeaders,
			fetch: options.fetch
		});
	};
	const provider = function(modelId, settings) {
		return createLanguageModel(modelId, settings);
	};
	provider.languageModel = createLanguageModel;
	provider.chat = createChatModel;
	provider.completion = createCompletionModel;
	provider.responses = createResponsesModel;
	provider.embedding = createEmbeddingModel;
	provider.textEmbedding = createEmbeddingModel;
	provider.textEmbeddingModel = createEmbeddingModel;
	provider.image = createImageModel;
	provider.imageModel = createImageModel;
	provider.transcription = createTranscriptionModel;
	provider.transcriptionModel = createTranscriptionModel;
	provider.speech = createSpeechModel;
	provider.speechModel = createSpeechModel;
	provider.tools = openaiTools;
	return provider;
}
var openai = createOpenAI({ compatibility: "strict" });

//#endregion
//#region node_modules/.pnpm/@ai-sdk+openai-compatible@0.2.16_zod@3.25.76/node_modules/@ai-sdk/openai-compatible/dist/index.mjs
function getOpenAIMetadata(message) {
	var _a$3, _b;
	return (_b = (_a$3 = message == null ? void 0 : message.providerMetadata) == null ? void 0 : _a$3.openaiCompatible) != null ? _b : {};
}
function convertToOpenAICompatibleChatMessages(prompt) {
	const messages = [];
	for (const { role, content,...message } of prompt) {
		const metadata = getOpenAIMetadata({ ...message });
		switch (role) {
			case "system": {
				messages.push({
					role: "system",
					content,
					...metadata
				});
				break;
			}
			case "user": {
				if (content.length === 1 && content[0].type === "text") {
					messages.push({
						role: "user",
						content: content[0].text,
						...getOpenAIMetadata(content[0])
					});
					break;
				}
				messages.push({
					role: "user",
					content: content.map((part) => {
						var _a$3;
						const partMetadata = getOpenAIMetadata(part);
						switch (part.type) {
							case "text": return {
								type: "text",
								text: part.text,
								...partMetadata
							};
							case "image": return {
								type: "image_url",
								image_url: { url: part.image instanceof URL ? part.image.toString() : `data:${(_a$3 = part.mimeType) != null ? _a$3 : "image/jpeg"};base64,${convertUint8ArrayToBase64(part.image)}` },
								...partMetadata
							};
							case "file": throw new UnsupportedFunctionalityError({ functionality: "File content parts in user messages" });
						}
					}),
					...metadata
				});
				break;
			}
			case "assistant": {
				let text$1 = "";
				const toolCalls = [];
				for (const part of content) {
					const partMetadata = getOpenAIMetadata(part);
					switch (part.type) {
						case "text": {
							text$1 += part.text;
							break;
						}
						case "tool-call": {
							toolCalls.push({
								id: part.toolCallId,
								type: "function",
								function: {
									name: part.toolName,
									arguments: JSON.stringify(part.args)
								},
								...partMetadata
							});
							break;
						}
					}
				}
				messages.push({
					role: "assistant",
					content: text$1,
					tool_calls: toolCalls.length > 0 ? toolCalls : void 0,
					...metadata
				});
				break;
			}
			case "tool": {
				for (const toolResponse of content) {
					const toolResponseMetadata = getOpenAIMetadata(toolResponse);
					messages.push({
						role: "tool",
						tool_call_id: toolResponse.toolCallId,
						content: JSON.stringify(toolResponse.result),
						...toolResponseMetadata
					});
				}
				break;
			}
			default: {
				const _exhaustiveCheck = role;
				throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
			}
		}
	}
	return messages;
}
function getResponseMetadata({ id: id$1, model, created }) {
	return {
		id: id$1 != null ? id$1 : void 0,
		modelId: model != null ? model : void 0,
		timestamp: created != null ? /* @__PURE__ */ new Date(created * 1e3) : void 0
	};
}
function mapOpenAICompatibleFinishReason(finishReason) {
	switch (finishReason) {
		case "stop": return "stop";
		case "length": return "length";
		case "content_filter": return "content-filter";
		case "function_call":
		case "tool_calls": return "tool-calls";
		default: return "unknown";
	}
}
var openaiCompatibleErrorDataSchema = objectType({ error: objectType({
	message: stringType(),
	type: stringType().nullish(),
	param: anyType().nullish(),
	code: unionType([stringType(), numberType()]).nullish()
}) });
var defaultOpenAICompatibleErrorStructure = {
	errorSchema: openaiCompatibleErrorDataSchema,
	errorToMessage: (data$1) => data$1.error.message
};
function prepareTools$2({ mode, structuredOutputs }) {
	var _a$3;
	const tools$1 = ((_a$3 = mode.tools) == null ? void 0 : _a$3.length) ? mode.tools : void 0;
	const toolWarnings = [];
	if (tools$1 == null) return {
		tools: void 0,
		tool_choice: void 0,
		toolWarnings
	};
	const toolChoice = mode.toolChoice;
	const openaiCompatTools = [];
	for (const tool$1 of tools$1) if (tool$1.type === "provider-defined") toolWarnings.push({
		type: "unsupported-tool",
		tool: tool$1
	});
	else openaiCompatTools.push({
		type: "function",
		function: {
			name: tool$1.name,
			description: tool$1.description,
			parameters: tool$1.parameters
		}
	});
	if (toolChoice == null) return {
		tools: openaiCompatTools,
		tool_choice: void 0,
		toolWarnings
	};
	const type = toolChoice.type;
	switch (type) {
		case "auto":
		case "none":
		case "required": return {
			tools: openaiCompatTools,
			tool_choice: type,
			toolWarnings
		};
		case "tool": return {
			tools: openaiCompatTools,
			tool_choice: {
				type: "function",
				function: { name: toolChoice.toolName }
			},
			toolWarnings
		};
		default: {
			const _exhaustiveCheck = type;
			throw new UnsupportedFunctionalityError({ functionality: `Unsupported tool choice type: ${_exhaustiveCheck}` });
		}
	}
}
var OpenAICompatibleChatLanguageModel = class {
	constructor(modelId, settings, config) {
		this.specificationVersion = "v1";
		var _a$3, _b;
		this.modelId = modelId;
		this.settings = settings;
		this.config = config;
		const errorStructure = (_a$3 = config.errorStructure) != null ? _a$3 : defaultOpenAICompatibleErrorStructure;
		this.chunkSchema = createOpenAICompatibleChatChunkSchema(errorStructure.errorSchema);
		this.failedResponseHandler = createJsonErrorResponseHandler(errorStructure);
		this.supportsStructuredOutputs = (_b = config.supportsStructuredOutputs) != null ? _b : false;
	}
	get defaultObjectGenerationMode() {
		return this.config.defaultObjectGenerationMode;
	}
	get provider() {
		return this.config.provider;
	}
	get providerOptionsName() {
		return this.config.provider.split(".")[0].trim();
	}
	getArgs({ mode, prompt, maxTokens, temperature, topP, topK, frequencyPenalty, presencePenalty, providerMetadata, stopSequences, responseFormat, seed }) {
		var _a$3, _b, _c, _d, _e;
		const type = mode.type;
		const warnings = [];
		if (topK != null) warnings.push({
			type: "unsupported-setting",
			setting: "topK"
		});
		if ((responseFormat == null ? void 0 : responseFormat.type) === "json" && responseFormat.schema != null && !this.supportsStructuredOutputs) warnings.push({
			type: "unsupported-setting",
			setting: "responseFormat",
			details: "JSON response format schema is only supported with structuredOutputs"
		});
		const baseArgs = {
			model: this.modelId,
			user: this.settings.user,
			max_tokens: maxTokens,
			temperature,
			top_p: topP,
			frequency_penalty: frequencyPenalty,
			presence_penalty: presencePenalty,
			response_format: (responseFormat == null ? void 0 : responseFormat.type) === "json" ? this.supportsStructuredOutputs === true && responseFormat.schema != null ? {
				type: "json_schema",
				json_schema: {
					schema: responseFormat.schema,
					name: (_a$3 = responseFormat.name) != null ? _a$3 : "response",
					description: responseFormat.description
				}
			} : { type: "json_object" } : void 0,
			stop: stopSequences,
			seed,
			...providerMetadata == null ? void 0 : providerMetadata[this.providerOptionsName],
			reasoning_effort: (_d = (_b = providerMetadata == null ? void 0 : providerMetadata[this.providerOptionsName]) == null ? void 0 : _b.reasoningEffort) != null ? _d : (_c = providerMetadata == null ? void 0 : providerMetadata["openai-compatible"]) == null ? void 0 : _c.reasoningEffort,
			messages: convertToOpenAICompatibleChatMessages(prompt)
		};
		switch (type) {
			case "regular": {
				const { tools: tools$1, tool_choice, toolWarnings } = prepareTools$2({
					mode,
					structuredOutputs: this.supportsStructuredOutputs
				});
				return {
					args: {
						...baseArgs,
						tools: tools$1,
						tool_choice
					},
					warnings: [...warnings, ...toolWarnings]
				};
			}
			case "object-json": return {
				args: {
					...baseArgs,
					response_format: this.supportsStructuredOutputs === true && mode.schema != null ? {
						type: "json_schema",
						json_schema: {
							schema: mode.schema,
							name: (_e = mode.name) != null ? _e : "response",
							description: mode.description
						}
					} : { type: "json_object" }
				},
				warnings
			};
			case "object-tool": return {
				args: {
					...baseArgs,
					tool_choice: {
						type: "function",
						function: { name: mode.tool.name }
					},
					tools: [{
						type: "function",
						function: {
							name: mode.tool.name,
							description: mode.tool.description,
							parameters: mode.tool.parameters
						}
					}]
				},
				warnings
			};
			default: {
				const _exhaustiveCheck = type;
				throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
			}
		}
	}
	async doGenerate(options) {
		var _a$3, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
		const { args, warnings } = this.getArgs({ ...options });
		const body = JSON.stringify(args);
		const { responseHeaders, value: responseBody, rawValue: rawResponse } = await postJsonToApi({
			url: this.config.url({
				path: "/chat/completions",
				modelId: this.modelId
			}),
			headers: combineHeaders(this.config.headers(), options.headers),
			body: args,
			failedResponseHandler: this.failedResponseHandler,
			successfulResponseHandler: createJsonResponseHandler(OpenAICompatibleChatResponseSchema),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		const { messages: rawPrompt,...rawSettings } = args;
		const choice = responseBody.choices[0];
		const providerMetadata = {
			[this.providerOptionsName]: {},
			...(_b = (_a$3 = this.config.metadataExtractor) == null ? void 0 : _a$3.extractMetadata) == null ? void 0 : _b.call(_a$3, { parsedBody: rawResponse })
		};
		const completionTokenDetails = (_c = responseBody.usage) == null ? void 0 : _c.completion_tokens_details;
		const promptTokenDetails = (_d = responseBody.usage) == null ? void 0 : _d.prompt_tokens_details;
		if ((completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens) != null) providerMetadata[this.providerOptionsName].reasoningTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens;
		if ((completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens) != null) providerMetadata[this.providerOptionsName].acceptedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens;
		if ((completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens) != null) providerMetadata[this.providerOptionsName].rejectedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens;
		if ((promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens) != null) providerMetadata[this.providerOptionsName].cachedPromptTokens = promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens;
		return {
			text: (_e = choice.message.content) != null ? _e : void 0,
			reasoning: (_f = choice.message.reasoning_content) != null ? _f : void 0,
			toolCalls: (_g = choice.message.tool_calls) == null ? void 0 : _g.map((toolCall) => {
				var _a2$2;
				return {
					toolCallType: "function",
					toolCallId: (_a2$2 = toolCall.id) != null ? _a2$2 : generateId(),
					toolName: toolCall.function.name,
					args: toolCall.function.arguments
				};
			}),
			finishReason: mapOpenAICompatibleFinishReason(choice.finish_reason),
			usage: {
				promptTokens: (_i = (_h = responseBody.usage) == null ? void 0 : _h.prompt_tokens) != null ? _i : NaN,
				completionTokens: (_k = (_j = responseBody.usage) == null ? void 0 : _j.completion_tokens) != null ? _k : NaN
			},
			providerMetadata,
			rawCall: {
				rawPrompt,
				rawSettings
			},
			rawResponse: {
				headers: responseHeaders,
				body: rawResponse
			},
			response: getResponseMetadata(responseBody),
			warnings,
			request: { body }
		};
	}
	async doStream(options) {
		var _a$3;
		if (this.settings.simulateStreaming) {
			const result = await this.doGenerate(options);
			const simulatedStream = new ReadableStream({ start(controller) {
				controller.enqueue({
					type: "response-metadata",
					...result.response
				});
				if (result.reasoning) if (Array.isArray(result.reasoning)) {
					for (const part of result.reasoning) if (part.type === "text") controller.enqueue({
						type: "reasoning",
						textDelta: part.text
					});
				} else controller.enqueue({
					type: "reasoning",
					textDelta: result.reasoning
				});
				if (result.text) controller.enqueue({
					type: "text-delta",
					textDelta: result.text
				});
				if (result.toolCalls) for (const toolCall of result.toolCalls) controller.enqueue({
					type: "tool-call",
					...toolCall
				});
				controller.enqueue({
					type: "finish",
					finishReason: result.finishReason,
					usage: result.usage,
					logprobs: result.logprobs,
					providerMetadata: result.providerMetadata
				});
				controller.close();
			} });
			return {
				stream: simulatedStream,
				rawCall: result.rawCall,
				rawResponse: result.rawResponse,
				warnings: result.warnings
			};
		}
		const { args, warnings } = this.getArgs({ ...options });
		const body = {
			...args,
			stream: true,
			stream_options: this.config.includeUsage ? { include_usage: true } : void 0
		};
		const metadataExtractor = (_a$3 = this.config.metadataExtractor) == null ? void 0 : _a$3.createStreamExtractor();
		const { responseHeaders, value: response } = await postJsonToApi({
			url: this.config.url({
				path: "/chat/completions",
				modelId: this.modelId
			}),
			headers: combineHeaders(this.config.headers(), options.headers),
			body,
			failedResponseHandler: this.failedResponseHandler,
			successfulResponseHandler: createEventSourceResponseHandler(this.chunkSchema),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		const { messages: rawPrompt,...rawSettings } = args;
		const toolCalls = [];
		let finishReason = "unknown";
		let usage = {
			completionTokens: void 0,
			completionTokensDetails: {
				reasoningTokens: void 0,
				acceptedPredictionTokens: void 0,
				rejectedPredictionTokens: void 0
			},
			promptTokens: void 0,
			promptTokensDetails: { cachedTokens: void 0 }
		};
		let isFirstChunk = true;
		let providerOptionsName = this.providerOptionsName;
		return {
			stream: response.pipeThrough(new TransformStream({
				transform(chunk, controller) {
					var _a2$2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
					if (!chunk.success) {
						finishReason = "error";
						controller.enqueue({
							type: "error",
							error: chunk.error
						});
						return;
					}
					const value = chunk.value;
					metadataExtractor == null || metadataExtractor.processChunk(chunk.rawValue);
					if ("error" in value) {
						finishReason = "error";
						controller.enqueue({
							type: "error",
							error: value.error.message
						});
						return;
					}
					if (isFirstChunk) {
						isFirstChunk = false;
						controller.enqueue({
							type: "response-metadata",
							...getResponseMetadata(value)
						});
					}
					if (value.usage != null) {
						const { prompt_tokens, completion_tokens, prompt_tokens_details, completion_tokens_details } = value.usage;
						usage.promptTokens = prompt_tokens != null ? prompt_tokens : void 0;
						usage.completionTokens = completion_tokens != null ? completion_tokens : void 0;
						if ((completion_tokens_details == null ? void 0 : completion_tokens_details.reasoning_tokens) != null) usage.completionTokensDetails.reasoningTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.reasoning_tokens;
						if ((completion_tokens_details == null ? void 0 : completion_tokens_details.accepted_prediction_tokens) != null) usage.completionTokensDetails.acceptedPredictionTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.accepted_prediction_tokens;
						if ((completion_tokens_details == null ? void 0 : completion_tokens_details.rejected_prediction_tokens) != null) usage.completionTokensDetails.rejectedPredictionTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.rejected_prediction_tokens;
						if ((prompt_tokens_details == null ? void 0 : prompt_tokens_details.cached_tokens) != null) usage.promptTokensDetails.cachedTokens = prompt_tokens_details == null ? void 0 : prompt_tokens_details.cached_tokens;
					}
					const choice = value.choices[0];
					if ((choice == null ? void 0 : choice.finish_reason) != null) finishReason = mapOpenAICompatibleFinishReason(choice.finish_reason);
					if ((choice == null ? void 0 : choice.delta) == null) return;
					const delta = choice.delta;
					if (delta.reasoning_content != null) controller.enqueue({
						type: "reasoning",
						textDelta: delta.reasoning_content
					});
					if (delta.content != null) controller.enqueue({
						type: "text-delta",
						textDelta: delta.content
					});
					if (delta.tool_calls != null) for (const toolCallDelta of delta.tool_calls) {
						const index = toolCallDelta.index;
						if (toolCalls[index] == null) {
							if (toolCallDelta.type !== "function") throw new InvalidResponseDataError({
								data: toolCallDelta,
								message: `Expected 'function' type.`
							});
							if (toolCallDelta.id == null) throw new InvalidResponseDataError({
								data: toolCallDelta,
								message: `Expected 'id' to be a string.`
							});
							if (((_a2$2 = toolCallDelta.function) == null ? void 0 : _a2$2.name) == null) throw new InvalidResponseDataError({
								data: toolCallDelta,
								message: `Expected 'function.name' to be a string.`
							});
							toolCalls[index] = {
								id: toolCallDelta.id,
								type: "function",
								function: {
									name: toolCallDelta.function.name,
									arguments: (_b = toolCallDelta.function.arguments) != null ? _b : ""
								},
								hasFinished: false
							};
							const toolCall2 = toolCalls[index];
							if (((_c = toolCall2.function) == null ? void 0 : _c.name) != null && ((_d = toolCall2.function) == null ? void 0 : _d.arguments) != null) {
								if (toolCall2.function.arguments.length > 0) controller.enqueue({
									type: "tool-call-delta",
									toolCallType: "function",
									toolCallId: toolCall2.id,
									toolName: toolCall2.function.name,
									argsTextDelta: toolCall2.function.arguments
								});
								if (isParsableJson(toolCall2.function.arguments)) {
									controller.enqueue({
										type: "tool-call",
										toolCallType: "function",
										toolCallId: (_e = toolCall2.id) != null ? _e : generateId(),
										toolName: toolCall2.function.name,
										args: toolCall2.function.arguments
									});
									toolCall2.hasFinished = true;
								}
							}
							continue;
						}
						const toolCall = toolCalls[index];
						if (toolCall.hasFinished) continue;
						if (((_f = toolCallDelta.function) == null ? void 0 : _f.arguments) != null) toolCall.function.arguments += (_h = (_g = toolCallDelta.function) == null ? void 0 : _g.arguments) != null ? _h : "";
						controller.enqueue({
							type: "tool-call-delta",
							toolCallType: "function",
							toolCallId: toolCall.id,
							toolName: toolCall.function.name,
							argsTextDelta: (_i = toolCallDelta.function.arguments) != null ? _i : ""
						});
						if (((_j = toolCall.function) == null ? void 0 : _j.name) != null && ((_k = toolCall.function) == null ? void 0 : _k.arguments) != null && isParsableJson(toolCall.function.arguments)) {
							controller.enqueue({
								type: "tool-call",
								toolCallType: "function",
								toolCallId: (_l = toolCall.id) != null ? _l : generateId(),
								toolName: toolCall.function.name,
								args: toolCall.function.arguments
							});
							toolCall.hasFinished = true;
						}
					}
				},
				flush(controller) {
					var _a2$2, _b;
					const providerMetadata = {
						[providerOptionsName]: {},
						...metadataExtractor == null ? void 0 : metadataExtractor.buildMetadata()
					};
					if (usage.completionTokensDetails.reasoningTokens != null) providerMetadata[providerOptionsName].reasoningTokens = usage.completionTokensDetails.reasoningTokens;
					if (usage.completionTokensDetails.acceptedPredictionTokens != null) providerMetadata[providerOptionsName].acceptedPredictionTokens = usage.completionTokensDetails.acceptedPredictionTokens;
					if (usage.completionTokensDetails.rejectedPredictionTokens != null) providerMetadata[providerOptionsName].rejectedPredictionTokens = usage.completionTokensDetails.rejectedPredictionTokens;
					if (usage.promptTokensDetails.cachedTokens != null) providerMetadata[providerOptionsName].cachedPromptTokens = usage.promptTokensDetails.cachedTokens;
					controller.enqueue({
						type: "finish",
						finishReason,
						usage: {
							promptTokens: (_a2$2 = usage.promptTokens) != null ? _a2$2 : NaN,
							completionTokens: (_b = usage.completionTokens) != null ? _b : NaN
						},
						providerMetadata
					});
				}
			})),
			rawCall: {
				rawPrompt,
				rawSettings
			},
			rawResponse: { headers: responseHeaders },
			warnings,
			request: { body: JSON.stringify(body) }
		};
	}
};
var openaiCompatibleTokenUsageSchema = objectType({
	prompt_tokens: numberType().nullish(),
	completion_tokens: numberType().nullish(),
	prompt_tokens_details: objectType({ cached_tokens: numberType().nullish() }).nullish(),
	completion_tokens_details: objectType({
		reasoning_tokens: numberType().nullish(),
		accepted_prediction_tokens: numberType().nullish(),
		rejected_prediction_tokens: numberType().nullish()
	}).nullish()
}).nullish();
var OpenAICompatibleChatResponseSchema = objectType({
	id: stringType().nullish(),
	created: numberType().nullish(),
	model: stringType().nullish(),
	choices: arrayType(objectType({
		message: objectType({
			role: literalType("assistant").nullish(),
			content: stringType().nullish(),
			reasoning_content: stringType().nullish(),
			tool_calls: arrayType(objectType({
				id: stringType().nullish(),
				type: literalType("function"),
				function: objectType({
					name: stringType(),
					arguments: stringType()
				})
			})).nullish()
		}),
		finish_reason: stringType().nullish()
	})),
	usage: openaiCompatibleTokenUsageSchema
});
var createOpenAICompatibleChatChunkSchema = (errorSchema) => unionType([objectType({
	id: stringType().nullish(),
	created: numberType().nullish(),
	model: stringType().nullish(),
	choices: arrayType(objectType({
		delta: objectType({
			role: enumType(["assistant"]).nullish(),
			content: stringType().nullish(),
			reasoning_content: stringType().nullish(),
			tool_calls: arrayType(objectType({
				index: numberType().optional(),
				id: stringType().nullish(),
				type: literalType("function").nullish(),
				function: objectType({
					name: stringType().nullish(),
					arguments: stringType().nullish()
				})
			})).nullish()
		}).nullish(),
		finish_reason: stringType().nullish()
	})),
	usage: openaiCompatibleTokenUsageSchema
}), errorSchema]);
var openaiCompatibleCompletionResponseSchema = objectType({
	id: stringType().nullish(),
	created: numberType().nullish(),
	model: stringType().nullish(),
	choices: arrayType(objectType({
		text: stringType(),
		finish_reason: stringType()
	})),
	usage: objectType({
		prompt_tokens: numberType(),
		completion_tokens: numberType()
	}).nullish()
});
var openaiTextEmbeddingResponseSchema = objectType({
	data: arrayType(objectType({ embedding: arrayType(numberType()) })),
	usage: objectType({ prompt_tokens: numberType() }).nullish()
});
var OpenAICompatibleImageModel = class {
	constructor(modelId, settings, config) {
		this.modelId = modelId;
		this.settings = settings;
		this.config = config;
		this.specificationVersion = "v1";
	}
	get maxImagesPerCall() {
		var _a$3;
		return (_a$3 = this.settings.maxImagesPerCall) != null ? _a$3 : 10;
	}
	get provider() {
		return this.config.provider;
	}
	async doGenerate({ prompt, n: n$1, size, aspectRatio, seed, providerOptions, headers, abortSignal }) {
		var _a$3, _b, _c, _d, _e;
		const warnings = [];
		if (aspectRatio != null) warnings.push({
			type: "unsupported-setting",
			setting: "aspectRatio",
			details: "This model does not support aspect ratio. Use `size` instead."
		});
		if (seed != null) warnings.push({
			type: "unsupported-setting",
			setting: "seed"
		});
		const currentDate = (_c = (_b = (_a$3 = this.config._internal) == null ? void 0 : _a$3.currentDate) == null ? void 0 : _b.call(_a$3)) != null ? _c : /* @__PURE__ */ new Date();
		const { value: response, responseHeaders } = await postJsonToApi({
			url: this.config.url({
				path: "/images/generations",
				modelId: this.modelId
			}),
			headers: combineHeaders(this.config.headers(), headers),
			body: {
				model: this.modelId,
				prompt,
				n: n$1,
				size,
				...(_d = providerOptions.openai) != null ? _d : {},
				response_format: "b64_json",
				...this.settings.user ? { user: this.settings.user } : {}
			},
			failedResponseHandler: createJsonErrorResponseHandler((_e = this.config.errorStructure) != null ? _e : defaultOpenAICompatibleErrorStructure),
			successfulResponseHandler: createJsonResponseHandler(openaiCompatibleImageResponseSchema),
			abortSignal,
			fetch: this.config.fetch
		});
		return {
			images: response.data.map((item) => item.b64_json),
			warnings,
			response: {
				timestamp: currentDate,
				modelId: this.modelId,
				headers: responseHeaders
			}
		};
	}
};
var openaiCompatibleImageResponseSchema = objectType({ data: arrayType(objectType({ b64_json: stringType() })) });

//#endregion
//#region node_modules/.pnpm/@ai-sdk+deepseek@0.2.16_zod@3.25.76/node_modules/@ai-sdk/deepseek/dist/index.mjs
var buildDeepseekMetadata = (usage) => {
	var _a$3, _b;
	return usage == null ? void 0 : { deepseek: {
		promptCacheHitTokens: (_a$3 = usage.prompt_cache_hit_tokens) != null ? _a$3 : NaN,
		promptCacheMissTokens: (_b = usage.prompt_cache_miss_tokens) != null ? _b : NaN
	} };
};
var deepSeekMetadataExtractor = {
	extractMetadata: ({ parsedBody }) => {
		const parsed = safeValidateTypes({
			value: parsedBody,
			schema: deepSeekResponseSchema
		});
		return !parsed.success || parsed.value.usage == null ? void 0 : buildDeepseekMetadata(parsed.value.usage);
	},
	createStreamExtractor: () => {
		let usage;
		return {
			processChunk: (chunk) => {
				var _a$3, _b;
				const parsed = safeValidateTypes({
					value: chunk,
					schema: deepSeekStreamChunkSchema
				});
				if (parsed.success && ((_b = (_a$3 = parsed.value.choices) == null ? void 0 : _a$3[0]) == null ? void 0 : _b.finish_reason) === "stop" && parsed.value.usage) usage = parsed.value.usage;
			},
			buildMetadata: () => buildDeepseekMetadata(usage)
		};
	}
};
var deepSeekUsageSchema = objectType({
	prompt_cache_hit_tokens: numberType().nullish(),
	prompt_cache_miss_tokens: numberType().nullish()
});
var deepSeekResponseSchema = objectType({ usage: deepSeekUsageSchema.nullish() });
var deepSeekStreamChunkSchema = objectType({
	choices: arrayType(objectType({ finish_reason: stringType().nullish() })).nullish(),
	usage: deepSeekUsageSchema.nullish()
});
function createDeepSeek(options = {}) {
	var _a$3;
	const baseURL = withoutTrailingSlash((_a$3 = options.baseURL) != null ? _a$3 : "https://api.deepseek.com/v1");
	const getHeaders = () => ({
		Authorization: `Bearer ${loadApiKey({
			apiKey: options.apiKey,
			environmentVariableName: "DEEPSEEK_API_KEY",
			description: "DeepSeek API key"
		})}`,
		...options.headers
	});
	const createLanguageModel = (modelId, settings = {}) => {
		return new OpenAICompatibleChatLanguageModel(modelId, settings, {
			provider: `deepseek.chat`,
			url: ({ path: path$9 }) => `${baseURL}${path$9}`,
			headers: getHeaders,
			fetch: options.fetch,
			defaultObjectGenerationMode: "json",
			metadataExtractor: deepSeekMetadataExtractor
		});
	};
	const provider = (modelId, settings) => createLanguageModel(modelId, settings);
	provider.languageModel = createLanguageModel;
	provider.chat = createLanguageModel;
	provider.textEmbeddingModel = (modelId) => {
		throw new NoSuchModelError({
			modelId,
			modelType: "textEmbeddingModel"
		});
	};
	return provider;
}
var deepseek = createDeepSeek();

//#endregion
//#region node_modules/.pnpm/@ai-sdk+xai@1.2.18_zod@3.25.76/node_modules/@ai-sdk/xai/dist/index.mjs
function supportsStructuredOutputs(modelId) {
	return [
		"grok-3",
		"grok-3-beta",
		"grok-3-latest",
		"grok-3-fast",
		"grok-3-fast-beta",
		"grok-3-fast-latest",
		"grok-3-mini",
		"grok-3-mini-beta",
		"grok-3-mini-latest",
		"grok-3-mini-fast",
		"grok-3-mini-fast-beta",
		"grok-3-mini-fast-latest",
		"grok-2-1212",
		"grok-2-vision-1212"
	].includes(modelId);
}
var xaiErrorSchema = objectType({
	code: stringType(),
	error: stringType()
});
var xaiErrorStructure = {
	errorSchema: xaiErrorSchema,
	errorToMessage: (data$1) => data$1.error
};
function createXai(options = {}) {
	var _a$3;
	const baseURL = withoutTrailingSlash((_a$3 = options.baseURL) != null ? _a$3 : "https://api.x.ai/v1");
	const getHeaders = () => ({
		Authorization: `Bearer ${loadApiKey({
			apiKey: options.apiKey,
			environmentVariableName: "XAI_API_KEY",
			description: "xAI API key"
		})}`,
		...options.headers
	});
	const createLanguageModel = (modelId, settings = {}) => {
		const structuredOutputs = supportsStructuredOutputs(modelId);
		return new OpenAICompatibleChatLanguageModel(modelId, settings, {
			provider: "xai.chat",
			url: ({ path: path$9 }) => `${baseURL}${path$9}`,
			headers: getHeaders,
			fetch: options.fetch,
			defaultObjectGenerationMode: structuredOutputs ? "json" : "tool",
			errorStructure: xaiErrorStructure,
			supportsStructuredOutputs: structuredOutputs,
			includeUsage: true
		});
	};
	const createImageModel = (modelId, settings = {}) => {
		return new OpenAICompatibleImageModel(modelId, settings, {
			provider: "xai.image",
			url: ({ path: path$9 }) => `${baseURL}${path$9}`,
			headers: getHeaders,
			fetch: options.fetch,
			errorStructure: xaiErrorStructure
		});
	};
	const provider = (modelId, settings) => createLanguageModel(modelId, settings);
	provider.languageModel = createLanguageModel;
	provider.chat = createLanguageModel;
	provider.textEmbeddingModel = (modelId) => {
		throw new NoSuchModelError({
			modelId,
			modelType: "textEmbeddingModel"
		});
	};
	provider.imageModel = createImageModel;
	provider.image = createImageModel;
	return provider;
}
var xai = createXai();

//#endregion
//#region node_modules/.pnpm/@ai-sdk+anthropic@1.2.12_zod@3.25.76/node_modules/@ai-sdk/anthropic/dist/index.mjs
var anthropicErrorDataSchema = objectType({
	type: literalType("error"),
	error: objectType({
		type: stringType(),
		message: stringType()
	})
});
var anthropicFailedResponseHandler = createJsonErrorResponseHandler({
	errorSchema: anthropicErrorDataSchema,
	errorToMessage: (data$1) => data$1.error.message
});
function prepareTools$1(mode) {
	var _a$3;
	const tools$1 = ((_a$3 = mode.tools) == null ? void 0 : _a$3.length) ? mode.tools : void 0;
	const toolWarnings = [];
	const betas = /* @__PURE__ */ new Set();
	if (tools$1 == null) return {
		tools: void 0,
		tool_choice: void 0,
		toolWarnings,
		betas
	};
	const anthropicTools2 = [];
	for (const tool$1 of tools$1) switch (tool$1.type) {
		case "function":
			anthropicTools2.push({
				name: tool$1.name,
				description: tool$1.description,
				input_schema: tool$1.parameters
			});
			break;
		case "provider-defined":
			switch (tool$1.id) {
				case "anthropic.computer_20250124":
					betas.add("computer-use-2025-01-24");
					anthropicTools2.push({
						name: tool$1.name,
						type: "computer_20250124",
						display_width_px: tool$1.args.displayWidthPx,
						display_height_px: tool$1.args.displayHeightPx,
						display_number: tool$1.args.displayNumber
					});
					break;
				case "anthropic.computer_20241022":
					betas.add("computer-use-2024-10-22");
					anthropicTools2.push({
						name: tool$1.name,
						type: "computer_20241022",
						display_width_px: tool$1.args.displayWidthPx,
						display_height_px: tool$1.args.displayHeightPx,
						display_number: tool$1.args.displayNumber
					});
					break;
				case "anthropic.text_editor_20250124":
					betas.add("computer-use-2025-01-24");
					anthropicTools2.push({
						name: tool$1.name,
						type: "text_editor_20250124"
					});
					break;
				case "anthropic.text_editor_20241022":
					betas.add("computer-use-2024-10-22");
					anthropicTools2.push({
						name: tool$1.name,
						type: "text_editor_20241022"
					});
					break;
				case "anthropic.bash_20250124":
					betas.add("computer-use-2025-01-24");
					anthropicTools2.push({
						name: tool$1.name,
						type: "bash_20250124"
					});
					break;
				case "anthropic.bash_20241022":
					betas.add("computer-use-2024-10-22");
					anthropicTools2.push({
						name: tool$1.name,
						type: "bash_20241022"
					});
					break;
				default:
					toolWarnings.push({
						type: "unsupported-tool",
						tool: tool$1
					});
					break;
			}
			break;
		default:
			toolWarnings.push({
				type: "unsupported-tool",
				tool: tool$1
			});
			break;
	}
	const toolChoice = mode.toolChoice;
	if (toolChoice == null) return {
		tools: anthropicTools2,
		tool_choice: void 0,
		toolWarnings,
		betas
	};
	const type = toolChoice.type;
	switch (type) {
		case "auto": return {
			tools: anthropicTools2,
			tool_choice: { type: "auto" },
			toolWarnings,
			betas
		};
		case "required": return {
			tools: anthropicTools2,
			tool_choice: { type: "any" },
			toolWarnings,
			betas
		};
		case "none": return {
			tools: void 0,
			tool_choice: void 0,
			toolWarnings,
			betas
		};
		case "tool": return {
			tools: anthropicTools2,
			tool_choice: {
				type: "tool",
				name: toolChoice.toolName
			},
			toolWarnings,
			betas
		};
		default: {
			const _exhaustiveCheck = type;
			throw new UnsupportedFunctionalityError({ functionality: `Unsupported tool choice type: ${_exhaustiveCheck}` });
		}
	}
}
function convertToAnthropicMessagesPrompt({ prompt, sendReasoning, warnings }) {
	var _a$3, _b, _c, _d;
	const betas = /* @__PURE__ */ new Set();
	const blocks = groupIntoBlocks(prompt);
	let system = void 0;
	const messages = [];
	function getCacheControl(providerMetadata) {
		var _a2$2;
		const anthropic2 = providerMetadata == null ? void 0 : providerMetadata.anthropic;
		const cacheControlValue = (_a2$2 = anthropic2 == null ? void 0 : anthropic2.cacheControl) != null ? _a2$2 : anthropic2 == null ? void 0 : anthropic2.cache_control;
		return cacheControlValue;
	}
	for (let i$1 = 0; i$1 < blocks.length; i$1++) {
		const block = blocks[i$1];
		const isLastBlock = i$1 === blocks.length - 1;
		const type = block.type;
		switch (type) {
			case "system": {
				if (system != null) throw new UnsupportedFunctionalityError({ functionality: "Multiple system messages that are separated by user/assistant messages" });
				system = block.messages.map(({ content, providerMetadata }) => ({
					type: "text",
					text: content,
					cache_control: getCacheControl(providerMetadata)
				}));
				break;
			}
			case "user": {
				const anthropicContent = [];
				for (const message of block.messages) {
					const { role, content } = message;
					switch (role) {
						case "user": {
							for (let j = 0; j < content.length; j++) {
								const part = content[j];
								const isLastPart = j === content.length - 1;
								const cacheControl = (_a$3 = getCacheControl(part.providerMetadata)) != null ? _a$3 : isLastPart ? getCacheControl(message.providerMetadata) : void 0;
								switch (part.type) {
									case "text": {
										anthropicContent.push({
											type: "text",
											text: part.text,
											cache_control: cacheControl
										});
										break;
									}
									case "image": {
										anthropicContent.push({
											type: "image",
											source: part.image instanceof URL ? {
												type: "url",
												url: part.image.toString()
											} : {
												type: "base64",
												media_type: (_b = part.mimeType) != null ? _b : "image/jpeg",
												data: convertUint8ArrayToBase64(part.image)
											},
											cache_control: cacheControl
										});
										break;
									}
									case "file": {
										if (part.mimeType !== "application/pdf") throw new UnsupportedFunctionalityError({ functionality: "Non-PDF files in user messages" });
										betas.add("pdfs-2024-09-25");
										anthropicContent.push({
											type: "document",
											source: part.data instanceof URL ? {
												type: "url",
												url: part.data.toString()
											} : {
												type: "base64",
												media_type: "application/pdf",
												data: part.data
											},
											cache_control: cacheControl
										});
										break;
									}
								}
							}
							break;
						}
						case "tool": {
							for (let i2 = 0; i2 < content.length; i2++) {
								const part = content[i2];
								const isLastPart = i2 === content.length - 1;
								const cacheControl = (_c = getCacheControl(part.providerMetadata)) != null ? _c : isLastPart ? getCacheControl(message.providerMetadata) : void 0;
								const toolResultContent = part.content != null ? part.content.map((part2) => {
									var _a2$2;
									switch (part2.type) {
										case "text": return {
											type: "text",
											text: part2.text,
											cache_control: void 0
										};
										case "image": return {
											type: "image",
											source: {
												type: "base64",
												media_type: (_a2$2 = part2.mimeType) != null ? _a2$2 : "image/jpeg",
												data: part2.data
											},
											cache_control: void 0
										};
									}
								}) : JSON.stringify(part.result);
								anthropicContent.push({
									type: "tool_result",
									tool_use_id: part.toolCallId,
									content: toolResultContent,
									is_error: part.isError,
									cache_control: cacheControl
								});
							}
							break;
						}
						default: {
							const _exhaustiveCheck = role;
							throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
						}
					}
				}
				messages.push({
					role: "user",
					content: anthropicContent
				});
				break;
			}
			case "assistant": {
				const anthropicContent = [];
				for (let j = 0; j < block.messages.length; j++) {
					const message = block.messages[j];
					const isLastMessage = j === block.messages.length - 1;
					const { content } = message;
					for (let k = 0; k < content.length; k++) {
						const part = content[k];
						const isLastContentPart = k === content.length - 1;
						const cacheControl = (_d = getCacheControl(part.providerMetadata)) != null ? _d : isLastContentPart ? getCacheControl(message.providerMetadata) : void 0;
						switch (part.type) {
							case "text": {
								anthropicContent.push({
									type: "text",
									text: isLastBlock && isLastMessage && isLastContentPart ? part.text.trim() : part.text,
									cache_control: cacheControl
								});
								break;
							}
							case "reasoning": {
								if (sendReasoning) anthropicContent.push({
									type: "thinking",
									thinking: part.text,
									signature: part.signature,
									cache_control: cacheControl
								});
								else warnings.push({
									type: "other",
									message: "sending reasoning content is disabled for this model"
								});
								break;
							}
							case "redacted-reasoning": {
								anthropicContent.push({
									type: "redacted_thinking",
									data: part.data,
									cache_control: cacheControl
								});
								break;
							}
							case "tool-call": {
								anthropicContent.push({
									type: "tool_use",
									id: part.toolCallId,
									name: part.toolName,
									input: part.args,
									cache_control: cacheControl
								});
								break;
							}
						}
					}
				}
				messages.push({
					role: "assistant",
					content: anthropicContent
				});
				break;
			}
			default: {
				const _exhaustiveCheck = type;
				throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
			}
		}
	}
	return {
		prompt: {
			system,
			messages
		},
		betas
	};
}
function groupIntoBlocks(prompt) {
	const blocks = [];
	let currentBlock = void 0;
	for (const message of prompt) {
		const { role } = message;
		switch (role) {
			case "system": {
				if ((currentBlock == null ? void 0 : currentBlock.type) !== "system") {
					currentBlock = {
						type: "system",
						messages: []
					};
					blocks.push(currentBlock);
				}
				currentBlock.messages.push(message);
				break;
			}
			case "assistant": {
				if ((currentBlock == null ? void 0 : currentBlock.type) !== "assistant") {
					currentBlock = {
						type: "assistant",
						messages: []
					};
					blocks.push(currentBlock);
				}
				currentBlock.messages.push(message);
				break;
			}
			case "user": {
				if ((currentBlock == null ? void 0 : currentBlock.type) !== "user") {
					currentBlock = {
						type: "user",
						messages: []
					};
					blocks.push(currentBlock);
				}
				currentBlock.messages.push(message);
				break;
			}
			case "tool": {
				if ((currentBlock == null ? void 0 : currentBlock.type) !== "user") {
					currentBlock = {
						type: "user",
						messages: []
					};
					blocks.push(currentBlock);
				}
				currentBlock.messages.push(message);
				break;
			}
			default: {
				const _exhaustiveCheck = role;
				throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
			}
		}
	}
	return blocks;
}
function mapAnthropicStopReason(finishReason) {
	switch (finishReason) {
		case "end_turn":
		case "stop_sequence": return "stop";
		case "tool_use": return "tool-calls";
		case "max_tokens": return "length";
		default: return "unknown";
	}
}
var AnthropicMessagesLanguageModel = class {
	constructor(modelId, settings, config) {
		this.specificationVersion = "v1";
		this.defaultObjectGenerationMode = "tool";
		this.modelId = modelId;
		this.settings = settings;
		this.config = config;
	}
	supportsUrl(url) {
		return url.protocol === "https:";
	}
	get provider() {
		return this.config.provider;
	}
	get supportsImageUrls() {
		return this.config.supportsImageUrls;
	}
	async getArgs({ mode, prompt, maxTokens = 4096, temperature, topP, topK, frequencyPenalty, presencePenalty, stopSequences, responseFormat, seed, providerMetadata: providerOptions }) {
		var _a$3, _b, _c;
		const type = mode.type;
		const warnings = [];
		if (frequencyPenalty != null) warnings.push({
			type: "unsupported-setting",
			setting: "frequencyPenalty"
		});
		if (presencePenalty != null) warnings.push({
			type: "unsupported-setting",
			setting: "presencePenalty"
		});
		if (seed != null) warnings.push({
			type: "unsupported-setting",
			setting: "seed"
		});
		if (responseFormat != null && responseFormat.type !== "text") warnings.push({
			type: "unsupported-setting",
			setting: "responseFormat",
			details: "JSON response format is not supported."
		});
		const { prompt: messagesPrompt, betas: messagesBetas } = convertToAnthropicMessagesPrompt({
			prompt,
			sendReasoning: (_a$3 = this.settings.sendReasoning) != null ? _a$3 : true,
			warnings
		});
		const anthropicOptions = parseProviderOptions({
			provider: "anthropic",
			providerOptions,
			schema: anthropicProviderOptionsSchema
		});
		const isThinking = ((_b = anthropicOptions == null ? void 0 : anthropicOptions.thinking) == null ? void 0 : _b.type) === "enabled";
		const thinkingBudget = (_c = anthropicOptions == null ? void 0 : anthropicOptions.thinking) == null ? void 0 : _c.budgetTokens;
		const baseArgs = {
			model: this.modelId,
			max_tokens: maxTokens,
			temperature,
			top_k: topK,
			top_p: topP,
			stop_sequences: stopSequences,
			...isThinking && { thinking: {
				type: "enabled",
				budget_tokens: thinkingBudget
			} },
			system: messagesPrompt.system,
			messages: messagesPrompt.messages
		};
		if (isThinking) {
			if (thinkingBudget == null) throw new UnsupportedFunctionalityError({ functionality: "thinking requires a budget" });
			if (baseArgs.temperature != null) {
				baseArgs.temperature = void 0;
				warnings.push({
					type: "unsupported-setting",
					setting: "temperature",
					details: "temperature is not supported when thinking is enabled"
				});
			}
			if (topK != null) {
				baseArgs.top_k = void 0;
				warnings.push({
					type: "unsupported-setting",
					setting: "topK",
					details: "topK is not supported when thinking is enabled"
				});
			}
			if (topP != null) {
				baseArgs.top_p = void 0;
				warnings.push({
					type: "unsupported-setting",
					setting: "topP",
					details: "topP is not supported when thinking is enabled"
				});
			}
			baseArgs.max_tokens = maxTokens + thinkingBudget;
		}
		switch (type) {
			case "regular": {
				const { tools: tools$1, tool_choice, toolWarnings, betas: toolsBetas } = prepareTools$1(mode);
				return {
					args: {
						...baseArgs,
						tools: tools$1,
						tool_choice
					},
					warnings: [...warnings, ...toolWarnings],
					betas: /* @__PURE__ */ new Set([...messagesBetas, ...toolsBetas])
				};
			}
			case "object-json": throw new UnsupportedFunctionalityError({ functionality: "json-mode object generation" });
			case "object-tool": {
				const { name: name$2, description, parameters } = mode.tool;
				return {
					args: {
						...baseArgs,
						tools: [{
							name: name$2,
							description,
							input_schema: parameters
						}],
						tool_choice: {
							type: "tool",
							name: name$2
						}
					},
					warnings,
					betas: messagesBetas
				};
			}
			default: {
				const _exhaustiveCheck = type;
				throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
			}
		}
	}
	async getHeaders({ betas, headers }) {
		return combineHeaders(await resolve(this.config.headers), betas.size > 0 ? { "anthropic-beta": Array.from(betas).join(",") } : {}, headers);
	}
	buildRequestUrl(isStreaming) {
		var _a$3, _b, _c;
		return (_c = (_b = (_a$3 = this.config).buildRequestUrl) == null ? void 0 : _b.call(_a$3, this.config.baseURL, isStreaming)) != null ? _c : `${this.config.baseURL}/messages`;
	}
	transformRequestBody(args) {
		var _a$3, _b, _c;
		return (_c = (_b = (_a$3 = this.config).transformRequestBody) == null ? void 0 : _b.call(_a$3, args)) != null ? _c : args;
	}
	async doGenerate(options) {
		var _a$3, _b, _c, _d;
		const { args, warnings, betas } = await this.getArgs(options);
		const { responseHeaders, value: response, rawValue: rawResponse } = await postJsonToApi({
			url: this.buildRequestUrl(false),
			headers: await this.getHeaders({
				betas,
				headers: options.headers
			}),
			body: this.transformRequestBody(args),
			failedResponseHandler: anthropicFailedResponseHandler,
			successfulResponseHandler: createJsonResponseHandler(anthropicMessagesResponseSchema),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		const { messages: rawPrompt,...rawSettings } = args;
		let text$1 = "";
		for (const content of response.content) if (content.type === "text") text$1 += content.text;
		let toolCalls = void 0;
		if (response.content.some((content) => content.type === "tool_use")) {
			toolCalls = [];
			for (const content of response.content) if (content.type === "tool_use") toolCalls.push({
				toolCallType: "function",
				toolCallId: content.id,
				toolName: content.name,
				args: JSON.stringify(content.input)
			});
		}
		const reasoning = response.content.filter((content) => content.type === "redacted_thinking" || content.type === "thinking").map((content) => content.type === "thinking" ? {
			type: "text",
			text: content.thinking,
			signature: content.signature
		} : {
			type: "redacted",
			data: content.data
		});
		return {
			text: text$1,
			reasoning: reasoning.length > 0 ? reasoning : void 0,
			toolCalls,
			finishReason: mapAnthropicStopReason(response.stop_reason),
			usage: {
				promptTokens: response.usage.input_tokens,
				completionTokens: response.usage.output_tokens
			},
			rawCall: {
				rawPrompt,
				rawSettings
			},
			rawResponse: {
				headers: responseHeaders,
				body: rawResponse
			},
			response: {
				id: (_a$3 = response.id) != null ? _a$3 : void 0,
				modelId: (_b = response.model) != null ? _b : void 0
			},
			warnings,
			providerMetadata: { anthropic: {
				cacheCreationInputTokens: (_c = response.usage.cache_creation_input_tokens) != null ? _c : null,
				cacheReadInputTokens: (_d = response.usage.cache_read_input_tokens) != null ? _d : null
			} },
			request: { body: JSON.stringify(args) }
		};
	}
	async doStream(options) {
		const { args, warnings, betas } = await this.getArgs(options);
		const body = {
			...args,
			stream: true
		};
		const { responseHeaders, value: response } = await postJsonToApi({
			url: this.buildRequestUrl(true),
			headers: await this.getHeaders({
				betas,
				headers: options.headers
			}),
			body: this.transformRequestBody(body),
			failedResponseHandler: anthropicFailedResponseHandler,
			successfulResponseHandler: createEventSourceResponseHandler(anthropicMessagesChunkSchema),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		const { messages: rawPrompt,...rawSettings } = args;
		let finishReason = "unknown";
		const usage = {
			promptTokens: NaN,
			completionTokens: NaN
		};
		const toolCallContentBlocks = {};
		let providerMetadata = void 0;
		let blockType = void 0;
		return {
			stream: response.pipeThrough(new TransformStream({ transform(chunk, controller) {
				var _a$3, _b, _c, _d;
				if (!chunk.success) {
					controller.enqueue({
						type: "error",
						error: chunk.error
					});
					return;
				}
				const value = chunk.value;
				switch (value.type) {
					case "ping": return;
					case "content_block_start": {
						const contentBlockType = value.content_block.type;
						blockType = contentBlockType;
						switch (contentBlockType) {
							case "text":
							case "thinking": return;
							case "redacted_thinking": {
								controller.enqueue({
									type: "redacted-reasoning",
									data: value.content_block.data
								});
								return;
							}
							case "tool_use": {
								toolCallContentBlocks[value.index] = {
									toolCallId: value.content_block.id,
									toolName: value.content_block.name,
									jsonText: ""
								};
								return;
							}
							default: {
								const _exhaustiveCheck = contentBlockType;
								throw new Error(`Unsupported content block type: ${_exhaustiveCheck}`);
							}
						}
					}
					case "content_block_stop": {
						if (toolCallContentBlocks[value.index] != null) {
							const contentBlock = toolCallContentBlocks[value.index];
							controller.enqueue({
								type: "tool-call",
								toolCallType: "function",
								toolCallId: contentBlock.toolCallId,
								toolName: contentBlock.toolName,
								args: contentBlock.jsonText
							});
							delete toolCallContentBlocks[value.index];
						}
						blockType = void 0;
						return;
					}
					case "content_block_delta": {
						const deltaType = value.delta.type;
						switch (deltaType) {
							case "text_delta": {
								controller.enqueue({
									type: "text-delta",
									textDelta: value.delta.text
								});
								return;
							}
							case "thinking_delta": {
								controller.enqueue({
									type: "reasoning",
									textDelta: value.delta.thinking
								});
								return;
							}
							case "signature_delta": {
								if (blockType === "thinking") controller.enqueue({
									type: "reasoning-signature",
									signature: value.delta.signature
								});
								return;
							}
							case "input_json_delta": {
								const contentBlock = toolCallContentBlocks[value.index];
								controller.enqueue({
									type: "tool-call-delta",
									toolCallType: "function",
									toolCallId: contentBlock.toolCallId,
									toolName: contentBlock.toolName,
									argsTextDelta: value.delta.partial_json
								});
								contentBlock.jsonText += value.delta.partial_json;
								return;
							}
							default: {
								const _exhaustiveCheck = deltaType;
								throw new Error(`Unsupported delta type: ${_exhaustiveCheck}`);
							}
						}
					}
					case "message_start": {
						usage.promptTokens = value.message.usage.input_tokens;
						usage.completionTokens = value.message.usage.output_tokens;
						providerMetadata = { anthropic: {
							cacheCreationInputTokens: (_a$3 = value.message.usage.cache_creation_input_tokens) != null ? _a$3 : null,
							cacheReadInputTokens: (_b = value.message.usage.cache_read_input_tokens) != null ? _b : null
						} };
						controller.enqueue({
							type: "response-metadata",
							id: (_c = value.message.id) != null ? _c : void 0,
							modelId: (_d = value.message.model) != null ? _d : void 0
						});
						return;
					}
					case "message_delta": {
						usage.completionTokens = value.usage.output_tokens;
						finishReason = mapAnthropicStopReason(value.delta.stop_reason);
						return;
					}
					case "message_stop": {
						controller.enqueue({
							type: "finish",
							finishReason,
							usage,
							providerMetadata
						});
						return;
					}
					case "error": {
						controller.enqueue({
							type: "error",
							error: value.error
						});
						return;
					}
					default: {
						const _exhaustiveCheck = value;
						throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);
					}
				}
			} })),
			rawCall: {
				rawPrompt,
				rawSettings
			},
			rawResponse: { headers: responseHeaders },
			warnings,
			request: { body: JSON.stringify(body) }
		};
	}
};
var anthropicMessagesResponseSchema = objectType({
	type: literalType("message"),
	id: stringType().nullish(),
	model: stringType().nullish(),
	content: arrayType(discriminatedUnionType("type", [
		objectType({
			type: literalType("text"),
			text: stringType()
		}),
		objectType({
			type: literalType("thinking"),
			thinking: stringType(),
			signature: stringType()
		}),
		objectType({
			type: literalType("redacted_thinking"),
			data: stringType()
		}),
		objectType({
			type: literalType("tool_use"),
			id: stringType(),
			name: stringType(),
			input: unknownType()
		})
	])),
	stop_reason: stringType().nullish(),
	usage: objectType({
		input_tokens: numberType(),
		output_tokens: numberType(),
		cache_creation_input_tokens: numberType().nullish(),
		cache_read_input_tokens: numberType().nullish()
	})
});
var anthropicMessagesChunkSchema = discriminatedUnionType("type", [
	objectType({
		type: literalType("message_start"),
		message: objectType({
			id: stringType().nullish(),
			model: stringType().nullish(),
			usage: objectType({
				input_tokens: numberType(),
				output_tokens: numberType(),
				cache_creation_input_tokens: numberType().nullish(),
				cache_read_input_tokens: numberType().nullish()
			})
		})
	}),
	objectType({
		type: literalType("content_block_start"),
		index: numberType(),
		content_block: discriminatedUnionType("type", [
			objectType({
				type: literalType("text"),
				text: stringType()
			}),
			objectType({
				type: literalType("thinking"),
				thinking: stringType()
			}),
			objectType({
				type: literalType("tool_use"),
				id: stringType(),
				name: stringType()
			}),
			objectType({
				type: literalType("redacted_thinking"),
				data: stringType()
			})
		])
	}),
	objectType({
		type: literalType("content_block_delta"),
		index: numberType(),
		delta: discriminatedUnionType("type", [
			objectType({
				type: literalType("input_json_delta"),
				partial_json: stringType()
			}),
			objectType({
				type: literalType("text_delta"),
				text: stringType()
			}),
			objectType({
				type: literalType("thinking_delta"),
				thinking: stringType()
			}),
			objectType({
				type: literalType("signature_delta"),
				signature: stringType()
			})
		])
	}),
	objectType({
		type: literalType("content_block_stop"),
		index: numberType()
	}),
	objectType({
		type: literalType("error"),
		error: objectType({
			type: stringType(),
			message: stringType()
		})
	}),
	objectType({
		type: literalType("message_delta"),
		delta: objectType({ stop_reason: stringType().nullish() }),
		usage: objectType({ output_tokens: numberType() })
	}),
	objectType({ type: literalType("message_stop") }),
	objectType({ type: literalType("ping") })
]);
var anthropicProviderOptionsSchema = objectType({ thinking: objectType({
	type: unionType([literalType("enabled"), literalType("disabled")]),
	budgetTokens: numberType().optional()
}).optional() });
var Bash20241022Parameters = objectType({
	command: stringType(),
	restart: booleanType().optional()
});
function bashTool_20241022(options = {}) {
	return {
		type: "provider-defined",
		id: "anthropic.bash_20241022",
		args: {},
		parameters: Bash20241022Parameters,
		execute: options.execute,
		experimental_toToolResultContent: options.experimental_toToolResultContent
	};
}
var Bash20250124Parameters = objectType({
	command: stringType(),
	restart: booleanType().optional()
});
function bashTool_20250124(options = {}) {
	return {
		type: "provider-defined",
		id: "anthropic.bash_20250124",
		args: {},
		parameters: Bash20250124Parameters,
		execute: options.execute,
		experimental_toToolResultContent: options.experimental_toToolResultContent
	};
}
var TextEditor20241022Parameters = objectType({
	command: enumType([
		"view",
		"create",
		"str_replace",
		"insert",
		"undo_edit"
	]),
	path: stringType(),
	file_text: stringType().optional(),
	insert_line: numberType().int().optional(),
	new_str: stringType().optional(),
	old_str: stringType().optional(),
	view_range: arrayType(numberType().int()).optional()
});
function textEditorTool_20241022(options = {}) {
	return {
		type: "provider-defined",
		id: "anthropic.text_editor_20241022",
		args: {},
		parameters: TextEditor20241022Parameters,
		execute: options.execute,
		experimental_toToolResultContent: options.experimental_toToolResultContent
	};
}
var TextEditor20250124Parameters = objectType({
	command: enumType([
		"view",
		"create",
		"str_replace",
		"insert",
		"undo_edit"
	]),
	path: stringType(),
	file_text: stringType().optional(),
	insert_line: numberType().int().optional(),
	new_str: stringType().optional(),
	old_str: stringType().optional(),
	view_range: arrayType(numberType().int()).optional()
});
function textEditorTool_20250124(options = {}) {
	return {
		type: "provider-defined",
		id: "anthropic.text_editor_20250124",
		args: {},
		parameters: TextEditor20250124Parameters,
		execute: options.execute,
		experimental_toToolResultContent: options.experimental_toToolResultContent
	};
}
var Computer20241022Parameters = objectType({
	action: enumType([
		"key",
		"type",
		"mouse_move",
		"left_click",
		"left_click_drag",
		"right_click",
		"middle_click",
		"double_click",
		"screenshot",
		"cursor_position"
	]),
	coordinate: arrayType(numberType().int()).optional(),
	text: stringType().optional()
});
function computerTool_20241022(options) {
	return {
		type: "provider-defined",
		id: "anthropic.computer_20241022",
		args: {
			displayWidthPx: options.displayWidthPx,
			displayHeightPx: options.displayHeightPx,
			displayNumber: options.displayNumber
		},
		parameters: Computer20241022Parameters,
		execute: options.execute,
		experimental_toToolResultContent: options.experimental_toToolResultContent
	};
}
var Computer20250124Parameters = objectType({
	action: enumType([
		"key",
		"hold_key",
		"type",
		"cursor_position",
		"mouse_move",
		"left_mouse_down",
		"left_mouse_up",
		"left_click",
		"left_click_drag",
		"right_click",
		"middle_click",
		"double_click",
		"triple_click",
		"scroll",
		"wait",
		"screenshot"
	]),
	coordinate: tupleType([numberType().int(), numberType().int()]).optional(),
	duration: numberType().optional(),
	scroll_amount: numberType().optional(),
	scroll_direction: enumType([
		"up",
		"down",
		"left",
		"right"
	]).optional(),
	start_coordinate: tupleType([numberType().int(), numberType().int()]).optional(),
	text: stringType().optional()
});
function computerTool_20250124(options) {
	return {
		type: "provider-defined",
		id: "anthropic.computer_20250124",
		args: {
			displayWidthPx: options.displayWidthPx,
			displayHeightPx: options.displayHeightPx,
			displayNumber: options.displayNumber
		},
		parameters: Computer20250124Parameters,
		execute: options.execute,
		experimental_toToolResultContent: options.experimental_toToolResultContent
	};
}
var anthropicTools = {
	bash_20241022: bashTool_20241022,
	bash_20250124: bashTool_20250124,
	textEditor_20241022: textEditorTool_20241022,
	textEditor_20250124: textEditorTool_20250124,
	computer_20241022: computerTool_20241022,
	computer_20250124: computerTool_20250124
};
function createAnthropic(options = {}) {
	var _a$3;
	const baseURL = (_a$3 = withoutTrailingSlash(options.baseURL)) != null ? _a$3 : "https://api.anthropic.com/v1";
	const getHeaders = () => ({
		"anthropic-version": "2023-06-01",
		"x-api-key": loadApiKey({
			apiKey: options.apiKey,
			environmentVariableName: "ANTHROPIC_API_KEY",
			description: "Anthropic"
		}),
		...options.headers
	});
	const createChatModel = (modelId, settings = {}) => new AnthropicMessagesLanguageModel(modelId, settings, {
		provider: "anthropic.messages",
		baseURL,
		headers: getHeaders,
		fetch: options.fetch,
		supportsImageUrls: true
	});
	const provider = function(modelId, settings) {
		if (new.target) throw new Error("The Anthropic model function cannot be called with the new keyword.");
		return createChatModel(modelId, settings);
	};
	provider.languageModel = createChatModel;
	provider.chat = createChatModel;
	provider.messages = createChatModel;
	provider.textEmbeddingModel = (modelId) => {
		throw new NoSuchModelError({
			modelId,
			modelType: "textEmbeddingModel"
		});
	};
	provider.tools = anthropicTools;
	return provider;
}
var anthropic = createAnthropic();

//#endregion
//#region node_modules/.pnpm/@ai-sdk+google@1.2.22_zod@3.25.76/node_modules/@ai-sdk/google/dist/index.mjs
function convertJSONSchemaToOpenAPISchema(jsonSchema$1) {
	if (isEmptyObjectSchema(jsonSchema$1)) return void 0;
	if (typeof jsonSchema$1 === "boolean") return {
		type: "boolean",
		properties: {}
	};
	const { type, description, required, properties, items, allOf, anyOf, oneOf, format: format$1, const: constValue, minLength, enum: enumValues } = jsonSchema$1;
	const result = {};
	if (description) result.description = description;
	if (required) result.required = required;
	if (format$1) result.format = format$1;
	if (constValue !== void 0) result.enum = [constValue];
	if (type) if (Array.isArray(type)) if (type.includes("null")) {
		result.type = type.filter((t) => t !== "null")[0];
		result.nullable = true;
	} else result.type = type;
	else if (type === "null") result.type = "null";
	else result.type = type;
	if (enumValues !== void 0) result.enum = enumValues;
	if (properties != null) result.properties = Object.entries(properties).reduce((acc, [key, value]) => {
		acc[key] = convertJSONSchemaToOpenAPISchema(value);
		return acc;
	}, {});
	if (items) result.items = Array.isArray(items) ? items.map(convertJSONSchemaToOpenAPISchema) : convertJSONSchemaToOpenAPISchema(items);
	if (allOf) result.allOf = allOf.map(convertJSONSchemaToOpenAPISchema);
	if (anyOf) if (anyOf.some((schema) => typeof schema === "object" && (schema == null ? void 0 : schema.type) === "null")) {
		const nonNullSchemas = anyOf.filter((schema) => !(typeof schema === "object" && (schema == null ? void 0 : schema.type) === "null"));
		if (nonNullSchemas.length === 1) {
			const converted = convertJSONSchemaToOpenAPISchema(nonNullSchemas[0]);
			if (typeof converted === "object") {
				result.nullable = true;
				Object.assign(result, converted);
			}
		} else {
			result.anyOf = nonNullSchemas.map(convertJSONSchemaToOpenAPISchema);
			result.nullable = true;
		}
	} else result.anyOf = anyOf.map(convertJSONSchemaToOpenAPISchema);
	if (oneOf) result.oneOf = oneOf.map(convertJSONSchemaToOpenAPISchema);
	if (minLength !== void 0) result.minLength = minLength;
	return result;
}
function isEmptyObjectSchema(jsonSchema$1) {
	return jsonSchema$1 != null && typeof jsonSchema$1 === "object" && jsonSchema$1.type === "object" && (jsonSchema$1.properties == null || Object.keys(jsonSchema$1.properties).length === 0) && !jsonSchema$1.additionalProperties;
}
function convertToGoogleGenerativeAIMessages(prompt) {
	var _a$3, _b;
	const systemInstructionParts = [];
	const contents = [];
	let systemMessagesAllowed = true;
	for (const { role, content } of prompt) switch (role) {
		case "system": {
			if (!systemMessagesAllowed) throw new UnsupportedFunctionalityError({ functionality: "system messages are only supported at the beginning of the conversation" });
			systemInstructionParts.push({ text: content });
			break;
		}
		case "user": {
			systemMessagesAllowed = false;
			const parts = [];
			for (const part of content) switch (part.type) {
				case "text": {
					parts.push({ text: part.text });
					break;
				}
				case "image": {
					parts.push(part.image instanceof URL ? { fileData: {
						mimeType: (_a$3 = part.mimeType) != null ? _a$3 : "image/jpeg",
						fileUri: part.image.toString()
					} } : { inlineData: {
						mimeType: (_b = part.mimeType) != null ? _b : "image/jpeg",
						data: convertUint8ArrayToBase64(part.image)
					} });
					break;
				}
				case "file": {
					parts.push(part.data instanceof URL ? { fileData: {
						mimeType: part.mimeType,
						fileUri: part.data.toString()
					} } : { inlineData: {
						mimeType: part.mimeType,
						data: part.data
					} });
					break;
				}
			}
			contents.push({
				role: "user",
				parts
			});
			break;
		}
		case "assistant": {
			systemMessagesAllowed = false;
			contents.push({
				role: "model",
				parts: content.map((part) => {
					switch (part.type) {
						case "text": return part.text.length === 0 ? void 0 : { text: part.text };
						case "file": {
							if (part.mimeType !== "image/png") throw new UnsupportedFunctionalityError({ functionality: "Only PNG images are supported in assistant messages" });
							if (part.data instanceof URL) throw new UnsupportedFunctionalityError({ functionality: "File data URLs in assistant messages are not supported" });
							return { inlineData: {
								mimeType: part.mimeType,
								data: part.data
							} };
						}
						case "tool-call": return { functionCall: {
							name: part.toolName,
							args: part.args
						} };
					}
				}).filter((part) => part !== void 0)
			});
			break;
		}
		case "tool": {
			systemMessagesAllowed = false;
			contents.push({
				role: "user",
				parts: content.map((part) => ({ functionResponse: {
					name: part.toolName,
					response: {
						name: part.toolName,
						content: part.result
					}
				} }))
			});
			break;
		}
	}
	return {
		systemInstruction: systemInstructionParts.length > 0 ? { parts: systemInstructionParts } : void 0,
		contents
	};
}
function getModelPath(modelId) {
	return modelId.includes("/") ? modelId : `models/${modelId}`;
}
var googleErrorDataSchema = objectType({ error: objectType({
	code: numberType().nullable(),
	message: stringType(),
	status: stringType()
}) });
var googleFailedResponseHandler = createJsonErrorResponseHandler({
	errorSchema: googleErrorDataSchema,
	errorToMessage: (data$1) => data$1.error.message
});
function prepareTools(mode, useSearchGrounding, dynamicRetrievalConfig, modelId) {
	var _a$3, _b;
	const tools$1 = ((_a$3 = mode.tools) == null ? void 0 : _a$3.length) ? mode.tools : void 0;
	const toolWarnings = [];
	const isGemini2 = modelId.includes("gemini-2");
	const supportsDynamicRetrieval = modelId.includes("gemini-1.5-flash") && !modelId.includes("-8b");
	if (useSearchGrounding) return {
		tools: isGemini2 ? { googleSearch: {} } : { googleSearchRetrieval: !supportsDynamicRetrieval || !dynamicRetrievalConfig ? {} : { dynamicRetrievalConfig } },
		toolConfig: void 0,
		toolWarnings
	};
	if (tools$1 == null) return {
		tools: void 0,
		toolConfig: void 0,
		toolWarnings
	};
	const functionDeclarations = [];
	for (const tool$1 of tools$1) if (tool$1.type === "provider-defined") toolWarnings.push({
		type: "unsupported-tool",
		tool: tool$1
	});
	else functionDeclarations.push({
		name: tool$1.name,
		description: (_b = tool$1.description) != null ? _b : "",
		parameters: convertJSONSchemaToOpenAPISchema(tool$1.parameters)
	});
	const toolChoice = mode.toolChoice;
	if (toolChoice == null) return {
		tools: { functionDeclarations },
		toolConfig: void 0,
		toolWarnings
	};
	const type = toolChoice.type;
	switch (type) {
		case "auto": return {
			tools: { functionDeclarations },
			toolConfig: { functionCallingConfig: { mode: "AUTO" } },
			toolWarnings
		};
		case "none": return {
			tools: { functionDeclarations },
			toolConfig: { functionCallingConfig: { mode: "NONE" } },
			toolWarnings
		};
		case "required": return {
			tools: { functionDeclarations },
			toolConfig: { functionCallingConfig: { mode: "ANY" } },
			toolWarnings
		};
		case "tool": return {
			tools: { functionDeclarations },
			toolConfig: { functionCallingConfig: {
				mode: "ANY",
				allowedFunctionNames: [toolChoice.toolName]
			} },
			toolWarnings
		};
		default: {
			const _exhaustiveCheck = type;
			throw new UnsupportedFunctionalityError({ functionality: `Unsupported tool choice type: ${_exhaustiveCheck}` });
		}
	}
}
function mapGoogleGenerativeAIFinishReason({ finishReason, hasToolCalls }) {
	switch (finishReason) {
		case "STOP": return hasToolCalls ? "tool-calls" : "stop";
		case "MAX_TOKENS": return "length";
		case "IMAGE_SAFETY":
		case "RECITATION":
		case "SAFETY":
		case "BLOCKLIST":
		case "PROHIBITED_CONTENT":
		case "SPII": return "content-filter";
		case "FINISH_REASON_UNSPECIFIED":
		case "OTHER": return "other";
		case "MALFORMED_FUNCTION_CALL": return "error";
		default: return "unknown";
	}
}
var GoogleGenerativeAILanguageModel = class {
	constructor(modelId, settings, config) {
		this.specificationVersion = "v1";
		this.defaultObjectGenerationMode = "json";
		this.supportsImageUrls = false;
		this.modelId = modelId;
		this.settings = settings;
		this.config = config;
	}
	get supportsStructuredOutputs() {
		var _a$3;
		return (_a$3 = this.settings.structuredOutputs) != null ? _a$3 : true;
	}
	get provider() {
		return this.config.provider;
	}
	async getArgs({ mode, prompt, maxTokens, temperature, topP, topK, frequencyPenalty, presencePenalty, stopSequences, responseFormat, seed, providerMetadata }) {
		var _a$3, _b, _c;
		const type = mode.type;
		const warnings = [];
		const googleOptions = parseProviderOptions({
			provider: "google",
			providerOptions: providerMetadata,
			schema: googleGenerativeAIProviderOptionsSchema
		});
		if (((_a$3 = googleOptions == null ? void 0 : googleOptions.thinkingConfig) == null ? void 0 : _a$3.includeThoughts) === true && !this.config.provider.startsWith("google.vertex.")) warnings.push({
			type: "other",
			message: `The 'includeThoughts' option is only supported with the Google Vertex provider and might not be supported or could behave unexpectedly with the current Google provider (${this.config.provider}).`
		});
		const generationConfig = {
			maxOutputTokens: maxTokens,
			temperature,
			topK,
			topP,
			frequencyPenalty,
			presencePenalty,
			stopSequences,
			seed,
			responseMimeType: (responseFormat == null ? void 0 : responseFormat.type) === "json" ? "application/json" : void 0,
			responseSchema: (responseFormat == null ? void 0 : responseFormat.type) === "json" && responseFormat.schema != null && this.supportsStructuredOutputs ? convertJSONSchemaToOpenAPISchema(responseFormat.schema) : void 0,
			...this.settings.audioTimestamp && { audioTimestamp: this.settings.audioTimestamp },
			responseModalities: googleOptions == null ? void 0 : googleOptions.responseModalities,
			thinkingConfig: googleOptions == null ? void 0 : googleOptions.thinkingConfig
		};
		const { contents, systemInstruction } = convertToGoogleGenerativeAIMessages(prompt);
		switch (type) {
			case "regular": {
				const { tools: tools$1, toolConfig, toolWarnings } = prepareTools(mode, (_b = this.settings.useSearchGrounding) != null ? _b : false, this.settings.dynamicRetrievalConfig, this.modelId);
				return {
					args: {
						generationConfig,
						contents,
						systemInstruction,
						safetySettings: this.settings.safetySettings,
						tools: tools$1,
						toolConfig,
						cachedContent: this.settings.cachedContent
					},
					warnings: [...warnings, ...toolWarnings]
				};
			}
			case "object-json": return {
				args: {
					generationConfig: {
						...generationConfig,
						responseMimeType: "application/json",
						responseSchema: mode.schema != null && this.supportsStructuredOutputs ? convertJSONSchemaToOpenAPISchema(mode.schema) : void 0
					},
					contents,
					systemInstruction,
					safetySettings: this.settings.safetySettings,
					cachedContent: this.settings.cachedContent
				},
				warnings
			};
			case "object-tool": return {
				args: {
					generationConfig,
					contents,
					systemInstruction,
					tools: { functionDeclarations: [{
						name: mode.tool.name,
						description: (_c = mode.tool.description) != null ? _c : "",
						parameters: convertJSONSchemaToOpenAPISchema(mode.tool.parameters)
					}] },
					toolConfig: { functionCallingConfig: { mode: "ANY" } },
					safetySettings: this.settings.safetySettings,
					cachedContent: this.settings.cachedContent
				},
				warnings
			};
			default: {
				const _exhaustiveCheck = type;
				throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
			}
		}
	}
	supportsUrl(url) {
		return this.config.isSupportedUrl(url);
	}
	async doGenerate(options) {
		var _a$3, _b, _c, _d, _e;
		const { args, warnings } = await this.getArgs(options);
		const body = JSON.stringify(args);
		const mergedHeaders = combineHeaders(await resolve(this.config.headers), options.headers);
		const { responseHeaders, value: response, rawValue: rawResponse } = await postJsonToApi({
			url: `${this.config.baseURL}/${getModelPath(this.modelId)}:generateContent`,
			headers: mergedHeaders,
			body: args,
			failedResponseHandler: googleFailedResponseHandler,
			successfulResponseHandler: createJsonResponseHandler(responseSchema),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		const { contents: rawPrompt,...rawSettings } = args;
		const candidate = response.candidates[0];
		const parts = candidate.content == null || typeof candidate.content !== "object" || !("parts" in candidate.content) ? [] : candidate.content.parts;
		const toolCalls = getToolCallsFromParts({
			parts,
			generateId: this.config.generateId
		});
		const usageMetadata = response.usageMetadata;
		return {
			text: getTextFromParts(parts),
			reasoning: getReasoningDetailsFromParts(parts),
			files: (_a$3 = getInlineDataParts(parts)) == null ? void 0 : _a$3.map((part) => ({
				data: part.inlineData.data,
				mimeType: part.inlineData.mimeType
			})),
			toolCalls,
			finishReason: mapGoogleGenerativeAIFinishReason({
				finishReason: candidate.finishReason,
				hasToolCalls: toolCalls != null && toolCalls.length > 0
			}),
			usage: {
				promptTokens: (_b = usageMetadata == null ? void 0 : usageMetadata.promptTokenCount) != null ? _b : NaN,
				completionTokens: (_c = usageMetadata == null ? void 0 : usageMetadata.candidatesTokenCount) != null ? _c : NaN
			},
			rawCall: {
				rawPrompt,
				rawSettings
			},
			rawResponse: {
				headers: responseHeaders,
				body: rawResponse
			},
			warnings,
			providerMetadata: { google: {
				groundingMetadata: (_d = candidate.groundingMetadata) != null ? _d : null,
				safetyRatings: (_e = candidate.safetyRatings) != null ? _e : null
			} },
			sources: extractSources({
				groundingMetadata: candidate.groundingMetadata,
				generateId: this.config.generateId
			}),
			request: { body }
		};
	}
	async doStream(options) {
		const { args, warnings } = await this.getArgs(options);
		const body = JSON.stringify(args);
		const headers = combineHeaders(await resolve(this.config.headers), options.headers);
		const { responseHeaders, value: response } = await postJsonToApi({
			url: `${this.config.baseURL}/${getModelPath(this.modelId)}:streamGenerateContent?alt=sse`,
			headers,
			body: args,
			failedResponseHandler: googleFailedResponseHandler,
			successfulResponseHandler: createEventSourceResponseHandler(chunkSchema),
			abortSignal: options.abortSignal,
			fetch: this.config.fetch
		});
		const { contents: rawPrompt,...rawSettings } = args;
		let finishReason = "unknown";
		let usage = {
			promptTokens: NaN,
			completionTokens: NaN
		};
		let providerMetadata = void 0;
		const generateId2 = this.config.generateId;
		let hasToolCalls = false;
		return {
			stream: response.pipeThrough(new TransformStream({
				transform(chunk, controller) {
					var _a$3, _b, _c, _d, _e, _f;
					if (!chunk.success) {
						controller.enqueue({
							type: "error",
							error: chunk.error
						});
						return;
					}
					const value = chunk.value;
					const usageMetadata = value.usageMetadata;
					if (usageMetadata != null) usage = {
						promptTokens: (_a$3 = usageMetadata.promptTokenCount) != null ? _a$3 : NaN,
						completionTokens: (_b = usageMetadata.candidatesTokenCount) != null ? _b : NaN
					};
					const candidate = (_c = value.candidates) == null ? void 0 : _c[0];
					if (candidate == null) return;
					const content = candidate.content;
					if (content != null) {
						const deltaText = getTextFromParts(content.parts);
						if (deltaText != null) controller.enqueue({
							type: "text-delta",
							textDelta: deltaText
						});
						const reasoningDeltaText = getReasoningDetailsFromParts(content.parts);
						if (reasoningDeltaText != null) for (const part of reasoningDeltaText) controller.enqueue({
							type: "reasoning",
							textDelta: part.text
						});
						const inlineDataParts = getInlineDataParts(content.parts);
						if (inlineDataParts != null) for (const part of inlineDataParts) controller.enqueue({
							type: "file",
							mimeType: part.inlineData.mimeType,
							data: part.inlineData.data
						});
						const toolCallDeltas = getToolCallsFromParts({
							parts: content.parts,
							generateId: generateId2
						});
						if (toolCallDeltas != null) for (const toolCall of toolCallDeltas) {
							controller.enqueue({
								type: "tool-call-delta",
								toolCallType: "function",
								toolCallId: toolCall.toolCallId,
								toolName: toolCall.toolName,
								argsTextDelta: toolCall.args
							});
							controller.enqueue({
								type: "tool-call",
								toolCallType: "function",
								toolCallId: toolCall.toolCallId,
								toolName: toolCall.toolName,
								args: toolCall.args
							});
							hasToolCalls = true;
						}
					}
					if (candidate.finishReason != null) {
						finishReason = mapGoogleGenerativeAIFinishReason({
							finishReason: candidate.finishReason,
							hasToolCalls
						});
						const sources = (_d = extractSources({
							groundingMetadata: candidate.groundingMetadata,
							generateId: generateId2
						})) != null ? _d : [];
						for (const source of sources) controller.enqueue({
							type: "source",
							source
						});
						providerMetadata = { google: {
							groundingMetadata: (_e = candidate.groundingMetadata) != null ? _e : null,
							safetyRatings: (_f = candidate.safetyRatings) != null ? _f : null
						} };
					}
				},
				flush(controller) {
					controller.enqueue({
						type: "finish",
						finishReason,
						usage,
						providerMetadata
					});
				}
			})),
			rawCall: {
				rawPrompt,
				rawSettings
			},
			rawResponse: { headers: responseHeaders },
			warnings,
			request: { body }
		};
	}
};
function getToolCallsFromParts({ parts, generateId: generateId2 }) {
	const functionCallParts = parts == null ? void 0 : parts.filter((part) => "functionCall" in part);
	return functionCallParts == null || functionCallParts.length === 0 ? void 0 : functionCallParts.map((part) => ({
		toolCallType: "function",
		toolCallId: generateId2(),
		toolName: part.functionCall.name,
		args: JSON.stringify(part.functionCall.args)
	}));
}
function getTextFromParts(parts) {
	const textParts = parts == null ? void 0 : parts.filter((part) => "text" in part && part.thought !== true);
	return textParts == null || textParts.length === 0 ? void 0 : textParts.map((part) => part.text).join("");
}
function getReasoningDetailsFromParts(parts) {
	const reasoningParts = parts == null ? void 0 : parts.filter((part) => "text" in part && part.thought === true && part.text != null);
	return reasoningParts == null || reasoningParts.length === 0 ? void 0 : reasoningParts.map((part) => ({
		type: "text",
		text: part.text
	}));
}
function getInlineDataParts(parts) {
	return parts == null ? void 0 : parts.filter((part) => "inlineData" in part);
}
function extractSources({ groundingMetadata, generateId: generateId2 }) {
	var _a$3;
	return (_a$3 = groundingMetadata == null ? void 0 : groundingMetadata.groundingChunks) == null ? void 0 : _a$3.filter((chunk) => chunk.web != null).map((chunk) => ({
		sourceType: "url",
		id: generateId2(),
		url: chunk.web.uri,
		title: chunk.web.title
	}));
}
var contentSchema = objectType({ parts: arrayType(unionType([
	objectType({ functionCall: objectType({
		name: stringType(),
		args: unknownType()
	}) }),
	objectType({ inlineData: objectType({
		mimeType: stringType(),
		data: stringType()
	}) }),
	objectType({
		text: stringType().nullish(),
		thought: booleanType().nullish()
	})
])).nullish() });
var groundingChunkSchema = objectType({
	web: objectType({
		uri: stringType(),
		title: stringType()
	}).nullish(),
	retrievedContext: objectType({
		uri: stringType(),
		title: stringType()
	}).nullish()
});
var groundingMetadataSchema = objectType({
	webSearchQueries: arrayType(stringType()).nullish(),
	retrievalQueries: arrayType(stringType()).nullish(),
	searchEntryPoint: objectType({ renderedContent: stringType() }).nullish(),
	groundingChunks: arrayType(groundingChunkSchema).nullish(),
	groundingSupports: arrayType(objectType({
		segment: objectType({
			startIndex: numberType().nullish(),
			endIndex: numberType().nullish(),
			text: stringType().nullish()
		}),
		segment_text: stringType().nullish(),
		groundingChunkIndices: arrayType(numberType()).nullish(),
		supportChunkIndices: arrayType(numberType()).nullish(),
		confidenceScores: arrayType(numberType()).nullish(),
		confidenceScore: arrayType(numberType()).nullish()
	})).nullish(),
	retrievalMetadata: unionType([objectType({ webDynamicRetrievalScore: numberType() }), objectType({})]).nullish()
});
var safetyRatingSchema = objectType({
	category: stringType().nullish(),
	probability: stringType().nullish(),
	probabilityScore: numberType().nullish(),
	severity: stringType().nullish(),
	severityScore: numberType().nullish(),
	blocked: booleanType().nullish()
});
var responseSchema = objectType({
	candidates: arrayType(objectType({
		content: contentSchema.nullish().or(objectType({}).strict()),
		finishReason: stringType().nullish(),
		safetyRatings: arrayType(safetyRatingSchema).nullish(),
		groundingMetadata: groundingMetadataSchema.nullish()
	})),
	usageMetadata: objectType({
		promptTokenCount: numberType().nullish(),
		candidatesTokenCount: numberType().nullish(),
		totalTokenCount: numberType().nullish()
	}).nullish()
});
var chunkSchema = objectType({
	candidates: arrayType(objectType({
		content: contentSchema.nullish(),
		finishReason: stringType().nullish(),
		safetyRatings: arrayType(safetyRatingSchema).nullish(),
		groundingMetadata: groundingMetadataSchema.nullish()
	})).nullish(),
	usageMetadata: objectType({
		promptTokenCount: numberType().nullish(),
		candidatesTokenCount: numberType().nullish(),
		totalTokenCount: numberType().nullish()
	}).nullish()
});
var googleGenerativeAIProviderOptionsSchema = objectType({
	responseModalities: arrayType(enumType(["TEXT", "IMAGE"])).nullish(),
	thinkingConfig: objectType({
		thinkingBudget: numberType().nullish(),
		includeThoughts: booleanType().nullish()
	}).nullish()
});
var GoogleGenerativeAIEmbeddingModel = class {
	constructor(modelId, settings, config) {
		this.specificationVersion = "v1";
		this.modelId = modelId;
		this.settings = settings;
		this.config = config;
	}
	get provider() {
		return this.config.provider;
	}
	get maxEmbeddingsPerCall() {
		return 2048;
	}
	get supportsParallelCalls() {
		return true;
	}
	async doEmbed({ values, headers, abortSignal }) {
		if (values.length > this.maxEmbeddingsPerCall) throw new TooManyEmbeddingValuesForCallError({
			provider: this.provider,
			modelId: this.modelId,
			maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,
			values
		});
		const mergedHeaders = combineHeaders(await resolve(this.config.headers), headers);
		const { responseHeaders, value: response } = await postJsonToApi({
			url: `${this.config.baseURL}/models/${this.modelId}:batchEmbedContents`,
			headers: mergedHeaders,
			body: { requests: values.map((value) => ({
				model: `models/${this.modelId}`,
				content: {
					role: "user",
					parts: [{ text: value }]
				},
				outputDimensionality: this.settings.outputDimensionality,
				taskType: this.settings.taskType
			})) },
			failedResponseHandler: googleFailedResponseHandler,
			successfulResponseHandler: createJsonResponseHandler(googleGenerativeAITextEmbeddingResponseSchema),
			abortSignal,
			fetch: this.config.fetch
		});
		return {
			embeddings: response.embeddings.map((item) => item.values),
			usage: void 0,
			rawResponse: { headers: responseHeaders }
		};
	}
};
var googleGenerativeAITextEmbeddingResponseSchema = objectType({ embeddings: arrayType(objectType({ values: arrayType(numberType()) })) });
function isSupportedFileUrl(url) {
	return url.toString().startsWith("https://generativelanguage.googleapis.com/v1beta/files/");
}
function createGoogleGenerativeAI(options = {}) {
	var _a$3;
	const baseURL = (_a$3 = withoutTrailingSlash(options.baseURL)) != null ? _a$3 : "https://generativelanguage.googleapis.com/v1beta";
	const getHeaders = () => ({
		"x-goog-api-key": loadApiKey({
			apiKey: options.apiKey,
			environmentVariableName: "GOOGLE_GENERATIVE_AI_API_KEY",
			description: "Google Generative AI"
		}),
		...options.headers
	});
	const createChatModel = (modelId, settings = {}) => {
		var _a2$2;
		return new GoogleGenerativeAILanguageModel(modelId, settings, {
			provider: "google.generative-ai",
			baseURL,
			headers: getHeaders,
			generateId: (_a2$2 = options.generateId) != null ? _a2$2 : generateId,
			isSupportedUrl: isSupportedFileUrl,
			fetch: options.fetch
		});
	};
	const createEmbeddingModel = (modelId, settings = {}) => new GoogleGenerativeAIEmbeddingModel(modelId, settings, {
		provider: "google.generative-ai",
		baseURL,
		headers: getHeaders,
		fetch: options.fetch
	});
	const provider = function(modelId, settings) {
		if (new.target) throw new Error("The Google Generative AI model function cannot be called with the new keyword.");
		return createChatModel(modelId, settings);
	};
	provider.languageModel = createChatModel;
	provider.chat = createChatModel;
	provider.generativeAI = createChatModel;
	provider.embedding = createEmbeddingModel;
	provider.textEmbedding = createEmbeddingModel;
	provider.textEmbeddingModel = createEmbeddingModel;
	return provider;
}
var google = createGoogleGenerativeAI();

//#endregion
//#region node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js
function isPlainObject(value) {
	if (typeof value !== "object" || value === null) return false;
	const prototype = Object.getPrototypeOf(value);
	return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/arguments/file-url.js
const safeNormalizeFileUrl = (file, name$2) => {
	const fileString = normalizeFileUrl(file);
	if (typeof fileString !== "string") throw new TypeError(`${name$2} must be a string or a file URL: ${fileString}.`);
	return fileString;
};
const normalizeFileUrl = (file) => file instanceof URL ? fileURLToPath(file) : file;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/methods/parameters.js
const normalizeParameters = (rawFile, rawArguments = [], rawOptions = {}) => {
	const filePath = safeNormalizeFileUrl(rawFile, "First argument");
	const [commandArguments, options] = isPlainObject(rawArguments) ? [[], rawArguments] : [rawArguments, rawOptions];
	if (!Array.isArray(commandArguments)) throw new TypeError(`Second argument must be either an array of arguments or an options object: ${commandArguments}`);
	if (commandArguments.some((commandArgument) => typeof commandArgument === "object" && commandArgument !== null)) throw new TypeError(`Second argument must be an array of strings: ${commandArguments}`);
	const normalizedArguments = commandArguments.map(String);
	const nullByteArgument = normalizedArguments.find((normalizedArgument) => normalizedArgument.includes("\0"));
	if (nullByteArgument !== void 0) throw new TypeError(`Arguments cannot contain null bytes ("\\0"): ${nullByteArgument}`);
	if (!isPlainObject(options)) throw new TypeError(`Last argument must be an options object: ${options}`);
	return [
		filePath,
		normalizedArguments,
		options
	];
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/utils/uint-array.js
const { toString: objectToString$1 } = Object.prototype;
const isArrayBuffer = (value) => objectToString$1.call(value) === "[object ArrayBuffer]";
const isUint8Array = (value) => objectToString$1.call(value) === "[object Uint8Array]";
const bufferToUint8Array = (buffer$1) => new Uint8Array(buffer$1.buffer, buffer$1.byteOffset, buffer$1.byteLength);
const textEncoder$1 = new TextEncoder();
const stringToUint8Array = (string) => textEncoder$1.encode(string);
const textDecoder = new TextDecoder();
const uint8ArrayToString = (uint8Array) => textDecoder.decode(uint8Array);
const joinToString = (uint8ArraysOrStrings, encoding) => {
	const strings = uint8ArraysToStrings(uint8ArraysOrStrings, encoding);
	return strings.join("");
};
const uint8ArraysToStrings = (uint8ArraysOrStrings, encoding) => {
	if (encoding === "utf8" && uint8ArraysOrStrings.every((uint8ArrayOrString) => typeof uint8ArrayOrString === "string")) return uint8ArraysOrStrings;
	const decoder = new StringDecoder(encoding);
	const strings = uint8ArraysOrStrings.map((uint8ArrayOrString) => typeof uint8ArrayOrString === "string" ? stringToUint8Array(uint8ArrayOrString) : uint8ArrayOrString).map((uint8Array) => decoder.write(uint8Array));
	const finalString = decoder.end();
	return finalString === "" ? strings : [...strings, finalString];
};
const joinToUint8Array = (uint8ArraysOrStrings) => {
	if (uint8ArraysOrStrings.length === 1 && isUint8Array(uint8ArraysOrStrings[0])) return uint8ArraysOrStrings[0];
	return concatUint8Arrays(stringsToUint8Arrays(uint8ArraysOrStrings));
};
const stringsToUint8Arrays = (uint8ArraysOrStrings) => uint8ArraysOrStrings.map((uint8ArrayOrString) => typeof uint8ArrayOrString === "string" ? stringToUint8Array(uint8ArrayOrString) : uint8ArrayOrString);
const concatUint8Arrays = (uint8Arrays) => {
	const result = new Uint8Array(getJoinLength(uint8Arrays));
	let index = 0;
	for (const uint8Array of uint8Arrays) {
		result.set(uint8Array, index);
		index += uint8Array.length;
	}
	return result;
};
const getJoinLength = (uint8Arrays) => {
	let joinLength = 0;
	for (const uint8Array of uint8Arrays) joinLength += uint8Array.length;
	return joinLength;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/methods/template.js
const isTemplateString = (templates) => Array.isArray(templates) && Array.isArray(templates.raw);
const parseTemplates = (templates, expressions) => {
	let tokens = [];
	for (const [index, template] of templates.entries()) tokens = parseTemplate({
		templates,
		expressions,
		tokens,
		index,
		template
	});
	if (tokens.length === 0) throw new TypeError("Template script must not be empty");
	const [file, ...commandArguments] = tokens;
	return [
		file,
		commandArguments,
		{}
	];
};
const parseTemplate = ({ templates, expressions, tokens, index, template }) => {
	if (template === void 0) throw new TypeError(`Invalid backslash sequence: ${templates.raw[index]}`);
	const { nextTokens, leadingWhitespaces, trailingWhitespaces } = splitByWhitespaces(template, templates.raw[index]);
	const newTokens = concatTokens(tokens, nextTokens, leadingWhitespaces);
	if (index === expressions.length) return newTokens;
	const expression = expressions[index];
	const expressionTokens = Array.isArray(expression) ? expression.map((expression$1) => parseExpression(expression$1)) : [parseExpression(expression)];
	return concatTokens(newTokens, expressionTokens, trailingWhitespaces);
};
const splitByWhitespaces = (template, rawTemplate) => {
	if (rawTemplate.length === 0) return {
		nextTokens: [],
		leadingWhitespaces: false,
		trailingWhitespaces: false
	};
	const nextTokens = [];
	let templateStart = 0;
	const leadingWhitespaces = DELIMITERS.has(rawTemplate[0]);
	for (let templateIndex = 0, rawIndex = 0; templateIndex < template.length; templateIndex += 1, rawIndex += 1) {
		const rawCharacter = rawTemplate[rawIndex];
		if (DELIMITERS.has(rawCharacter)) {
			if (templateStart !== templateIndex) nextTokens.push(template.slice(templateStart, templateIndex));
			templateStart = templateIndex + 1;
		} else if (rawCharacter === "\\") {
			const nextRawCharacter = rawTemplate[rawIndex + 1];
			if (nextRawCharacter === "u" && rawTemplate[rawIndex + 2] === "{") rawIndex = rawTemplate.indexOf("}", rawIndex + 3);
			else rawIndex += ESCAPE_LENGTH[nextRawCharacter] ?? 1;
		}
	}
	const trailingWhitespaces = templateStart === template.length;
	if (!trailingWhitespaces) nextTokens.push(template.slice(templateStart));
	return {
		nextTokens,
		leadingWhitespaces,
		trailingWhitespaces
	};
};
const DELIMITERS = new Set([
	" ",
	"	",
	"\r",
	"\n"
]);
const ESCAPE_LENGTH = {
	x: 3,
	u: 5
};
const concatTokens = (tokens, nextTokens, isSeparated) => isSeparated || tokens.length === 0 || nextTokens.length === 0 ? [...tokens, ...nextTokens] : [
	...tokens.slice(0, -1),
	`${tokens.at(-1)}${nextTokens[0]}`,
	...nextTokens.slice(1)
];
const parseExpression = (expression) => {
	const typeOfExpression = typeof expression;
	if (typeOfExpression === "string") return expression;
	if (typeOfExpression === "number") return String(expression);
	if (isPlainObject(expression) && ("stdout" in expression || "isMaxBuffer" in expression)) return getSubprocessResult(expression);
	if (expression instanceof ChildProcess || Object.prototype.toString.call(expression) === "[object Promise]") throw new TypeError("Unexpected subprocess in template expression. Please use ${await subprocess} instead of ${subprocess}.");
	throw new TypeError(`Unexpected "${typeOfExpression}" in template expression`);
};
const getSubprocessResult = ({ stdout: stdout$1 }) => {
	if (typeof stdout$1 === "string") return stdout$1;
	if (isUint8Array(stdout$1)) return uint8ArrayToString(stdout$1);
	if (stdout$1 === void 0) throw new TypeError("Missing result.stdout in template expression. This is probably due to the previous subprocess' \"stdout\" option.");
	throw new TypeError(`Unexpected "${typeof stdout$1}" stdout in template expression`);
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/utils/standard-stream.js
const isStandardStream = (stream$4) => STANDARD_STREAMS.includes(stream$4);
const STANDARD_STREAMS = [
	process$1.stdin,
	process$1.stdout,
	process$1.stderr
];
const STANDARD_STREAMS_ALIASES = [
	"stdin",
	"stdout",
	"stderr"
];
const getStreamName = (fdNumber) => STANDARD_STREAMS_ALIASES[fdNumber] ?? `stdio[${fdNumber}]`;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/arguments/specific.js
const normalizeFdSpecificOptions = (options) => {
	const optionsCopy = { ...options };
	for (const optionName of FD_SPECIFIC_OPTIONS) optionsCopy[optionName] = normalizeFdSpecificOption(options, optionName);
	return optionsCopy;
};
const normalizeFdSpecificOption = (options, optionName) => {
	const optionBaseArray = Array.from({ length: getStdioLength(options) + 1 });
	const optionArray = normalizeFdSpecificValue(options[optionName], optionBaseArray, optionName);
	return addDefaultValue$1(optionArray, optionName);
};
const getStdioLength = ({ stdio }) => Array.isArray(stdio) ? Math.max(stdio.length, STANDARD_STREAMS_ALIASES.length) : STANDARD_STREAMS_ALIASES.length;
const normalizeFdSpecificValue = (optionValue, optionArray, optionName) => isPlainObject(optionValue) ? normalizeOptionObject(optionValue, optionArray, optionName) : optionArray.fill(optionValue);
const normalizeOptionObject = (optionValue, optionArray, optionName) => {
	for (const fdName of Object.keys(optionValue).sort(compareFdName)) for (const fdNumber of parseFdName(fdName, optionName, optionArray)) optionArray[fdNumber] = optionValue[fdName];
	return optionArray;
};
const compareFdName = (fdNameA, fdNameB) => getFdNameOrder(fdNameA) < getFdNameOrder(fdNameB) ? 1 : -1;
const getFdNameOrder = (fdName) => {
	if (fdName === "stdout" || fdName === "stderr") return 0;
	return fdName === "all" ? 2 : 1;
};
const parseFdName = (fdName, optionName, optionArray) => {
	if (fdName === "ipc") return [optionArray.length - 1];
	const fdNumber = parseFd(fdName);
	if (fdNumber === void 0 || fdNumber === 0) throw new TypeError(`"${optionName}.${fdName}" is invalid.
It must be "${optionName}.stdout", "${optionName}.stderr", "${optionName}.all", "${optionName}.ipc", or "${optionName}.fd3", "${optionName}.fd4" (and so on).`);
	if (fdNumber >= optionArray.length) throw new TypeError(`"${optionName}.${fdName}" is invalid: that file descriptor does not exist.
Please set the "stdio" option to ensure that file descriptor exists.`);
	return fdNumber === "all" ? [1, 2] : [fdNumber];
};
const parseFd = (fdName) => {
	if (fdName === "all") return fdName;
	if (STANDARD_STREAMS_ALIASES.includes(fdName)) return STANDARD_STREAMS_ALIASES.indexOf(fdName);
	const regexpResult = FD_REGEXP.exec(fdName);
	if (regexpResult !== null) return Number(regexpResult[1]);
};
const FD_REGEXP = /^fd(\d+)$/;
const addDefaultValue$1 = (optionArray, optionName) => optionArray.map((optionValue) => optionValue === void 0 ? DEFAULT_OPTIONS[optionName] : optionValue);
const verboseDefault = debuglog("execa").enabled ? "full" : "none";
const DEFAULT_OPTIONS = {
	lines: false,
	buffer: true,
	maxBuffer: 1e3 * 1e3 * 100,
	verbose: verboseDefault,
	stripFinalNewline: true
};
const FD_SPECIFIC_OPTIONS = [
	"lines",
	"buffer",
	"maxBuffer",
	"verbose",
	"stripFinalNewline"
];
const getFdSpecificValue = (optionArray, fdNumber) => fdNumber === "ipc" ? optionArray.at(-1) : optionArray[fdNumber];

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/verbose/values.js
const isVerbose = ({ verbose }, fdNumber) => getFdVerbose(verbose, fdNumber) !== "none";
const isFullVerbose = ({ verbose }, fdNumber) => !["none", "short"].includes(getFdVerbose(verbose, fdNumber));
const getVerboseFunction = ({ verbose }, fdNumber) => {
	const fdVerbose = getFdVerbose(verbose, fdNumber);
	return isVerboseFunction(fdVerbose) ? fdVerbose : void 0;
};
const getFdVerbose = (verbose, fdNumber) => fdNumber === void 0 ? getFdGenericVerbose(verbose) : getFdSpecificValue(verbose, fdNumber);
const getFdGenericVerbose = (verbose) => verbose.find((fdVerbose) => isVerboseFunction(fdVerbose)) ?? VERBOSE_VALUES.findLast((fdVerbose) => verbose.includes(fdVerbose));
const isVerboseFunction = (fdVerbose) => typeof fdVerbose === "function";
const VERBOSE_VALUES = [
	"none",
	"short",
	"full"
];

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/arguments/escape.js
const joinCommand = (filePath, rawArguments) => {
	const fileAndArguments = [filePath, ...rawArguments];
	const command = fileAndArguments.join(" ");
	const escapedCommand = fileAndArguments.map((fileAndArgument) => quoteString(escapeControlCharacters(fileAndArgument))).join(" ");
	return {
		command,
		escapedCommand
	};
};
const escapeLines = (lines) => stripVTControlCharacters(lines).split("\n").map((line) => escapeControlCharacters(line)).join("\n");
const escapeControlCharacters = (line) => line.replaceAll(SPECIAL_CHAR_REGEXP, (character) => escapeControlCharacter(character));
const escapeControlCharacter = (character) => {
	const commonEscape = COMMON_ESCAPES[character];
	if (commonEscape !== void 0) return commonEscape;
	const codepoint = character.codePointAt(0);
	const codepointHex = codepoint.toString(16);
	return codepoint <= ASTRAL_START ? `\\u${codepointHex.padStart(4, "0")}` : `\\U${codepointHex}`;
};
const getSpecialCharRegExp = () => {
	try {
		return new RegExp("\\p{Separator}|\\p{Other}", "gu");
	} catch {
		return /[\s\u0000-\u001F\u007F-\u009F\u00AD]/g;
	}
};
const SPECIAL_CHAR_REGEXP = getSpecialCharRegExp();
const COMMON_ESCAPES = {
	" ": " ",
	"\b": "\\b",
	"\f": "\\f",
	"\n": "\\n",
	"\r": "\\r",
	"	": "\\t"
};
const ASTRAL_START = 65535;
const quoteString = (escapedArgument) => {
	if (NO_ESCAPE_REGEXP.test(escapedArgument)) return escapedArgument;
	return platform === "win32" ? `"${escapedArgument.replaceAll("\"", "\"\"")}"` : `'${escapedArgument.replaceAll("'", "'\\''")}'`;
};
const NO_ESCAPE_REGEXP = /^[\w./-]+$/;

//#endregion
//#region node_modules/.pnpm/is-unicode-supported@2.1.0/node_modules/is-unicode-supported/index.js
function isUnicodeSupported() {
	const { env: env$1 } = process$1;
	const { TERM, TERM_PROGRAM } = env$1;
	if (process$1.platform !== "win32") return TERM !== "linux";
	return Boolean(env$1.WT_SESSION) || Boolean(env$1.TERMINUS_SUBLIME) || env$1.ConEmuTask === "{cmd::Cmder}" || TERM_PROGRAM === "Terminus-Sublime" || TERM_PROGRAM === "vscode" || TERM === "xterm-256color" || TERM === "alacritty" || TERM === "rxvt-unicode" || TERM === "rxvt-unicode-256color" || env$1.TERMINAL_EMULATOR === "JetBrains-JediTerm";
}

//#endregion
//#region node_modules/.pnpm/figures@6.1.0/node_modules/figures/index.js
const common = {
	circleQuestionMark: "(?)",
	questionMarkPrefix: "(?)",
	square: "█",
	squareDarkShade: "▓",
	squareMediumShade: "▒",
	squareLightShade: "░",
	squareTop: "▀",
	squareBottom: "▄",
	squareLeft: "▌",
	squareRight: "▐",
	squareCenter: "■",
	bullet: "●",
	dot: "․",
	ellipsis: "…",
	pointerSmall: "›",
	triangleUp: "▲",
	triangleUpSmall: "▴",
	triangleDown: "▼",
	triangleDownSmall: "▾",
	triangleLeftSmall: "◂",
	triangleRightSmall: "▸",
	home: "⌂",
	heart: "♥",
	musicNote: "♪",
	musicNoteBeamed: "♫",
	arrowUp: "↑",
	arrowDown: "↓",
	arrowLeft: "←",
	arrowRight: "→",
	arrowLeftRight: "↔",
	arrowUpDown: "↕",
	almostEqual: "≈",
	notEqual: "≠",
	lessOrEqual: "≤",
	greaterOrEqual: "≥",
	identical: "≡",
	infinity: "∞",
	subscriptZero: "₀",
	subscriptOne: "₁",
	subscriptTwo: "₂",
	subscriptThree: "₃",
	subscriptFour: "₄",
	subscriptFive: "₅",
	subscriptSix: "₆",
	subscriptSeven: "₇",
	subscriptEight: "₈",
	subscriptNine: "₉",
	oneHalf: "½",
	oneThird: "⅓",
	oneQuarter: "¼",
	oneFifth: "⅕",
	oneSixth: "⅙",
	oneEighth: "⅛",
	twoThirds: "⅔",
	twoFifths: "⅖",
	threeQuarters: "¾",
	threeFifths: "⅗",
	threeEighths: "⅜",
	fourFifths: "⅘",
	fiveSixths: "⅚",
	fiveEighths: "⅝",
	sevenEighths: "⅞",
	line: "─",
	lineBold: "━",
	lineDouble: "═",
	lineDashed0: "┄",
	lineDashed1: "┅",
	lineDashed2: "┈",
	lineDashed3: "┉",
	lineDashed4: "╌",
	lineDashed5: "╍",
	lineDashed6: "╴",
	lineDashed7: "╶",
	lineDashed8: "╸",
	lineDashed9: "╺",
	lineDashed10: "╼",
	lineDashed11: "╾",
	lineDashed12: "−",
	lineDashed13: "–",
	lineDashed14: "‐",
	lineDashed15: "⁃",
	lineVertical: "│",
	lineVerticalBold: "┃",
	lineVerticalDouble: "║",
	lineVerticalDashed0: "┆",
	lineVerticalDashed1: "┇",
	lineVerticalDashed2: "┊",
	lineVerticalDashed3: "┋",
	lineVerticalDashed4: "╎",
	lineVerticalDashed5: "╏",
	lineVerticalDashed6: "╵",
	lineVerticalDashed7: "╷",
	lineVerticalDashed8: "╹",
	lineVerticalDashed9: "╻",
	lineVerticalDashed10: "╽",
	lineVerticalDashed11: "╿",
	lineDownLeft: "┐",
	lineDownLeftArc: "╮",
	lineDownBoldLeftBold: "┓",
	lineDownBoldLeft: "┒",
	lineDownLeftBold: "┑",
	lineDownDoubleLeftDouble: "╗",
	lineDownDoubleLeft: "╖",
	lineDownLeftDouble: "╕",
	lineDownRight: "┌",
	lineDownRightArc: "╭",
	lineDownBoldRightBold: "┏",
	lineDownBoldRight: "┎",
	lineDownRightBold: "┍",
	lineDownDoubleRightDouble: "╔",
	lineDownDoubleRight: "╓",
	lineDownRightDouble: "╒",
	lineUpLeft: "┘",
	lineUpLeftArc: "╯",
	lineUpBoldLeftBold: "┛",
	lineUpBoldLeft: "┚",
	lineUpLeftBold: "┙",
	lineUpDoubleLeftDouble: "╝",
	lineUpDoubleLeft: "╜",
	lineUpLeftDouble: "╛",
	lineUpRight: "└",
	lineUpRightArc: "╰",
	lineUpBoldRightBold: "┗",
	lineUpBoldRight: "┖",
	lineUpRightBold: "┕",
	lineUpDoubleRightDouble: "╚",
	lineUpDoubleRight: "╙",
	lineUpRightDouble: "╘",
	lineUpDownLeft: "┤",
	lineUpBoldDownBoldLeftBold: "┫",
	lineUpBoldDownBoldLeft: "┨",
	lineUpDownLeftBold: "┥",
	lineUpBoldDownLeftBold: "┩",
	lineUpDownBoldLeftBold: "┪",
	lineUpDownBoldLeft: "┧",
	lineUpBoldDownLeft: "┦",
	lineUpDoubleDownDoubleLeftDouble: "╣",
	lineUpDoubleDownDoubleLeft: "╢",
	lineUpDownLeftDouble: "╡",
	lineUpDownRight: "├",
	lineUpBoldDownBoldRightBold: "┣",
	lineUpBoldDownBoldRight: "┠",
	lineUpDownRightBold: "┝",
	lineUpBoldDownRightBold: "┡",
	lineUpDownBoldRightBold: "┢",
	lineUpDownBoldRight: "┟",
	lineUpBoldDownRight: "┞",
	lineUpDoubleDownDoubleRightDouble: "╠",
	lineUpDoubleDownDoubleRight: "╟",
	lineUpDownRightDouble: "╞",
	lineDownLeftRight: "┬",
	lineDownBoldLeftBoldRightBold: "┳",
	lineDownLeftBoldRightBold: "┯",
	lineDownBoldLeftRight: "┰",
	lineDownBoldLeftBoldRight: "┱",
	lineDownBoldLeftRightBold: "┲",
	lineDownLeftRightBold: "┮",
	lineDownLeftBoldRight: "┭",
	lineDownDoubleLeftDoubleRightDouble: "╦",
	lineDownDoubleLeftRight: "╥",
	lineDownLeftDoubleRightDouble: "╤",
	lineUpLeftRight: "┴",
	lineUpBoldLeftBoldRightBold: "┻",
	lineUpLeftBoldRightBold: "┷",
	lineUpBoldLeftRight: "┸",
	lineUpBoldLeftBoldRight: "┹",
	lineUpBoldLeftRightBold: "┺",
	lineUpLeftRightBold: "┶",
	lineUpLeftBoldRight: "┵",
	lineUpDoubleLeftDoubleRightDouble: "╩",
	lineUpDoubleLeftRight: "╨",
	lineUpLeftDoubleRightDouble: "╧",
	lineUpDownLeftRight: "┼",
	lineUpBoldDownBoldLeftBoldRightBold: "╋",
	lineUpDownBoldLeftBoldRightBold: "╈",
	lineUpBoldDownLeftBoldRightBold: "╇",
	lineUpBoldDownBoldLeftRightBold: "╊",
	lineUpBoldDownBoldLeftBoldRight: "╉",
	lineUpBoldDownLeftRight: "╀",
	lineUpDownBoldLeftRight: "╁",
	lineUpDownLeftBoldRight: "┽",
	lineUpDownLeftRightBold: "┾",
	lineUpBoldDownBoldLeftRight: "╂",
	lineUpDownLeftBoldRightBold: "┿",
	lineUpBoldDownLeftBoldRight: "╃",
	lineUpBoldDownLeftRightBold: "╄",
	lineUpDownBoldLeftBoldRight: "╅",
	lineUpDownBoldLeftRightBold: "╆",
	lineUpDoubleDownDoubleLeftDoubleRightDouble: "╬",
	lineUpDoubleDownDoubleLeftRight: "╫",
	lineUpDownLeftDoubleRightDouble: "╪",
	lineCross: "╳",
	lineBackslash: "╲",
	lineSlash: "╱"
};
const specialMainSymbols = {
	tick: "✔",
	info: "ℹ",
	warning: "⚠",
	cross: "✘",
	squareSmall: "◻",
	squareSmallFilled: "◼",
	circle: "◯",
	circleFilled: "◉",
	circleDotted: "◌",
	circleDouble: "◎",
	circleCircle: "ⓞ",
	circleCross: "ⓧ",
	circlePipe: "Ⓘ",
	radioOn: "◉",
	radioOff: "◯",
	checkboxOn: "☒",
	checkboxOff: "☐",
	checkboxCircleOn: "ⓧ",
	checkboxCircleOff: "Ⓘ",
	pointer: "❯",
	triangleUpOutline: "△",
	triangleLeft: "◀",
	triangleRight: "▶",
	lozenge: "◆",
	lozengeOutline: "◇",
	hamburger: "☰",
	smiley: "㋡",
	mustache: "෴",
	star: "★",
	play: "▶",
	nodejs: "⬢",
	oneSeventh: "⅐",
	oneNinth: "⅑",
	oneTenth: "⅒"
};
const specialFallbackSymbols = {
	tick: "√",
	info: "i",
	warning: "‼",
	cross: "×",
	squareSmall: "□",
	squareSmallFilled: "■",
	circle: "( )",
	circleFilled: "(*)",
	circleDotted: "( )",
	circleDouble: "( )",
	circleCircle: "(○)",
	circleCross: "(×)",
	circlePipe: "(│)",
	radioOn: "(*)",
	radioOff: "( )",
	checkboxOn: "[×]",
	checkboxOff: "[ ]",
	checkboxCircleOn: "(×)",
	checkboxCircleOff: "( )",
	pointer: ">",
	triangleUpOutline: "∆",
	triangleLeft: "◄",
	triangleRight: "►",
	lozenge: "♦",
	lozengeOutline: "◊",
	hamburger: "≡",
	smiley: "☺",
	mustache: "┌─┐",
	star: "✶",
	play: "►",
	nodejs: "♦",
	oneSeventh: "1/7",
	oneNinth: "1/9",
	oneTenth: "1/10"
};
const mainSymbols = {
	...common,
	...specialMainSymbols
};
const fallbackSymbols = {
	...common,
	...specialFallbackSymbols
};
const shouldUseMain = isUnicodeSupported();
const figures = shouldUseMain ? mainSymbols : fallbackSymbols;
var figures_default = figures;
const replacements = Object.entries(specialMainSymbols);

//#endregion
//#region node_modules/.pnpm/yoctocolors@2.1.1/node_modules/yoctocolors/base.js
const hasColors = tty?.WriteStream?.prototype?.hasColors?.() ?? false;
const format = (open, close) => {
	if (!hasColors) return (input) => input;
	const openCode = `\u001B[${open}m`;
	const closeCode = `\u001B[${close}m`;
	return (input) => {
		const string = input + "";
		let index = string.indexOf(closeCode);
		if (index === -1) return openCode + string + closeCode;
		let result = openCode;
		let lastIndex = 0;
		while (index !== -1) {
			result += string.slice(lastIndex, index) + openCode;
			lastIndex = index + closeCode.length;
			index = string.indexOf(closeCode, lastIndex);
		}
		result += string.slice(lastIndex) + closeCode;
		return result;
	};
};
const reset = format(0, 0);
const bold = format(1, 22);
const dim = format(2, 22);
const italic = format(3, 23);
const underline = format(4, 24);
const overline = format(53, 55);
const inverse = format(7, 27);
const hidden = format(8, 28);
const strikethrough = format(9, 29);
const black = format(30, 39);
const red = format(31, 39);
const green = format(32, 39);
const yellow = format(33, 39);
const blue = format(34, 39);
const magenta = format(35, 39);
const cyan = format(36, 39);
const white = format(37, 39);
const gray = format(90, 39);
const bgBlack = format(40, 49);
const bgRed = format(41, 49);
const bgGreen = format(42, 49);
const bgYellow = format(43, 49);
const bgBlue = format(44, 49);
const bgMagenta = format(45, 49);
const bgCyan = format(46, 49);
const bgWhite = format(47, 49);
const bgGray = format(100, 49);
const redBright = format(91, 39);
const greenBright = format(92, 39);
const yellowBright = format(93, 39);
const blueBright = format(94, 39);
const magentaBright = format(95, 39);
const cyanBright = format(96, 39);
const whiteBright = format(97, 39);
const bgRedBright = format(101, 49);
const bgGreenBright = format(102, 49);
const bgYellowBright = format(103, 49);
const bgBlueBright = format(104, 49);
const bgMagentaBright = format(105, 49);
const bgCyanBright = format(106, 49);
const bgWhiteBright = format(107, 49);

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/verbose/default.js
const defaultVerboseFunction = ({ type, message, timestamp, piped, commandId, result: { failed = false } = {}, options: { reject = true } }) => {
	const timestampString = serializeTimestamp(timestamp);
	const icon = ICONS[type]({
		failed,
		reject,
		piped
	});
	const color = COLORS[type]({ reject });
	return `${gray(`[${timestampString}]`)} ${gray(`[${commandId}]`)} ${color(icon)} ${color(message)}`;
};
const serializeTimestamp = (timestamp) => `${padField(timestamp.getHours(), 2)}:${padField(timestamp.getMinutes(), 2)}:${padField(timestamp.getSeconds(), 2)}.${padField(timestamp.getMilliseconds(), 3)}`;
const padField = (field, padding) => String(field).padStart(padding, "0");
const getFinalIcon = ({ failed, reject }) => {
	if (!failed) return figures_default.tick;
	return reject ? figures_default.cross : figures_default.warning;
};
const ICONS = {
	command: ({ piped }) => piped ? "|" : "$",
	output: () => " ",
	ipc: () => "*",
	error: getFinalIcon,
	duration: getFinalIcon
};
const identity$1 = (string) => string;
const COLORS = {
	command: () => bold,
	output: () => identity$1,
	ipc: () => identity$1,
	error: ({ reject }) => reject ? redBright : yellowBright,
	duration: () => gray
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/verbose/custom.js
const applyVerboseOnLines = (printedLines, verboseInfo, fdNumber) => {
	const verboseFunction = getVerboseFunction(verboseInfo, fdNumber);
	return printedLines.map(({ verboseLine, verboseObject }) => applyVerboseFunction(verboseLine, verboseObject, verboseFunction)).filter((printedLine) => printedLine !== void 0).map((printedLine) => appendNewline(printedLine)).join("");
};
const applyVerboseFunction = (verboseLine, verboseObject, verboseFunction) => {
	if (verboseFunction === void 0) return verboseLine;
	const printedLine = verboseFunction(verboseLine, verboseObject);
	if (typeof printedLine === "string") return printedLine;
};
const appendNewline = (printedLine) => printedLine.endsWith("\n") ? printedLine : `${printedLine}\n`;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/verbose/log.js
const verboseLog = ({ type, verboseMessage, fdNumber, verboseInfo, result }) => {
	const verboseObject = getVerboseObject({
		type,
		result,
		verboseInfo
	});
	const printedLines = getPrintedLines(verboseMessage, verboseObject);
	const finalLines = applyVerboseOnLines(printedLines, verboseInfo, fdNumber);
	writeFileSync(STDERR_FD, finalLines);
};
const getVerboseObject = ({ type, result, verboseInfo: { escapedCommand, commandId, rawOptions: { piped = false,...options } } }) => ({
	type,
	escapedCommand,
	commandId: `${commandId}`,
	timestamp: /* @__PURE__ */ new Date(),
	piped,
	result,
	options
});
const getPrintedLines = (verboseMessage, verboseObject) => verboseMessage.split("\n").map((message) => getPrintedLine({
	...verboseObject,
	message
}));
const getPrintedLine = (verboseObject) => {
	const verboseLine = defaultVerboseFunction(verboseObject);
	return {
		verboseLine,
		verboseObject
	};
};
const STDERR_FD = 2;
const serializeVerboseMessage = (message) => {
	const messageString = typeof message === "string" ? message : inspect(message);
	const escapedMessage = escapeLines(messageString);
	return escapedMessage.replaceAll("	", " ".repeat(TAB_SIZE));
};
const TAB_SIZE = 2;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/verbose/start.js
const logCommand = (escapedCommand, verboseInfo) => {
	if (!isVerbose(verboseInfo)) return;
	verboseLog({
		type: "command",
		verboseMessage: escapedCommand,
		verboseInfo
	});
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/verbose/info.js
const getVerboseInfo = (verbose, escapedCommand, rawOptions) => {
	validateVerbose(verbose);
	const commandId = getCommandId(verbose);
	return {
		verbose,
		escapedCommand,
		commandId,
		rawOptions
	};
};
const getCommandId = (verbose) => isVerbose({ verbose }) ? COMMAND_ID++ : void 0;
let COMMAND_ID = 0n;
const validateVerbose = (verbose) => {
	for (const fdVerbose of verbose) {
		if (fdVerbose === false) throw new TypeError("The \"verbose: false\" option was renamed to \"verbose: 'none'\".");
		if (fdVerbose === true) throw new TypeError("The \"verbose: true\" option was renamed to \"verbose: 'short'\".");
		if (!VERBOSE_VALUES.includes(fdVerbose) && !isVerboseFunction(fdVerbose)) {
			const allowedValues = VERBOSE_VALUES.map((allowedValue) => `'${allowedValue}'`).join(", ");
			throw new TypeError(`The "verbose" option must not be ${fdVerbose}. Allowed values are: ${allowedValues} or a function.`);
		}
	}
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/return/duration.js
const getStartTime = () => hrtime.bigint();
const getDurationMs = (startTime) => Number(hrtime.bigint() - startTime) / 1e6;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/arguments/command.js
const handleCommand = (filePath, rawArguments, rawOptions) => {
	const startTime = getStartTime();
	const { command, escapedCommand } = joinCommand(filePath, rawArguments);
	const verbose = normalizeFdSpecificOption(rawOptions, "verbose");
	const verboseInfo = getVerboseInfo(verbose, escapedCommand, { ...rawOptions });
	logCommand(escapedCommand, verboseInfo);
	return {
		command,
		escapedCommand,
		startTime,
		verboseInfo
	};
};

//#endregion
//#region node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/windows.js
var require_windows = __commonJS({ "node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/windows.js"(exports, module) {
	module.exports = isexe$3;
	isexe$3.sync = sync$2;
	var fs$3 = __require("fs");
	function checkPathExt(path$9, options) {
		var pathext = options.pathExt !== void 0 ? options.pathExt : process.env.PATHEXT;
		if (!pathext) return true;
		pathext = pathext.split(";");
		if (pathext.indexOf("") !== -1) return true;
		for (var i$1 = 0; i$1 < pathext.length; i$1++) {
			var p = pathext[i$1].toLowerCase();
			if (p && path$9.substr(-p.length).toLowerCase() === p) return true;
		}
		return false;
	}
	function checkStat$1(stat, path$9, options) {
		if (!stat.isSymbolicLink() && !stat.isFile()) return false;
		return checkPathExt(path$9, options);
	}
	function isexe$3(path$9, options, cb) {
		fs$3.stat(path$9, function(er, stat) {
			cb(er, er ? false : checkStat$1(stat, path$9, options));
		});
	}
	function sync$2(path$9, options) {
		return checkStat$1(fs$3.statSync(path$9), path$9, options);
	}
} });

//#endregion
//#region node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/mode.js
var require_mode = __commonJS({ "node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/mode.js"(exports, module) {
	module.exports = isexe$2;
	isexe$2.sync = sync$1;
	var fs$2 = __require("fs");
	function isexe$2(path$9, options, cb) {
		fs$2.stat(path$9, function(er, stat) {
			cb(er, er ? false : checkStat(stat, options));
		});
	}
	function sync$1(path$9, options) {
		return checkStat(fs$2.statSync(path$9), options);
	}
	function checkStat(stat, options) {
		return stat.isFile() && checkMode(stat, options);
	}
	function checkMode(stat, options) {
		var mod = stat.mode;
		var uid$6 = stat.uid;
		var gid = stat.gid;
		var myUid = options.uid !== void 0 ? options.uid : process.getuid && process.getuid();
		var myGid = options.gid !== void 0 ? options.gid : process.getgid && process.getgid();
		var u$1 = parseInt("100", 8);
		var g = parseInt("010", 8);
		var o$1 = parseInt("001", 8);
		var ug = u$1 | g;
		var ret = mod & o$1 || mod & g && gid === myGid || mod & u$1 && uid$6 === myUid || mod & ug && myUid === 0;
		return ret;
	}
} });

//#endregion
//#region node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/index.js
var require_isexe = __commonJS({ "node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/index.js"(exports, module) {
	var fs$1 = __require("fs");
	var core;
	if (process.platform === "win32" || global.TESTING_WINDOWS) core = require_windows();
	else core = require_mode();
	module.exports = isexe$1;
	isexe$1.sync = sync;
	function isexe$1(path$9, options, cb) {
		if (typeof options === "function") {
			cb = options;
			options = {};
		}
		if (!cb) {
			if (typeof Promise !== "function") throw new TypeError("callback not provided");
			return new Promise(function(resolve$1, reject) {
				isexe$1(path$9, options || {}, function(er, is) {
					if (er) reject(er);
					else resolve$1(is);
				});
			});
		}
		core(path$9, options || {}, function(er, is) {
			if (er) {
				if (er.code === "EACCES" || options && options.ignoreErrors) {
					er = null;
					is = false;
				}
			}
			cb(er, is);
		});
	}
	function sync(path$9, options) {
		try {
			return core.sync(path$9, options || {});
		} catch (er) {
			if (options && options.ignoreErrors || er.code === "EACCES") return false;
			else throw er;
		}
	}
} });

//#endregion
//#region node_modules/.pnpm/which@2.0.2/node_modules/which/which.js
var require_which = __commonJS({ "node_modules/.pnpm/which@2.0.2/node_modules/which/which.js"(exports, module) {
	const isWindows = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
	const path$3 = __require("path");
	const COLON = isWindows ? ";" : ":";
	const isexe = require_isexe();
	const getNotFoundError = (cmd) => Object.assign(/* @__PURE__ */ new Error(`not found: ${cmd}`), { code: "ENOENT" });
	const getPathInfo = (cmd, opt) => {
		const colon = opt.colon || COLON;
		const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? [""] : [...isWindows ? [process.cwd()] : [], ...(opt.path || process.env.PATH || "").split(colon)];
		const pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
		const pathExt = isWindows ? pathExtExe.split(colon) : [""];
		if (isWindows) {
			if (cmd.indexOf(".") !== -1 && pathExt[0] !== "") pathExt.unshift("");
		}
		return {
			pathEnv,
			pathExt,
			pathExtExe
		};
	};
	const which$1 = (cmd, opt, cb) => {
		if (typeof opt === "function") {
			cb = opt;
			opt = {};
		}
		if (!opt) opt = {};
		const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
		const found = [];
		const step = (i$1) => new Promise((resolve$1, reject) => {
			if (i$1 === pathEnv.length) return opt.all && found.length ? resolve$1(found) : reject(getNotFoundError(cmd));
			const ppRaw = pathEnv[i$1];
			const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
			const pCmd = path$3.join(pathPart, cmd);
			const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
			resolve$1(subStep(p, i$1, 0));
		});
		const subStep = (p, i$1, ii) => new Promise((resolve$1, reject) => {
			if (ii === pathExt.length) return resolve$1(step(i$1 + 1));
			const ext = pathExt[ii];
			isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {
				if (!er && is) if (opt.all) found.push(p + ext);
				else return resolve$1(p + ext);
				return resolve$1(subStep(p, i$1, ii + 1));
			});
		});
		return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
	};
	const whichSync = (cmd, opt) => {
		opt = opt || {};
		const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
		const found = [];
		for (let i$1 = 0; i$1 < pathEnv.length; i$1++) {
			const ppRaw = pathEnv[i$1];
			const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
			const pCmd = path$3.join(pathPart, cmd);
			const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
			for (let j = 0; j < pathExt.length; j++) {
				const cur = p + pathExt[j];
				try {
					const is = isexe.sync(cur, { pathExt: pathExtExe });
					if (is) if (opt.all) found.push(cur);
					else return cur;
				} catch (ex) {}
			}
		}
		if (opt.all && found.length) return found;
		if (opt.nothrow) return null;
		throw getNotFoundError(cmd);
	};
	module.exports = which$1;
	which$1.sync = whichSync;
} });

//#endregion
//#region node_modules/.pnpm/path-key@3.1.1/node_modules/path-key/index.js
var require_path_key = __commonJS({ "node_modules/.pnpm/path-key@3.1.1/node_modules/path-key/index.js"(exports, module) {
	const pathKey$1 = (options = {}) => {
		const environment = options.env || process.env;
		const platform$1 = options.platform || process.platform;
		if (platform$1 !== "win32") return "PATH";
		return Object.keys(environment).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
	};
	module.exports = pathKey$1;
	module.exports.default = pathKey$1;
} });

//#endregion
//#region node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/resolveCommand.js
var require_resolveCommand = __commonJS({ "node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/resolveCommand.js"(exports, module) {
	const path$2 = __require("path");
	const which = require_which();
	const getPathKey = require_path_key();
	function resolveCommandAttempt(parsed, withoutPathExt) {
		const env$1 = parsed.options.env || process.env;
		const cwd = process.cwd();
		const hasCustomCwd = parsed.options.cwd != null;
		const shouldSwitchCwd = hasCustomCwd && process.chdir !== void 0 && !process.chdir.disabled;
		if (shouldSwitchCwd) try {
			process.chdir(parsed.options.cwd);
		} catch (err) {}
		let resolved;
		try {
			resolved = which.sync(parsed.command, {
				path: env$1[getPathKey({ env: env$1 })],
				pathExt: withoutPathExt ? path$2.delimiter : void 0
			});
		} catch (e) {} finally {
			if (shouldSwitchCwd) process.chdir(cwd);
		}
		if (resolved) resolved = path$2.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
		return resolved;
	}
	function resolveCommand$1(parsed) {
		return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
	}
	module.exports = resolveCommand$1;
} });

//#endregion
//#region node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/escape.js
var require_escape = __commonJS({ "node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/escape.js"(exports, module) {
	const metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
	function escapeCommand(arg) {
		arg = arg.replace(metaCharsRegExp, "^$1");
		return arg;
	}
	function escapeArgument(arg, doubleEscapeMetaChars) {
		arg = `${arg}`;
		arg = arg.replace(/(?=(\\+?)?)\1"/g, "$1$1\\\"");
		arg = arg.replace(/(?=(\\+?)?)\1$/, "$1$1");
		arg = `"${arg}"`;
		arg = arg.replace(metaCharsRegExp, "^$1");
		if (doubleEscapeMetaChars) arg = arg.replace(metaCharsRegExp, "^$1");
		return arg;
	}
	module.exports.command = escapeCommand;
	module.exports.argument = escapeArgument;
} });

//#endregion
//#region node_modules/.pnpm/shebang-regex@3.0.0/node_modules/shebang-regex/index.js
var require_shebang_regex = __commonJS({ "node_modules/.pnpm/shebang-regex@3.0.0/node_modules/shebang-regex/index.js"(exports, module) {
	module.exports = /^#!(.*)/;
} });

//#endregion
//#region node_modules/.pnpm/shebang-command@2.0.0/node_modules/shebang-command/index.js
var require_shebang_command = __commonJS({ "node_modules/.pnpm/shebang-command@2.0.0/node_modules/shebang-command/index.js"(exports, module) {
	const shebangRegex = require_shebang_regex();
	module.exports = (string = "") => {
		const match$1 = string.match(shebangRegex);
		if (!match$1) return null;
		const [path$9, argument] = match$1[0].replace(/#! ?/, "").split(" ");
		const binary = path$9.split("/").pop();
		if (binary === "env") return argument;
		return argument ? `${binary} ${argument}` : binary;
	};
} });

//#endregion
//#region node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/readShebang.js
var require_readShebang = __commonJS({ "node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/readShebang.js"(exports, module) {
	const fs = __require("fs");
	const shebangCommand = require_shebang_command();
	function readShebang$1(command) {
		const size = 150;
		const buffer$1 = Buffer.alloc(size);
		let fd;
		try {
			fd = fs.openSync(command, "r");
			fs.readSync(fd, buffer$1, 0, size, 0);
			fs.closeSync(fd);
		} catch (e) {}
		return shebangCommand(buffer$1.toString());
	}
	module.exports = readShebang$1;
} });

//#endregion
//#region node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/parse.js
var require_parse = __commonJS({ "node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/parse.js"(exports, module) {
	const path$1 = __require("path");
	const resolveCommand = require_resolveCommand();
	const escape = require_escape();
	const readShebang = require_readShebang();
	const isWin$1 = process.platform === "win32";
	const isExecutableRegExp = /\.(?:com|exe)$/i;
	const isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
	function detectShebang(parsed) {
		parsed.file = resolveCommand(parsed);
		const shebang = parsed.file && readShebang(parsed.file);
		if (shebang) {
			parsed.args.unshift(parsed.file);
			parsed.command = shebang;
			return resolveCommand(parsed);
		}
		return parsed.file;
	}
	function parseNonShell(parsed) {
		if (!isWin$1) return parsed;
		const commandFile = detectShebang(parsed);
		const needsShell = !isExecutableRegExp.test(commandFile);
		if (parsed.options.forceShell || needsShell) {
			const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
			parsed.command = path$1.normalize(parsed.command);
			parsed.command = escape.command(parsed.command);
			parsed.args = parsed.args.map((arg) => escape.argument(arg, needsDoubleEscapeMetaChars));
			const shellCommand = [parsed.command].concat(parsed.args).join(" ");
			parsed.args = [
				"/d",
				"/s",
				"/c",
				`"${shellCommand}"`
			];
			parsed.command = process.env.comspec || "cmd.exe";
			parsed.options.windowsVerbatimArguments = true;
		}
		return parsed;
	}
	function parse$1(command, args, options) {
		if (args && !Array.isArray(args)) {
			options = args;
			args = null;
		}
		args = args ? args.slice(0) : [];
		options = Object.assign({}, options);
		const parsed = {
			command,
			args,
			options,
			file: void 0,
			original: {
				command,
				args
			}
		};
		return options.shell ? parsed : parseNonShell(parsed);
	}
	module.exports = parse$1;
} });

//#endregion
//#region node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/enoent.js
var require_enoent = __commonJS({ "node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/enoent.js"(exports, module) {
	const isWin = process.platform === "win32";
	function notFoundError(original, syscall) {
		return Object.assign(/* @__PURE__ */ new Error(`${syscall} ${original.command} ENOENT`), {
			code: "ENOENT",
			errno: "ENOENT",
			syscall: `${syscall} ${original.command}`,
			path: original.command,
			spawnargs: original.args
		});
	}
	function hookChildProcess(cp$2, parsed) {
		if (!isWin) return;
		const originalEmit = cp$2.emit;
		cp$2.emit = function(name$2, arg1) {
			if (name$2 === "exit") {
				const err = verifyENOENT(arg1, parsed);
				if (err) return originalEmit.call(cp$2, "error", err);
			}
			return originalEmit.apply(cp$2, arguments);
		};
	}
	function verifyENOENT(status, parsed) {
		if (isWin && status === 1 && !parsed.file) return notFoundError(parsed.original, "spawn");
		return null;
	}
	function verifyENOENTSync(status, parsed) {
		if (isWin && status === 1 && !parsed.file) return notFoundError(parsed.original, "spawnSync");
		return null;
	}
	module.exports = {
		hookChildProcess,
		verifyENOENT,
		verifyENOENTSync,
		notFoundError
	};
} });

//#endregion
//#region node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/index.js
var require_cross_spawn = __commonJS({ "node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/index.js"(exports, module) {
	const cp = __require("child_process");
	const parse = require_parse();
	const enoent = require_enoent();
	function spawn$1(command, args, options) {
		const parsed = parse(command, args, options);
		const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
		enoent.hookChildProcess(spawned, parsed);
		return spawned;
	}
	function spawnSync$1(command, args, options) {
		const parsed = parse(command, args, options);
		const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);
		result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
		return result;
	}
	module.exports = spawn$1;
	module.exports.spawn = spawn$1;
	module.exports.sync = spawnSync$1;
	module.exports._parse = parse;
	module.exports._enoent = enoent;
} });

//#endregion
//#region node_modules/.pnpm/path-key@4.0.0/node_modules/path-key/index.js
function pathKey(options = {}) {
	const { env: env$1 = process.env, platform: platform$1 = process.platform } = options;
	if (platform$1 !== "win32") return "PATH";
	return Object.keys(env$1).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
}

//#endregion
//#region node_modules/.pnpm/npm-run-path@5.3.0/node_modules/npm-run-path/index.js
const npmRunPath = ({ cwd = process$1.cwd(), path: pathOption = process$1.env[pathKey()], preferLocal = true, execPath: execPath$1 = process$1.execPath, addExecPath = true } = {}) => {
	const cwdString = cwd instanceof URL ? fileURLToPath(cwd) : cwd;
	const cwdPath = path.resolve(cwdString);
	const result = [];
	if (preferLocal) applyPreferLocal(result, cwdPath);
	if (addExecPath) applyExecPath(result, execPath$1, cwdPath);
	return [...result, pathOption].join(path.delimiter);
};
const applyPreferLocal = (result, cwdPath) => {
	let previous;
	while (previous !== cwdPath) {
		result.push(path.join(cwdPath, "node_modules/.bin"));
		previous = cwdPath;
		cwdPath = path.resolve(cwdPath, "..");
	}
};
const applyExecPath = (result, execPath$1, cwdPath) => {
	const execPathString = execPath$1 instanceof URL ? fileURLToPath(execPath$1) : execPath$1;
	result.push(path.resolve(cwdPath, execPathString, ".."));
};
const npmRunPathEnv = ({ env: env$1 = process$1.env,...options } = {}) => {
	env$1 = { ...env$1 };
	const pathName = pathKey({ env: env$1 });
	options.path = env$1[pathName];
	env$1[pathName] = npmRunPath(options);
	return env$1;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/return/final-error.js
const getFinalError = (originalError, message, isSync) => {
	const ErrorClass = isSync ? ExecaSyncError : ExecaError;
	const options = originalError instanceof DiscardedError ? {} : { cause: originalError };
	return new ErrorClass(message, options);
};
var DiscardedError = class extends Error {};
const setErrorName = (ErrorClass, value) => {
	Object.defineProperty(ErrorClass.prototype, "name", {
		value,
		writable: true,
		enumerable: false,
		configurable: true
	});
	Object.defineProperty(ErrorClass.prototype, execaErrorSymbol, {
		value: true,
		writable: false,
		enumerable: false,
		configurable: false
	});
};
const isExecaError = (error$1) => isErrorInstance(error$1) && execaErrorSymbol in error$1;
const execaErrorSymbol = Symbol("isExecaError");
const isErrorInstance = (value) => Object.prototype.toString.call(value) === "[object Error]";
var ExecaError = class extends Error {};
setErrorName(ExecaError, ExecaError.name);
var ExecaSyncError = class extends Error {};
setErrorName(ExecaSyncError, ExecaSyncError.name);

//#endregion
//#region node_modules/.pnpm/human-signals@8.0.0/node_modules/human-signals/build/src/realtime.js
const getRealtimeSignals = () => {
	const length = SIGRTMAX - SIGRTMIN + 1;
	return Array.from({ length }, getRealtimeSignal);
};
const getRealtimeSignal = (value, index) => ({
	name: `SIGRT${index + 1}`,
	number: SIGRTMIN + index,
	action: "terminate",
	description: "Application-specific signal (realtime)",
	standard: "posix"
});
const SIGRTMIN = 34;
const SIGRTMAX = 64;

//#endregion
//#region node_modules/.pnpm/human-signals@8.0.0/node_modules/human-signals/build/src/core.js
const SIGNALS = [
	{
		name: "SIGHUP",
		number: 1,
		action: "terminate",
		description: "Terminal closed",
		standard: "posix"
	},
	{
		name: "SIGINT",
		number: 2,
		action: "terminate",
		description: "User interruption with CTRL-C",
		standard: "ansi"
	},
	{
		name: "SIGQUIT",
		number: 3,
		action: "core",
		description: "User interruption with CTRL-\\",
		standard: "posix"
	},
	{
		name: "SIGILL",
		number: 4,
		action: "core",
		description: "Invalid machine instruction",
		standard: "ansi"
	},
	{
		name: "SIGTRAP",
		number: 5,
		action: "core",
		description: "Debugger breakpoint",
		standard: "posix"
	},
	{
		name: "SIGABRT",
		number: 6,
		action: "core",
		description: "Aborted",
		standard: "ansi"
	},
	{
		name: "SIGIOT",
		number: 6,
		action: "core",
		description: "Aborted",
		standard: "bsd"
	},
	{
		name: "SIGBUS",
		number: 7,
		action: "core",
		description: "Bus error due to misaligned, non-existing address or paging error",
		standard: "bsd"
	},
	{
		name: "SIGEMT",
		number: 7,
		action: "terminate",
		description: "Command should be emulated but is not implemented",
		standard: "other"
	},
	{
		name: "SIGFPE",
		number: 8,
		action: "core",
		description: "Floating point arithmetic error",
		standard: "ansi"
	},
	{
		name: "SIGKILL",
		number: 9,
		action: "terminate",
		description: "Forced termination",
		standard: "posix",
		forced: true
	},
	{
		name: "SIGUSR1",
		number: 10,
		action: "terminate",
		description: "Application-specific signal",
		standard: "posix"
	},
	{
		name: "SIGSEGV",
		number: 11,
		action: "core",
		description: "Segmentation fault",
		standard: "ansi"
	},
	{
		name: "SIGUSR2",
		number: 12,
		action: "terminate",
		description: "Application-specific signal",
		standard: "posix"
	},
	{
		name: "SIGPIPE",
		number: 13,
		action: "terminate",
		description: "Broken pipe or socket",
		standard: "posix"
	},
	{
		name: "SIGALRM",
		number: 14,
		action: "terminate",
		description: "Timeout or timer",
		standard: "posix"
	},
	{
		name: "SIGTERM",
		number: 15,
		action: "terminate",
		description: "Termination",
		standard: "ansi"
	},
	{
		name: "SIGSTKFLT",
		number: 16,
		action: "terminate",
		description: "Stack is empty or overflowed",
		standard: "other"
	},
	{
		name: "SIGCHLD",
		number: 17,
		action: "ignore",
		description: "Child process terminated, paused or unpaused",
		standard: "posix"
	},
	{
		name: "SIGCLD",
		number: 17,
		action: "ignore",
		description: "Child process terminated, paused or unpaused",
		standard: "other"
	},
	{
		name: "SIGCONT",
		number: 18,
		action: "unpause",
		description: "Unpaused",
		standard: "posix",
		forced: true
	},
	{
		name: "SIGSTOP",
		number: 19,
		action: "pause",
		description: "Paused",
		standard: "posix",
		forced: true
	},
	{
		name: "SIGTSTP",
		number: 20,
		action: "pause",
		description: "Paused using CTRL-Z or \"suspend\"",
		standard: "posix"
	},
	{
		name: "SIGTTIN",
		number: 21,
		action: "pause",
		description: "Background process cannot read terminal input",
		standard: "posix"
	},
	{
		name: "SIGBREAK",
		number: 21,
		action: "terminate",
		description: "User interruption with CTRL-BREAK",
		standard: "other"
	},
	{
		name: "SIGTTOU",
		number: 22,
		action: "pause",
		description: "Background process cannot write to terminal output",
		standard: "posix"
	},
	{
		name: "SIGURG",
		number: 23,
		action: "ignore",
		description: "Socket received out-of-band data",
		standard: "bsd"
	},
	{
		name: "SIGXCPU",
		number: 24,
		action: "core",
		description: "Process timed out",
		standard: "bsd"
	},
	{
		name: "SIGXFSZ",
		number: 25,
		action: "core",
		description: "File too big",
		standard: "bsd"
	},
	{
		name: "SIGVTALRM",
		number: 26,
		action: "terminate",
		description: "Timeout or timer",
		standard: "bsd"
	},
	{
		name: "SIGPROF",
		number: 27,
		action: "terminate",
		description: "Timeout or timer",
		standard: "bsd"
	},
	{
		name: "SIGWINCH",
		number: 28,
		action: "ignore",
		description: "Terminal window size changed",
		standard: "bsd"
	},
	{
		name: "SIGIO",
		number: 29,
		action: "terminate",
		description: "I/O is available",
		standard: "other"
	},
	{
		name: "SIGPOLL",
		number: 29,
		action: "terminate",
		description: "Watched event",
		standard: "other"
	},
	{
		name: "SIGINFO",
		number: 29,
		action: "ignore",
		description: "Request for process information",
		standard: "other"
	},
	{
		name: "SIGPWR",
		number: 30,
		action: "terminate",
		description: "Device running out of power",
		standard: "systemv"
	},
	{
		name: "SIGSYS",
		number: 31,
		action: "core",
		description: "Invalid system call",
		standard: "other"
	},
	{
		name: "SIGUNUSED",
		number: 31,
		action: "terminate",
		description: "Invalid system call",
		standard: "other"
	}
];

//#endregion
//#region node_modules/.pnpm/human-signals@8.0.0/node_modules/human-signals/build/src/signals.js
const getSignals = () => {
	const realtimeSignals = getRealtimeSignals();
	const signals$1 = [...SIGNALS, ...realtimeSignals].map(normalizeSignal$1);
	return signals$1;
};
const normalizeSignal$1 = ({ name: name$2, number: defaultNumber, description, action, forced = false, standard }) => {
	const { signals: { [name$2]: constantSignal } } = constants;
	const supported = constantSignal !== void 0;
	const number = supported ? constantSignal : defaultNumber;
	return {
		name: name$2,
		number,
		description,
		supported,
		action,
		forced,
		standard
	};
};

//#endregion
//#region node_modules/.pnpm/human-signals@8.0.0/node_modules/human-signals/build/src/main.js
const getSignalsByName = () => {
	const signals$1 = getSignals();
	return Object.fromEntries(signals$1.map(getSignalByName));
};
const getSignalByName = ({ name: name$2, number, description, supported, action, forced, standard }) => [name$2, {
	name: name$2,
	number,
	description,
	supported,
	action,
	forced,
	standard
}];
const signalsByName = getSignalsByName();
const getSignalsByNumber = () => {
	const signals$1 = getSignals();
	const length = SIGRTMAX + 1;
	const signalsA = Array.from({ length }, (value, number) => getSignalByNumber(number, signals$1));
	return Object.assign({}, ...signalsA);
};
const getSignalByNumber = (number, signals$1) => {
	const signal = findSignalByNumber(number, signals$1);
	if (signal === void 0) return {};
	const { name: name$2, description, supported, action, forced, standard } = signal;
	return { [number]: {
		name: name$2,
		number,
		description,
		supported,
		action,
		forced,
		standard
	} };
};
const findSignalByNumber = (number, signals$1) => {
	const signal = signals$1.find(({ name: name$2 }) => constants.signals[name$2] === number);
	if (signal !== void 0) return signal;
	return signals$1.find((signalA) => signalA.number === number);
};
const signalsByNumber = getSignalsByNumber();

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/terminate/signal.js
const normalizeKillSignal = (killSignal) => {
	const optionName = "option `killSignal`";
	if (killSignal === 0) throw new TypeError(`Invalid ${optionName}: 0 cannot be used.`);
	return normalizeSignal(killSignal, optionName);
};
const normalizeSignalArgument = (signal) => signal === 0 ? signal : normalizeSignal(signal, "`subprocess.kill()`'s argument");
const normalizeSignal = (signalNameOrInteger, optionName) => {
	if (Number.isInteger(signalNameOrInteger)) return normalizeSignalInteger(signalNameOrInteger, optionName);
	if (typeof signalNameOrInteger === "string") return normalizeSignalName(signalNameOrInteger, optionName);
	throw new TypeError(`Invalid ${optionName} ${String(signalNameOrInteger)}: it must be a string or an integer.\n${getAvailableSignals()}`);
};
const normalizeSignalInteger = (signalInteger, optionName) => {
	if (signalsIntegerToName.has(signalInteger)) return signalsIntegerToName.get(signalInteger);
	throw new TypeError(`Invalid ${optionName} ${signalInteger}: this signal integer does not exist.\n${getAvailableSignals()}`);
};
const getSignalsIntegerToName = () => new Map(Object.entries(constants.signals).reverse().map(([signalName, signalInteger]) => [signalInteger, signalName]));
const signalsIntegerToName = getSignalsIntegerToName();
const normalizeSignalName = (signalName, optionName) => {
	if (signalName in constants.signals) return signalName;
	if (signalName.toUpperCase() in constants.signals) throw new TypeError(`Invalid ${optionName} '${signalName}': please rename it to '${signalName.toUpperCase()}'.`);
	throw new TypeError(`Invalid ${optionName} '${signalName}': this signal name does not exist.\n${getAvailableSignals()}`);
};
const getAvailableSignals = () => `Available signal names: ${getAvailableSignalNames()}.
Available signal numbers: ${getAvailableSignalIntegers()}.`;
const getAvailableSignalNames = () => Object.keys(constants.signals).sort().map((signalName) => `'${signalName}'`).join(", ");
const getAvailableSignalIntegers = () => [...new Set(Object.values(constants.signals).sort((signalInteger, signalIntegerTwo) => signalInteger - signalIntegerTwo))].join(", ");
const getSignalDescription = (signal) => signalsByName[signal].description;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/terminate/kill.js
const normalizeForceKillAfterDelay = (forceKillAfterDelay) => {
	if (forceKillAfterDelay === false) return forceKillAfterDelay;
	if (forceKillAfterDelay === true) return DEFAULT_FORCE_KILL_TIMEOUT;
	if (!Number.isFinite(forceKillAfterDelay) || forceKillAfterDelay < 0) throw new TypeError(`Expected the \`forceKillAfterDelay\` option to be a non-negative integer, got \`${forceKillAfterDelay}\` (${typeof forceKillAfterDelay})`);
	return forceKillAfterDelay;
};
const DEFAULT_FORCE_KILL_TIMEOUT = 1e3 * 5;
const subprocessKill = ({ kill, options: { forceKillAfterDelay, killSignal }, onInternalError, context: context$1, controller }, signalOrError, errorArgument) => {
	const { signal, error: error$1 } = parseKillArguments(signalOrError, errorArgument, killSignal);
	emitKillError(error$1, onInternalError);
	const killResult = kill(signal);
	setKillTimeout({
		kill,
		signal,
		forceKillAfterDelay,
		killSignal,
		killResult,
		context: context$1,
		controller
	});
	return killResult;
};
const parseKillArguments = (signalOrError, errorArgument, killSignal) => {
	const [signal = killSignal, error$1] = isErrorInstance(signalOrError) ? [void 0, signalOrError] : [signalOrError, errorArgument];
	if (typeof signal !== "string" && !Number.isInteger(signal)) throw new TypeError(`The first argument must be an error instance or a signal name string/integer: ${String(signal)}`);
	if (error$1 !== void 0 && !isErrorInstance(error$1)) throw new TypeError(`The second argument is optional. If specified, it must be an error instance: ${error$1}`);
	return {
		signal: normalizeSignalArgument(signal),
		error: error$1
	};
};
const emitKillError = (error$1, onInternalError) => {
	if (error$1 !== void 0) onInternalError.reject(error$1);
};
const setKillTimeout = async ({ kill, signal, forceKillAfterDelay, killSignal, killResult, context: context$1, controller }) => {
	if (signal === killSignal && killResult) killOnTimeout({
		kill,
		forceKillAfterDelay,
		context: context$1,
		controllerSignal: controller.signal
	});
};
const killOnTimeout = async ({ kill, forceKillAfterDelay, context: context$1, controllerSignal }) => {
	if (forceKillAfterDelay === false) return;
	try {
		await setTimeout$1(forceKillAfterDelay, void 0, { signal: controllerSignal });
		if (kill("SIGKILL")) context$1.isForcefullyTerminated ??= true;
	} catch {}
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/utils/abort-signal.js
const onAbortedSignal = async (mainSignal, stopSignal) => {
	if (!mainSignal.aborted) await once(mainSignal, "abort", { signal: stopSignal });
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/terminate/cancel.js
const validateCancelSignal = ({ cancelSignal }) => {
	if (cancelSignal !== void 0 && Object.prototype.toString.call(cancelSignal) !== "[object AbortSignal]") throw new Error(`The \`cancelSignal\` option must be an AbortSignal: ${String(cancelSignal)}`);
};
const throwOnCancel = ({ subprocess, cancelSignal, gracefulCancel, context: context$1, controller }) => cancelSignal === void 0 || gracefulCancel ? [] : [terminateOnCancel(subprocess, cancelSignal, context$1, controller)];
const terminateOnCancel = async (subprocess, cancelSignal, context$1, { signal }) => {
	await onAbortedSignal(cancelSignal, signal);
	context$1.terminationReason ??= "cancel";
	subprocess.kill();
	throw cancelSignal.reason;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/validation.js
const validateIpcMethod = ({ methodName, isSubprocess, ipc, isConnected: isConnected$1 }) => {
	validateIpcOption(methodName, isSubprocess, ipc);
	validateConnection(methodName, isSubprocess, isConnected$1);
};
const validateIpcOption = (methodName, isSubprocess, ipc) => {
	if (!ipc) throw new Error(`${getMethodName(methodName, isSubprocess)} can only be used if the \`ipc\` option is \`true\`.`);
};
const validateConnection = (methodName, isSubprocess, isConnected$1) => {
	if (!isConnected$1) throw new Error(`${getMethodName(methodName, isSubprocess)} cannot be used: the ${getOtherProcessName(isSubprocess)} has already exited or disconnected.`);
};
const throwOnEarlyDisconnect = (isSubprocess) => {
	throw new Error(`${getMethodName("getOneMessage", isSubprocess)} could not complete: the ${getOtherProcessName(isSubprocess)} exited or disconnected.`);
};
const throwOnStrictDeadlockError = (isSubprocess) => {
	throw new Error(`${getMethodName("sendMessage", isSubprocess)} failed: the ${getOtherProcessName(isSubprocess)} is sending a message too, instead of listening to incoming messages.
This can be fixed by both sending a message and listening to incoming messages at the same time:

const [receivedMessage] = await Promise.all([
	${getMethodName("getOneMessage", isSubprocess)},
	${getMethodName("sendMessage", isSubprocess, "message, {strict: true}")},
]);`);
};
const getStrictResponseError = (error$1, isSubprocess) => new Error(`${getMethodName("sendMessage", isSubprocess)} failed when sending an acknowledgment response to the ${getOtherProcessName(isSubprocess)}.`, { cause: error$1 });
const throwOnMissingStrict = (isSubprocess) => {
	throw new Error(`${getMethodName("sendMessage", isSubprocess)} failed: the ${getOtherProcessName(isSubprocess)} is not listening to incoming messages.`);
};
const throwOnStrictDisconnect = (isSubprocess) => {
	throw new Error(`${getMethodName("sendMessage", isSubprocess)} failed: the ${getOtherProcessName(isSubprocess)} exited without listening to incoming messages.`);
};
const getAbortDisconnectError = () => /* @__PURE__ */ new Error(`\`cancelSignal\` aborted: the ${getOtherProcessName(true)} disconnected.`);
const throwOnMissingParent = () => {
	throw new Error("`getCancelSignal()` cannot be used without setting the `cancelSignal` subprocess option.");
};
const handleEpipeError = ({ error: error$1, methodName, isSubprocess }) => {
	if (error$1.code === "EPIPE") throw new Error(`${getMethodName(methodName, isSubprocess)} cannot be used: the ${getOtherProcessName(isSubprocess)} is disconnecting.`, { cause: error$1 });
};
const handleSerializationError = ({ error: error$1, methodName, isSubprocess, message }) => {
	if (isSerializationError(error$1)) throw new Error(`${getMethodName(methodName, isSubprocess)}'s argument type is invalid: the message cannot be serialized: ${String(message)}.`, { cause: error$1 });
};
const isSerializationError = ({ code, message }) => SERIALIZATION_ERROR_CODES.has(code) || SERIALIZATION_ERROR_MESSAGES.some((serializationErrorMessage) => message.includes(serializationErrorMessage));
const SERIALIZATION_ERROR_CODES = new Set(["ERR_MISSING_ARGS", "ERR_INVALID_ARG_TYPE"]);
const SERIALIZATION_ERROR_MESSAGES = [
	"could not be cloned",
	"circular structure",
	"call stack size exceeded"
];
const getMethodName = (methodName, isSubprocess, parameters = "") => methodName === "cancelSignal" ? "`cancelSignal`'s `controller.abort()`" : `${getNamespaceName(isSubprocess)}${methodName}(${parameters})`;
const getNamespaceName = (isSubprocess) => isSubprocess ? "" : "subprocess.";
const getOtherProcessName = (isSubprocess) => isSubprocess ? "parent process" : "subprocess";
const disconnect = (anyProcess) => {
	if (anyProcess.connected) anyProcess.disconnect();
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/utils/deferred.js
const createDeferred = () => {
	const methods = {};
	const promise = new Promise((resolve$1, reject) => {
		Object.assign(methods, {
			resolve: resolve$1,
			reject
		});
	});
	return Object.assign(promise, methods);
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/arguments/fd-options.js
const getToStream = (destination, to$1 = "stdin") => {
	const isWritable = true;
	const { options, fileDescriptors } = SUBPROCESS_OPTIONS.get(destination);
	const fdNumber = getFdNumber(fileDescriptors, to$1, isWritable);
	const destinationStream = destination.stdio[fdNumber];
	if (destinationStream === null) throw new TypeError(getInvalidStdioOptionMessage(fdNumber, to$1, options, isWritable));
	return destinationStream;
};
const getFromStream = (source, from = "stdout") => {
	const isWritable = false;
	const { options, fileDescriptors } = SUBPROCESS_OPTIONS.get(source);
	const fdNumber = getFdNumber(fileDescriptors, from, isWritable);
	const sourceStream = fdNumber === "all" ? source.all : source.stdio[fdNumber];
	if (sourceStream === null || sourceStream === void 0) throw new TypeError(getInvalidStdioOptionMessage(fdNumber, from, options, isWritable));
	return sourceStream;
};
const SUBPROCESS_OPTIONS = /* @__PURE__ */ new WeakMap();
const getFdNumber = (fileDescriptors, fdName, isWritable) => {
	const fdNumber = parseFdNumber(fdName, isWritable);
	validateFdNumber(fdNumber, fdName, isWritable, fileDescriptors);
	return fdNumber;
};
const parseFdNumber = (fdName, isWritable) => {
	const fdNumber = parseFd(fdName);
	if (fdNumber !== void 0) return fdNumber;
	const { validOptions, defaultValue } = isWritable ? {
		validOptions: "\"stdin\"",
		defaultValue: "stdin"
	} : {
		validOptions: "\"stdout\", \"stderr\", \"all\"",
		defaultValue: "stdout"
	};
	throw new TypeError(`"${getOptionName(isWritable)}" must not be "${fdName}".
It must be ${validOptions} or "fd3", "fd4" (and so on).
It is optional and defaults to "${defaultValue}".`);
};
const validateFdNumber = (fdNumber, fdName, isWritable, fileDescriptors) => {
	const fileDescriptor = fileDescriptors[getUsedDescriptor(fdNumber)];
	if (fileDescriptor === void 0) throw new TypeError(`"${getOptionName(isWritable)}" must not be ${fdName}. That file descriptor does not exist.
Please set the "stdio" option to ensure that file descriptor exists.`);
	if (fileDescriptor.direction === "input" && !isWritable) throw new TypeError(`"${getOptionName(isWritable)}" must not be ${fdName}. It must be a readable stream, not writable.`);
	if (fileDescriptor.direction !== "input" && isWritable) throw new TypeError(`"${getOptionName(isWritable)}" must not be ${fdName}. It must be a writable stream, not readable.`);
};
const getInvalidStdioOptionMessage = (fdNumber, fdName, options, isWritable) => {
	if (fdNumber === "all" && !options.all) return "The \"all\" option must be true to use \"from: 'all'\".";
	const { optionName, optionValue } = getInvalidStdioOption(fdNumber, options);
	return `The "${optionName}: ${serializeOptionValue(optionValue)}" option is incompatible with using "${getOptionName(isWritable)}: ${serializeOptionValue(fdName)}".
Please set this option with "pipe" instead.`;
};
const getInvalidStdioOption = (fdNumber, { stdin, stdout: stdout$1, stderr, stdio }) => {
	const usedDescriptor = getUsedDescriptor(fdNumber);
	if (usedDescriptor === 0 && stdin !== void 0) return {
		optionName: "stdin",
		optionValue: stdin
	};
	if (usedDescriptor === 1 && stdout$1 !== void 0) return {
		optionName: "stdout",
		optionValue: stdout$1
	};
	if (usedDescriptor === 2 && stderr !== void 0) return {
		optionName: "stderr",
		optionValue: stderr
	};
	return {
		optionName: `stdio[${usedDescriptor}]`,
		optionValue: stdio[usedDescriptor]
	};
};
const getUsedDescriptor = (fdNumber) => fdNumber === "all" ? 1 : fdNumber;
const getOptionName = (isWritable) => isWritable ? "to" : "from";
const serializeOptionValue = (value) => {
	if (typeof value === "string") return `'${value}'`;
	return typeof value === "number" ? `${value}` : "Stream";
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/utils/max-listeners.js
const incrementMaxListeners = (eventEmitter, maxListenersIncrement, signal) => {
	const maxListeners = eventEmitter.getMaxListeners();
	if (maxListeners === 0 || maxListeners === Number.POSITIVE_INFINITY) return;
	eventEmitter.setMaxListeners(maxListeners + maxListenersIncrement);
	addAbortListener(signal, () => {
		eventEmitter.setMaxListeners(eventEmitter.getMaxListeners() - maxListenersIncrement);
	});
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/reference.js
const addReference = (channel$1, reference) => {
	if (reference) addReferenceCount(channel$1);
};
const addReferenceCount = (channel$1) => {
	channel$1.refCounted();
};
const removeReference = (channel$1, reference) => {
	if (reference) removeReferenceCount(channel$1);
};
const removeReferenceCount = (channel$1) => {
	channel$1.unrefCounted();
};
const undoAddedReferences = (channel$1, isSubprocess) => {
	if (isSubprocess) {
		removeReferenceCount(channel$1);
		removeReferenceCount(channel$1);
	}
};
const redoAddedReferences = (channel$1, isSubprocess) => {
	if (isSubprocess) {
		addReferenceCount(channel$1);
		addReferenceCount(channel$1);
	}
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/incoming.js
const onMessage = async ({ anyProcess, channel: channel$1, isSubprocess, ipcEmitter }, wrappedMessage) => {
	if (handleStrictResponse(wrappedMessage) || handleAbort(wrappedMessage)) return;
	if (!INCOMING_MESSAGES.has(anyProcess)) INCOMING_MESSAGES.set(anyProcess, []);
	const incomingMessages = INCOMING_MESSAGES.get(anyProcess);
	incomingMessages.push(wrappedMessage);
	if (incomingMessages.length > 1) return;
	while (incomingMessages.length > 0) {
		await waitForOutgoingMessages(anyProcess, ipcEmitter, wrappedMessage);
		await scheduler.yield();
		const message = await handleStrictRequest({
			wrappedMessage: incomingMessages[0],
			anyProcess,
			channel: channel$1,
			isSubprocess,
			ipcEmitter
		});
		incomingMessages.shift();
		ipcEmitter.emit("message", message);
		ipcEmitter.emit("message:done");
	}
};
const onDisconnect = async ({ anyProcess, channel: channel$1, isSubprocess, ipcEmitter, boundOnMessage }) => {
	abortOnDisconnect();
	const incomingMessages = INCOMING_MESSAGES.get(anyProcess);
	while (incomingMessages?.length > 0) await once(ipcEmitter, "message:done");
	anyProcess.removeListener("message", boundOnMessage);
	redoAddedReferences(channel$1, isSubprocess);
	ipcEmitter.connected = false;
	ipcEmitter.emit("disconnect");
};
const INCOMING_MESSAGES = /* @__PURE__ */ new WeakMap();

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/forward.js
const getIpcEmitter = (anyProcess, channel$1, isSubprocess) => {
	if (IPC_EMITTERS.has(anyProcess)) return IPC_EMITTERS.get(anyProcess);
	const ipcEmitter = new EventEmitter();
	ipcEmitter.connected = true;
	IPC_EMITTERS.set(anyProcess, ipcEmitter);
	forwardEvents({
		ipcEmitter,
		anyProcess,
		channel: channel$1,
		isSubprocess
	});
	return ipcEmitter;
};
const IPC_EMITTERS = /* @__PURE__ */ new WeakMap();
const forwardEvents = ({ ipcEmitter, anyProcess, channel: channel$1, isSubprocess }) => {
	const boundOnMessage = onMessage.bind(void 0, {
		anyProcess,
		channel: channel$1,
		isSubprocess,
		ipcEmitter
	});
	anyProcess.on("message", boundOnMessage);
	anyProcess.once("disconnect", onDisconnect.bind(void 0, {
		anyProcess,
		channel: channel$1,
		isSubprocess,
		ipcEmitter,
		boundOnMessage
	}));
	undoAddedReferences(channel$1, isSubprocess);
};
const isConnected = (anyProcess) => {
	const ipcEmitter = IPC_EMITTERS.get(anyProcess);
	return ipcEmitter === void 0 ? anyProcess.channel !== null : ipcEmitter.connected;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/strict.js
const handleSendStrict = ({ anyProcess, channel: channel$1, isSubprocess, message, strict }) => {
	if (!strict) return message;
	const ipcEmitter = getIpcEmitter(anyProcess, channel$1, isSubprocess);
	const hasListeners = hasMessageListeners(anyProcess, ipcEmitter);
	return {
		id: count++,
		type: REQUEST_TYPE,
		message,
		hasListeners
	};
};
let count = 0n;
const validateStrictDeadlock = (outgoingMessages, wrappedMessage) => {
	if (wrappedMessage?.type !== REQUEST_TYPE || wrappedMessage.hasListeners) return;
	for (const { id: id$1 } of outgoingMessages) if (id$1 !== void 0) STRICT_RESPONSES[id$1].resolve({
		isDeadlock: true,
		hasListeners: false
	});
};
const handleStrictRequest = async ({ wrappedMessage, anyProcess, channel: channel$1, isSubprocess, ipcEmitter }) => {
	if (wrappedMessage?.type !== REQUEST_TYPE || !anyProcess.connected) return wrappedMessage;
	const { id: id$1, message } = wrappedMessage;
	const response = {
		id: id$1,
		type: RESPONSE_TYPE,
		message: hasMessageListeners(anyProcess, ipcEmitter)
	};
	try {
		await sendMessage$1({
			anyProcess,
			channel: channel$1,
			isSubprocess,
			ipc: true
		}, response);
	} catch (error$1) {
		ipcEmitter.emit("strict:error", error$1);
	}
	return message;
};
const handleStrictResponse = (wrappedMessage) => {
	if (wrappedMessage?.type !== RESPONSE_TYPE) return false;
	const { id: id$1, message: hasListeners } = wrappedMessage;
	STRICT_RESPONSES[id$1]?.resolve({
		isDeadlock: false,
		hasListeners
	});
	return true;
};
const waitForStrictResponse = async (wrappedMessage, anyProcess, isSubprocess) => {
	if (wrappedMessage?.type !== REQUEST_TYPE) return;
	const deferred = createDeferred();
	STRICT_RESPONSES[wrappedMessage.id] = deferred;
	const controller = new AbortController();
	try {
		const { isDeadlock, hasListeners } = await Promise.race([deferred, throwOnDisconnect$1(anyProcess, isSubprocess, controller)]);
		if (isDeadlock) throwOnStrictDeadlockError(isSubprocess);
		if (!hasListeners) throwOnMissingStrict(isSubprocess);
	} finally {
		controller.abort();
		delete STRICT_RESPONSES[wrappedMessage.id];
	}
};
const STRICT_RESPONSES = {};
const throwOnDisconnect$1 = async (anyProcess, isSubprocess, { signal }) => {
	incrementMaxListeners(anyProcess, 1, signal);
	await once(anyProcess, "disconnect", { signal });
	throwOnStrictDisconnect(isSubprocess);
};
const REQUEST_TYPE = "execa:ipc:request";
const RESPONSE_TYPE = "execa:ipc:response";

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/outgoing.js
const startSendMessage = (anyProcess, wrappedMessage, strict) => {
	if (!OUTGOING_MESSAGES.has(anyProcess)) OUTGOING_MESSAGES.set(anyProcess, /* @__PURE__ */ new Set());
	const outgoingMessages = OUTGOING_MESSAGES.get(anyProcess);
	const onMessageSent = createDeferred();
	const id$1 = strict ? wrappedMessage.id : void 0;
	const outgoingMessage = {
		onMessageSent,
		id: id$1
	};
	outgoingMessages.add(outgoingMessage);
	return {
		outgoingMessages,
		outgoingMessage
	};
};
const endSendMessage = ({ outgoingMessages, outgoingMessage }) => {
	outgoingMessages.delete(outgoingMessage);
	outgoingMessage.onMessageSent.resolve();
};
const waitForOutgoingMessages = async (anyProcess, ipcEmitter, wrappedMessage) => {
	while (!hasMessageListeners(anyProcess, ipcEmitter) && OUTGOING_MESSAGES.get(anyProcess)?.size > 0) {
		const outgoingMessages = [...OUTGOING_MESSAGES.get(anyProcess)];
		validateStrictDeadlock(outgoingMessages, wrappedMessage);
		await Promise.all(outgoingMessages.map(({ onMessageSent }) => onMessageSent));
	}
};
const OUTGOING_MESSAGES = /* @__PURE__ */ new WeakMap();
const hasMessageListeners = (anyProcess, ipcEmitter) => ipcEmitter.listenerCount("message") > getMinListenerCount(anyProcess);
const getMinListenerCount = (anyProcess) => SUBPROCESS_OPTIONS.has(anyProcess) && !getFdSpecificValue(SUBPROCESS_OPTIONS.get(anyProcess).options.buffer, "ipc") ? 1 : 0;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/send.js
const sendMessage$1 = ({ anyProcess, channel: channel$1, isSubprocess, ipc }, message, { strict = false } = {}) => {
	const methodName = "sendMessage";
	validateIpcMethod({
		methodName,
		isSubprocess,
		ipc,
		isConnected: anyProcess.connected
	});
	return sendMessageAsync({
		anyProcess,
		channel: channel$1,
		methodName,
		isSubprocess,
		message,
		strict
	});
};
const sendMessageAsync = async ({ anyProcess, channel: channel$1, methodName, isSubprocess, message, strict }) => {
	const wrappedMessage = handleSendStrict({
		anyProcess,
		channel: channel$1,
		isSubprocess,
		message,
		strict
	});
	const outgoingMessagesState = startSendMessage(anyProcess, wrappedMessage, strict);
	try {
		await sendOneMessage({
			anyProcess,
			methodName,
			isSubprocess,
			wrappedMessage,
			message
		});
	} catch (error$1) {
		disconnect(anyProcess);
		throw error$1;
	} finally {
		endSendMessage(outgoingMessagesState);
	}
};
const sendOneMessage = async ({ anyProcess, methodName, isSubprocess, wrappedMessage, message }) => {
	const sendMethod = getSendMethod(anyProcess);
	try {
		await Promise.all([waitForStrictResponse(wrappedMessage, anyProcess, isSubprocess), sendMethod(wrappedMessage)]);
	} catch (error$1) {
		handleEpipeError({
			error: error$1,
			methodName,
			isSubprocess
		});
		handleSerializationError({
			error: error$1,
			methodName,
			isSubprocess,
			message
		});
		throw error$1;
	}
};
const getSendMethod = (anyProcess) => {
	if (PROCESS_SEND_METHODS.has(anyProcess)) return PROCESS_SEND_METHODS.get(anyProcess);
	const sendMethod = promisify(anyProcess.send.bind(anyProcess));
	PROCESS_SEND_METHODS.set(anyProcess, sendMethod);
	return sendMethod;
};
const PROCESS_SEND_METHODS = /* @__PURE__ */ new WeakMap();

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/graceful.js
const sendAbort = (subprocess, message) => {
	const methodName = "cancelSignal";
	validateConnection(methodName, false, subprocess.connected);
	return sendOneMessage({
		anyProcess: subprocess,
		methodName,
		isSubprocess: false,
		wrappedMessage: {
			type: GRACEFUL_CANCEL_TYPE,
			message
		},
		message
	});
};
const getCancelSignal$1 = async ({ anyProcess, channel: channel$1, isSubprocess, ipc }) => {
	await startIpc({
		anyProcess,
		channel: channel$1,
		isSubprocess,
		ipc
	});
	return cancelController.signal;
};
const startIpc = async ({ anyProcess, channel: channel$1, isSubprocess, ipc }) => {
	if (cancelListening) return;
	cancelListening = true;
	if (!ipc) {
		throwOnMissingParent();
		return;
	}
	if (channel$1 === null) {
		abortOnDisconnect();
		return;
	}
	getIpcEmitter(anyProcess, channel$1, isSubprocess);
	await scheduler.yield();
};
let cancelListening = false;
const handleAbort = (wrappedMessage) => {
	if (wrappedMessage?.type !== GRACEFUL_CANCEL_TYPE) return false;
	cancelController.abort(wrappedMessage.message);
	return true;
};
const GRACEFUL_CANCEL_TYPE = "execa:ipc:cancel";
const abortOnDisconnect = () => {
	cancelController.abort(getAbortDisconnectError());
};
const cancelController = new AbortController();

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/terminate/graceful.js
const validateGracefulCancel = ({ gracefulCancel, cancelSignal, ipc, serialization }) => {
	if (!gracefulCancel) return;
	if (cancelSignal === void 0) throw new Error("The `cancelSignal` option must be defined when setting the `gracefulCancel` option.");
	if (!ipc) throw new Error("The `ipc` option cannot be false when setting the `gracefulCancel` option.");
	if (serialization === "json") throw new Error("The `serialization` option cannot be 'json' when setting the `gracefulCancel` option.");
};
const throwOnGracefulCancel = ({ subprocess, cancelSignal, gracefulCancel, forceKillAfterDelay, context: context$1, controller }) => gracefulCancel ? [sendOnAbort({
	subprocess,
	cancelSignal,
	forceKillAfterDelay,
	context: context$1,
	controller
})] : [];
const sendOnAbort = async ({ subprocess, cancelSignal, forceKillAfterDelay, context: context$1, controller: { signal } }) => {
	await onAbortedSignal(cancelSignal, signal);
	const reason = getReason(cancelSignal);
	await sendAbort(subprocess, reason);
	killOnTimeout({
		kill: subprocess.kill,
		forceKillAfterDelay,
		context: context$1,
		controllerSignal: signal
	});
	context$1.terminationReason ??= "gracefulCancel";
	throw cancelSignal.reason;
};
const getReason = ({ reason }) => {
	if (!(reason instanceof DOMException)) return reason;
	const error$1 = new Error(reason.message);
	Object.defineProperty(error$1, "stack", {
		value: reason.stack,
		enumerable: false,
		configurable: true,
		writable: true
	});
	return error$1;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/terminate/timeout.js
const validateTimeout = ({ timeout }) => {
	if (timeout !== void 0 && (!Number.isFinite(timeout) || timeout < 0)) throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${timeout}\` (${typeof timeout})`);
};
const throwOnTimeout = (subprocess, timeout, context$1, controller) => timeout === 0 || timeout === void 0 ? [] : [killAfterTimeout(subprocess, timeout, context$1, controller)];
const killAfterTimeout = async (subprocess, timeout, context$1, { signal }) => {
	await setTimeout$1(timeout, void 0, { signal });
	context$1.terminationReason ??= "timeout";
	subprocess.kill();
	throw new DiscardedError();
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/methods/node.js
const mapNode = ({ options }) => {
	if (options.node === false) throw new TypeError("The \"node\" option cannot be false with `execaNode()`.");
	return { options: {
		...options,
		node: true
	} };
};
const handleNodeOption = (file, commandArguments, { node: shouldHandleNode = false, nodePath = execPath, nodeOptions = execArgv.filter((nodeOption) => !nodeOption.startsWith("--inspect")), cwd, execPath: formerNodePath,...options }) => {
	if (formerNodePath !== void 0) throw new TypeError("The \"execPath\" option has been removed. Please use the \"nodePath\" option instead.");
	const normalizedNodePath = safeNormalizeFileUrl(nodePath, "The \"nodePath\" option");
	const resolvedNodePath = path.resolve(cwd, normalizedNodePath);
	const newOptions = {
		...options,
		nodePath: resolvedNodePath,
		node: shouldHandleNode,
		cwd
	};
	if (!shouldHandleNode) return [
		file,
		commandArguments,
		newOptions
	];
	if (path.basename(file, ".exe") === "node") throw new TypeError("When the \"node\" option is true, the first argument does not need to be \"node\".");
	return [
		resolvedNodePath,
		[
			...nodeOptions,
			file,
			...commandArguments
		],
		{
			ipc: true,
			...newOptions,
			shell: false
		}
	];
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/ipc-input.js
const validateIpcInputOption = ({ ipcInput, ipc, serialization }) => {
	if (ipcInput === void 0) return;
	if (!ipc) throw new Error("The `ipcInput` option cannot be set unless the `ipc` option is `true`.");
	validateIpcInput[serialization](ipcInput);
};
const validateAdvancedInput = (ipcInput) => {
	try {
		serialize(ipcInput);
	} catch (error$1) {
		throw new Error("The `ipcInput` option is not serializable with a structured clone.", { cause: error$1 });
	}
};
const validateJsonInput = (ipcInput) => {
	try {
		JSON.stringify(ipcInput);
	} catch (error$1) {
		throw new Error("The `ipcInput` option is not serializable with JSON.", { cause: error$1 });
	}
};
const validateIpcInput = {
	advanced: validateAdvancedInput,
	json: validateJsonInput
};
const sendIpcInput = async (subprocess, ipcInput) => {
	if (ipcInput === void 0) return;
	await subprocess.sendMessage(ipcInput);
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/arguments/encoding-option.js
const validateEncoding = ({ encoding }) => {
	if (ENCODINGS.has(encoding)) return;
	const correctEncoding = getCorrectEncoding(encoding);
	if (correctEncoding !== void 0) throw new TypeError(`Invalid option \`encoding: ${serializeEncoding(encoding)}\`.
Please rename it to ${serializeEncoding(correctEncoding)}.`);
	const correctEncodings = [...ENCODINGS].map((correctEncoding$1) => serializeEncoding(correctEncoding$1)).join(", ");
	throw new TypeError(`Invalid option \`encoding: ${serializeEncoding(encoding)}\`.
Please rename it to one of: ${correctEncodings}.`);
};
const TEXT_ENCODINGS = new Set(["utf8", "utf16le"]);
const BINARY_ENCODINGS = new Set([
	"buffer",
	"hex",
	"base64",
	"base64url",
	"latin1",
	"ascii"
]);
const ENCODINGS = new Set([...TEXT_ENCODINGS, ...BINARY_ENCODINGS]);
const getCorrectEncoding = (encoding) => {
	if (encoding === null) return "buffer";
	if (typeof encoding !== "string") return;
	const lowerEncoding = encoding.toLowerCase();
	if (lowerEncoding in ENCODING_ALIASES) return ENCODING_ALIASES[lowerEncoding];
	if (ENCODINGS.has(lowerEncoding)) return lowerEncoding;
};
const ENCODING_ALIASES = {
	"utf-8": "utf8",
	"utf-16le": "utf16le",
	"ucs-2": "utf16le",
	ucs2: "utf16le",
	binary: "latin1"
};
const serializeEncoding = (encoding) => typeof encoding === "string" ? `"${encoding}"` : String(encoding);

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/arguments/cwd.js
const normalizeCwd = (cwd = getDefaultCwd()) => {
	const cwdString = safeNormalizeFileUrl(cwd, "The \"cwd\" option");
	return path.resolve(cwdString);
};
const getDefaultCwd = () => {
	try {
		return process$1.cwd();
	} catch (error$1) {
		error$1.message = `The current directory does not exist.\n${error$1.message}`;
		throw error$1;
	}
};
const fixCwdError = (originalMessage, cwd) => {
	if (cwd === getDefaultCwd()) return originalMessage;
	let cwdStat;
	try {
		cwdStat = statSync(cwd);
	} catch (error$1) {
		return `The "cwd" option is invalid: ${cwd}.\n${error$1.message}\n${originalMessage}`;
	}
	if (!cwdStat.isDirectory()) return `The "cwd" option is not a directory: ${cwd}.\n${originalMessage}`;
	return originalMessage;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/arguments/options.js
var import_cross_spawn = __toESM$1(require_cross_spawn(), 1);
const normalizeOptions = (filePath, rawArguments, rawOptions) => {
	rawOptions.cwd = normalizeCwd(rawOptions.cwd);
	const [processedFile, processedArguments, processedOptions] = handleNodeOption(filePath, rawArguments, rawOptions);
	const { command: file, args: commandArguments, options: initialOptions } = import_cross_spawn.default._parse(processedFile, processedArguments, processedOptions);
	const fdOptions = normalizeFdSpecificOptions(initialOptions);
	const options = addDefaultOptions(fdOptions);
	validateTimeout(options);
	validateEncoding(options);
	validateIpcInputOption(options);
	validateCancelSignal(options);
	validateGracefulCancel(options);
	options.shell = normalizeFileUrl(options.shell);
	options.env = getEnv(options);
	options.killSignal = normalizeKillSignal(options.killSignal);
	options.forceKillAfterDelay = normalizeForceKillAfterDelay(options.forceKillAfterDelay);
	options.lines = options.lines.map((lines, fdNumber) => lines && !BINARY_ENCODINGS.has(options.encoding) && options.buffer[fdNumber]);
	if (process$1.platform === "win32" && path.basename(file, ".exe") === "cmd") commandArguments.unshift("/q");
	return {
		file,
		commandArguments,
		options
	};
};
const addDefaultOptions = ({ extendEnv = true, preferLocal = false, cwd, localDir: localDirectory = cwd, encoding = "utf8", reject = true, cleanup = true, all = false, windowsHide = true, killSignal = "SIGTERM", forceKillAfterDelay = true, gracefulCancel = false, ipcInput, ipc = ipcInput !== void 0 || gracefulCancel, serialization = "advanced",...options }) => ({
	...options,
	extendEnv,
	preferLocal,
	cwd,
	localDirectory,
	encoding,
	reject,
	cleanup,
	all,
	windowsHide,
	killSignal,
	forceKillAfterDelay,
	gracefulCancel,
	ipcInput,
	ipc,
	serialization
});
const getEnv = ({ env: envOption, extendEnv, preferLocal, node, localDirectory, nodePath }) => {
	const env$1 = extendEnv ? {
		...process$1.env,
		...envOption
	} : envOption;
	if (preferLocal || node) return npmRunPathEnv({
		env: env$1,
		cwd: localDirectory,
		execPath: nodePath,
		preferLocal,
		addExecPath: node
	});
	return env$1;
};

//#endregion
//#region node_modules/.pnpm/strip-final-newline@4.0.0/node_modules/strip-final-newline/index.js
function stripFinalNewline(input) {
	if (typeof input === "string") return stripFinalNewlineString(input);
	if (!(ArrayBuffer.isView(input) && input.BYTES_PER_ELEMENT === 1)) throw new Error("Input must be a string or a Uint8Array");
	return stripFinalNewlineBinary(input);
}
const stripFinalNewlineString = (input) => input.at(-1) === LF ? input.slice(0, input.at(-2) === CR ? -2 : -1) : input;
const stripFinalNewlineBinary = (input) => input.at(-1) === LF_BINARY ? input.subarray(0, input.at(-2) === CR_BINARY ? -2 : -1) : input;
const LF = "\n";
const LF_BINARY = LF.codePointAt(0);
const CR = "\r";
const CR_BINARY = CR.codePointAt(0);

//#endregion
//#region node_modules/.pnpm/is-stream@4.0.1/node_modules/is-stream/index.js
function isStream(stream$4, { checkOpen = true } = {}) {
	return stream$4 !== null && typeof stream$4 === "object" && (stream$4.writable || stream$4.readable || !checkOpen || stream$4.writable === void 0 && stream$4.readable === void 0) && typeof stream$4.pipe === "function";
}
function isWritableStream(stream$4, { checkOpen = true } = {}) {
	return isStream(stream$4, { checkOpen }) && (stream$4.writable || !checkOpen) && typeof stream$4.write === "function" && typeof stream$4.end === "function" && typeof stream$4.writable === "boolean" && typeof stream$4.writableObjectMode === "boolean" && typeof stream$4.destroy === "function" && typeof stream$4.destroyed === "boolean";
}
function isReadableStream(stream$4, { checkOpen = true } = {}) {
	return isStream(stream$4, { checkOpen }) && (stream$4.readable || !checkOpen) && typeof stream$4.read === "function" && typeof stream$4.readable === "boolean" && typeof stream$4.readableObjectMode === "boolean" && typeof stream$4.destroy === "function" && typeof stream$4.destroyed === "boolean";
}
function isDuplexStream(stream$4, options) {
	return isWritableStream(stream$4, options) && isReadableStream(stream$4, options);
}

//#endregion
//#region node_modules/.pnpm/@sec-ant+readable-stream@0.4.1/node_modules/@sec-ant/readable-stream/dist/ponyfill/asyncIterator.js
const a = Object.getPrototypeOf(Object.getPrototypeOf(
	/* istanbul ignore next */
	async function* () {}
).prototype);
var c = class {
	#t;
	#n;
	#r = !1;
	#e = void 0;
	constructor(e, t) {
		this.#t = e, this.#n = t;
	}
	next() {
		const e = () => this.#s();
		return this.#e = this.#e ? this.#e.then(e, e) : e(), this.#e;
	}
	return(e) {
		const t = () => this.#i(e);
		return this.#e ? this.#e.then(t, t) : t();
	}
	async #s() {
		if (this.#r) return {
			done: !0,
			value: void 0
		};
		let e;
		try {
			e = await this.#t.read();
		} catch (t) {
			throw this.#e = void 0, this.#r = !0, this.#t.releaseLock(), t;
		}
		return e.done && (this.#e = void 0, this.#r = !0, this.#t.releaseLock()), e;
	}
	async #i(e) {
		if (this.#r) return {
			done: !0,
			value: e
		};
		if (this.#r = !0, !this.#n) {
			const t = this.#t.cancel(e);
			return this.#t.releaseLock(), await t, {
				done: !0,
				value: e
			};
		}
		return this.#t.releaseLock(), {
			done: !0,
			value: e
		};
	}
};
const n = Symbol();
function i() {
	return this[n].next();
}
Object.defineProperty(i, "name", { value: "next" });
function o(r) {
	return this[n].return(r);
}
Object.defineProperty(o, "name", { value: "return" });
const u = Object.create(a, {
	next: {
		enumerable: !0,
		configurable: !0,
		writable: !0,
		value: i
	},
	return: {
		enumerable: !0,
		configurable: !0,
		writable: !0,
		value: o
	}
});
function h({ preventCancel: r = !1 } = {}) {
	const e = this.getReader(), t = new c(e, r), s = Object.create(u);
	return s[n] = t, s;
}

//#endregion
//#region node_modules/.pnpm/get-stream@9.0.1/node_modules/get-stream/source/stream.js
const getAsyncIterable = (stream$4) => {
	if (isReadableStream(stream$4, { checkOpen: false }) && nodeImports.on !== void 0) return getStreamIterable(stream$4);
	if (typeof stream$4?.[Symbol.asyncIterator] === "function") return stream$4;
	if (toString$3.call(stream$4) === "[object ReadableStream]") return h.call(stream$4);
	throw new TypeError("The first argument must be a Readable, a ReadableStream, or an async iterable.");
};
const { toString: toString$3 } = Object.prototype;
const getStreamIterable = async function* (stream$4) {
	const controller = new AbortController();
	const state = {};
	handleStreamEnd(stream$4, controller, state);
	try {
		for await (const [chunk] of nodeImports.on(stream$4, "data", { signal: controller.signal })) yield chunk;
	} catch (error$1) {
		if (state.error !== void 0) throw state.error;
		else if (!controller.signal.aborted) throw error$1;
	} finally {
		stream$4.destroy();
	}
};
const handleStreamEnd = async (stream$4, controller, state) => {
	try {
		await nodeImports.finished(stream$4, {
			cleanup: true,
			readable: true,
			writable: false,
			error: false
		});
	} catch (error$1) {
		state.error = error$1;
	} finally {
		controller.abort();
	}
};
const nodeImports = {};

//#endregion
//#region node_modules/.pnpm/get-stream@9.0.1/node_modules/get-stream/source/contents.js
const getStreamContents$1 = async (stream$4, { init, convertChunk, getSize, truncateChunk, addChunk, getFinalChunk, finalize }, { maxBuffer = Number.POSITIVE_INFINITY } = {}) => {
	const asyncIterable = getAsyncIterable(stream$4);
	const state = init();
	state.length = 0;
	try {
		for await (const chunk of asyncIterable) {
			const chunkType = getChunkType(chunk);
			const convertedChunk = convertChunk[chunkType](chunk, state);
			appendChunk({
				convertedChunk,
				state,
				getSize,
				truncateChunk,
				addChunk,
				maxBuffer
			});
		}
		appendFinalChunk({
			state,
			convertChunk,
			getSize,
			truncateChunk,
			addChunk,
			getFinalChunk,
			maxBuffer
		});
		return finalize(state);
	} catch (error$1) {
		const normalizedError = typeof error$1 === "object" && error$1 !== null ? error$1 : new Error(error$1);
		normalizedError.bufferedData = finalize(state);
		throw normalizedError;
	}
};
const appendFinalChunk = ({ state, getSize, truncateChunk, addChunk, getFinalChunk, maxBuffer }) => {
	const convertedChunk = getFinalChunk(state);
	if (convertedChunk !== void 0) appendChunk({
		convertedChunk,
		state,
		getSize,
		truncateChunk,
		addChunk,
		maxBuffer
	});
};
const appendChunk = ({ convertedChunk, state, getSize, truncateChunk, addChunk, maxBuffer }) => {
	const chunkSize = getSize(convertedChunk);
	const newLength = state.length + chunkSize;
	if (newLength <= maxBuffer) {
		addNewChunk(convertedChunk, state, addChunk, newLength);
		return;
	}
	const truncatedChunk = truncateChunk(convertedChunk, maxBuffer - state.length);
	if (truncatedChunk !== void 0) addNewChunk(truncatedChunk, state, addChunk, maxBuffer);
	throw new MaxBufferError();
};
const addNewChunk = (convertedChunk, state, addChunk, newLength) => {
	state.contents = addChunk(convertedChunk, state, newLength);
	state.length = newLength;
};
const getChunkType = (chunk) => {
	const typeOfChunk = typeof chunk;
	if (typeOfChunk === "string") return "string";
	if (typeOfChunk !== "object" || chunk === null) return "others";
	if (globalThis.Buffer?.isBuffer(chunk)) return "buffer";
	const prototypeName = objectToString.call(chunk);
	if (prototypeName === "[object ArrayBuffer]") return "arrayBuffer";
	if (prototypeName === "[object DataView]") return "dataView";
	if (Number.isInteger(chunk.byteLength) && Number.isInteger(chunk.byteOffset) && objectToString.call(chunk.buffer) === "[object ArrayBuffer]") return "typedArray";
	return "others";
};
const { toString: objectToString } = Object.prototype;
var MaxBufferError = class extends Error {
	name = "MaxBufferError";
	constructor() {
		super("maxBuffer exceeded");
	}
};

//#endregion
//#region node_modules/.pnpm/get-stream@9.0.1/node_modules/get-stream/source/utils.js
const identity = (value) => value;
const noop$1 = () => void 0;
const getContentsProperty = ({ contents }) => contents;
const throwObjectStream = (chunk) => {
	throw new Error(`Streams in object mode are not supported: ${String(chunk)}`);
};
const getLengthProperty = (convertedChunk) => convertedChunk.length;

//#endregion
//#region node_modules/.pnpm/get-stream@9.0.1/node_modules/get-stream/source/array.js
async function getStreamAsArray(stream$4, options) {
	return getStreamContents$1(stream$4, arrayMethods, options);
}
const initArray = () => ({ contents: [] });
const increment = () => 1;
const addArrayChunk = (convertedChunk, { contents }) => {
	contents.push(convertedChunk);
	return contents;
};
const arrayMethods = {
	init: initArray,
	convertChunk: {
		string: identity,
		buffer: identity,
		arrayBuffer: identity,
		dataView: identity,
		typedArray: identity,
		others: identity
	},
	getSize: increment,
	truncateChunk: noop$1,
	addChunk: addArrayChunk,
	getFinalChunk: noop$1,
	finalize: getContentsProperty
};

//#endregion
//#region node_modules/.pnpm/get-stream@9.0.1/node_modules/get-stream/source/array-buffer.js
async function getStreamAsArrayBuffer(stream$4, options) {
	return getStreamContents$1(stream$4, arrayBufferMethods, options);
}
const initArrayBuffer = () => ({ contents: /* @__PURE__ */ new ArrayBuffer(0) });
const useTextEncoder = (chunk) => textEncoder.encode(chunk);
const textEncoder = new TextEncoder();
const useUint8Array = (chunk) => new Uint8Array(chunk);
const useUint8ArrayWithOffset = (chunk) => new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);
const truncateArrayBufferChunk = (convertedChunk, chunkSize) => convertedChunk.slice(0, chunkSize);
const addArrayBufferChunk = (convertedChunk, { contents, length: previousLength }, length) => {
	const newContents = hasArrayBufferResize() ? resizeArrayBuffer(contents, length) : resizeArrayBufferSlow(contents, length);
	new Uint8Array(newContents).set(convertedChunk, previousLength);
	return newContents;
};
const resizeArrayBufferSlow = (contents, length) => {
	if (length <= contents.byteLength) return contents;
	const arrayBuffer = new ArrayBuffer(getNewContentsLength(length));
	new Uint8Array(arrayBuffer).set(new Uint8Array(contents), 0);
	return arrayBuffer;
};
const resizeArrayBuffer = (contents, length) => {
	if (length <= contents.maxByteLength) {
		contents.resize(length);
		return contents;
	}
	const arrayBuffer = new ArrayBuffer(length, { maxByteLength: getNewContentsLength(length) });
	new Uint8Array(arrayBuffer).set(new Uint8Array(contents), 0);
	return arrayBuffer;
};
const getNewContentsLength = (length) => SCALE_FACTOR ** Math.ceil(Math.log(length) / Math.log(SCALE_FACTOR));
const SCALE_FACTOR = 2;
const finalizeArrayBuffer = ({ contents, length }) => hasArrayBufferResize() ? contents : contents.slice(0, length);
const hasArrayBufferResize = () => "resize" in ArrayBuffer.prototype;
const arrayBufferMethods = {
	init: initArrayBuffer,
	convertChunk: {
		string: useTextEncoder,
		buffer: useUint8Array,
		arrayBuffer: useUint8Array,
		dataView: useUint8ArrayWithOffset,
		typedArray: useUint8ArrayWithOffset,
		others: throwObjectStream
	},
	getSize: getLengthProperty,
	truncateChunk: truncateArrayBufferChunk,
	addChunk: addArrayBufferChunk,
	getFinalChunk: noop$1,
	finalize: finalizeArrayBuffer
};

//#endregion
//#region node_modules/.pnpm/get-stream@9.0.1/node_modules/get-stream/source/string.js
async function getStreamAsString(stream$4, options) {
	return getStreamContents$1(stream$4, stringMethods, options);
}
const initString = () => ({
	contents: "",
	textDecoder: new TextDecoder()
});
const useTextDecoder = (chunk, { textDecoder: textDecoder$3 }) => textDecoder$3.decode(chunk, { stream: true });
const addStringChunk = (convertedChunk, { contents }) => contents + convertedChunk;
const truncateStringChunk = (convertedChunk, chunkSize) => convertedChunk.slice(0, chunkSize);
const getFinalStringChunk = ({ textDecoder: textDecoder$3 }) => {
	const finalChunk = textDecoder$3.decode();
	return finalChunk === "" ? void 0 : finalChunk;
};
const stringMethods = {
	init: initString,
	convertChunk: {
		string: identity,
		buffer: useTextDecoder,
		arrayBuffer: useTextDecoder,
		dataView: useTextDecoder,
		typedArray: useTextDecoder,
		others: throwObjectStream
	},
	getSize: getLengthProperty,
	truncateChunk: truncateStringChunk,
	addChunk: addStringChunk,
	getFinalChunk: getFinalStringChunk,
	finalize: getContentsProperty
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/io/max-buffer.js
const handleMaxBuffer = ({ error: error$1, stream: stream$4, readableObjectMode, lines, encoding, fdNumber }) => {
	if (!(error$1 instanceof MaxBufferError)) throw error$1;
	if (fdNumber === "all") return error$1;
	const unit = getMaxBufferUnit(readableObjectMode, lines, encoding);
	error$1.maxBufferInfo = {
		fdNumber,
		unit
	};
	stream$4.destroy();
	throw error$1;
};
const getMaxBufferUnit = (readableObjectMode, lines, encoding) => {
	if (readableObjectMode) return "objects";
	if (lines) return "lines";
	if (encoding === "buffer") return "bytes";
	return "characters";
};
const checkIpcMaxBuffer = (subprocess, ipcOutput, maxBuffer) => {
	if (ipcOutput.length !== maxBuffer) return;
	const error$1 = new MaxBufferError();
	error$1.maxBufferInfo = { fdNumber: "ipc" };
	throw error$1;
};
const getMaxBufferMessage = (error$1, maxBuffer) => {
	const { streamName, threshold, unit } = getMaxBufferInfo(error$1, maxBuffer);
	return `Command's ${streamName} was larger than ${threshold} ${unit}`;
};
const getMaxBufferInfo = (error$1, maxBuffer) => {
	if (error$1?.maxBufferInfo === void 0) return {
		streamName: "output",
		threshold: maxBuffer[1],
		unit: "bytes"
	};
	const { maxBufferInfo: { fdNumber, unit } } = error$1;
	delete error$1.maxBufferInfo;
	const threshold = getFdSpecificValue(maxBuffer, fdNumber);
	if (fdNumber === "ipc") return {
		streamName: "IPC output",
		threshold,
		unit: "messages"
	};
	return {
		streamName: getStreamName(fdNumber),
		threshold,
		unit
	};
};
const isMaxBufferSync = (resultError, output, maxBuffer) => resultError?.code === "ENOBUFS" && output !== null && output.some((result) => result !== null && result.length > getMaxBufferSync(maxBuffer));
const truncateMaxBufferSync = (result, isMaxBuffer, maxBuffer) => {
	if (!isMaxBuffer) return result;
	const maxBufferValue = getMaxBufferSync(maxBuffer);
	return result.length > maxBufferValue ? result.slice(0, maxBufferValue) : result;
};
const getMaxBufferSync = ([, stdoutMaxBuffer]) => stdoutMaxBuffer;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/return/message.js
const createMessages = ({ stdio, all, ipcOutput, originalError, signal, signalDescription, exitCode, escapedCommand, timedOut, isCanceled, isGracefullyCanceled, isMaxBuffer, isForcefullyTerminated, forceKillAfterDelay, killSignal, maxBuffer, timeout, cwd }) => {
	const errorCode = originalError?.code;
	const prefix = getErrorPrefix({
		originalError,
		timedOut,
		timeout,
		isMaxBuffer,
		maxBuffer,
		errorCode,
		signal,
		signalDescription,
		exitCode,
		isCanceled,
		isGracefullyCanceled,
		isForcefullyTerminated,
		forceKillAfterDelay,
		killSignal
	});
	const originalMessage = getOriginalMessage(originalError, cwd);
	const suffix = originalMessage === void 0 ? "" : `\n${originalMessage}`;
	const shortMessage = `${prefix}: ${escapedCommand}${suffix}`;
	const messageStdio = all === void 0 ? [stdio[2], stdio[1]] : [all];
	const message = [
		shortMessage,
		...messageStdio,
		...stdio.slice(3),
		ipcOutput.map((ipcMessage) => serializeIpcMessage(ipcMessage)).join("\n")
	].map((messagePart) => escapeLines(stripFinalNewline(serializeMessagePart(messagePart)))).filter(Boolean).join("\n\n");
	return {
		originalMessage,
		shortMessage,
		message
	};
};
const getErrorPrefix = ({ originalError, timedOut, timeout, isMaxBuffer, maxBuffer, errorCode, signal, signalDescription, exitCode, isCanceled, isGracefullyCanceled, isForcefullyTerminated, forceKillAfterDelay, killSignal }) => {
	const forcefulSuffix = getForcefulSuffix(isForcefullyTerminated, forceKillAfterDelay);
	if (timedOut) return `Command timed out after ${timeout} milliseconds${forcefulSuffix}`;
	if (isGracefullyCanceled) {
		if (signal === void 0) return `Command was gracefully canceled with exit code ${exitCode}`;
		return isForcefullyTerminated ? `Command was gracefully canceled${forcefulSuffix}` : `Command was gracefully canceled with ${signal} (${signalDescription})`;
	}
	if (isCanceled) return `Command was canceled${forcefulSuffix}`;
	if (isMaxBuffer) return `${getMaxBufferMessage(originalError, maxBuffer)}${forcefulSuffix}`;
	if (errorCode !== void 0) return `Command failed with ${errorCode}${forcefulSuffix}`;
	if (isForcefullyTerminated) return `Command was killed with ${killSignal} (${getSignalDescription(killSignal)})${forcefulSuffix}`;
	if (signal !== void 0) return `Command was killed with ${signal} (${signalDescription})`;
	if (exitCode !== void 0) return `Command failed with exit code ${exitCode}`;
	return "Command failed";
};
const getForcefulSuffix = (isForcefullyTerminated, forceKillAfterDelay) => isForcefullyTerminated ? ` and was forcefully terminated after ${forceKillAfterDelay} milliseconds` : "";
const getOriginalMessage = (originalError, cwd) => {
	if (originalError instanceof DiscardedError) return;
	const originalMessage = isExecaError(originalError) ? originalError.originalMessage : String(originalError?.message ?? originalError);
	const escapedOriginalMessage = escapeLines(fixCwdError(originalMessage, cwd));
	return escapedOriginalMessage === "" ? void 0 : escapedOriginalMessage;
};
const serializeIpcMessage = (ipcMessage) => typeof ipcMessage === "string" ? ipcMessage : inspect(ipcMessage);
const serializeMessagePart = (messagePart) => Array.isArray(messagePart) ? messagePart.map((messageItem) => stripFinalNewline(serializeMessageItem(messageItem))).filter(Boolean).join("\n") : serializeMessageItem(messagePart);
const serializeMessageItem = (messageItem) => {
	if (typeof messageItem === "string") return messageItem;
	if (isUint8Array(messageItem)) return uint8ArrayToString(messageItem);
	return "";
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/return/result.js
const makeSuccessResult = ({ command, escapedCommand, stdio, all, ipcOutput, options: { cwd }, startTime }) => omitUndefinedProperties({
	command,
	escapedCommand,
	cwd,
	durationMs: getDurationMs(startTime),
	failed: false,
	timedOut: false,
	isCanceled: false,
	isGracefullyCanceled: false,
	isTerminated: false,
	isMaxBuffer: false,
	isForcefullyTerminated: false,
	exitCode: 0,
	stdout: stdio[1],
	stderr: stdio[2],
	all,
	stdio,
	ipcOutput,
	pipedFrom: []
});
const makeEarlyError = ({ error: error$1, command, escapedCommand, fileDescriptors, options, startTime, isSync }) => makeError({
	error: error$1,
	command,
	escapedCommand,
	startTime,
	timedOut: false,
	isCanceled: false,
	isGracefullyCanceled: false,
	isMaxBuffer: false,
	isForcefullyTerminated: false,
	stdio: Array.from({ length: fileDescriptors.length }),
	ipcOutput: [],
	options,
	isSync
});
const makeError = ({ error: originalError, command, escapedCommand, startTime, timedOut, isCanceled, isGracefullyCanceled, isMaxBuffer, isForcefullyTerminated, exitCode: rawExitCode, signal: rawSignal, stdio, all, ipcOutput, options: { timeoutDuration, timeout = timeoutDuration, forceKillAfterDelay, killSignal, cwd, maxBuffer }, isSync }) => {
	const { exitCode, signal, signalDescription } = normalizeExitPayload(rawExitCode, rawSignal);
	const { originalMessage, shortMessage, message } = createMessages({
		stdio,
		all,
		ipcOutput,
		originalError,
		signal,
		signalDescription,
		exitCode,
		escapedCommand,
		timedOut,
		isCanceled,
		isGracefullyCanceled,
		isMaxBuffer,
		isForcefullyTerminated,
		forceKillAfterDelay,
		killSignal,
		maxBuffer,
		timeout,
		cwd
	});
	const error$1 = getFinalError(originalError, message, isSync);
	Object.assign(error$1, getErrorProperties({
		error: error$1,
		command,
		escapedCommand,
		startTime,
		timedOut,
		isCanceled,
		isGracefullyCanceled,
		isMaxBuffer,
		isForcefullyTerminated,
		exitCode,
		signal,
		signalDescription,
		stdio,
		all,
		ipcOutput,
		cwd,
		originalMessage,
		shortMessage
	}));
	return error$1;
};
const getErrorProperties = ({ error: error$1, command, escapedCommand, startTime, timedOut, isCanceled, isGracefullyCanceled, isMaxBuffer, isForcefullyTerminated, exitCode, signal, signalDescription, stdio, all, ipcOutput, cwd, originalMessage, shortMessage }) => omitUndefinedProperties({
	shortMessage,
	originalMessage,
	command,
	escapedCommand,
	cwd,
	durationMs: getDurationMs(startTime),
	failed: true,
	timedOut,
	isCanceled,
	isGracefullyCanceled,
	isTerminated: signal !== void 0,
	isMaxBuffer,
	isForcefullyTerminated,
	exitCode,
	signal,
	signalDescription,
	code: error$1.cause?.code,
	stdout: stdio[1],
	stderr: stdio[2],
	all,
	stdio,
	ipcOutput,
	pipedFrom: []
});
const omitUndefinedProperties = (result) => Object.fromEntries(Object.entries(result).filter(([, value]) => value !== void 0));
const normalizeExitPayload = (rawExitCode, rawSignal) => {
	const exitCode = rawExitCode === null ? void 0 : rawExitCode;
	const signal = rawSignal === null ? void 0 : rawSignal;
	const signalDescription = signal === void 0 ? void 0 : getSignalDescription(rawSignal);
	return {
		exitCode,
		signal,
		signalDescription
	};
};

//#endregion
//#region node_modules/.pnpm/parse-ms@4.0.0/node_modules/parse-ms/index.js
const toZeroIfInfinity = (value) => Number.isFinite(value) ? value : 0;
function parseNumber(milliseconds) {
	return {
		days: Math.trunc(milliseconds / 864e5),
		hours: Math.trunc(milliseconds / 36e5 % 24),
		minutes: Math.trunc(milliseconds / 6e4 % 60),
		seconds: Math.trunc(milliseconds / 1e3 % 60),
		milliseconds: Math.trunc(milliseconds % 1e3),
		microseconds: Math.trunc(toZeroIfInfinity(milliseconds * 1e3) % 1e3),
		nanoseconds: Math.trunc(toZeroIfInfinity(milliseconds * 1e6) % 1e3)
	};
}
function parseBigint(milliseconds) {
	return {
		days: milliseconds / 86400000n,
		hours: milliseconds / 3600000n % 24n,
		minutes: milliseconds / 60000n % 60n,
		seconds: milliseconds / 1000n % 60n,
		milliseconds: milliseconds % 1000n,
		microseconds: 0n,
		nanoseconds: 0n
	};
}
function parseMilliseconds(milliseconds) {
	switch (typeof milliseconds) {
		case "number": {
			if (Number.isFinite(milliseconds)) return parseNumber(milliseconds);
			break;
		}
		case "bigint": return parseBigint(milliseconds);
	}
	throw new TypeError("Expected a finite number or bigint");
}

//#endregion
//#region node_modules/.pnpm/pretty-ms@9.2.0/node_modules/pretty-ms/index.js
const isZero = (value) => value === 0 || value === 0n;
const pluralize = (word, count$1) => count$1 === 1 || count$1 === 1n ? word : `${word}s`;
const SECOND_ROUNDING_EPSILON = 1e-7;
const ONE_DAY_IN_MILLISECONDS = 24n * 60n * 60n * 1000n;
function prettyMilliseconds(milliseconds, options) {
	const isBigInt = typeof milliseconds === "bigint";
	if (!isBigInt && !Number.isFinite(milliseconds)) throw new TypeError("Expected a finite number or bigint");
	options = { ...options };
	const sign = milliseconds < 0 ? "-" : "";
	milliseconds = milliseconds < 0 ? -milliseconds : milliseconds;
	if (options.colonNotation) {
		options.compact = false;
		options.formatSubMilliseconds = false;
		options.separateMilliseconds = false;
		options.verbose = false;
	}
	if (options.compact) {
		options.unitCount = 1;
		options.secondsDecimalDigits = 0;
		options.millisecondsDecimalDigits = 0;
	}
	let result = [];
	const floorDecimals = (value, decimalDigits) => {
		const flooredInterimValue = Math.floor(value * 10 ** decimalDigits + SECOND_ROUNDING_EPSILON);
		const flooredValue = Math.round(flooredInterimValue) / 10 ** decimalDigits;
		return flooredValue.toFixed(decimalDigits);
	};
	const add = (value, long, short, valueString) => {
		if ((result.length === 0 || !options.colonNotation) && isZero(value) && !(options.colonNotation && short === "m")) return;
		valueString ??= String(value);
		if (options.colonNotation) {
			const wholeDigits = valueString.includes(".") ? valueString.split(".")[0].length : valueString.length;
			const minLength = result.length > 0 ? 2 : 1;
			valueString = "0".repeat(Math.max(0, minLength - wholeDigits)) + valueString;
		} else valueString += options.verbose ? " " + pluralize(long, value) : short;
		result.push(valueString);
	};
	const parsed = parseMilliseconds(milliseconds);
	const days = BigInt(parsed.days);
	if (options.hideYearAndDays) add(BigInt(days) * 24n + BigInt(parsed.hours), "hour", "h");
	else {
		if (options.hideYear) add(days, "day", "d");
		else {
			add(days / 365n, "year", "y");
			add(days % 365n, "day", "d");
		}
		add(Number(parsed.hours), "hour", "h");
	}
	add(Number(parsed.minutes), "minute", "m");
	if (!options.hideSeconds) if (options.separateMilliseconds || options.formatSubMilliseconds || !options.colonNotation && milliseconds < 1e3) {
		const seconds = Number(parsed.seconds);
		const milliseconds$1 = Number(parsed.milliseconds);
		const microseconds = Number(parsed.microseconds);
		const nanoseconds = Number(parsed.nanoseconds);
		add(seconds, "second", "s");
		if (options.formatSubMilliseconds) {
			add(milliseconds$1, "millisecond", "ms");
			add(microseconds, "microsecond", "µs");
			add(nanoseconds, "nanosecond", "ns");
		} else {
			const millisecondsAndBelow = milliseconds$1 + microseconds / 1e3 + nanoseconds / 1e6;
			const millisecondsDecimalDigits = typeof options.millisecondsDecimalDigits === "number" ? options.millisecondsDecimalDigits : 0;
			const roundedMilliseconds = millisecondsAndBelow >= 1 ? Math.round(millisecondsAndBelow) : Math.ceil(millisecondsAndBelow);
			const millisecondsString = millisecondsDecimalDigits ? millisecondsAndBelow.toFixed(millisecondsDecimalDigits) : roundedMilliseconds;
			add(Number.parseFloat(millisecondsString), "millisecond", "ms", millisecondsString);
		}
	} else {
		const seconds = (isBigInt ? Number(milliseconds % ONE_DAY_IN_MILLISECONDS) : milliseconds) / 1e3 % 60;
		const secondsDecimalDigits = typeof options.secondsDecimalDigits === "number" ? options.secondsDecimalDigits : 1;
		const secondsFixed = floorDecimals(seconds, secondsDecimalDigits);
		const secondsString = options.keepDecimalsOnWholeSeconds ? secondsFixed : secondsFixed.replace(/\.0+$/, "");
		add(Number.parseFloat(secondsString), "second", "s", secondsString);
	}
	if (result.length === 0) return sign + "0" + (options.verbose ? " milliseconds" : "ms");
	const separator = options.colonNotation ? ":" : " ";
	if (typeof options.unitCount === "number") result = result.slice(0, Math.max(options.unitCount, 1));
	return sign + result.join(separator);
}

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/verbose/error.js
const logError = (result, verboseInfo) => {
	if (result.failed) verboseLog({
		type: "error",
		verboseMessage: result.shortMessage,
		verboseInfo,
		result
	});
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/verbose/complete.js
const logResult = (result, verboseInfo) => {
	if (!isVerbose(verboseInfo)) return;
	logError(result, verboseInfo);
	logDuration(result, verboseInfo);
};
const logDuration = (result, verboseInfo) => {
	const verboseMessage = `(done in ${prettyMilliseconds(result.durationMs)})`;
	verboseLog({
		type: "duration",
		verboseMessage,
		verboseInfo,
		result
	});
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/return/reject.js
const handleResult = (result, verboseInfo, { reject }) => {
	logResult(result, verboseInfo);
	if (result.failed && reject) throw result;
	return result;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/stdio/type.js
const getStdioItemType = (value, optionName) => {
	if (isAsyncGenerator(value)) return "asyncGenerator";
	if (isSyncGenerator(value)) return "generator";
	if (isUrl(value)) return "fileUrl";
	if (isFilePathObject(value)) return "filePath";
	if (isWebStream(value)) return "webStream";
	if (isStream(value, { checkOpen: false })) return "native";
	if (isUint8Array(value)) return "uint8Array";
	if (isAsyncIterableObject(value)) return "asyncIterable";
	if (isIterableObject(value)) return "iterable";
	if (isTransformStream(value)) return getTransformStreamType({ transform: value }, optionName);
	if (isTransformOptions(value)) return getTransformObjectType(value, optionName);
	return "native";
};
const getTransformObjectType = (value, optionName) => {
	if (isDuplexStream(value.transform, { checkOpen: false })) return getDuplexType(value, optionName);
	if (isTransformStream(value.transform)) return getTransformStreamType(value, optionName);
	return getGeneratorObjectType(value, optionName);
};
const getDuplexType = (value, optionName) => {
	validateNonGeneratorType(value, optionName, "Duplex stream");
	return "duplex";
};
const getTransformStreamType = (value, optionName) => {
	validateNonGeneratorType(value, optionName, "web TransformStream");
	return "webTransform";
};
const validateNonGeneratorType = ({ final, binary, objectMode }, optionName, typeName) => {
	checkUndefinedOption(final, `${optionName}.final`, typeName);
	checkUndefinedOption(binary, `${optionName}.binary`, typeName);
	checkBooleanOption(objectMode, `${optionName}.objectMode`);
};
const checkUndefinedOption = (value, optionName, typeName) => {
	if (value !== void 0) throw new TypeError(`The \`${optionName}\` option can only be defined when using a generator, not a ${typeName}.`);
};
const getGeneratorObjectType = ({ transform, final, binary, objectMode }, optionName) => {
	if (transform !== void 0 && !isGenerator(transform)) throw new TypeError(`The \`${optionName}.transform\` option must be a generator, a Duplex stream or a web TransformStream.`);
	if (isDuplexStream(final, { checkOpen: false })) throw new TypeError(`The \`${optionName}.final\` option must not be a Duplex stream.`);
	if (isTransformStream(final)) throw new TypeError(`The \`${optionName}.final\` option must not be a web TransformStream.`);
	if (final !== void 0 && !isGenerator(final)) throw new TypeError(`The \`${optionName}.final\` option must be a generator.`);
	checkBooleanOption(binary, `${optionName}.binary`);
	checkBooleanOption(objectMode, `${optionName}.objectMode`);
	return isAsyncGenerator(transform) || isAsyncGenerator(final) ? "asyncGenerator" : "generator";
};
const checkBooleanOption = (value, optionName) => {
	if (value !== void 0 && typeof value !== "boolean") throw new TypeError(`The \`${optionName}\` option must use a boolean.`);
};
const isGenerator = (value) => isAsyncGenerator(value) || isSyncGenerator(value);
const isAsyncGenerator = (value) => Object.prototype.toString.call(value) === "[object AsyncGeneratorFunction]";
const isSyncGenerator = (value) => Object.prototype.toString.call(value) === "[object GeneratorFunction]";
const isTransformOptions = (value) => isPlainObject(value) && (value.transform !== void 0 || value.final !== void 0);
const isUrl = (value) => Object.prototype.toString.call(value) === "[object URL]";
const isRegularUrl = (value) => isUrl(value) && value.protocol !== "file:";
const isFilePathObject = (value) => isPlainObject(value) && Object.keys(value).length === 1 && isFilePathString(value.file);
const isFilePathString = (file) => typeof file === "string";
const isUnknownStdioString = (type, value) => type === "native" && typeof value === "string" && !KNOWN_STDIO_STRINGS.has(value);
const KNOWN_STDIO_STRINGS = new Set([
	"ipc",
	"ignore",
	"inherit",
	"overlapped",
	"pipe"
]);
const isReadableStream$1 = (value) => Object.prototype.toString.call(value) === "[object ReadableStream]";
const isWritableStream$1 = (value) => Object.prototype.toString.call(value) === "[object WritableStream]";
const isWebStream = (value) => isReadableStream$1(value) || isWritableStream$1(value);
const isTransformStream = (value) => isReadableStream$1(value?.readable) && isWritableStream$1(value?.writable);
const isAsyncIterableObject = (value) => isObject$5(value) && typeof value[Symbol.asyncIterator] === "function";
const isIterableObject = (value) => isObject$5(value) && typeof value[Symbol.iterator] === "function";
const isObject$5 = (value) => typeof value === "object" && value !== null;
const TRANSFORM_TYPES = new Set([
	"generator",
	"asyncGenerator",
	"duplex",
	"webTransform"
]);
const FILE_TYPES = new Set([
	"fileUrl",
	"filePath",
	"fileNumber"
]);
const SPECIAL_DUPLICATE_TYPES_SYNC = new Set(["fileUrl", "filePath"]);
const SPECIAL_DUPLICATE_TYPES = new Set([
	...SPECIAL_DUPLICATE_TYPES_SYNC,
	"webStream",
	"nodeStream"
]);
const FORBID_DUPLICATE_TYPES = new Set(["webTransform", "duplex"]);
const TYPE_TO_MESSAGE = {
	generator: "a generator",
	asyncGenerator: "an async generator",
	fileUrl: "a file URL",
	filePath: "a file path string",
	fileNumber: "a file descriptor number",
	webStream: "a web stream",
	nodeStream: "a Node.js stream",
	webTransform: "a web TransformStream",
	duplex: "a Duplex stream",
	native: "any value",
	iterable: "an iterable",
	asyncIterable: "an async iterable",
	string: "a string",
	uint8Array: "a Uint8Array"
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/transform/object-mode.js
const getTransformObjectModes = (objectMode, index, newTransforms, direction) => direction === "output" ? getOutputObjectModes(objectMode, index, newTransforms) : getInputObjectModes(objectMode, index, newTransforms);
const getOutputObjectModes = (objectMode, index, newTransforms) => {
	const writableObjectMode = index !== 0 && newTransforms[index - 1].value.readableObjectMode;
	const readableObjectMode = objectMode ?? writableObjectMode;
	return {
		writableObjectMode,
		readableObjectMode
	};
};
const getInputObjectModes = (objectMode, index, newTransforms) => {
	const writableObjectMode = index === 0 ? objectMode === true : newTransforms[index - 1].value.readableObjectMode;
	const readableObjectMode = index !== newTransforms.length - 1 && (objectMode ?? writableObjectMode);
	return {
		writableObjectMode,
		readableObjectMode
	};
};
const getFdObjectMode = (stdioItems, direction) => {
	const lastTransform = stdioItems.findLast(({ type }) => TRANSFORM_TYPES.has(type));
	if (lastTransform === void 0) return false;
	return direction === "input" ? lastTransform.value.writableObjectMode : lastTransform.value.readableObjectMode;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/transform/normalize.js
const normalizeTransforms = (stdioItems, optionName, direction, options) => [...stdioItems.filter(({ type }) => !TRANSFORM_TYPES.has(type)), ...getTransforms(stdioItems, optionName, direction, options)];
const getTransforms = (stdioItems, optionName, direction, { encoding }) => {
	const transforms = stdioItems.filter(({ type }) => TRANSFORM_TYPES.has(type));
	const newTransforms = Array.from({ length: transforms.length });
	for (const [index, stdioItem] of Object.entries(transforms)) newTransforms[index] = normalizeTransform({
		stdioItem,
		index: Number(index),
		newTransforms,
		optionName,
		direction,
		encoding
	});
	return sortTransforms(newTransforms, direction);
};
const normalizeTransform = ({ stdioItem, stdioItem: { type }, index, newTransforms, optionName, direction, encoding }) => {
	if (type === "duplex") return normalizeDuplex({
		stdioItem,
		optionName
	});
	if (type === "webTransform") return normalizeTransformStream({
		stdioItem,
		index,
		newTransforms,
		direction
	});
	return normalizeGenerator({
		stdioItem,
		index,
		newTransforms,
		direction,
		encoding
	});
};
const normalizeDuplex = ({ stdioItem, stdioItem: { value: { transform, transform: { writableObjectMode, readableObjectMode }, objectMode = readableObjectMode } }, optionName }) => {
	if (objectMode && !readableObjectMode) throw new TypeError(`The \`${optionName}.objectMode\` option can only be \`true\` if \`new Duplex({objectMode: true})\` is used.`);
	if (!objectMode && readableObjectMode) throw new TypeError(`The \`${optionName}.objectMode\` option cannot be \`false\` if \`new Duplex({objectMode: true})\` is used.`);
	return {
		...stdioItem,
		value: {
			transform,
			writableObjectMode,
			readableObjectMode
		}
	};
};
const normalizeTransformStream = ({ stdioItem, stdioItem: { value }, index, newTransforms, direction }) => {
	const { transform, objectMode } = isPlainObject(value) ? value : { transform: value };
	const { writableObjectMode, readableObjectMode } = getTransformObjectModes(objectMode, index, newTransforms, direction);
	return {
		...stdioItem,
		value: {
			transform,
			writableObjectMode,
			readableObjectMode
		}
	};
};
const normalizeGenerator = ({ stdioItem, stdioItem: { value }, index, newTransforms, direction, encoding }) => {
	const { transform, final, binary: binaryOption = false, preserveNewlines = false, objectMode } = isPlainObject(value) ? value : { transform: value };
	const binary = binaryOption || BINARY_ENCODINGS.has(encoding);
	const { writableObjectMode, readableObjectMode } = getTransformObjectModes(objectMode, index, newTransforms, direction);
	return {
		...stdioItem,
		value: {
			transform,
			final,
			binary,
			preserveNewlines,
			writableObjectMode,
			readableObjectMode
		}
	};
};
const sortTransforms = (newTransforms, direction) => direction === "input" ? newTransforms.reverse() : newTransforms;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/stdio/direction.js
const getStreamDirection = (stdioItems, fdNumber, optionName) => {
	const directions = stdioItems.map((stdioItem) => getStdioItemDirection(stdioItem, fdNumber));
	if (directions.includes("input") && directions.includes("output")) throw new TypeError(`The \`${optionName}\` option must not be an array of both readable and writable values.`);
	return directions.find(Boolean) ?? DEFAULT_DIRECTION;
};
const getStdioItemDirection = ({ type, value }, fdNumber) => KNOWN_DIRECTIONS[fdNumber] ?? guessStreamDirection[type](value);
const KNOWN_DIRECTIONS = [
	"input",
	"output",
	"output"
];
const anyDirection = () => void 0;
const alwaysInput = () => "input";
const guessStreamDirection = {
	generator: anyDirection,
	asyncGenerator: anyDirection,
	fileUrl: anyDirection,
	filePath: anyDirection,
	iterable: alwaysInput,
	asyncIterable: alwaysInput,
	uint8Array: alwaysInput,
	webStream: (value) => isWritableStream$1(value) ? "output" : "input",
	nodeStream(value) {
		if (!isReadableStream(value, { checkOpen: false })) return "output";
		return isWritableStream(value, { checkOpen: false }) ? void 0 : "input";
	},
	webTransform: anyDirection,
	duplex: anyDirection,
	native(value) {
		const standardStreamDirection = getStandardStreamDirection(value);
		if (standardStreamDirection !== void 0) return standardStreamDirection;
		if (isStream(value, { checkOpen: false })) return guessStreamDirection.nodeStream(value);
	}
};
const getStandardStreamDirection = (value) => {
	if ([0, process$1.stdin].includes(value)) return "input";
	if ([
		1,
		2,
		process$1.stdout,
		process$1.stderr
	].includes(value)) return "output";
};
const DEFAULT_DIRECTION = "output";

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/array.js
const normalizeIpcStdioArray = (stdioArray, ipc) => ipc && !stdioArray.includes("ipc") ? [...stdioArray, "ipc"] : stdioArray;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/stdio/stdio-option.js
const normalizeStdioOption = ({ stdio, ipc, buffer: buffer$1,...options }, verboseInfo, isSync) => {
	const stdioArray = getStdioArray(stdio, options).map((stdioOption, fdNumber) => addDefaultValue(stdioOption, fdNumber));
	return isSync ? normalizeStdioSync(stdioArray, buffer$1, verboseInfo) : normalizeIpcStdioArray(stdioArray, ipc);
};
const getStdioArray = (stdio, options) => {
	if (stdio === void 0) return STANDARD_STREAMS_ALIASES.map((alias) => options[alias]);
	if (hasAlias(options)) throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${STANDARD_STREAMS_ALIASES.map((alias) => `\`${alias}\``).join(", ")}`);
	if (typeof stdio === "string") return [
		stdio,
		stdio,
		stdio
	];
	if (!Array.isArray(stdio)) throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio}\``);
	const length = Math.max(stdio.length, STANDARD_STREAMS_ALIASES.length);
	return Array.from({ length }, (_, fdNumber) => stdio[fdNumber]);
};
const hasAlias = (options) => STANDARD_STREAMS_ALIASES.some((alias) => options[alias] !== void 0);
const addDefaultValue = (stdioOption, fdNumber) => {
	if (Array.isArray(stdioOption)) return stdioOption.map((item) => addDefaultValue(item, fdNumber));
	if (stdioOption === null || stdioOption === void 0) return fdNumber >= STANDARD_STREAMS_ALIASES.length ? "ignore" : "pipe";
	return stdioOption;
};
const normalizeStdioSync = (stdioArray, buffer$1, verboseInfo) => stdioArray.map((stdioOption, fdNumber) => !buffer$1[fdNumber] && fdNumber !== 0 && !isFullVerbose(verboseInfo, fdNumber) && isOutputPipeOnly(stdioOption) ? "ignore" : stdioOption);
const isOutputPipeOnly = (stdioOption) => stdioOption === "pipe" || Array.isArray(stdioOption) && stdioOption.every((item) => item === "pipe");

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/stdio/native.js
const handleNativeStream = ({ stdioItem, stdioItem: { type }, isStdioArray, fdNumber, direction, isSync }) => {
	if (!isStdioArray || type !== "native") return stdioItem;
	return isSync ? handleNativeStreamSync({
		stdioItem,
		fdNumber,
		direction
	}) : handleNativeStreamAsync({
		stdioItem,
		fdNumber
	});
};
const handleNativeStreamSync = ({ stdioItem, stdioItem: { value, optionName }, fdNumber, direction }) => {
	const targetFd = getTargetFd({
		value,
		optionName,
		fdNumber,
		direction
	});
	if (targetFd !== void 0) return targetFd;
	if (isStream(value, { checkOpen: false })) throw new TypeError(`The \`${optionName}: Stream\` option cannot both be an array and include a stream with synchronous methods.`);
	return stdioItem;
};
const getTargetFd = ({ value, optionName, fdNumber, direction }) => {
	const targetFdNumber = getTargetFdNumber(value, fdNumber);
	if (targetFdNumber === void 0) return;
	if (direction === "output") return {
		type: "fileNumber",
		value: targetFdNumber,
		optionName
	};
	if (tty.isatty(targetFdNumber)) throw new TypeError(`The \`${optionName}: ${serializeOptionValue(value)}\` option is invalid: it cannot be a TTY with synchronous methods.`);
	return {
		type: "uint8Array",
		value: bufferToUint8Array(readFileSync(targetFdNumber)),
		optionName
	};
};
const getTargetFdNumber = (value, fdNumber) => {
	if (value === "inherit") return fdNumber;
	if (typeof value === "number") return value;
	const standardStreamIndex = STANDARD_STREAMS.indexOf(value);
	if (standardStreamIndex !== -1) return standardStreamIndex;
};
const handleNativeStreamAsync = ({ stdioItem, stdioItem: { value, optionName }, fdNumber }) => {
	if (value === "inherit") return {
		type: "nodeStream",
		value: getStandardStream(fdNumber, value, optionName),
		optionName
	};
	if (typeof value === "number") return {
		type: "nodeStream",
		value: getStandardStream(value, value, optionName),
		optionName
	};
	if (isStream(value, { checkOpen: false })) return {
		type: "nodeStream",
		value,
		optionName
	};
	return stdioItem;
};
const getStandardStream = (fdNumber, value, optionName) => {
	const standardStream = STANDARD_STREAMS[fdNumber];
	if (standardStream === void 0) throw new TypeError(`The \`${optionName}: ${value}\` option is invalid: no such standard stream.`);
	return standardStream;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/stdio/input-option.js
const handleInputOptions = ({ input, inputFile }, fdNumber) => fdNumber === 0 ? [...handleInputOption(input), ...handleInputFileOption(inputFile)] : [];
const handleInputOption = (input) => input === void 0 ? [] : [{
	type: getInputType(input),
	value: input,
	optionName: "input"
}];
const getInputType = (input) => {
	if (isReadableStream(input, { checkOpen: false })) return "nodeStream";
	if (typeof input === "string") return "string";
	if (isUint8Array(input)) return "uint8Array";
	throw new Error("The `input` option must be a string, a Uint8Array or a Node.js Readable stream.");
};
const handleInputFileOption = (inputFile) => inputFile === void 0 ? [] : [{
	...getInputFileType(inputFile),
	optionName: "inputFile"
}];
const getInputFileType = (inputFile) => {
	if (isUrl(inputFile)) return {
		type: "fileUrl",
		value: inputFile
	};
	if (isFilePathString(inputFile)) return {
		type: "filePath",
		value: { file: inputFile }
	};
	throw new Error("The `inputFile` option must be a file path string or a file URL.");
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/stdio/duplicate.js
const filterDuplicates = (stdioItems) => stdioItems.filter((stdioItemOne, indexOne) => stdioItems.every((stdioItemTwo, indexTwo) => stdioItemOne.value !== stdioItemTwo.value || indexOne >= indexTwo || stdioItemOne.type === "generator" || stdioItemOne.type === "asyncGenerator"));
const getDuplicateStream = ({ stdioItem: { type, value, optionName }, direction, fileDescriptors, isSync }) => {
	const otherStdioItems = getOtherStdioItems(fileDescriptors, type);
	if (otherStdioItems.length === 0) return;
	if (isSync) {
		validateDuplicateStreamSync({
			otherStdioItems,
			type,
			value,
			optionName,
			direction
		});
		return;
	}
	if (SPECIAL_DUPLICATE_TYPES.has(type)) return getDuplicateStreamInstance({
		otherStdioItems,
		type,
		value,
		optionName,
		direction
	});
	if (FORBID_DUPLICATE_TYPES.has(type)) validateDuplicateTransform({
		otherStdioItems,
		type,
		value,
		optionName
	});
};
const getOtherStdioItems = (fileDescriptors, type) => fileDescriptors.flatMap(({ direction, stdioItems }) => stdioItems.filter((stdioItem) => stdioItem.type === type).map(((stdioItem) => ({
	...stdioItem,
	direction
}))));
const validateDuplicateStreamSync = ({ otherStdioItems, type, value, optionName, direction }) => {
	if (SPECIAL_DUPLICATE_TYPES_SYNC.has(type)) getDuplicateStreamInstance({
		otherStdioItems,
		type,
		value,
		optionName,
		direction
	});
};
const getDuplicateStreamInstance = ({ otherStdioItems, type, value, optionName, direction }) => {
	const duplicateStdioItems = otherStdioItems.filter((stdioItem) => hasSameValue(stdioItem, value));
	if (duplicateStdioItems.length === 0) return;
	const differentStdioItem = duplicateStdioItems.find((stdioItem) => stdioItem.direction !== direction);
	throwOnDuplicateStream(differentStdioItem, optionName, type);
	return direction === "output" ? duplicateStdioItems[0].stream : void 0;
};
const hasSameValue = ({ type, value }, secondValue) => {
	if (type === "filePath") return value.file === secondValue.file;
	if (type === "fileUrl") return value.href === secondValue.href;
	return value === secondValue;
};
const validateDuplicateTransform = ({ otherStdioItems, type, value, optionName }) => {
	const duplicateStdioItem = otherStdioItems.find(({ value: { transform } }) => transform === value.transform);
	throwOnDuplicateStream(duplicateStdioItem, optionName, type);
};
const throwOnDuplicateStream = (stdioItem, optionName, type) => {
	if (stdioItem !== void 0) throw new TypeError(`The \`${stdioItem.optionName}\` and \`${optionName}\` options must not target ${TYPE_TO_MESSAGE[type]} that is the same.`);
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/stdio/handle.js
const handleStdio = (addProperties$2, options, verboseInfo, isSync) => {
	const stdio = normalizeStdioOption(options, verboseInfo, isSync);
	const initialFileDescriptors = stdio.map((stdioOption, fdNumber) => getFileDescriptor({
		stdioOption,
		fdNumber,
		options,
		isSync
	}));
	const fileDescriptors = getFinalFileDescriptors({
		initialFileDescriptors,
		addProperties: addProperties$2,
		options,
		isSync
	});
	options.stdio = fileDescriptors.map(({ stdioItems }) => forwardStdio(stdioItems));
	return fileDescriptors;
};
const getFileDescriptor = ({ stdioOption, fdNumber, options, isSync }) => {
	const optionName = getStreamName(fdNumber);
	const { stdioItems: initialStdioItems, isStdioArray } = initializeStdioItems({
		stdioOption,
		fdNumber,
		options,
		optionName
	});
	const direction = getStreamDirection(initialStdioItems, fdNumber, optionName);
	const stdioItems = initialStdioItems.map((stdioItem) => handleNativeStream({
		stdioItem,
		isStdioArray,
		fdNumber,
		direction,
		isSync
	}));
	const normalizedStdioItems = normalizeTransforms(stdioItems, optionName, direction, options);
	const objectMode = getFdObjectMode(normalizedStdioItems, direction);
	validateFileObjectMode(normalizedStdioItems, objectMode);
	return {
		direction,
		objectMode,
		stdioItems: normalizedStdioItems
	};
};
const initializeStdioItems = ({ stdioOption, fdNumber, options, optionName }) => {
	const values = Array.isArray(stdioOption) ? stdioOption : [stdioOption];
	const initialStdioItems = [...values.map((value) => initializeStdioItem(value, optionName)), ...handleInputOptions(options, fdNumber)];
	const stdioItems = filterDuplicates(initialStdioItems);
	const isStdioArray = stdioItems.length > 1;
	validateStdioArray(stdioItems, isStdioArray, optionName);
	validateStreams(stdioItems);
	return {
		stdioItems,
		isStdioArray
	};
};
const initializeStdioItem = (value, optionName) => ({
	type: getStdioItemType(value, optionName),
	value,
	optionName
});
const validateStdioArray = (stdioItems, isStdioArray, optionName) => {
	if (stdioItems.length === 0) throw new TypeError(`The \`${optionName}\` option must not be an empty array.`);
	if (!isStdioArray) return;
	for (const { value, optionName: optionName$1 } of stdioItems) if (INVALID_STDIO_ARRAY_OPTIONS.has(value)) throw new Error(`The \`${optionName$1}\` option must not include \`${value}\`.`);
};
const INVALID_STDIO_ARRAY_OPTIONS = new Set(["ignore", "ipc"]);
const validateStreams = (stdioItems) => {
	for (const stdioItem of stdioItems) validateFileStdio(stdioItem);
};
const validateFileStdio = ({ type, value, optionName }) => {
	if (isRegularUrl(value)) throw new TypeError(`The \`${optionName}: URL\` option must use the \`file:\` scheme.
For example, you can use the \`pathToFileURL()\` method of the \`url\` core module.`);
	if (isUnknownStdioString(type, value)) throw new TypeError(`The \`${optionName}: { file: '...' }\` option must be used instead of \`${optionName}: '...'\`.`);
};
const validateFileObjectMode = (stdioItems, objectMode) => {
	if (!objectMode) return;
	const fileStdioItem = stdioItems.find(({ type }) => FILE_TYPES.has(type));
	if (fileStdioItem !== void 0) throw new TypeError(`The \`${fileStdioItem.optionName}\` option cannot use both files and transforms in objectMode.`);
};
const getFinalFileDescriptors = ({ initialFileDescriptors, addProperties: addProperties$2, options, isSync }) => {
	const fileDescriptors = [];
	try {
		for (const fileDescriptor of initialFileDescriptors) fileDescriptors.push(getFinalFileDescriptor({
			fileDescriptor,
			fileDescriptors,
			addProperties: addProperties$2,
			options,
			isSync
		}));
		return fileDescriptors;
	} catch (error$1) {
		cleanupCustomStreams(fileDescriptors);
		throw error$1;
	}
};
const getFinalFileDescriptor = ({ fileDescriptor: { direction, objectMode, stdioItems }, fileDescriptors, addProperties: addProperties$2, options, isSync }) => {
	const finalStdioItems = stdioItems.map((stdioItem) => addStreamProperties({
		stdioItem,
		addProperties: addProperties$2,
		direction,
		options,
		fileDescriptors,
		isSync
	}));
	return {
		direction,
		objectMode,
		stdioItems: finalStdioItems
	};
};
const addStreamProperties = ({ stdioItem, addProperties: addProperties$2, direction, options, fileDescriptors, isSync }) => {
	const duplicateStream = getDuplicateStream({
		stdioItem,
		direction,
		fileDescriptors,
		isSync
	});
	if (duplicateStream !== void 0) return {
		...stdioItem,
		stream: duplicateStream
	};
	return {
		...stdioItem,
		...addProperties$2[direction][stdioItem.type](stdioItem, options)
	};
};
const cleanupCustomStreams = (fileDescriptors) => {
	for (const { stdioItems } of fileDescriptors) for (const { stream: stream$4 } of stdioItems) if (stream$4 !== void 0 && !isStandardStream(stream$4)) stream$4.destroy();
};
const forwardStdio = (stdioItems) => {
	if (stdioItems.length > 1) return stdioItems.some(({ value: value$1 }) => value$1 === "overlapped") ? "overlapped" : "pipe";
	const [{ type, value }] = stdioItems;
	return type === "native" ? value : "pipe";
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/stdio/handle-sync.js
const handleStdioSync = (options, verboseInfo) => handleStdio(addPropertiesSync, options, verboseInfo, true);
const forbiddenIfSync = ({ type, optionName }) => {
	throwInvalidSyncValue(optionName, TYPE_TO_MESSAGE[type]);
};
const forbiddenNativeIfSync = ({ optionName, value }) => {
	if (value === "ipc" || value === "overlapped") throwInvalidSyncValue(optionName, `"${value}"`);
	return {};
};
const throwInvalidSyncValue = (optionName, value) => {
	throw new TypeError(`The \`${optionName}\` option cannot be ${value} with synchronous methods.`);
};
const addProperties$1 = {
	generator() {},
	asyncGenerator: forbiddenIfSync,
	webStream: forbiddenIfSync,
	nodeStream: forbiddenIfSync,
	webTransform: forbiddenIfSync,
	duplex: forbiddenIfSync,
	asyncIterable: forbiddenIfSync,
	native: forbiddenNativeIfSync
};
const addPropertiesSync = {
	input: {
		...addProperties$1,
		fileUrl: ({ value }) => ({ contents: [bufferToUint8Array(readFileSync(value))] }),
		filePath: ({ value: { file } }) => ({ contents: [bufferToUint8Array(readFileSync(file))] }),
		fileNumber: forbiddenIfSync,
		iterable: ({ value }) => ({ contents: [...value] }),
		string: ({ value }) => ({ contents: [value] }),
		uint8Array: ({ value }) => ({ contents: [value] })
	},
	output: {
		...addProperties$1,
		fileUrl: ({ value }) => ({ path: value }),
		filePath: ({ value: { file } }) => ({ path: file }),
		fileNumber: ({ value }) => ({ path: value }),
		iterable: forbiddenIfSync,
		string: forbiddenIfSync,
		uint8Array: forbiddenIfSync
	}
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/io/strip-newline.js
const stripNewline = (value, { stripFinalNewline: stripFinalNewline$1 }, fdNumber) => getStripFinalNewline(stripFinalNewline$1, fdNumber) && value !== void 0 && !Array.isArray(value) ? stripFinalNewline(value) : value;
const getStripFinalNewline = (stripFinalNewline$1, fdNumber) => fdNumber === "all" ? stripFinalNewline$1[1] || stripFinalNewline$1[2] : stripFinalNewline$1[fdNumber];

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/transform/split.js
const getSplitLinesGenerator = (binary, preserveNewlines, skipped, state) => binary || skipped ? void 0 : initializeSplitLines(preserveNewlines, state);
const splitLinesSync = (chunk, preserveNewlines, objectMode) => objectMode ? chunk.flatMap((item) => splitLinesItemSync(item, preserveNewlines)) : splitLinesItemSync(chunk, preserveNewlines);
const splitLinesItemSync = (chunk, preserveNewlines) => {
	const { transform, final } = initializeSplitLines(preserveNewlines, {});
	return [...transform(chunk), ...final()];
};
const initializeSplitLines = (preserveNewlines, state) => {
	state.previousChunks = "";
	return {
		transform: splitGenerator.bind(void 0, state, preserveNewlines),
		final: linesFinal.bind(void 0, state)
	};
};
const splitGenerator = function* (state, preserveNewlines, chunk) {
	if (typeof chunk !== "string") {
		yield chunk;
		return;
	}
	let { previousChunks } = state;
	let start = -1;
	for (let end = 0; end < chunk.length; end += 1) if (chunk[end] === "\n") {
		const newlineLength = getNewlineLength(chunk, end, preserveNewlines, state);
		let line = chunk.slice(start + 1, end + 1 - newlineLength);
		if (previousChunks.length > 0) {
			line = concatString(previousChunks, line);
			previousChunks = "";
		}
		yield line;
		start = end;
	}
	if (start !== chunk.length - 1) previousChunks = concatString(previousChunks, chunk.slice(start + 1));
	state.previousChunks = previousChunks;
};
const getNewlineLength = (chunk, end, preserveNewlines, state) => {
	if (preserveNewlines) return 0;
	state.isWindowsNewline = end !== 0 && chunk[end - 1] === "\r";
	return state.isWindowsNewline ? 2 : 1;
};
const linesFinal = function* ({ previousChunks }) {
	if (previousChunks.length > 0) yield previousChunks;
};
const getAppendNewlineGenerator = ({ binary, preserveNewlines, readableObjectMode, state }) => binary || preserveNewlines || readableObjectMode ? void 0 : { transform: appendNewlineGenerator.bind(void 0, state) };
const appendNewlineGenerator = function* ({ isWindowsNewline = false }, chunk) {
	const { unixNewline, windowsNewline, LF: LF$2, concatBytes } = typeof chunk === "string" ? linesStringInfo : linesUint8ArrayInfo;
	if (chunk.at(-1) === LF$2) {
		yield chunk;
		return;
	}
	const newline = isWindowsNewline ? windowsNewline : unixNewline;
	yield concatBytes(chunk, newline);
};
const concatString = (firstChunk, secondChunk) => `${firstChunk}${secondChunk}`;
const linesStringInfo = {
	windowsNewline: "\r\n",
	unixNewline: "\n",
	LF: "\n",
	concatBytes: concatString
};
const concatUint8Array = (firstChunk, secondChunk) => {
	const chunk = new Uint8Array(firstChunk.length + secondChunk.length);
	chunk.set(firstChunk, 0);
	chunk.set(secondChunk, firstChunk.length);
	return chunk;
};
const linesUint8ArrayInfo = {
	windowsNewline: new Uint8Array([13, 10]),
	unixNewline: new Uint8Array([10]),
	LF: 10,
	concatBytes: concatUint8Array
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/transform/validate.js
const getValidateTransformInput = (writableObjectMode, optionName) => writableObjectMode ? void 0 : validateStringTransformInput.bind(void 0, optionName);
const validateStringTransformInput = function* (optionName, chunk) {
	if (typeof chunk !== "string" && !isUint8Array(chunk) && !Buffer$1.isBuffer(chunk)) throw new TypeError(`The \`${optionName}\` option's transform must use "objectMode: true" to receive as input: ${typeof chunk}.`);
	yield chunk;
};
const getValidateTransformReturn = (readableObjectMode, optionName) => readableObjectMode ? validateObjectTransformReturn.bind(void 0, optionName) : validateStringTransformReturn.bind(void 0, optionName);
const validateObjectTransformReturn = function* (optionName, chunk) {
	validateEmptyReturn(optionName, chunk);
	yield chunk;
};
const validateStringTransformReturn = function* (optionName, chunk) {
	validateEmptyReturn(optionName, chunk);
	if (typeof chunk !== "string" && !isUint8Array(chunk)) throw new TypeError(`The \`${optionName}\` option's function must yield a string or an Uint8Array, not ${typeof chunk}.`);
	yield chunk;
};
const validateEmptyReturn = (optionName, chunk) => {
	if (chunk === null || chunk === void 0) throw new TypeError(`The \`${optionName}\` option's function must not call \`yield ${chunk}\`.
Instead, \`yield\` should either be called with a value, or not be called at all. For example:
  if (condition) { yield value; }`);
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/transform/encoding-transform.js
const getEncodingTransformGenerator = (binary, encoding, skipped) => {
	if (skipped) return;
	if (binary) return { transform: encodingUint8ArrayGenerator.bind(void 0, new TextEncoder()) };
	const stringDecoder = new StringDecoder(encoding);
	return {
		transform: encodingStringGenerator.bind(void 0, stringDecoder),
		final: encodingStringFinal.bind(void 0, stringDecoder)
	};
};
const encodingUint8ArrayGenerator = function* (textEncoder$6, chunk) {
	if (Buffer$1.isBuffer(chunk)) yield bufferToUint8Array(chunk);
	else if (typeof chunk === "string") yield textEncoder$6.encode(chunk);
	else yield chunk;
};
const encodingStringGenerator = function* (stringDecoder, chunk) {
	yield isUint8Array(chunk) ? stringDecoder.write(chunk) : chunk;
};
const encodingStringFinal = function* (stringDecoder) {
	const lastChunk = stringDecoder.end();
	if (lastChunk !== "") yield lastChunk;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/transform/run-async.js
const pushChunks = callbackify(async (getChunks, state, getChunksArguments, transformStream) => {
	state.currentIterable = getChunks(...getChunksArguments);
	try {
		for await (const chunk of state.currentIterable) transformStream.push(chunk);
	} finally {
		delete state.currentIterable;
	}
});
const transformChunk = async function* (chunk, generators, index) {
	if (index === generators.length) {
		yield chunk;
		return;
	}
	const { transform = identityGenerator$1 } = generators[index];
	for await (const transformedChunk of transform(chunk)) yield* transformChunk(transformedChunk, generators, index + 1);
};
const finalChunks = async function* (generators) {
	for (const [index, { final }] of Object.entries(generators)) yield* generatorFinalChunks(final, Number(index), generators);
};
const generatorFinalChunks = async function* (final, index, generators) {
	if (final === void 0) return;
	for await (const finalChunk of final()) yield* transformChunk(finalChunk, generators, index + 1);
};
const destroyTransform = callbackify(async ({ currentIterable }, error$1) => {
	if (currentIterable !== void 0) {
		await (error$1 ? currentIterable.throw(error$1) : currentIterable.return());
		return;
	}
	if (error$1) throw error$1;
});
const identityGenerator$1 = function* (chunk) {
	yield chunk;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/transform/run-sync.js
const pushChunksSync = (getChunksSync, getChunksArguments, transformStream, done) => {
	try {
		for (const chunk of getChunksSync(...getChunksArguments)) transformStream.push(chunk);
		done();
	} catch (error$1) {
		done(error$1);
	}
};
const runTransformSync = (generators, chunks) => [...chunks.flatMap((chunk) => [...transformChunkSync(chunk, generators, 0)]), ...finalChunksSync(generators)];
const transformChunkSync = function* (chunk, generators, index) {
	if (index === generators.length) {
		yield chunk;
		return;
	}
	const { transform = identityGenerator } = generators[index];
	for (const transformedChunk of transform(chunk)) yield* transformChunkSync(transformedChunk, generators, index + 1);
};
const finalChunksSync = function* (generators) {
	for (const [index, { final }] of Object.entries(generators)) yield* generatorFinalChunksSync(final, Number(index), generators);
};
const generatorFinalChunksSync = function* (final, index, generators) {
	if (final === void 0) return;
	for (const finalChunk of final()) yield* transformChunkSync(finalChunk, generators, index + 1);
};
const identityGenerator = function* (chunk) {
	yield chunk;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/transform/generator.js
const generatorToStream = ({ value, value: { transform, final, writableObjectMode, readableObjectMode }, optionName }, { encoding }) => {
	const state = {};
	const generators = addInternalGenerators(value, encoding, optionName);
	const transformAsync = isAsyncGenerator(transform);
	const finalAsync = isAsyncGenerator(final);
	const transformMethod = transformAsync ? pushChunks.bind(void 0, transformChunk, state) : pushChunksSync.bind(void 0, transformChunkSync);
	const finalMethod = transformAsync || finalAsync ? pushChunks.bind(void 0, finalChunks, state) : pushChunksSync.bind(void 0, finalChunksSync);
	const destroyMethod = transformAsync || finalAsync ? destroyTransform.bind(void 0, state) : void 0;
	const stream$4 = new Transform({
		writableObjectMode,
		writableHighWaterMark: getDefaultHighWaterMark(writableObjectMode),
		readableObjectMode,
		readableHighWaterMark: getDefaultHighWaterMark(readableObjectMode),
		transform(chunk, encoding$1, done) {
			transformMethod([
				chunk,
				generators,
				0
			], this, done);
		},
		flush(done) {
			finalMethod([generators], this, done);
		},
		destroy: destroyMethod
	});
	return { stream: stream$4 };
};
const runGeneratorsSync = (chunks, stdioItems, encoding, isInput) => {
	const generators = stdioItems.filter(({ type }) => type === "generator");
	const reversedGenerators = isInput ? generators.reverse() : generators;
	for (const { value, optionName } of reversedGenerators) {
		const generators$1 = addInternalGenerators(value, encoding, optionName);
		chunks = runTransformSync(generators$1, chunks);
	}
	return chunks;
};
const addInternalGenerators = ({ transform, final, binary, writableObjectMode, readableObjectMode, preserveNewlines }, encoding, optionName) => {
	const state = {};
	return [
		{ transform: getValidateTransformInput(writableObjectMode, optionName) },
		getEncodingTransformGenerator(binary, encoding, writableObjectMode),
		getSplitLinesGenerator(binary, preserveNewlines, writableObjectMode, state),
		{
			transform,
			final
		},
		{ transform: getValidateTransformReturn(readableObjectMode, optionName) },
		getAppendNewlineGenerator({
			binary,
			preserveNewlines,
			readableObjectMode,
			state
		})
	].filter(Boolean);
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/io/input-sync.js
const addInputOptionsSync = (fileDescriptors, options) => {
	for (const fdNumber of getInputFdNumbers(fileDescriptors)) addInputOptionSync(fileDescriptors, fdNumber, options);
};
const getInputFdNumbers = (fileDescriptors) => new Set(Object.entries(fileDescriptors).filter(([, { direction }]) => direction === "input").map(([fdNumber]) => Number(fdNumber)));
const addInputOptionSync = (fileDescriptors, fdNumber, options) => {
	const { stdioItems } = fileDescriptors[fdNumber];
	const allStdioItems = stdioItems.filter(({ contents }) => contents !== void 0);
	if (allStdioItems.length === 0) return;
	if (fdNumber !== 0) {
		const [{ type, optionName }] = allStdioItems;
		throw new TypeError(`Only the \`stdin\` option, not \`${optionName}\`, can be ${TYPE_TO_MESSAGE[type]} with synchronous methods.`);
	}
	const allContents = allStdioItems.map(({ contents }) => contents);
	const transformedContents = allContents.map((contents) => applySingleInputGeneratorsSync(contents, stdioItems));
	options.input = joinToUint8Array(transformedContents);
};
const applySingleInputGeneratorsSync = (contents, stdioItems) => {
	const newContents = runGeneratorsSync(contents, stdioItems, "utf8", true);
	validateSerializable(newContents);
	return joinToUint8Array(newContents);
};
const validateSerializable = (newContents) => {
	const invalidItem = newContents.find((item) => typeof item !== "string" && !isUint8Array(item));
	if (invalidItem !== void 0) throw new TypeError(`The \`stdin\` option is invalid: when passing objects as input, a transform must be used to serialize them to strings or Uint8Arrays: ${invalidItem}.`);
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/verbose/output.js
const shouldLogOutput = ({ stdioItems, encoding, verboseInfo, fdNumber }) => fdNumber !== "all" && isFullVerbose(verboseInfo, fdNumber) && !BINARY_ENCODINGS.has(encoding) && fdUsesVerbose(fdNumber) && (stdioItems.some(({ type, value }) => type === "native" && PIPED_STDIO_VALUES.has(value)) || stdioItems.every(({ type }) => TRANSFORM_TYPES.has(type)));
const fdUsesVerbose = (fdNumber) => fdNumber === 1 || fdNumber === 2;
const PIPED_STDIO_VALUES = new Set(["pipe", "overlapped"]);
const logLines = async (linesIterable, stream$4, fdNumber, verboseInfo) => {
	for await (const line of linesIterable) if (!isPipingStream(stream$4)) logLine(line, fdNumber, verboseInfo);
};
const logLinesSync = (linesArray, fdNumber, verboseInfo) => {
	for (const line of linesArray) logLine(line, fdNumber, verboseInfo);
};
const isPipingStream = (stream$4) => stream$4._readableState.pipes.length > 0;
const logLine = (line, fdNumber, verboseInfo) => {
	const verboseMessage = serializeVerboseMessage(line);
	verboseLog({
		type: "output",
		verboseMessage,
		fdNumber,
		verboseInfo
	});
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/io/output-sync.js
const transformOutputSync = ({ fileDescriptors, syncResult: { output }, options, isMaxBuffer, verboseInfo }) => {
	if (output === null) return { output: Array.from({ length: 3 }) };
	const state = {};
	const outputFiles = /* @__PURE__ */ new Set([]);
	const transformedOutput = output.map((result, fdNumber) => transformOutputResultSync({
		result,
		fileDescriptors,
		fdNumber,
		state,
		outputFiles,
		isMaxBuffer,
		verboseInfo
	}, options));
	return {
		output: transformedOutput,
		...state
	};
};
const transformOutputResultSync = ({ result, fileDescriptors, fdNumber, state, outputFiles, isMaxBuffer, verboseInfo }, { buffer: buffer$1, encoding, lines, stripFinalNewline: stripFinalNewline$1, maxBuffer }) => {
	if (result === null) return;
	const truncatedResult = truncateMaxBufferSync(result, isMaxBuffer, maxBuffer);
	const uint8ArrayResult = bufferToUint8Array(truncatedResult);
	const { stdioItems, objectMode } = fileDescriptors[fdNumber];
	const chunks = runOutputGeneratorsSync([uint8ArrayResult], stdioItems, encoding, state);
	const { serializedResult, finalResult = serializedResult } = serializeChunks({
		chunks,
		objectMode,
		encoding,
		lines,
		stripFinalNewline: stripFinalNewline$1,
		fdNumber
	});
	logOutputSync({
		serializedResult,
		fdNumber,
		state,
		verboseInfo,
		encoding,
		stdioItems,
		objectMode
	});
	const returnedResult = buffer$1[fdNumber] ? finalResult : void 0;
	try {
		if (state.error === void 0) writeToFiles(serializedResult, stdioItems, outputFiles);
		return returnedResult;
	} catch (error$1) {
		state.error = error$1;
		return returnedResult;
	}
};
const runOutputGeneratorsSync = (chunks, stdioItems, encoding, state) => {
	try {
		return runGeneratorsSync(chunks, stdioItems, encoding, false);
	} catch (error$1) {
		state.error = error$1;
		return chunks;
	}
};
const serializeChunks = ({ chunks, objectMode, encoding, lines, stripFinalNewline: stripFinalNewline$1, fdNumber }) => {
	if (objectMode) return { serializedResult: chunks };
	if (encoding === "buffer") return { serializedResult: joinToUint8Array(chunks) };
	const serializedResult = joinToString(chunks, encoding);
	if (lines[fdNumber]) return {
		serializedResult,
		finalResult: splitLinesSync(serializedResult, !stripFinalNewline$1[fdNumber], objectMode)
	};
	return { serializedResult };
};
const logOutputSync = ({ serializedResult, fdNumber, state, verboseInfo, encoding, stdioItems, objectMode }) => {
	if (!shouldLogOutput({
		stdioItems,
		encoding,
		verboseInfo,
		fdNumber
	})) return;
	const linesArray = splitLinesSync(serializedResult, false, objectMode);
	try {
		logLinesSync(linesArray, fdNumber, verboseInfo);
	} catch (error$1) {
		state.error ??= error$1;
	}
};
const writeToFiles = (serializedResult, stdioItems, outputFiles) => {
	for (const { path: path$9 } of stdioItems.filter(({ type }) => FILE_TYPES.has(type))) {
		const pathString = typeof path$9 === "string" ? path$9 : path$9.toString();
		if (outputFiles.has(pathString)) appendFileSync(path$9, serializedResult);
		else {
			outputFiles.add(pathString);
			writeFileSync(path$9, serializedResult);
		}
	}
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/resolve/all-sync.js
const getAllSync = ([, stdout$1, stderr], options) => {
	if (!options.all) return;
	if (stdout$1 === void 0) return stderr;
	if (stderr === void 0) return stdout$1;
	if (Array.isArray(stdout$1)) return Array.isArray(stderr) ? [...stdout$1, ...stderr] : [...stdout$1, stripNewline(stderr, options, "all")];
	if (Array.isArray(stderr)) return [stripNewline(stdout$1, options, "all"), ...stderr];
	if (isUint8Array(stdout$1) && isUint8Array(stderr)) return concatUint8Arrays([stdout$1, stderr]);
	return `${stdout$1}${stderr}`;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/resolve/exit-async.js
const waitForExit = async (subprocess, context$1) => {
	const [exitCode, signal] = await waitForExitOrError(subprocess);
	context$1.isForcefullyTerminated ??= false;
	return [exitCode, signal];
};
const waitForExitOrError = async (subprocess) => {
	const [spawnPayload, exitPayload] = await Promise.allSettled([once(subprocess, "spawn"), once(subprocess, "exit")]);
	if (spawnPayload.status === "rejected") return [];
	return exitPayload.status === "rejected" ? waitForSubprocessExit(subprocess) : exitPayload.value;
};
const waitForSubprocessExit = async (subprocess) => {
	try {
		return await once(subprocess, "exit");
	} catch {
		return waitForSubprocessExit(subprocess);
	}
};
const waitForSuccessfulExit = async (exitPromise) => {
	const [exitCode, signal] = await exitPromise;
	if (!isSubprocessErrorExit(exitCode, signal) && isFailedExit(exitCode, signal)) throw new DiscardedError();
	return [exitCode, signal];
};
const isSubprocessErrorExit = (exitCode, signal) => exitCode === void 0 && signal === void 0;
const isFailedExit = (exitCode, signal) => exitCode !== 0 || signal !== null;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/resolve/exit-sync.js
const getExitResultSync = ({ error: error$1, status: exitCode, signal, output }, { maxBuffer }) => {
	const resultError = getResultError(error$1, exitCode, signal);
	const timedOut = resultError?.code === "ETIMEDOUT";
	const isMaxBuffer = isMaxBufferSync(resultError, output, maxBuffer);
	return {
		resultError,
		exitCode,
		signal,
		timedOut,
		isMaxBuffer
	};
};
const getResultError = (error$1, exitCode, signal) => {
	if (error$1 !== void 0) return error$1;
	return isFailedExit(exitCode, signal) ? new DiscardedError() : void 0;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/methods/main-sync.js
const execaCoreSync = (rawFile, rawArguments, rawOptions) => {
	const { file, commandArguments, command, escapedCommand, startTime, verboseInfo, options, fileDescriptors } = handleSyncArguments(rawFile, rawArguments, rawOptions);
	const result = spawnSubprocessSync({
		file,
		commandArguments,
		options,
		command,
		escapedCommand,
		verboseInfo,
		fileDescriptors,
		startTime
	});
	return handleResult(result, verboseInfo, options);
};
const handleSyncArguments = (rawFile, rawArguments, rawOptions) => {
	const { command, escapedCommand, startTime, verboseInfo } = handleCommand(rawFile, rawArguments, rawOptions);
	const syncOptions = normalizeSyncOptions(rawOptions);
	const { file, commandArguments, options } = normalizeOptions(rawFile, rawArguments, syncOptions);
	validateSyncOptions(options);
	const fileDescriptors = handleStdioSync(options, verboseInfo);
	return {
		file,
		commandArguments,
		command,
		escapedCommand,
		startTime,
		verboseInfo,
		options,
		fileDescriptors
	};
};
const normalizeSyncOptions = (options) => options.node && !options.ipc ? {
	...options,
	ipc: false
} : options;
const validateSyncOptions = ({ ipc, ipcInput, detached, cancelSignal }) => {
	if (ipcInput) throwInvalidSyncOption("ipcInput");
	if (ipc) throwInvalidSyncOption("ipc: true");
	if (detached) throwInvalidSyncOption("detached: true");
	if (cancelSignal) throwInvalidSyncOption("cancelSignal");
};
const throwInvalidSyncOption = (value) => {
	throw new TypeError(`The "${value}" option cannot be used with synchronous methods.`);
};
const spawnSubprocessSync = ({ file, commandArguments, options, command, escapedCommand, verboseInfo, fileDescriptors, startTime }) => {
	const syncResult = runSubprocessSync({
		file,
		commandArguments,
		options,
		command,
		escapedCommand,
		fileDescriptors,
		startTime
	});
	if (syncResult.failed) return syncResult;
	const { resultError, exitCode, signal, timedOut, isMaxBuffer } = getExitResultSync(syncResult, options);
	const { output, error: error$1 = resultError } = transformOutputSync({
		fileDescriptors,
		syncResult,
		options,
		isMaxBuffer,
		verboseInfo
	});
	const stdio = output.map((stdioOutput, fdNumber) => stripNewline(stdioOutput, options, fdNumber));
	const all = stripNewline(getAllSync(output, options), options, "all");
	return getSyncResult({
		error: error$1,
		exitCode,
		signal,
		timedOut,
		isMaxBuffer,
		stdio,
		all,
		options,
		command,
		escapedCommand,
		startTime
	});
};
const runSubprocessSync = ({ file, commandArguments, options, command, escapedCommand, fileDescriptors, startTime }) => {
	try {
		addInputOptionsSync(fileDescriptors, options);
		const normalizedOptions = normalizeSpawnSyncOptions(options);
		return spawnSync(file, commandArguments, normalizedOptions);
	} catch (error$1) {
		return makeEarlyError({
			error: error$1,
			command,
			escapedCommand,
			fileDescriptors,
			options,
			startTime,
			isSync: true
		});
	}
};
const normalizeSpawnSyncOptions = ({ encoding, maxBuffer,...options }) => ({
	...options,
	encoding: "buffer",
	maxBuffer: getMaxBufferSync(maxBuffer)
});
const getSyncResult = ({ error: error$1, exitCode, signal, timedOut, isMaxBuffer, stdio, all, options, command, escapedCommand, startTime }) => error$1 === void 0 ? makeSuccessResult({
	command,
	escapedCommand,
	stdio,
	all,
	ipcOutput: [],
	options,
	startTime
}) : makeError({
	error: error$1,
	command,
	escapedCommand,
	timedOut,
	isCanceled: false,
	isGracefullyCanceled: false,
	isMaxBuffer,
	isForcefullyTerminated: false,
	exitCode,
	signal,
	stdio,
	all,
	ipcOutput: [],
	options,
	startTime,
	isSync: true
});

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/get-one.js
const getOneMessage$1 = ({ anyProcess, channel: channel$1, isSubprocess, ipc }, { reference = true, filter: filter$1 } = {}) => {
	validateIpcMethod({
		methodName: "getOneMessage",
		isSubprocess,
		ipc,
		isConnected: isConnected(anyProcess)
	});
	return getOneMessageAsync({
		anyProcess,
		channel: channel$1,
		isSubprocess,
		filter: filter$1,
		reference
	});
};
const getOneMessageAsync = async ({ anyProcess, channel: channel$1, isSubprocess, filter: filter$1, reference }) => {
	addReference(channel$1, reference);
	const ipcEmitter = getIpcEmitter(anyProcess, channel$1, isSubprocess);
	const controller = new AbortController();
	try {
		return await Promise.race([
			getMessage(ipcEmitter, filter$1, controller),
			throwOnDisconnect(ipcEmitter, isSubprocess, controller),
			throwOnStrictError(ipcEmitter, isSubprocess, controller)
		]);
	} catch (error$1) {
		disconnect(anyProcess);
		throw error$1;
	} finally {
		controller.abort();
		removeReference(channel$1, reference);
	}
};
const getMessage = async (ipcEmitter, filter$1, { signal }) => {
	if (filter$1 === void 0) {
		const [message] = await once(ipcEmitter, "message", { signal });
		return message;
	}
	for await (const [message] of on(ipcEmitter, "message", { signal })) if (filter$1(message)) return message;
};
const throwOnDisconnect = async (ipcEmitter, isSubprocess, { signal }) => {
	await once(ipcEmitter, "disconnect", { signal });
	throwOnEarlyDisconnect(isSubprocess);
};
const throwOnStrictError = async (ipcEmitter, isSubprocess, { signal }) => {
	const [error$1] = await once(ipcEmitter, "strict:error", { signal });
	throw getStrictResponseError(error$1, isSubprocess);
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/get-each.js
const getEachMessage$1 = ({ anyProcess, channel: channel$1, isSubprocess, ipc }, { reference = true } = {}) => loopOnMessages({
	anyProcess,
	channel: channel$1,
	isSubprocess,
	ipc,
	shouldAwait: !isSubprocess,
	reference
});
const loopOnMessages = ({ anyProcess, channel: channel$1, isSubprocess, ipc, shouldAwait, reference }) => {
	validateIpcMethod({
		methodName: "getEachMessage",
		isSubprocess,
		ipc,
		isConnected: isConnected(anyProcess)
	});
	addReference(channel$1, reference);
	const ipcEmitter = getIpcEmitter(anyProcess, channel$1, isSubprocess);
	const controller = new AbortController();
	const state = {};
	stopOnDisconnect(anyProcess, ipcEmitter, controller);
	abortOnStrictError({
		ipcEmitter,
		isSubprocess,
		controller,
		state
	});
	return iterateOnMessages({
		anyProcess,
		channel: channel$1,
		ipcEmitter,
		isSubprocess,
		shouldAwait,
		controller,
		state,
		reference
	});
};
const stopOnDisconnect = async (anyProcess, ipcEmitter, controller) => {
	try {
		await once(ipcEmitter, "disconnect", { signal: controller.signal });
		controller.abort();
	} catch {}
};
const abortOnStrictError = async ({ ipcEmitter, isSubprocess, controller, state }) => {
	try {
		const [error$1] = await once(ipcEmitter, "strict:error", { signal: controller.signal });
		state.error = getStrictResponseError(error$1, isSubprocess);
		controller.abort();
	} catch {}
};
const iterateOnMessages = async function* ({ anyProcess, channel: channel$1, ipcEmitter, isSubprocess, shouldAwait, controller, state, reference }) {
	try {
		for await (const [message] of on(ipcEmitter, "message", { signal: controller.signal })) {
			throwIfStrictError(state);
			yield message;
		}
	} catch {
		throwIfStrictError(state);
	} finally {
		controller.abort();
		removeReference(channel$1, reference);
		if (!isSubprocess) disconnect(anyProcess);
		if (shouldAwait) await anyProcess;
	}
};
const throwIfStrictError = ({ error: error$1 }) => {
	if (error$1) throw error$1;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/methods.js
const addIpcMethods = (subprocess, { ipc }) => {
	Object.assign(subprocess, getIpcMethods(subprocess, false, ipc));
};
const getIpcExport = () => {
	const anyProcess = process$1;
	const isSubprocess = true;
	const ipc = process$1.channel !== void 0;
	return {
		...getIpcMethods(anyProcess, isSubprocess, ipc),
		getCancelSignal: getCancelSignal$1.bind(void 0, {
			anyProcess,
			channel: anyProcess.channel,
			isSubprocess,
			ipc
		})
	};
};
const getIpcMethods = (anyProcess, isSubprocess, ipc) => ({
	sendMessage: sendMessage$1.bind(void 0, {
		anyProcess,
		channel: anyProcess.channel,
		isSubprocess,
		ipc
	}),
	getOneMessage: getOneMessage$1.bind(void 0, {
		anyProcess,
		channel: anyProcess.channel,
		isSubprocess,
		ipc
	}),
	getEachMessage: getEachMessage$1.bind(void 0, {
		anyProcess,
		channel: anyProcess.channel,
		isSubprocess,
		ipc
	})
});

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/return/early-error.js
const handleEarlyError = ({ error: error$1, command, escapedCommand, fileDescriptors, options, startTime, verboseInfo }) => {
	cleanupCustomStreams(fileDescriptors);
	const subprocess = new ChildProcess();
	createDummyStreams(subprocess, fileDescriptors);
	Object.assign(subprocess, {
		readable,
		writable,
		duplex
	});
	const earlyError = makeEarlyError({
		error: error$1,
		command,
		escapedCommand,
		fileDescriptors,
		options,
		startTime,
		isSync: false
	});
	const promise = handleDummyPromise(earlyError, verboseInfo, options);
	return {
		subprocess,
		promise
	};
};
const createDummyStreams = (subprocess, fileDescriptors) => {
	const stdin = createDummyStream();
	const stdout$1 = createDummyStream();
	const stderr = createDummyStream();
	const extraStdio = Array.from({ length: fileDescriptors.length - 3 }, createDummyStream);
	const all = createDummyStream();
	const stdio = [
		stdin,
		stdout$1,
		stderr,
		...extraStdio
	];
	Object.assign(subprocess, {
		stdin,
		stdout: stdout$1,
		stderr,
		all,
		stdio
	});
};
const createDummyStream = () => {
	const stream$4 = new PassThrough();
	stream$4.end();
	return stream$4;
};
const readable = () => new Readable({ read() {} });
const writable = () => new Writable({ write() {} });
const duplex = () => new Duplex({
	read() {},
	write() {}
});
const handleDummyPromise = async (error$1, verboseInfo, options) => handleResult(error$1, verboseInfo, options);

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/stdio/handle-async.js
const handleStdioAsync = (options, verboseInfo) => handleStdio(addPropertiesAsync, options, verboseInfo, false);
const forbiddenIfAsync = ({ type, optionName }) => {
	throw new TypeError(`The \`${optionName}\` option cannot be ${TYPE_TO_MESSAGE[type]}.`);
};
const addProperties = {
	fileNumber: forbiddenIfAsync,
	generator: generatorToStream,
	asyncGenerator: generatorToStream,
	nodeStream: ({ value }) => ({ stream: value }),
	webTransform({ value: { transform, writableObjectMode, readableObjectMode } }) {
		const objectMode = writableObjectMode || readableObjectMode;
		const stream$4 = Duplex.fromWeb(transform, { objectMode });
		return { stream: stream$4 };
	},
	duplex: ({ value: { transform } }) => ({ stream: transform }),
	native() {}
};
const addPropertiesAsync = {
	input: {
		...addProperties,
		fileUrl: ({ value }) => ({ stream: createReadStream(value) }),
		filePath: ({ value: { file } }) => ({ stream: createReadStream(file) }),
		webStream: ({ value }) => ({ stream: Readable.fromWeb(value) }),
		iterable: ({ value }) => ({ stream: Readable.from(value) }),
		asyncIterable: ({ value }) => ({ stream: Readable.from(value) }),
		string: ({ value }) => ({ stream: Readable.from(value) }),
		uint8Array: ({ value }) => ({ stream: Readable.from(Buffer$1.from(value)) })
	},
	output: {
		...addProperties,
		fileUrl: ({ value }) => ({ stream: createWriteStream(value) }),
		filePath: ({ value: { file } }) => ({ stream: createWriteStream(file) }),
		webStream: ({ value }) => ({ stream: Writable.fromWeb(value) }),
		iterable: forbiddenIfAsync,
		asyncIterable: forbiddenIfAsync,
		string: forbiddenIfAsync,
		uint8Array: forbiddenIfAsync
	}
};

//#endregion
//#region node_modules/.pnpm/@sindresorhus+merge-streams@4.0.0/node_modules/@sindresorhus/merge-streams/index.js
function mergeStreams(streams) {
	if (!Array.isArray(streams)) throw new TypeError(`Expected an array, got \`${typeof streams}\`.`);
	for (const stream$4 of streams) validateStream(stream$4);
	const objectMode = streams.some(({ readableObjectMode }) => readableObjectMode);
	const highWaterMark = getHighWaterMark(streams, objectMode);
	const passThroughStream = new MergedStream({
		objectMode,
		writableHighWaterMark: highWaterMark,
		readableHighWaterMark: highWaterMark
	});
	for (const stream$4 of streams) passThroughStream.add(stream$4);
	return passThroughStream;
}
const getHighWaterMark = (streams, objectMode) => {
	if (streams.length === 0) return getDefaultHighWaterMark(objectMode);
	const highWaterMarks = streams.filter(({ readableObjectMode }) => readableObjectMode === objectMode).map(({ readableHighWaterMark }) => readableHighWaterMark);
	return Math.max(...highWaterMarks);
};
var MergedStream = class extends PassThrough {
	#streams = /* @__PURE__ */ new Set([]);
	#ended = /* @__PURE__ */ new Set([]);
	#aborted = /* @__PURE__ */ new Set([]);
	#onFinished;
	#unpipeEvent = Symbol("unpipe");
	#streamPromises = /* @__PURE__ */ new WeakMap();
	add(stream$4) {
		validateStream(stream$4);
		if (this.#streams.has(stream$4)) return;
		this.#streams.add(stream$4);
		this.#onFinished ??= onMergedStreamFinished(this, this.#streams, this.#unpipeEvent);
		const streamPromise = endWhenStreamsDone({
			passThroughStream: this,
			stream: stream$4,
			streams: this.#streams,
			ended: this.#ended,
			aborted: this.#aborted,
			onFinished: this.#onFinished,
			unpipeEvent: this.#unpipeEvent
		});
		this.#streamPromises.set(stream$4, streamPromise);
		stream$4.pipe(this, { end: false });
	}
	async remove(stream$4) {
		validateStream(stream$4);
		if (!this.#streams.has(stream$4)) return false;
		const streamPromise = this.#streamPromises.get(stream$4);
		if (streamPromise === void 0) return false;
		this.#streamPromises.delete(stream$4);
		stream$4.unpipe(this);
		await streamPromise;
		return true;
	}
};
const onMergedStreamFinished = async (passThroughStream, streams, unpipeEvent) => {
	updateMaxListeners(passThroughStream, PASSTHROUGH_LISTENERS_COUNT);
	const controller = new AbortController();
	try {
		await Promise.race([onMergedStreamEnd(passThroughStream, controller), onInputStreamsUnpipe(passThroughStream, streams, unpipeEvent, controller)]);
	} finally {
		controller.abort();
		updateMaxListeners(passThroughStream, -PASSTHROUGH_LISTENERS_COUNT);
	}
};
const onMergedStreamEnd = async (passThroughStream, { signal }) => {
	try {
		await finished(passThroughStream, {
			signal,
			cleanup: true
		});
	} catch (error$1) {
		errorOrAbortStream(passThroughStream, error$1);
		throw error$1;
	}
};
const onInputStreamsUnpipe = async (passThroughStream, streams, unpipeEvent, { signal }) => {
	for await (const [unpipedStream] of on(passThroughStream, "unpipe", { signal })) if (streams.has(unpipedStream)) unpipedStream.emit(unpipeEvent);
};
const validateStream = (stream$4) => {
	if (typeof stream$4?.pipe !== "function") throw new TypeError(`Expected a readable stream, got: \`${typeof stream$4}\`.`);
};
const endWhenStreamsDone = async ({ passThroughStream, stream: stream$4, streams, ended, aborted: aborted$1, onFinished, unpipeEvent }) => {
	updateMaxListeners(passThroughStream, PASSTHROUGH_LISTENERS_PER_STREAM);
	const controller = new AbortController();
	try {
		await Promise.race([
			afterMergedStreamFinished(onFinished, stream$4, controller),
			onInputStreamEnd({
				passThroughStream,
				stream: stream$4,
				streams,
				ended,
				aborted: aborted$1,
				controller
			}),
			onInputStreamUnpipe({
				stream: stream$4,
				streams,
				ended,
				aborted: aborted$1,
				unpipeEvent,
				controller
			})
		]);
	} finally {
		controller.abort();
		updateMaxListeners(passThroughStream, -PASSTHROUGH_LISTENERS_PER_STREAM);
	}
	if (streams.size > 0 && streams.size === ended.size + aborted$1.size) if (ended.size === 0 && aborted$1.size > 0) abortStream(passThroughStream);
	else endStream(passThroughStream);
};
const afterMergedStreamFinished = async (onFinished, stream$4, { signal }) => {
	try {
		await onFinished;
		if (!signal.aborted) abortStream(stream$4);
	} catch (error$1) {
		if (!signal.aborted) errorOrAbortStream(stream$4, error$1);
	}
};
const onInputStreamEnd = async ({ passThroughStream, stream: stream$4, streams, ended, aborted: aborted$1, controller: { signal } }) => {
	try {
		await finished(stream$4, {
			signal,
			cleanup: true,
			readable: true,
			writable: false
		});
		if (streams.has(stream$4)) ended.add(stream$4);
	} catch (error$1) {
		if (signal.aborted || !streams.has(stream$4)) return;
		if (isAbortError(error$1)) aborted$1.add(stream$4);
		else errorStream(passThroughStream, error$1);
	}
};
const onInputStreamUnpipe = async ({ stream: stream$4, streams, ended, aborted: aborted$1, unpipeEvent, controller: { signal } }) => {
	await once(stream$4, unpipeEvent, { signal });
	if (!stream$4.readable) return once(signal, "abort", { signal });
	streams.delete(stream$4);
	ended.delete(stream$4);
	aborted$1.delete(stream$4);
};
const endStream = (stream$4) => {
	if (stream$4.writable) stream$4.end();
};
const errorOrAbortStream = (stream$4, error$1) => {
	if (isAbortError(error$1)) abortStream(stream$4);
	else errorStream(stream$4, error$1);
};
const isAbortError = (error$1) => error$1?.code === "ERR_STREAM_PREMATURE_CLOSE";
const abortStream = (stream$4) => {
	if (stream$4.readable || stream$4.writable) stream$4.destroy();
};
const errorStream = (stream$4, error$1) => {
	if (!stream$4.destroyed) {
		stream$4.once("error", noop);
		stream$4.destroy(error$1);
	}
};
const noop = () => {};
const updateMaxListeners = (passThroughStream, increment$1) => {
	const maxListeners = passThroughStream.getMaxListeners();
	if (maxListeners !== 0 && maxListeners !== Number.POSITIVE_INFINITY) passThroughStream.setMaxListeners(maxListeners + increment$1);
};
const PASSTHROUGH_LISTENERS_COUNT = 2;
const PASSTHROUGH_LISTENERS_PER_STREAM = 1;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/io/pipeline.js
const pipeStreams = (source, destination) => {
	source.pipe(destination);
	onSourceFinish(source, destination);
	onDestinationFinish(source, destination);
};
const onSourceFinish = async (source, destination) => {
	if (isStandardStream(source) || isStandardStream(destination)) return;
	try {
		await finished(source, {
			cleanup: true,
			readable: true,
			writable: false
		});
	} catch {}
	endDestinationStream(destination);
};
const endDestinationStream = (destination) => {
	if (destination.writable) destination.end();
};
const onDestinationFinish = async (source, destination) => {
	if (isStandardStream(source) || isStandardStream(destination)) return;
	try {
		await finished(destination, {
			cleanup: true,
			readable: false,
			writable: true
		});
	} catch {}
	abortSourceStream(source);
};
const abortSourceStream = (source) => {
	if (source.readable) source.destroy();
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/io/output-async.js
const pipeOutputAsync = (subprocess, fileDescriptors, controller) => {
	const pipeGroups = /* @__PURE__ */ new Map();
	for (const [fdNumber, { stdioItems, direction }] of Object.entries(fileDescriptors)) {
		for (const { stream: stream$4 } of stdioItems.filter(({ type }) => TRANSFORM_TYPES.has(type))) pipeTransform(subprocess, stream$4, direction, fdNumber);
		for (const { stream: stream$4 } of stdioItems.filter(({ type }) => !TRANSFORM_TYPES.has(type))) pipeStdioItem({
			subprocess,
			stream: stream$4,
			direction,
			fdNumber,
			pipeGroups,
			controller
		});
	}
	for (const [outputStream, inputStreams] of pipeGroups.entries()) {
		const inputStream = inputStreams.length === 1 ? inputStreams[0] : mergeStreams(inputStreams);
		pipeStreams(inputStream, outputStream);
	}
};
const pipeTransform = (subprocess, stream$4, direction, fdNumber) => {
	if (direction === "output") pipeStreams(subprocess.stdio[fdNumber], stream$4);
	else pipeStreams(stream$4, subprocess.stdio[fdNumber]);
	const streamProperty = SUBPROCESS_STREAM_PROPERTIES[fdNumber];
	if (streamProperty !== void 0) subprocess[streamProperty] = stream$4;
	subprocess.stdio[fdNumber] = stream$4;
};
const SUBPROCESS_STREAM_PROPERTIES = [
	"stdin",
	"stdout",
	"stderr"
];
const pipeStdioItem = ({ subprocess, stream: stream$4, direction, fdNumber, pipeGroups, controller }) => {
	if (stream$4 === void 0) return;
	setStandardStreamMaxListeners(stream$4, controller);
	const [inputStream, outputStream] = direction === "output" ? [stream$4, subprocess.stdio[fdNumber]] : [subprocess.stdio[fdNumber], stream$4];
	const outputStreams = pipeGroups.get(inputStream) ?? [];
	pipeGroups.set(inputStream, [...outputStreams, outputStream]);
};
const setStandardStreamMaxListeners = (stream$4, { signal }) => {
	if (isStandardStream(stream$4)) incrementMaxListeners(stream$4, MAX_LISTENERS_INCREMENT, signal);
};
const MAX_LISTENERS_INCREMENT = 2;

//#endregion
//#region node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/mjs/signals.js
/**
* This is not the set of all possible signals.
*
* It IS, however, the set of all signals that trigger
* an exit on either Linux or BSD systems.  Linux is a
* superset of the signal names supported on BSD, and
* the unknown signals just fail to register, so we can
* catch that easily enough.
*
* Windows signals are a different set, since there are
* signals that terminate Windows processes, but don't
* terminate (or don't even exist) on Posix systems.
*
* Don't bother with SIGKILL.  It's uncatchable, which
* means that we can't fire any callbacks anyway.
*
* If a user does happen to register a handler on a non-
* fatal signal like SIGWINCH or something, and then
* exit, it'll end up firing `process.emit('exit')`, so
* the handler will be fired anyway.
*
* SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised
* artificially, inherently leave the process in a
* state from which it is not safe to try and enter JS
* listeners.
*/
const signals = [];
signals.push("SIGHUP", "SIGINT", "SIGTERM");
if (process.platform !== "win32") signals.push("SIGALRM", "SIGABRT", "SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
if (process.platform === "linux") signals.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT");

//#endregion
//#region node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/mjs/index.js
const processOk = (process$4) => !!process$4 && typeof process$4 === "object" && typeof process$4.removeListener === "function" && typeof process$4.emit === "function" && typeof process$4.reallyExit === "function" && typeof process$4.listeners === "function" && typeof process$4.kill === "function" && typeof process$4.pid === "number" && typeof process$4.on === "function";
const kExitEmitter = Symbol.for("signal-exit emitter");
const global$1 = globalThis;
const ObjectDefineProperty = Object.defineProperty.bind(Object);
var Emitter = class {
	emitted = {
		afterExit: false,
		exit: false
	};
	listeners = {
		afterExit: [],
		exit: []
	};
	count = 0;
	id = Math.random();
	constructor() {
		if (global$1[kExitEmitter]) return global$1[kExitEmitter];
		ObjectDefineProperty(global$1, kExitEmitter, {
			value: this,
			writable: false,
			enumerable: false,
			configurable: false
		});
	}
	on(ev, fn) {
		this.listeners[ev].push(fn);
	}
	removeListener(ev, fn) {
		const list = this.listeners[ev];
		const i$1 = list.indexOf(fn);
		/* c8 ignore start */
		if (i$1 === -1) return;
		/* c8 ignore stop */
		if (i$1 === 0 && list.length === 1) list.length = 0;
		else list.splice(i$1, 1);
	}
	emit(ev, code, signal) {
		if (this.emitted[ev]) return false;
		this.emitted[ev] = true;
		let ret = false;
		for (const fn of this.listeners[ev]) ret = fn(code, signal) === true || ret;
		if (ev === "exit") ret = this.emit("afterExit", code, signal) || ret;
		return ret;
	}
};
var SignalExitBase = class {};
const signalExitWrap = (handler$1) => {
	return {
		onExit(cb, opts) {
			return handler$1.onExit(cb, opts);
		},
		load() {
			return handler$1.load();
		},
		unload() {
			return handler$1.unload();
		}
	};
};
var SignalExitFallback = class extends SignalExitBase {
	onExit() {
		return () => {};
	}
	load() {}
	unload() {}
};
var SignalExit = class extends SignalExitBase {
	/* c8 ignore start */
	#hupSig = process$3.platform === "win32" ? "SIGINT" : "SIGHUP";
	/* c8 ignore stop */
	#emitter = new Emitter();
	#process;
	#originalProcessEmit;
	#originalProcessReallyExit;
	#sigListeners = {};
	#loaded = false;
	constructor(process$4) {
		super();
		this.#process = process$4;
		this.#sigListeners = {};
		for (const sig of signals) this.#sigListeners[sig] = () => {
			const listeners = this.#process.listeners(sig);
			let { count: count$1 } = this.#emitter;
			/* c8 ignore start */
			const p = process$4;
			if (typeof p.__signal_exit_emitter__ === "object" && typeof p.__signal_exit_emitter__.count === "number") count$1 += p.__signal_exit_emitter__.count;
			/* c8 ignore stop */
			if (listeners.length === count$1) {
				this.unload();
				const ret = this.#emitter.emit("exit", null, sig);
				/* c8 ignore start */
				const s = sig === "SIGHUP" ? this.#hupSig : sig;
				if (!ret) process$4.kill(process$4.pid, s);
			}
		};
		this.#originalProcessReallyExit = process$4.reallyExit;
		this.#originalProcessEmit = process$4.emit;
	}
	onExit(cb, opts) {
		/* c8 ignore start */
		if (!processOk(this.#process)) return () => {};
		/* c8 ignore stop */
		if (this.#loaded === false) this.load();
		const ev = opts?.alwaysLast ? "afterExit" : "exit";
		this.#emitter.on(ev, cb);
		return () => {
			this.#emitter.removeListener(ev, cb);
			if (this.#emitter.listeners["exit"].length === 0 && this.#emitter.listeners["afterExit"].length === 0) this.unload();
		};
	}
	load() {
		if (this.#loaded) return;
		this.#loaded = true;
		this.#emitter.count += 1;
		for (const sig of signals) try {
			const fn = this.#sigListeners[sig];
			if (fn) this.#process.on(sig, fn);
		} catch (_) {}
		this.#process.emit = (ev, ...a$1) => {
			return this.#processEmit(ev, ...a$1);
		};
		this.#process.reallyExit = (code) => {
			return this.#processReallyExit(code);
		};
	}
	unload() {
		if (!this.#loaded) return;
		this.#loaded = false;
		signals.forEach((sig) => {
			const listener = this.#sigListeners[sig];
			/* c8 ignore start */
			if (!listener) throw new Error("Listener not defined for signal: " + sig);
			/* c8 ignore stop */
			try {
				this.#process.removeListener(sig, listener);
			} catch (_) {}
			/* c8 ignore stop */
		});
		this.#process.emit = this.#originalProcessEmit;
		this.#process.reallyExit = this.#originalProcessReallyExit;
		this.#emitter.count -= 1;
	}
	#processReallyExit(code) {
		/* c8 ignore start */
		if (!processOk(this.#process)) return 0;
		this.#process.exitCode = code || 0;
		/* c8 ignore stop */
		this.#emitter.emit("exit", this.#process.exitCode, null);
		return this.#originalProcessReallyExit.call(this.#process, this.#process.exitCode);
	}
	#processEmit(ev, ...args) {
		const og = this.#originalProcessEmit;
		if (ev === "exit" && processOk(this.#process)) {
			if (typeof args[0] === "number") this.#process.exitCode = args[0];
			/* c8 ignore start */
			const ret = og.call(this.#process, ev, ...args);
			/* c8 ignore start */
			this.#emitter.emit("exit", this.#process.exitCode, null);
			/* c8 ignore stop */
			return ret;
		} else return og.call(this.#process, ev, ...args);
	}
};
const process$3 = globalThis.process;
const { onExit, load, unload } = signalExitWrap(processOk(process$3) ? new SignalExit(process$3) : new SignalExitFallback());

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/terminate/cleanup.js
const cleanupOnExit = (subprocess, { cleanup, detached }, { signal }) => {
	if (!cleanup || detached) return;
	const removeExitHandler = onExit(() => {
		subprocess.kill();
	});
	addAbortListener(signal, () => {
		removeExitHandler();
	});
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/pipe/pipe-arguments.js
const normalizePipeArguments = ({ source, sourcePromise, boundOptions, createNested }, ...pipeArguments) => {
	const startTime = getStartTime();
	const { destination, destinationStream, destinationError, from, unpipeSignal } = getDestinationStream(boundOptions, createNested, pipeArguments);
	const { sourceStream, sourceError } = getSourceStream(source, from);
	const { options: sourceOptions, fileDescriptors } = SUBPROCESS_OPTIONS.get(source);
	return {
		sourcePromise,
		sourceStream,
		sourceOptions,
		sourceError,
		destination,
		destinationStream,
		destinationError,
		unpipeSignal,
		fileDescriptors,
		startTime
	};
};
const getDestinationStream = (boundOptions, createNested, pipeArguments) => {
	try {
		const { destination, pipeOptions: { from, to: to$1, unpipeSignal } = {} } = getDestination(boundOptions, createNested, ...pipeArguments);
		const destinationStream = getToStream(destination, to$1);
		return {
			destination,
			destinationStream,
			from,
			unpipeSignal
		};
	} catch (error$1) {
		return { destinationError: error$1 };
	}
};
const getDestination = (boundOptions, createNested, firstArgument, ...pipeArguments) => {
	if (Array.isArray(firstArgument)) {
		const destination = createNested(mapDestinationArguments, boundOptions)(firstArgument, ...pipeArguments);
		return {
			destination,
			pipeOptions: boundOptions
		};
	}
	if (typeof firstArgument === "string" || firstArgument instanceof URL) {
		if (Object.keys(boundOptions).length > 0) throw new TypeError("Please use .pipe(\"file\", ..., options) or .pipe(execa(\"file\", ..., options)) instead of .pipe(options)(\"file\", ...).");
		const [rawFile, rawArguments, rawOptions] = normalizeParameters(firstArgument, ...pipeArguments);
		const destination = createNested(mapDestinationArguments)(rawFile, rawArguments, rawOptions);
		return {
			destination,
			pipeOptions: rawOptions
		};
	}
	if (SUBPROCESS_OPTIONS.has(firstArgument)) {
		if (Object.keys(boundOptions).length > 0) throw new TypeError("Please use .pipe(options)`command` or .pipe($(options)`command`) instead of .pipe(options)($`command`).");
		return {
			destination: firstArgument,
			pipeOptions: pipeArguments[0]
		};
	}
	throw new TypeError(`The first argument must be a template string, an options object, or an Execa subprocess: ${firstArgument}`);
};
const mapDestinationArguments = ({ options }) => ({ options: {
	...options,
	stdin: "pipe",
	piped: true
} });
const getSourceStream = (source, from) => {
	try {
		const sourceStream = getFromStream(source, from);
		return { sourceStream };
	} catch (error$1) {
		return { sourceError: error$1 };
	}
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/pipe/throw.js
const handlePipeArgumentsError = ({ sourceStream, sourceError, destinationStream, destinationError, fileDescriptors, sourceOptions, startTime }) => {
	const error$1 = getPipeArgumentsError({
		sourceStream,
		sourceError,
		destinationStream,
		destinationError
	});
	if (error$1 !== void 0) throw createNonCommandError({
		error: error$1,
		fileDescriptors,
		sourceOptions,
		startTime
	});
};
const getPipeArgumentsError = ({ sourceStream, sourceError, destinationStream, destinationError }) => {
	if (sourceError !== void 0 && destinationError !== void 0) return destinationError;
	if (destinationError !== void 0) {
		abortSourceStream(sourceStream);
		return destinationError;
	}
	if (sourceError !== void 0) {
		endDestinationStream(destinationStream);
		return sourceError;
	}
};
const createNonCommandError = ({ error: error$1, fileDescriptors, sourceOptions, startTime }) => makeEarlyError({
	error: error$1,
	command: PIPE_COMMAND_MESSAGE,
	escapedCommand: PIPE_COMMAND_MESSAGE,
	fileDescriptors,
	options: sourceOptions,
	startTime,
	isSync: false
});
const PIPE_COMMAND_MESSAGE = "source.pipe(destination)";

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/pipe/sequence.js
const waitForBothSubprocesses = async (subprocessPromises) => {
	const [{ status: sourceStatus, reason: sourceReason, value: sourceResult = sourceReason }, { status: destinationStatus, reason: destinationReason, value: destinationResult = destinationReason }] = await subprocessPromises;
	if (!destinationResult.pipedFrom.includes(sourceResult)) destinationResult.pipedFrom.push(sourceResult);
	if (destinationStatus === "rejected") throw destinationResult;
	if (sourceStatus === "rejected") throw sourceResult;
	return destinationResult;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/pipe/streaming.js
const pipeSubprocessStream = (sourceStream, destinationStream, maxListenersController) => {
	const mergedStream = MERGED_STREAMS.has(destinationStream) ? pipeMoreSubprocessStream(sourceStream, destinationStream) : pipeFirstSubprocessStream(sourceStream, destinationStream);
	incrementMaxListeners(sourceStream, SOURCE_LISTENERS_PER_PIPE, maxListenersController.signal);
	incrementMaxListeners(destinationStream, DESTINATION_LISTENERS_PER_PIPE, maxListenersController.signal);
	cleanupMergedStreamsMap(destinationStream);
	return mergedStream;
};
const pipeFirstSubprocessStream = (sourceStream, destinationStream) => {
	const mergedStream = mergeStreams([sourceStream]);
	pipeStreams(mergedStream, destinationStream);
	MERGED_STREAMS.set(destinationStream, mergedStream);
	return mergedStream;
};
const pipeMoreSubprocessStream = (sourceStream, destinationStream) => {
	const mergedStream = MERGED_STREAMS.get(destinationStream);
	mergedStream.add(sourceStream);
	return mergedStream;
};
const cleanupMergedStreamsMap = async (destinationStream) => {
	try {
		await finished(destinationStream, {
			cleanup: true,
			readable: false,
			writable: true
		});
	} catch {}
	MERGED_STREAMS.delete(destinationStream);
};
const MERGED_STREAMS = /* @__PURE__ */ new WeakMap();
const SOURCE_LISTENERS_PER_PIPE = 2;
const DESTINATION_LISTENERS_PER_PIPE = 1;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/pipe/abort.js
const unpipeOnAbort = (unpipeSignal, unpipeContext) => unpipeSignal === void 0 ? [] : [unpipeOnSignalAbort(unpipeSignal, unpipeContext)];
const unpipeOnSignalAbort = async (unpipeSignal, { sourceStream, mergedStream, fileDescriptors, sourceOptions, startTime }) => {
	await aborted(unpipeSignal, sourceStream);
	await mergedStream.remove(sourceStream);
	const error$1 = /* @__PURE__ */ new Error("Pipe canceled by `unpipeSignal` option.");
	throw createNonCommandError({
		error: error$1,
		fileDescriptors,
		sourceOptions,
		startTime
	});
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/pipe/setup.js
const pipeToSubprocess = (sourceInfo, ...pipeArguments) => {
	if (isPlainObject(pipeArguments[0])) return pipeToSubprocess.bind(void 0, {
		...sourceInfo,
		boundOptions: {
			...sourceInfo.boundOptions,
			...pipeArguments[0]
		}
	});
	const { destination,...normalizedInfo } = normalizePipeArguments(sourceInfo, ...pipeArguments);
	const promise = handlePipePromise({
		...normalizedInfo,
		destination
	});
	promise.pipe = pipeToSubprocess.bind(void 0, {
		...sourceInfo,
		source: destination,
		sourcePromise: promise,
		boundOptions: {}
	});
	return promise;
};
const handlePipePromise = async ({ sourcePromise, sourceStream, sourceOptions, sourceError, destination, destinationStream, destinationError, unpipeSignal, fileDescriptors, startTime }) => {
	const subprocessPromises = getSubprocessPromises(sourcePromise, destination);
	handlePipeArgumentsError({
		sourceStream,
		sourceError,
		destinationStream,
		destinationError,
		fileDescriptors,
		sourceOptions,
		startTime
	});
	const maxListenersController = new AbortController();
	try {
		const mergedStream = pipeSubprocessStream(sourceStream, destinationStream, maxListenersController);
		return await Promise.race([waitForBothSubprocesses(subprocessPromises), ...unpipeOnAbort(unpipeSignal, {
			sourceStream,
			mergedStream,
			sourceOptions,
			fileDescriptors,
			startTime
		})]);
	} finally {
		maxListenersController.abort();
	}
};
const getSubprocessPromises = (sourcePromise, destination) => Promise.allSettled([sourcePromise, destination]);

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/io/iterate.js
const iterateOnSubprocessStream = ({ subprocessStdout, subprocess, binary, shouldEncode, encoding, preserveNewlines }) => {
	const controller = new AbortController();
	stopReadingOnExit(subprocess, controller);
	return iterateOnStream({
		stream: subprocessStdout,
		controller,
		binary,
		shouldEncode: !subprocessStdout.readableObjectMode && shouldEncode,
		encoding,
		shouldSplit: !subprocessStdout.readableObjectMode,
		preserveNewlines
	});
};
const stopReadingOnExit = async (subprocess, controller) => {
	try {
		await subprocess;
	} catch {} finally {
		controller.abort();
	}
};
const iterateForResult = ({ stream: stream$4, onStreamEnd, lines, encoding, stripFinalNewline: stripFinalNewline$1, allMixed }) => {
	const controller = new AbortController();
	stopReadingOnStreamEnd(onStreamEnd, controller, stream$4);
	const objectMode = stream$4.readableObjectMode && !allMixed;
	return iterateOnStream({
		stream: stream$4,
		controller,
		binary: encoding === "buffer",
		shouldEncode: !objectMode,
		encoding,
		shouldSplit: !objectMode && lines,
		preserveNewlines: !stripFinalNewline$1
	});
};
const stopReadingOnStreamEnd = async (onStreamEnd, controller, stream$4) => {
	try {
		await onStreamEnd;
	} catch {
		stream$4.destroy();
	} finally {
		controller.abort();
	}
};
const iterateOnStream = ({ stream: stream$4, controller, binary, shouldEncode, encoding, shouldSplit, preserveNewlines }) => {
	const onStdoutChunk = on(stream$4, "data", {
		signal: controller.signal,
		highWaterMark: HIGH_WATER_MARK,
		highWatermark: HIGH_WATER_MARK
	});
	return iterateOnData({
		onStdoutChunk,
		controller,
		binary,
		shouldEncode,
		encoding,
		shouldSplit,
		preserveNewlines
	});
};
const DEFAULT_OBJECT_HIGH_WATER_MARK = getDefaultHighWaterMark(true);
const HIGH_WATER_MARK = DEFAULT_OBJECT_HIGH_WATER_MARK;
const iterateOnData = async function* ({ onStdoutChunk, controller, binary, shouldEncode, encoding, shouldSplit, preserveNewlines }) {
	const generators = getGenerators({
		binary,
		shouldEncode,
		encoding,
		shouldSplit,
		preserveNewlines
	});
	try {
		for await (const [chunk] of onStdoutChunk) yield* transformChunkSync(chunk, generators, 0);
	} catch (error$1) {
		if (!controller.signal.aborted) throw error$1;
	} finally {
		yield* finalChunksSync(generators);
	}
};
const getGenerators = ({ binary, shouldEncode, encoding, shouldSplit, preserveNewlines }) => [getEncodingTransformGenerator(binary, encoding, !shouldEncode), getSplitLinesGenerator(binary, preserveNewlines, !shouldSplit, {})].filter(Boolean);

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/io/contents.js
const getStreamOutput = async ({ stream: stream$4, onStreamEnd, fdNumber, encoding, buffer: buffer$1, maxBuffer, lines, allMixed, stripFinalNewline: stripFinalNewline$1, verboseInfo, streamInfo }) => {
	const logPromise = logOutputAsync({
		stream: stream$4,
		onStreamEnd,
		fdNumber,
		encoding,
		allMixed,
		verboseInfo,
		streamInfo
	});
	if (!buffer$1) {
		await Promise.all([resumeStream(stream$4), logPromise]);
		return;
	}
	const stripFinalNewlineValue = getStripFinalNewline(stripFinalNewline$1, fdNumber);
	const iterable = iterateForResult({
		stream: stream$4,
		onStreamEnd,
		lines,
		encoding,
		stripFinalNewline: stripFinalNewlineValue,
		allMixed
	});
	const [output] = await Promise.all([getStreamContents({
		stream: stream$4,
		iterable,
		fdNumber,
		encoding,
		maxBuffer,
		lines
	}), logPromise]);
	return output;
};
const logOutputAsync = async ({ stream: stream$4, onStreamEnd, fdNumber, encoding, allMixed, verboseInfo, streamInfo: { fileDescriptors } }) => {
	if (!shouldLogOutput({
		stdioItems: fileDescriptors[fdNumber]?.stdioItems,
		encoding,
		verboseInfo,
		fdNumber
	})) return;
	const linesIterable = iterateForResult({
		stream: stream$4,
		onStreamEnd,
		lines: true,
		encoding,
		stripFinalNewline: true,
		allMixed
	});
	await logLines(linesIterable, stream$4, fdNumber, verboseInfo);
};
const resumeStream = async (stream$4) => {
	await setImmediate$1();
	if (stream$4.readableFlowing === null) stream$4.resume();
};
const getStreamContents = async ({ stream: stream$4, stream: { readableObjectMode }, iterable, fdNumber, encoding, maxBuffer, lines }) => {
	try {
		if (readableObjectMode || lines) return await getStreamAsArray(iterable, { maxBuffer });
		if (encoding === "buffer") return new Uint8Array(await getStreamAsArrayBuffer(iterable, { maxBuffer }));
		return await getStreamAsString(iterable, { maxBuffer });
	} catch (error$1) {
		return handleBufferedData(handleMaxBuffer({
			error: error$1,
			stream: stream$4,
			readableObjectMode,
			lines,
			encoding,
			fdNumber
		}));
	}
};
const getBufferedData = async (streamPromise) => {
	try {
		return await streamPromise;
	} catch (error$1) {
		return handleBufferedData(error$1);
	}
};
const handleBufferedData = ({ bufferedData }) => isArrayBuffer(bufferedData) ? new Uint8Array(bufferedData) : bufferedData;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/resolve/wait-stream.js
const waitForStream = async (stream$4, fdNumber, streamInfo, { isSameDirection, stopOnExit = false } = {}) => {
	const state = handleStdinDestroy(stream$4, streamInfo);
	const abortController = new AbortController();
	try {
		await Promise.race([...stopOnExit ? [streamInfo.exitPromise] : [], finished(stream$4, {
			cleanup: true,
			signal: abortController.signal
		})]);
	} catch (error$1) {
		if (!state.stdinCleanedUp) handleStreamError(error$1, fdNumber, streamInfo, isSameDirection);
	} finally {
		abortController.abort();
	}
};
const handleStdinDestroy = (stream$4, { originalStreams: [originalStdin], subprocess }) => {
	const state = { stdinCleanedUp: false };
	if (stream$4 === originalStdin) spyOnStdinDestroy(stream$4, subprocess, state);
	return state;
};
const spyOnStdinDestroy = (subprocessStdin, subprocess, state) => {
	const { _destroy } = subprocessStdin;
	subprocessStdin._destroy = (...destroyArguments) => {
		setStdinCleanedUp(subprocess, state);
		_destroy.call(subprocessStdin, ...destroyArguments);
	};
};
const setStdinCleanedUp = ({ exitCode, signalCode }, state) => {
	if (exitCode !== null || signalCode !== null) state.stdinCleanedUp = true;
};
const handleStreamError = (error$1, fdNumber, streamInfo, isSameDirection) => {
	if (!shouldIgnoreStreamError(error$1, fdNumber, streamInfo, isSameDirection)) throw error$1;
};
const shouldIgnoreStreamError = (error$1, fdNumber, streamInfo, isSameDirection = true) => {
	if (streamInfo.propagating) return isStreamEpipe(error$1) || isStreamAbort(error$1);
	streamInfo.propagating = true;
	return isInputFileDescriptor(streamInfo, fdNumber) === isSameDirection ? isStreamEpipe(error$1) : isStreamAbort(error$1);
};
const isInputFileDescriptor = ({ fileDescriptors }, fdNumber) => fdNumber !== "all" && fileDescriptors[fdNumber].direction === "input";
const isStreamAbort = (error$1) => error$1?.code === "ERR_STREAM_PREMATURE_CLOSE";
const isStreamEpipe = (error$1) => error$1?.code === "EPIPE";

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/resolve/stdio.js
const waitForStdioStreams = ({ subprocess, encoding, buffer: buffer$1, maxBuffer, lines, stripFinalNewline: stripFinalNewline$1, verboseInfo, streamInfo }) => subprocess.stdio.map((stream$4, fdNumber) => waitForSubprocessStream({
	stream: stream$4,
	fdNumber,
	encoding,
	buffer: buffer$1[fdNumber],
	maxBuffer: maxBuffer[fdNumber],
	lines: lines[fdNumber],
	allMixed: false,
	stripFinalNewline: stripFinalNewline$1,
	verboseInfo,
	streamInfo
}));
const waitForSubprocessStream = async ({ stream: stream$4, fdNumber, encoding, buffer: buffer$1, maxBuffer, lines, allMixed, stripFinalNewline: stripFinalNewline$1, verboseInfo, streamInfo }) => {
	if (!stream$4) return;
	const onStreamEnd = waitForStream(stream$4, fdNumber, streamInfo);
	if (isInputFileDescriptor(streamInfo, fdNumber)) {
		await onStreamEnd;
		return;
	}
	const [output] = await Promise.all([getStreamOutput({
		stream: stream$4,
		onStreamEnd,
		fdNumber,
		encoding,
		buffer: buffer$1,
		maxBuffer,
		lines,
		allMixed,
		stripFinalNewline: stripFinalNewline$1,
		verboseInfo,
		streamInfo
	}), onStreamEnd]);
	return output;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/resolve/all-async.js
const makeAllStream = ({ stdout: stdout$1, stderr }, { all }) => all && (stdout$1 || stderr) ? mergeStreams([stdout$1, stderr].filter(Boolean)) : void 0;
const waitForAllStream = ({ subprocess, encoding, buffer: buffer$1, maxBuffer, lines, stripFinalNewline: stripFinalNewline$1, verboseInfo, streamInfo }) => waitForSubprocessStream({
	...getAllStream(subprocess, buffer$1),
	fdNumber: "all",
	encoding,
	maxBuffer: maxBuffer[1] + maxBuffer[2],
	lines: lines[1] || lines[2],
	allMixed: getAllMixed(subprocess),
	stripFinalNewline: stripFinalNewline$1,
	verboseInfo,
	streamInfo
});
const getAllStream = ({ stdout: stdout$1, stderr, all }, [, bufferStdout, bufferStderr]) => {
	const buffer$1 = bufferStdout || bufferStderr;
	if (!buffer$1) return {
		stream: all,
		buffer: buffer$1
	};
	if (!bufferStdout) return {
		stream: stderr,
		buffer: buffer$1
	};
	if (!bufferStderr) return {
		stream: stdout$1,
		buffer: buffer$1
	};
	return {
		stream: all,
		buffer: buffer$1
	};
};
const getAllMixed = ({ all, stdout: stdout$1, stderr }) => all && stdout$1 && stderr && stdout$1.readableObjectMode !== stderr.readableObjectMode;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/verbose/ipc.js
const shouldLogIpc = (verboseInfo) => isFullVerbose(verboseInfo, "ipc");
const logIpcOutput = (message, verboseInfo) => {
	const verboseMessage = serializeVerboseMessage(message);
	verboseLog({
		type: "ipc",
		verboseMessage,
		fdNumber: "ipc",
		verboseInfo
	});
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/ipc/buffer-messages.js
const waitForIpcOutput = async ({ subprocess, buffer: bufferArray, maxBuffer: maxBufferArray, ipc, ipcOutput, verboseInfo }) => {
	if (!ipc) return ipcOutput;
	const isVerbose$1 = shouldLogIpc(verboseInfo);
	const buffer$1 = getFdSpecificValue(bufferArray, "ipc");
	const maxBuffer = getFdSpecificValue(maxBufferArray, "ipc");
	for await (const message of loopOnMessages({
		anyProcess: subprocess,
		channel: subprocess.channel,
		isSubprocess: false,
		ipc,
		shouldAwait: false,
		reference: true
	})) {
		if (buffer$1) {
			checkIpcMaxBuffer(subprocess, ipcOutput, maxBuffer);
			ipcOutput.push(message);
		}
		if (isVerbose$1) logIpcOutput(message, verboseInfo);
	}
	return ipcOutput;
};
const getBufferedIpcOutput = async (ipcOutputPromise, ipcOutput) => {
	await Promise.allSettled([ipcOutputPromise]);
	return ipcOutput;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/resolve/wait-subprocess.js
const waitForSubprocessResult = async ({ subprocess, options: { encoding, buffer: buffer$1, maxBuffer, lines, timeoutDuration: timeout, cancelSignal, gracefulCancel, forceKillAfterDelay, stripFinalNewline: stripFinalNewline$1, ipc, ipcInput }, context: context$1, verboseInfo, fileDescriptors, originalStreams, onInternalError, controller }) => {
	const exitPromise = waitForExit(subprocess, context$1);
	const streamInfo = {
		originalStreams,
		fileDescriptors,
		subprocess,
		exitPromise,
		propagating: false
	};
	const stdioPromises = waitForStdioStreams({
		subprocess,
		encoding,
		buffer: buffer$1,
		maxBuffer,
		lines,
		stripFinalNewline: stripFinalNewline$1,
		verboseInfo,
		streamInfo
	});
	const allPromise = waitForAllStream({
		subprocess,
		encoding,
		buffer: buffer$1,
		maxBuffer,
		lines,
		stripFinalNewline: stripFinalNewline$1,
		verboseInfo,
		streamInfo
	});
	const ipcOutput = [];
	const ipcOutputPromise = waitForIpcOutput({
		subprocess,
		buffer: buffer$1,
		maxBuffer,
		ipc,
		ipcOutput,
		verboseInfo
	});
	const originalPromises = waitForOriginalStreams(originalStreams, subprocess, streamInfo);
	const customStreamsEndPromises = waitForCustomStreamsEnd(fileDescriptors, streamInfo);
	try {
		return await Promise.race([
			Promise.all([
				{},
				waitForSuccessfulExit(exitPromise),
				Promise.all(stdioPromises),
				allPromise,
				ipcOutputPromise,
				sendIpcInput(subprocess, ipcInput),
				...originalPromises,
				...customStreamsEndPromises
			]),
			onInternalError,
			throwOnSubprocessError(subprocess, controller),
			...throwOnTimeout(subprocess, timeout, context$1, controller),
			...throwOnCancel({
				subprocess,
				cancelSignal,
				gracefulCancel,
				context: context$1,
				controller
			}),
			...throwOnGracefulCancel({
				subprocess,
				cancelSignal,
				gracefulCancel,
				forceKillAfterDelay,
				context: context$1,
				controller
			})
		]);
	} catch (error$1) {
		context$1.terminationReason ??= "other";
		return Promise.all([
			{ error: error$1 },
			exitPromise,
			Promise.all(stdioPromises.map((stdioPromise) => getBufferedData(stdioPromise))),
			getBufferedData(allPromise),
			getBufferedIpcOutput(ipcOutputPromise, ipcOutput),
			Promise.allSettled(originalPromises),
			Promise.allSettled(customStreamsEndPromises)
		]);
	}
};
const waitForOriginalStreams = (originalStreams, subprocess, streamInfo) => originalStreams.map((stream$4, fdNumber) => stream$4 === subprocess.stdio[fdNumber] ? void 0 : waitForStream(stream$4, fdNumber, streamInfo));
const waitForCustomStreamsEnd = (fileDescriptors, streamInfo) => fileDescriptors.flatMap(({ stdioItems }, fdNumber) => stdioItems.filter(({ value, stream: stream$4 = value }) => isStream(stream$4, { checkOpen: false }) && !isStandardStream(stream$4)).map(({ type, value, stream: stream$4 = value }) => waitForStream(stream$4, fdNumber, streamInfo, {
	isSameDirection: TRANSFORM_TYPES.has(type),
	stopOnExit: type === "native"
})));
const throwOnSubprocessError = async (subprocess, { signal }) => {
	const [error$1] = await once(subprocess, "error", { signal });
	throw error$1;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/convert/concurrent.js
const initializeConcurrentStreams = () => ({
	readableDestroy: /* @__PURE__ */ new WeakMap(),
	writableFinal: /* @__PURE__ */ new WeakMap(),
	writableDestroy: /* @__PURE__ */ new WeakMap()
});
const addConcurrentStream = (concurrentStreams, stream$4, waitName) => {
	const weakMap = concurrentStreams[waitName];
	if (!weakMap.has(stream$4)) weakMap.set(stream$4, []);
	const promises = weakMap.get(stream$4);
	const promise = createDeferred();
	promises.push(promise);
	const resolve$1 = promise.resolve.bind(promise);
	return {
		resolve: resolve$1,
		promises
	};
};
const waitForConcurrentStreams = async ({ resolve: resolve$1, promises }, subprocess) => {
	resolve$1();
	const [isSubprocessExit] = await Promise.race([Promise.allSettled([true, subprocess]), Promise.all([false, ...promises])]);
	return !isSubprocessExit;
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/convert/shared.js
const safeWaitForSubprocessStdin = async (subprocessStdin) => {
	if (subprocessStdin === void 0) return;
	try {
		await waitForSubprocessStdin(subprocessStdin);
	} catch {}
};
const safeWaitForSubprocessStdout = async (subprocessStdout) => {
	if (subprocessStdout === void 0) return;
	try {
		await waitForSubprocessStdout(subprocessStdout);
	} catch {}
};
const waitForSubprocessStdin = async (subprocessStdin) => {
	await finished(subprocessStdin, {
		cleanup: true,
		readable: false,
		writable: true
	});
};
const waitForSubprocessStdout = async (subprocessStdout) => {
	await finished(subprocessStdout, {
		cleanup: true,
		readable: true,
		writable: false
	});
};
const waitForSubprocess = async (subprocess, error$1) => {
	await subprocess;
	if (error$1) throw error$1;
};
const destroyOtherStream = (stream$4, isOpen, error$1) => {
	if (error$1 && !isStreamAbort(error$1)) stream$4.destroy(error$1);
	else if (isOpen) stream$4.destroy();
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/convert/readable.js
const createReadable = ({ subprocess, concurrentStreams, encoding }, { from, binary: binaryOption = true, preserveNewlines = true } = {}) => {
	const binary = binaryOption || BINARY_ENCODINGS.has(encoding);
	const { subprocessStdout, waitReadableDestroy } = getSubprocessStdout(subprocess, from, concurrentStreams);
	const { readableEncoding, readableObjectMode, readableHighWaterMark } = getReadableOptions(subprocessStdout, binary);
	const { read, onStdoutDataDone } = getReadableMethods({
		subprocessStdout,
		subprocess,
		binary,
		encoding,
		preserveNewlines
	});
	const readable$1 = new Readable({
		read,
		destroy: callbackify(onReadableDestroy.bind(void 0, {
			subprocessStdout,
			subprocess,
			waitReadableDestroy
		})),
		highWaterMark: readableHighWaterMark,
		objectMode: readableObjectMode,
		encoding: readableEncoding
	});
	onStdoutFinished({
		subprocessStdout,
		onStdoutDataDone,
		readable: readable$1,
		subprocess
	});
	return readable$1;
};
const getSubprocessStdout = (subprocess, from, concurrentStreams) => {
	const subprocessStdout = getFromStream(subprocess, from);
	const waitReadableDestroy = addConcurrentStream(concurrentStreams, subprocessStdout, "readableDestroy");
	return {
		subprocessStdout,
		waitReadableDestroy
	};
};
const getReadableOptions = ({ readableEncoding, readableObjectMode, readableHighWaterMark }, binary) => binary ? {
	readableEncoding,
	readableObjectMode,
	readableHighWaterMark
} : {
	readableEncoding,
	readableObjectMode: true,
	readableHighWaterMark: DEFAULT_OBJECT_HIGH_WATER_MARK
};
const getReadableMethods = ({ subprocessStdout, subprocess, binary, encoding, preserveNewlines }) => {
	const onStdoutDataDone = createDeferred();
	const onStdoutData = iterateOnSubprocessStream({
		subprocessStdout,
		subprocess,
		binary,
		shouldEncode: !binary,
		encoding,
		preserveNewlines
	});
	return {
		read() {
			onRead(this, onStdoutData, onStdoutDataDone);
		},
		onStdoutDataDone
	};
};
const onRead = async (readable$1, onStdoutData, onStdoutDataDone) => {
	try {
		const { value, done } = await onStdoutData.next();
		if (done) onStdoutDataDone.resolve();
		else readable$1.push(value);
	} catch {}
};
const onStdoutFinished = async ({ subprocessStdout, onStdoutDataDone, readable: readable$1, subprocess, subprocessStdin }) => {
	try {
		await waitForSubprocessStdout(subprocessStdout);
		await subprocess;
		await safeWaitForSubprocessStdin(subprocessStdin);
		await onStdoutDataDone;
		if (readable$1.readable) readable$1.push(null);
	} catch (error$1) {
		await safeWaitForSubprocessStdin(subprocessStdin);
		destroyOtherReadable(readable$1, error$1);
	}
};
const onReadableDestroy = async ({ subprocessStdout, subprocess, waitReadableDestroy }, error$1) => {
	if (await waitForConcurrentStreams(waitReadableDestroy, subprocess)) {
		destroyOtherReadable(subprocessStdout, error$1);
		await waitForSubprocess(subprocess, error$1);
	}
};
const destroyOtherReadable = (stream$4, error$1) => {
	destroyOtherStream(stream$4, stream$4.readable, error$1);
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/convert/writable.js
const createWritable = ({ subprocess, concurrentStreams }, { to: to$1 } = {}) => {
	const { subprocessStdin, waitWritableFinal, waitWritableDestroy } = getSubprocessStdin(subprocess, to$1, concurrentStreams);
	const writable$1 = new Writable({
		...getWritableMethods(subprocessStdin, subprocess, waitWritableFinal),
		destroy: callbackify(onWritableDestroy.bind(void 0, {
			subprocessStdin,
			subprocess,
			waitWritableFinal,
			waitWritableDestroy
		})),
		highWaterMark: subprocessStdin.writableHighWaterMark,
		objectMode: subprocessStdin.writableObjectMode
	});
	onStdinFinished(subprocessStdin, writable$1);
	return writable$1;
};
const getSubprocessStdin = (subprocess, to$1, concurrentStreams) => {
	const subprocessStdin = getToStream(subprocess, to$1);
	const waitWritableFinal = addConcurrentStream(concurrentStreams, subprocessStdin, "writableFinal");
	const waitWritableDestroy = addConcurrentStream(concurrentStreams, subprocessStdin, "writableDestroy");
	return {
		subprocessStdin,
		waitWritableFinal,
		waitWritableDestroy
	};
};
const getWritableMethods = (subprocessStdin, subprocess, waitWritableFinal) => ({
	write: onWrite.bind(void 0, subprocessStdin),
	final: callbackify(onWritableFinal.bind(void 0, subprocessStdin, subprocess, waitWritableFinal))
});
const onWrite = (subprocessStdin, chunk, encoding, done) => {
	if (subprocessStdin.write(chunk, encoding)) done();
	else subprocessStdin.once("drain", done);
};
const onWritableFinal = async (subprocessStdin, subprocess, waitWritableFinal) => {
	if (await waitForConcurrentStreams(waitWritableFinal, subprocess)) {
		if (subprocessStdin.writable) subprocessStdin.end();
		await subprocess;
	}
};
const onStdinFinished = async (subprocessStdin, writable$1, subprocessStdout) => {
	try {
		await waitForSubprocessStdin(subprocessStdin);
		if (writable$1.writable) writable$1.end();
	} catch (error$1) {
		await safeWaitForSubprocessStdout(subprocessStdout);
		destroyOtherWritable(writable$1, error$1);
	}
};
const onWritableDestroy = async ({ subprocessStdin, subprocess, waitWritableFinal, waitWritableDestroy }, error$1) => {
	await waitForConcurrentStreams(waitWritableFinal, subprocess);
	if (await waitForConcurrentStreams(waitWritableDestroy, subprocess)) {
		destroyOtherWritable(subprocessStdin, error$1);
		await waitForSubprocess(subprocess, error$1);
	}
};
const destroyOtherWritable = (stream$4, error$1) => {
	destroyOtherStream(stream$4, stream$4.writable, error$1);
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/convert/duplex.js
const createDuplex = ({ subprocess, concurrentStreams, encoding }, { from, to: to$1, binary: binaryOption = true, preserveNewlines = true } = {}) => {
	const binary = binaryOption || BINARY_ENCODINGS.has(encoding);
	const { subprocessStdout, waitReadableDestroy } = getSubprocessStdout(subprocess, from, concurrentStreams);
	const { subprocessStdin, waitWritableFinal, waitWritableDestroy } = getSubprocessStdin(subprocess, to$1, concurrentStreams);
	const { readableEncoding, readableObjectMode, readableHighWaterMark } = getReadableOptions(subprocessStdout, binary);
	const { read, onStdoutDataDone } = getReadableMethods({
		subprocessStdout,
		subprocess,
		binary,
		encoding,
		preserveNewlines
	});
	const duplex$1 = new Duplex({
		read,
		...getWritableMethods(subprocessStdin, subprocess, waitWritableFinal),
		destroy: callbackify(onDuplexDestroy.bind(void 0, {
			subprocessStdout,
			subprocessStdin,
			subprocess,
			waitReadableDestroy,
			waitWritableFinal,
			waitWritableDestroy
		})),
		readableHighWaterMark,
		writableHighWaterMark: subprocessStdin.writableHighWaterMark,
		readableObjectMode,
		writableObjectMode: subprocessStdin.writableObjectMode,
		encoding: readableEncoding
	});
	onStdoutFinished({
		subprocessStdout,
		onStdoutDataDone,
		readable: duplex$1,
		subprocess,
		subprocessStdin
	});
	onStdinFinished(subprocessStdin, duplex$1, subprocessStdout);
	return duplex$1;
};
const onDuplexDestroy = async ({ subprocessStdout, subprocessStdin, subprocess, waitReadableDestroy, waitWritableFinal, waitWritableDestroy }, error$1) => {
	await Promise.all([onReadableDestroy({
		subprocessStdout,
		subprocess,
		waitReadableDestroy
	}, error$1), onWritableDestroy({
		subprocessStdin,
		subprocess,
		waitWritableFinal,
		waitWritableDestroy
	}, error$1)]);
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/convert/iterable.js
const createIterable = (subprocess, encoding, { from, binary: binaryOption = false, preserveNewlines = false } = {}) => {
	const binary = binaryOption || BINARY_ENCODINGS.has(encoding);
	const subprocessStdout = getFromStream(subprocess, from);
	const onStdoutData = iterateOnSubprocessStream({
		subprocessStdout,
		subprocess,
		binary,
		shouldEncode: true,
		encoding,
		preserveNewlines
	});
	return iterateOnStdoutData(onStdoutData, subprocessStdout, subprocess);
};
const iterateOnStdoutData = async function* (onStdoutData, subprocessStdout, subprocess) {
	try {
		yield* onStdoutData;
	} finally {
		if (subprocessStdout.readable) subprocessStdout.destroy();
		await subprocess;
	}
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/convert/add.js
const addConvertedStreams = (subprocess, { encoding }) => {
	const concurrentStreams = initializeConcurrentStreams();
	subprocess.readable = createReadable.bind(void 0, {
		subprocess,
		concurrentStreams,
		encoding
	});
	subprocess.writable = createWritable.bind(void 0, {
		subprocess,
		concurrentStreams
	});
	subprocess.duplex = createDuplex.bind(void 0, {
		subprocess,
		concurrentStreams,
		encoding
	});
	subprocess.iterable = createIterable.bind(void 0, subprocess, encoding);
	subprocess[Symbol.asyncIterator] = createIterable.bind(void 0, subprocess, encoding, {});
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/methods/promise.js
const mergePromise = (subprocess, promise) => {
	for (const [property, descriptor] of descriptors) {
		const value = descriptor.value.bind(promise);
		Reflect.defineProperty(subprocess, property, {
			...descriptor,
			value
		});
	}
};
const nativePromisePrototype = (async () => {})().constructor.prototype;
const descriptors = [
	"then",
	"catch",
	"finally"
].map((property) => [property, Reflect.getOwnPropertyDescriptor(nativePromisePrototype, property)]);

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/methods/main-async.js
const execaCoreAsync = (rawFile, rawArguments, rawOptions, createNested) => {
	const { file, commandArguments, command, escapedCommand, startTime, verboseInfo, options, fileDescriptors } = handleAsyncArguments(rawFile, rawArguments, rawOptions);
	const { subprocess, promise } = spawnSubprocessAsync({
		file,
		commandArguments,
		options,
		startTime,
		verboseInfo,
		command,
		escapedCommand,
		fileDescriptors
	});
	subprocess.pipe = pipeToSubprocess.bind(void 0, {
		source: subprocess,
		sourcePromise: promise,
		boundOptions: {},
		createNested
	});
	mergePromise(subprocess, promise);
	SUBPROCESS_OPTIONS.set(subprocess, {
		options,
		fileDescriptors
	});
	return subprocess;
};
const handleAsyncArguments = (rawFile, rawArguments, rawOptions) => {
	const { command, escapedCommand, startTime, verboseInfo } = handleCommand(rawFile, rawArguments, rawOptions);
	const { file, commandArguments, options: normalizedOptions } = normalizeOptions(rawFile, rawArguments, rawOptions);
	const options = handleAsyncOptions(normalizedOptions);
	const fileDescriptors = handleStdioAsync(options, verboseInfo);
	return {
		file,
		commandArguments,
		command,
		escapedCommand,
		startTime,
		verboseInfo,
		options,
		fileDescriptors
	};
};
const handleAsyncOptions = ({ timeout, signal,...options }) => {
	if (signal !== void 0) throw new TypeError("The \"signal\" option has been renamed to \"cancelSignal\" instead.");
	return {
		...options,
		timeoutDuration: timeout
	};
};
const spawnSubprocessAsync = ({ file, commandArguments, options, startTime, verboseInfo, command, escapedCommand, fileDescriptors }) => {
	let subprocess;
	try {
		subprocess = spawn(file, commandArguments, options);
	} catch (error$1) {
		return handleEarlyError({
			error: error$1,
			command,
			escapedCommand,
			fileDescriptors,
			options,
			startTime,
			verboseInfo
		});
	}
	const controller = new AbortController();
	setMaxListeners(Number.POSITIVE_INFINITY, controller.signal);
	const originalStreams = [...subprocess.stdio];
	pipeOutputAsync(subprocess, fileDescriptors, controller);
	cleanupOnExit(subprocess, options, controller);
	const context$1 = {};
	const onInternalError = createDeferred();
	subprocess.kill = subprocessKill.bind(void 0, {
		kill: subprocess.kill.bind(subprocess),
		options,
		onInternalError,
		context: context$1,
		controller
	});
	subprocess.all = makeAllStream(subprocess, options);
	addConvertedStreams(subprocess, options);
	addIpcMethods(subprocess, options);
	const promise = handlePromise({
		subprocess,
		options,
		startTime,
		verboseInfo,
		fileDescriptors,
		originalStreams,
		command,
		escapedCommand,
		context: context$1,
		onInternalError,
		controller
	});
	return {
		subprocess,
		promise
	};
};
const handlePromise = async ({ subprocess, options, startTime, verboseInfo, fileDescriptors, originalStreams, command, escapedCommand, context: context$1, onInternalError, controller }) => {
	const [errorInfo, [exitCode, signal], stdioResults, allResult, ipcOutput] = await waitForSubprocessResult({
		subprocess,
		options,
		context: context$1,
		verboseInfo,
		fileDescriptors,
		originalStreams,
		onInternalError,
		controller
	});
	controller.abort();
	onInternalError.resolve();
	const stdio = stdioResults.map((stdioResult, fdNumber) => stripNewline(stdioResult, options, fdNumber));
	const all = stripNewline(allResult, options, "all");
	const result = getAsyncResult({
		errorInfo,
		exitCode,
		signal,
		stdio,
		all,
		ipcOutput,
		context: context$1,
		options,
		command,
		escapedCommand,
		startTime
	});
	return handleResult(result, verboseInfo, options);
};
const getAsyncResult = ({ errorInfo, exitCode, signal, stdio, all, ipcOutput, context: context$1, options, command, escapedCommand, startTime }) => "error" in errorInfo ? makeError({
	error: errorInfo.error,
	command,
	escapedCommand,
	timedOut: context$1.terminationReason === "timeout",
	isCanceled: context$1.terminationReason === "cancel" || context$1.terminationReason === "gracefulCancel",
	isGracefullyCanceled: context$1.terminationReason === "gracefulCancel",
	isMaxBuffer: errorInfo.error instanceof MaxBufferError,
	isForcefullyTerminated: context$1.isForcefullyTerminated,
	exitCode,
	signal,
	stdio,
	all,
	ipcOutput,
	options,
	startTime,
	isSync: false
}) : makeSuccessResult({
	command,
	escapedCommand,
	stdio,
	all,
	ipcOutput,
	options,
	startTime
});

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/methods/bind.js
const mergeOptions = (boundOptions, options) => {
	const newOptions = Object.fromEntries(Object.entries(options).map(([optionName, optionValue]) => [optionName, mergeOption(optionName, boundOptions[optionName], optionValue)]));
	return {
		...boundOptions,
		...newOptions
	};
};
const mergeOption = (optionName, boundOptionValue, optionValue) => {
	if (DEEP_OPTIONS.has(optionName) && isPlainObject(boundOptionValue) && isPlainObject(optionValue)) return {
		...boundOptionValue,
		...optionValue
	};
	return optionValue;
};
const DEEP_OPTIONS = new Set(["env", ...FD_SPECIFIC_OPTIONS]);

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/methods/create.js
const createExeca = (mapArguments, boundOptions, deepOptions, setBoundExeca) => {
	const createNested = (mapArguments$1, boundOptions$1, setBoundExeca$1) => createExeca(mapArguments$1, boundOptions$1, deepOptions, setBoundExeca$1);
	const boundExeca = (...execaArguments) => callBoundExeca({
		mapArguments,
		deepOptions,
		boundOptions,
		setBoundExeca,
		createNested
	}, ...execaArguments);
	if (setBoundExeca !== void 0) setBoundExeca(boundExeca, createNested, boundOptions);
	return boundExeca;
};
const callBoundExeca = ({ mapArguments, deepOptions = {}, boundOptions = {}, setBoundExeca, createNested }, firstArgument, ...nextArguments) => {
	if (isPlainObject(firstArgument)) return createNested(mapArguments, mergeOptions(boundOptions, firstArgument), setBoundExeca);
	const { file, commandArguments, options, isSync } = parseArguments({
		mapArguments,
		firstArgument,
		nextArguments,
		deepOptions,
		boundOptions
	});
	return isSync ? execaCoreSync(file, commandArguments, options) : execaCoreAsync(file, commandArguments, options, createNested);
};
const parseArguments = ({ mapArguments, firstArgument, nextArguments, deepOptions, boundOptions }) => {
	const callArguments = isTemplateString(firstArgument) ? parseTemplates(firstArgument, nextArguments) : [firstArgument, ...nextArguments];
	const [initialFile, initialArguments, initialOptions] = normalizeParameters(...callArguments);
	const mergedOptions = mergeOptions(mergeOptions(deepOptions, boundOptions), initialOptions);
	const { file = initialFile, commandArguments = initialArguments, options = mergedOptions, isSync = false } = mapArguments({
		file: initialFile,
		commandArguments: initialArguments,
		options: mergedOptions
	});
	return {
		file,
		commandArguments,
		options,
		isSync
	};
};

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/methods/command.js
const mapCommandAsync = ({ file, commandArguments }) => parseCommand(file, commandArguments);
const mapCommandSync = ({ file, commandArguments }) => ({
	...parseCommand(file, commandArguments),
	isSync: true
});
const parseCommand = (command, unusedArguments) => {
	if (unusedArguments.length > 0) throw new TypeError(`The command and its arguments must be passed as a single string: ${command} ${unusedArguments}.`);
	const [file, ...commandArguments] = parseCommandString(command);
	return {
		file,
		commandArguments
	};
};
const parseCommandString = (command) => {
	if (typeof command !== "string") throw new TypeError(`The command must be a string: ${String(command)}.`);
	const trimmedCommand = command.trim();
	if (trimmedCommand === "") return [];
	const tokens = [];
	for (const token of trimmedCommand.split(SPACES_REGEXP)) {
		const previousToken = tokens.at(-1);
		if (previousToken && previousToken.endsWith("\\")) tokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;
		else tokens.push(token);
	}
	return tokens;
};
const SPACES_REGEXP = / +/g;

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/lib/methods/script.js
const setScriptSync = (boundExeca, createNested, boundOptions) => {
	boundExeca.sync = createNested(mapScriptSync, boundOptions);
	boundExeca.s = boundExeca.sync;
};
const mapScriptAsync = ({ options }) => getScriptOptions(options);
const mapScriptSync = ({ options }) => ({
	...getScriptOptions(options),
	isSync: true
});
const getScriptOptions = (options) => ({ options: {
	...getScriptStdinOption(options),
	...options
} });
const getScriptStdinOption = ({ input, inputFile, stdio }) => input === void 0 && inputFile === void 0 && stdio === void 0 ? { stdin: "inherit" } : {};
const deepScriptOptions = { preferLocal: true };

//#endregion
//#region node_modules/.pnpm/execa@9.3.1/node_modules/execa/index.js
const execa = createExeca(() => ({}));
const execaSync = createExeca(() => ({ isSync: true }));
const execaCommand = createExeca(mapCommandAsync);
const execaCommandSync = createExeca(mapCommandSync);
const execaNode = createExeca(mapNode);
const $$1 = createExeca(mapScriptAsync, {}, deepScriptOptions, setScriptSync);
const { sendMessage, getOneMessage, getEachMessage, getCancelSignal } = getIpcExport();

//#endregion
//#region node_modules/.pnpm/cr-asst@1.1.2_react@19.1.0/node_modules/cr-asst/dist/shared/cr-asst.DUyeSKIs.mjs
var import_undici$1 = __toESM$1(require_undici(), 1);
function genEnBuiltinPrompt() {
	return `Your response should adhere to the following rules:

- Your response should be in English.
- Your response should follow the format of the response template.
- The response template provided below will be wrapped in a code block, but your response **should not** be wrapped in code block symbols (i.e., "\`\`\`markdown" and "\`\`\`"). To emphasize, **do not use code blocks to wrap your response**.
- In the response template, \`{{}}\` is the part you need to replace, for example, you should replace \`{{review comment}}\` with your actual review comment.
- In the response template, as an example, only one item item is listed in every sections. You should **list the appropriate number of items** based on the actual situation.
- Review comments should point out potential improvements in the code, but there's no need to be overly nitpicky.
- Review comments should point out syntax issues in the code, such as incorrect syntax usage, unclosed brackets, etc.
- Review comments should point out logical issues in the code, such as infinite loops, incorrect conditions, wrong expressions, etc.
- Review comments should **especially point out** security issues in the code, which refer to vulnerabilities that could lead to attacks, such as SQL injection, XSS, CSRF, etc.
- In the section "Issues and Potential Improvements", **only** point out the issues and potential improvements in the code, and do not provide review comments for reasonable code.

This is the response template you need to follow:

\`\`\`markdown
# Overall Changes

1. {{overall change}}

# Overall Review Comments

1. {{overall review comment}}

# Issues and Potential Improvements

1. \`{{path of the file with issue or potential improvement}}\`

   1. {{issue or potential improvement}}
\`\`\``;
}
function genZhCnBuiltinPrompt(options = {}) {
	const { nyan } = options;
	return `\u4F60\u7684\u56DE\u590D\u5E94\u8BE5\u9075\u5B88\u4EE5\u4E0B\u89C4\u5219\uFF1A

- \u4F60\u7684\u56DE\u590D\u5E94\u8BE5\u4F7F\u7528\u7B80\u4F53\u4E2D\u6587\u3002
- \u4F60\u7684\u56DE\u590D\u5E94\u8BE5\u9075\u5B88\u56DE\u590D\u6A21\u677F\u7684\u683C\u5F0F\u3002
- \u4E0B\u9762\u7ED9\u51FA\u7684\u56DE\u590D\u6A21\u677F\u4F1A\u88AB\u5305\u88F9\u5728\u4EE3\u7801\u5757\u4E2D\uFF0C\u4F46\u662F\u4F60\u7684\u56DE\u590D**\u4E0D\u8981**\u7528\u4EE3\u7801\u5757\u7B26\u53F7\uFF08\u5373 "\`\`\`markdown" \u548C "\`\`\`"\uFF09\u6765\u5305\u88F9\u3002\u518D\u6B21\u5F3A\u8C03\uFF0C**\u4E0D\u8981\u7528\u4EE3\u7801\u5757\u6765\u5305\u88F9\u4F60\u7684\u56DE\u590D**\u3002
- \u5728\u56DE\u590D\u6A21\u677F\u4E2D\uFF0C\`{{}}\` \u662F\u4F60\u9700\u8981\u66FF\u6362\u7684\u90E8\u5206\uFF0C\u4F8B\u5982\u4F60\u9700\u8981\u5C06 \`{{\u8BC4\u5BA1\u610F\u89C1}}\` \u66FF\u6362\u4E3A\u4F60\u5B9E\u9645\u7684\u8BC4\u5BA1\u610F\u89C1\u3002
- \u5728\u56DE\u590D\u6A21\u677F\u4E2D\uFF0C\u4F5C\u4E3A\u793A\u4F8B\uFF0C\u6BCF\u4E2A\u7AE0\u8282\u4EC5\u5217\u51FA\u4E86\u4E00\u9879\u5185\u5BB9\u3002\u4F60\u7684\u56DE\u590D\u5E94\u8BE5\u6839\u636E\u5B9E\u9645\u60C5\u51B5\uFF0C\u5217\u51FA**\u5408\u9002\u7684\u9879\u76EE\u6570\u91CF**\u3002
- \u8BC4\u5BA1\u610F\u89C1\u5E94\u8BE5\u6307\u51FA\u4EE3\u7801\u7684\u6539\u8FDB\u70B9\uFF0C\u4F46\u4E0D\u5FC5\u8FC7\u4E8E\u5439\u6BDB\u6C42\u75B5\u3002
- \u8BC4\u5BA1\u610F\u89C1\u5E94\u8BE5\u6307\u51FA\u4EE3\u7801\u7684\u8BED\u6CD5\u95EE\u9898\uFF0C\u5982\u4F7F\u7528\u4E86\u9519\u8BEF\u7684\u8BED\u6CD5\u3001\u62EC\u53F7\u672A\u95ED\u5408\u7B49\u3002
- \u8BC4\u5BA1\u610F\u89C1\u5E94\u8BE5\u6307\u51FA\u4EE3\u7801\u7684\u903B\u8F91\u95EE\u9898\uFF0C\u5982\u65E0\u9650\u5FAA\u73AF\u3001\u6761\u4EF6\u9519\u8BEF\u3001\u8868\u8FBE\u5F0F\u9519\u8BEF\u7B49\u3002
- \u8BC4\u5BA1\u610F\u89C1\u5E94\u8BE5**\u7279\u522B\u6307\u51FA**\u4EE3\u7801\u7684\u5B89\u5168\u95EE\u9898\uFF0C\u5373\u53EF\u80FD\u5BFC\u81F4\u88AB\u653B\u51FB\u7684\u6F0F\u6D1E\uFF0C\u5982 SQL \u6CE8\u5165\u3001XSS\u3001CSRF \u7B49\u3002
- \u5728\u201C\u95EE\u9898\u548C\u6539\u8FDB\u70B9\u201D\u7AE0\u8282\u4E2D\uFF0C**\u53EA\u9700\u8981**\u6307\u51FA\u4EE3\u7801\u4E2D\u7684\u95EE\u9898\u6216\u6539\u8FDB\u70B9\uFF0C\u4E0D\u9700\u8981\u7ED9\u51FA\u5408\u7406\u4EE3\u7801\u7684\u8BC4\u5BA1\u610F\u89C1\u3002
${nyan ? "- 扮演一个猫娘，你的回复需要带上猫娘的语癖，例如使用“喵~”、emoji、颜表情等。你应该在句子中使用第一人称“猫猫”，包括在描述意图、改动点时，例如“猫猫觉得...”、“猫猫认为...”、“猫猫喜欢...”。" : ""}

\u4F60\u7684\u56DE\u590D\u6A21\u677F\u5982\u4E0B\uFF1A

\`\`\`markdown
# \u6574\u4F53\u6539\u52A8

1. {{\u6574\u4F53\u6539\u52A8\u70B9}}

# \u6574\u4F53\u8BC4\u5BA1

1. {{\u6574\u4F53\u8BC4\u5BA1\u610F\u89C1}}

# \u95EE\u9898\u548C\u6539\u8FDB\u70B9

1. \`{{\u6709\u95EE\u9898\u6216\u6539\u8FDB\u70B9\u7684\u6587\u4EF6\u8DEF\u5F84}}\`

   1. {{\u95EE\u9898\u6216\u6539\u8FDB\u70B9}}
\`\`\``;
}
function getBuiltinSystemPrompt(options) {
	const { disableTools } = options;
	return `# Code Review Assistant

## Role

You are an experienced code reviewer analyzing Git diff changes.
Your goal is to provide thorough code reviews while following the rules below.

## Code Changes

These are the code changes you need to review, please analyze these changes, understand their intent, and review them:

\`\`\`diff
$DIFFS
\`\`\`

The code changes are represented in \`diff\` format, where file paths may be prefixed with \`a/\` or \`b/\`.
Do not consider these two prefixes as part of the file path.

The base ref of the code changes is \`$BASE_REF\`, and the head ref is \`$HEAD_REF\`.

## System Rules

System rules have the highest priority and must be followed.

${disableTools ? "" : `The code changes in diff format contain very limited code context, which is insufficient for a thorough code review.
Therefore, before providing your final review result, you must think about which directories and files you need to read to get more code context.

You must read the directories and files from the project being reviewed by calling the tools provided by the system.

You can call these tools multiple times before you have enough code context to fully understand the code changes.
You should only provide your final review result after you have enough code context to conduct a thorough code review.`}`;
}
async function getSystemPrompt(options) {
	const { systemPromptFile, disableTools, diffs, baseRef, headRef } = options;
	let systemPrompt = systemPromptFile ? await readFile(systemPromptFile, "utf8") : getBuiltinSystemPrompt({ disableTools });
	systemPrompt = systemPrompt.replaceAll("$DIFFS", diffs);
	systemPrompt = systemPrompt.replaceAll("$BASE_REF", baseRef);
	systemPrompt = systemPrompt.replaceAll("$HEAD_REF", headRef);
	return systemPrompt;
}
function getBuiltinUserPrompt(name$2) {
	switch (name$2) {
		case "en": return genEnBuiltinPrompt();
		case "zh-cn": return genZhCnBuiltinPrompt();
		case "zh-cn-nyan": return genZhCnBuiltinPrompt({ nyan: true });
	}
}
async function getUserPrompt(fileOrBuiltinName) {
	const builtinPrompt = getBuiltinUserPrompt(fileOrBuiltinName);
	if (builtinPrompt) return builtinPrompt;
	return await readFile(fileOrBuiltinName, "utf8");
}
function usageToString(usage) {
	return ["[USAGE]", [
		`promptTokens: ${usage?.promptTokens ? usage.promptTokens : "N/A"}`,
		`completionTokens: ${usage?.completionTokens ? usage.completionTokens : "N/A"}`,
		`totalTokens: ${usage?.totalTokens ? usage.totalTokens : "N/A"}`
	].join(", ")].join(" ");
}
function statsToString(stats) {
	return ["[STATS]", [
		`timeToFirstToken: ${(stats.timeToFirstToken / 1e3).toFixed(2)}s`,
		`timeToFinish: ${(stats.timeToFinish / 1e3).toFixed(2)}s`,
		`tokensPerSecond: ${stats.tokensPerSecond ? `${stats.tokensPerSecond.toFixed(2)} tokens/s` : "N/A"}`
	].join(", ")].join(" ");
}
async function to(promiseOrFn) {
	try {
		const maybePromise = typeof promiseOrFn === "function" ? promiseOrFn() : promiseOrFn;
		return [void 0, await maybePromise];
	} catch (err) {
		return [err instanceof Error ? err : new Error(String(err)), void 0];
	}
}
async function toToolResult(promiseOrFn) {
	const [err, result] = await to(promiseOrFn);
	return err ? {
		ok: false,
		error: err.message
	} : {
		ok: true,
		result
	};
}
async function runCmd(file, args) {
	try {
		const { stdout: stdout$1 } = await execa(file, args);
		return stdout$1;
	} catch (err) {
		if (err instanceof ExecaError) throw new Error(err.stderr);
		else if (err instanceof Error) throw err;
		else throw new Error(String(err));
	}
}
function getHttpProxyUrl() {
	return env.https_proxy || env.HTTPS_PROXY || env.http_proxy || env.HTTP_PROXY;
}
const tools = {
	readProjectDir: tool({
		description: "Read a directory from the project being reviewed.",
		parameters: objectType({
			revision: stringType().describe("Git revision to read the directory from, can be a branch name, a tag name, or a commit hash."),
			path: stringType().describe("Path to the directory, relative to the project root directory. Passing an empty string will read the root directory.")
		}),
		execute: ({ revision, path: path$9 }) => toToolResult(runCmd("git", ["show", `${revision}:${path$9}`]))
	}),
	readProjectFile: tool({
		description: "Read a file from the project being reviewed.",
		parameters: objectType({
			revision: stringType().describe("Git revision to read the file from, can be a branch name, a tag name, or a commit hash."),
			path: stringType().describe("Path to the file, relative to the project root directory.")
		}),
		execute: ({ revision, path: path$9 }) => toToolResult(runCmd("git", ["show", `${revision}:${path$9}`]))
	})
};
async function codeReview(options) {
	const { provider = "openai", baseUrl: baseUrl$1, model, apiKey, baseRef = "HEAD^", headRef = "HEAD", include = ["."], exclude = [
		"package-lock.json",
		"pnpm-lock.yaml",
		"yarn.lock"
	], outputFile, promptFile = "en", systemPromptFile, disableTools = false, maxSteps = 32, temperature, topP, topK, print = false } = options;
	const diffArgs = [
		"diff",
		"--unified=8",
		`${baseRef}...${headRef}`,
		"--",
		...include,
		...exclude.map((v) => `:!${v}`)
	];
	const diffsCmd = `git ${diffArgs.join(" ")}`;
	if (print) console.log(`[DIFFS_CMD] ${diffsCmd}
`);
	const diffs = await runCmd("git", diffArgs);
	const stats = {
		startedAt: Date.now(),
		firstTokenReceivedAt: 0,
		finishedAt: 0,
		timeToFirstToken: 0,
		timeToFinish: 0
	};
	const httpProxyUrl = getHttpProxyUrl();
	const providerInst = (provider === "openai" ? createOpenAI : provider === "deepseek" ? createDeepSeek : provider === "xai" ? createXai : provider === "anthropic" ? createAnthropic : provider === "google" ? createGoogleGenerativeAI : createOpenAI)({
		apiKey,
		baseURL: baseUrl$1,
		fetch: (req, options2) => (0, import_undici$1.fetch)(req, {
			...options2,
			dispatcher: httpProxyUrl ? new import_undici$1.ProxyAgent(httpProxyUrl) : void 0
		})
	});
	const result = streamText({
		model: providerInst(model),
		tools: disableTools ? void 0 : tools,
		messages: [{
			role: "system",
			content: await getSystemPrompt({
				systemPromptFile,
				disableTools,
				diffs,
				baseRef,
				headRef
			})
		}, {
			role: "user",
			content: await getUserPrompt(promptFile)
		}],
		maxSteps: disableTools ? 1 : maxSteps,
		temperature,
		topP,
		topK,
		onError: ({ error: error$1 }) => {
			throw new Error("code review failed", { cause: error$1 });
		}
	});
	let stepCnt = 0;
	let textPartCnt = 0;
	let reasoningPartCnt = 0;
	for await (const streamPart of result.fullStream) {
		if (!stats.firstTokenReceivedAt) stats.firstTokenReceivedAt = Date.now();
		if (streamPart.type === "step-start") {
			if (print) console.log(`------------------------------------------------ step ${stepCnt} ------------------------------------------------
`);
			textPartCnt = 0;
			reasoningPartCnt = 0;
			stepCnt++;
		} else if (streamPart.type === "step-finish") {
			if (print) console.log();
		} else if (streamPart.type === "text-delta") {
			if (print) {
				if (textPartCnt === 0 && reasoningPartCnt > 0) stdout.write("\n");
				stdout.write(streamPart.textDelta);
			}
			textPartCnt++;
		} else if (streamPart.type === "reasoning") {
			if (print) {
				if (reasoningPartCnt === 0) stdout.write("> (Reasoning)\n> \n> ");
				stdout.write(streamPart.textDelta.replaceAll("\n", "\n> "));
			}
			reasoningPartCnt++;
		} else if (streamPart.type === "tool-call" && print) {
			if (textPartCnt > 0 || reasoningPartCnt > 0) console.log();
			console.log(inspect(streamPart, {
				depth: Infinity,
				maxStringLength: 256,
				colors: true
			}));
		} else if (streamPart.type === "tool-result" && print) console.log(inspect(streamPart, {
			depth: Infinity,
			maxStringLength: 256,
			colors: true
		}));
	}
	const steps = await result.steps;
	const lastStep = steps[steps.length - 1];
	const text$1 = lastStep.text;
	const reasoning = lastStep.reasoning;
	const usage = await result.usage;
	stats.finishedAt = Date.now();
	stats.timeToFirstToken = stats.firstTokenReceivedAt - stats.startedAt;
	stats.timeToFinish = stats.finishedAt - stats.startedAt;
	if (usage) stats.tokensPerSecond = usage.completionTokens / (stats.timeToFinish / 1e3);
	if (print) {
		console.log();
		console.log(usageToString(usage));
		console.log(statsToString(stats));
	}
	if (outputFile) await writeFile(outputFile, text$1);
	return {
		content: text$1,
		reasoningContent: reasoning,
		debug: {
			diffsCmd,
			diffs,
			stats,
			usage
		}
	};
}

//#endregion
//#region node_modules/.pnpm/cr-asst@1.1.2_react@19.1.0/node_modules/cr-asst/dist/index.mjs
var import_undici = __toESM$1(require_undici(), 1);

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/global-this.js
var require_global_this = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/global-this.js"(exports, module) {
	var check = function(it) {
		return it && it.Math === Math && it;
	};
	module.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof global == "object" && global) || check(typeof exports == "object" && exports) || function() {
		return this;
	}() || Function("return this")();
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/fails.js
var require_fails = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/fails.js"(exports, module) {
	module.exports = function(exec$3) {
		try {
			return !!exec$3();
		} catch (error$1) {
			return true;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/descriptors.js
var require_descriptors = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/descriptors.js"(exports, module) {
	var fails$8 = require_fails();
	module.exports = !fails$8(function() {
		return Object.defineProperty({}, 1, { get: function() {
			return 7;
		} })[1] !== 7;
	});
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/function-bind-native.js
var require_function_bind_native = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/function-bind-native.js"(exports, module) {
	var fails$7 = require_fails();
	module.exports = !fails$7(function() {
		var test$1 = function() {}.bind();
		return typeof test$1 != "function" || test$1.hasOwnProperty("prototype");
	});
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/function-call.js
var require_function_call = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/function-call.js"(exports, module) {
	var NATIVE_BIND$1 = require_function_bind_native();
	var call$5 = Function.prototype.call;
	module.exports = NATIVE_BIND$1 ? call$5.bind(call$5) : function() {
		return call$5.apply(call$5, arguments);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-property-is-enumerable.js
var require_object_property_is_enumerable = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-property-is-enumerable.js"(exports) {
	var $propertyIsEnumerable = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
	var NASHORN_BUG = getOwnPropertyDescriptor$1 && !$propertyIsEnumerable.call({ 1: 2 }, 1);
	exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
		var descriptor = getOwnPropertyDescriptor$1(this, V);
		return !!descriptor && descriptor.enumerable;
	} : $propertyIsEnumerable;
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/create-property-descriptor.js
var require_create_property_descriptor = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/create-property-descriptor.js"(exports, module) {
	module.exports = function(bitmap, value) {
		return {
			enumerable: !(bitmap & 1),
			configurable: !(bitmap & 2),
			writable: !(bitmap & 4),
			value
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/function-uncurry-this.js
var require_function_uncurry_this = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/function-uncurry-this.js"(exports, module) {
	var NATIVE_BIND = require_function_bind_native();
	var FunctionPrototype$1 = Function.prototype;
	var call$4 = FunctionPrototype$1.call;
	var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype$1.bind.bind(call$4, call$4);
	module.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
		return function() {
			return call$4.apply(fn, arguments);
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/classof-raw.js
var require_classof_raw = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/classof-raw.js"(exports, module) {
	var uncurryThis$10 = require_function_uncurry_this();
	var toString$2 = uncurryThis$10({}.toString);
	var stringSlice$1 = uncurryThis$10("".slice);
	module.exports = function(it) {
		return stringSlice$1(toString$2(it), 8, -1);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/indexed-object.js
var require_indexed_object = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/indexed-object.js"(exports, module) {
	var uncurryThis$9 = require_function_uncurry_this();
	var fails$6 = require_fails();
	var classof$1 = require_classof_raw();
	var $Object$3 = Object;
	var split = uncurryThis$9("".split);
	module.exports = fails$6(function() {
		return !$Object$3("z").propertyIsEnumerable(0);
	}) ? function(it) {
		return classof$1(it) === "String" ? split(it, "") : $Object$3(it);
	} : $Object$3;
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/is-null-or-undefined.js
var require_is_null_or_undefined = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/is-null-or-undefined.js"(exports, module) {
	module.exports = function(it) {
		return it === null || it === void 0;
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/require-object-coercible.js
var require_require_object_coercible = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/require-object-coercible.js"(exports, module) {
	var isNullOrUndefined$1 = require_is_null_or_undefined();
	var $TypeError$5 = TypeError;
	module.exports = function(it) {
		if (isNullOrUndefined$1(it)) throw new $TypeError$5("Can't call method on " + it);
		return it;
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-indexed-object.js
var require_to_indexed_object = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-indexed-object.js"(exports, module) {
	var IndexedObject = require_indexed_object();
	var requireObjectCoercible$2 = require_require_object_coercible();
	module.exports = function(it) {
		return IndexedObject(requireObjectCoercible$2(it));
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/is-callable.js
var require_is_callable = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/is-callable.js"(exports, module) {
	var documentAll = typeof document == "object" && document.all;
	module.exports = typeof documentAll == "undefined" && documentAll !== void 0 ? function(argument) {
		return typeof argument == "function" || argument === documentAll;
	} : function(argument) {
		return typeof argument == "function";
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/is-object.js
var require_is_object = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/is-object.js"(exports, module) {
	var isCallable$10 = require_is_callable();
	module.exports = function(it) {
		return typeof it == "object" ? it !== null : isCallable$10(it);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/get-built-in.js
var require_get_built_in = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/get-built-in.js"(exports, module) {
	var globalThis$12 = require_global_this();
	var isCallable$9 = require_is_callable();
	var aFunction = function(argument) {
		return isCallable$9(argument) ? argument : void 0;
	};
	module.exports = function(namespace, method) {
		return arguments.length < 2 ? aFunction(globalThis$12[namespace]) : globalThis$12[namespace] && globalThis$12[namespace][method];
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-is-prototype-of.js
var require_object_is_prototype_of = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-is-prototype-of.js"(exports, module) {
	var uncurryThis$8 = require_function_uncurry_this();
	module.exports = uncurryThis$8({}.isPrototypeOf);
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/environment-user-agent.js
var require_environment_user_agent = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/environment-user-agent.js"(exports, module) {
	var globalThis$11 = require_global_this();
	var navigator$1 = globalThis$11.navigator;
	var userAgent$1 = navigator$1 && navigator$1.userAgent;
	module.exports = userAgent$1 ? String(userAgent$1) : "";
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/environment-v8-version.js
var require_environment_v8_version = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/environment-v8-version.js"(exports, module) {
	var globalThis$10 = require_global_this();
	var userAgent = require_environment_user_agent();
	var process$2 = globalThis$10.process;
	var Deno = globalThis$10.Deno;
	var versions = process$2 && process$2.versions || Deno && Deno.version;
	var v8 = versions && versions.v8;
	var match, version;
	if (v8) {
		match = v8.split(".");
		version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
	}
	if (!version && userAgent) {
		match = userAgent.match(/Edge\/(\d+)/);
		if (!match || match[1] >= 74) {
			match = userAgent.match(/Chrome\/(\d+)/);
			if (match) version = +match[1];
		}
	}
	module.exports = version;
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/symbol-constructor-detection.js
var require_symbol_constructor_detection = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/symbol-constructor-detection.js"(exports, module) {
	var V8_VERSION = require_environment_v8_version();
	var fails$5 = require_fails();
	var globalThis$9 = require_global_this();
	var $String$4 = globalThis$9.String;
	module.exports = !!Object.getOwnPropertySymbols && !fails$5(function() {
		var symbol$2 = Symbol("symbol detection");
		return !$String$4(symbol$2) || !(Object(symbol$2) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
	});
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/use-symbol-as-uid.js
var require_use_symbol_as_uid = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/use-symbol-as-uid.js"(exports, module) {
	var NATIVE_SYMBOL$1 = require_symbol_constructor_detection();
	module.exports = NATIVE_SYMBOL$1 && !Symbol.sham && typeof Symbol.iterator == "symbol";
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/is-symbol.js
var require_is_symbol = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/is-symbol.js"(exports, module) {
	var getBuiltIn$1 = require_get_built_in();
	var isCallable$8 = require_is_callable();
	var isPrototypeOf = require_object_is_prototype_of();
	var USE_SYMBOL_AS_UID$1 = require_use_symbol_as_uid();
	var $Object$2 = Object;
	module.exports = USE_SYMBOL_AS_UID$1 ? function(it) {
		return typeof it == "symbol";
	} : function(it) {
		var $Symbol = getBuiltIn$1("Symbol");
		return isCallable$8($Symbol) && isPrototypeOf($Symbol.prototype, $Object$2(it));
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/try-to-string.js
var require_try_to_string = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/try-to-string.js"(exports, module) {
	var $String$3 = String;
	module.exports = function(argument) {
		try {
			return $String$3(argument);
		} catch (error$1) {
			return "Object";
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/a-callable.js
var require_a_callable = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/a-callable.js"(exports, module) {
	var isCallable$7 = require_is_callable();
	var tryToString = require_try_to_string();
	var $TypeError$4 = TypeError;
	module.exports = function(argument) {
		if (isCallable$7(argument)) return argument;
		throw new $TypeError$4(tryToString(argument) + " is not a function");
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/get-method.js
var require_get_method = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/get-method.js"(exports, module) {
	var aCallable = require_a_callable();
	var isNullOrUndefined = require_is_null_or_undefined();
	module.exports = function(V, P) {
		var func = V[P];
		return isNullOrUndefined(func) ? void 0 : aCallable(func);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/ordinary-to-primitive.js
var require_ordinary_to_primitive = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/ordinary-to-primitive.js"(exports, module) {
	var call$3 = require_function_call();
	var isCallable$6 = require_is_callable();
	var isObject$4 = require_is_object();
	var $TypeError$3 = TypeError;
	module.exports = function(input, pref) {
		var fn, val;
		if (pref === "string" && isCallable$6(fn = input.toString) && !isObject$4(val = call$3(fn, input))) return val;
		if (isCallable$6(fn = input.valueOf) && !isObject$4(val = call$3(fn, input))) return val;
		if (pref !== "string" && isCallable$6(fn = input.toString) && !isObject$4(val = call$3(fn, input))) return val;
		throw new $TypeError$3("Can't convert object to primitive value");
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/is-pure.js
var require_is_pure = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/is-pure.js"(exports, module) {
	module.exports = false;
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/define-global-property.js
var require_define_global_property = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/define-global-property.js"(exports, module) {
	var globalThis$8 = require_global_this();
	var defineProperty$1 = Object.defineProperty;
	module.exports = function(key, value) {
		try {
			defineProperty$1(globalThis$8, key, {
				value,
				configurable: true,
				writable: true
			});
		} catch (error$1) {
			globalThis$8[key] = value;
		}
		return value;
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/shared-store.js
var require_shared_store = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/shared-store.js"(exports, module) {
	var IS_PURE = require_is_pure();
	var globalThis$7 = require_global_this();
	var defineGlobalProperty$2 = require_define_global_property();
	var SHARED = "__core-js_shared__";
	var store$3 = module.exports = globalThis$7[SHARED] || defineGlobalProperty$2(SHARED, {});
	(store$3.versions || (store$3.versions = [])).push({
		version: "3.44.0",
		mode: IS_PURE ? "pure" : "global",
		copyright: "© 2014-2025 Denis Pushkarev (zloirock.ru)",
		license: "https://github.com/zloirock/core-js/blob/v3.44.0/LICENSE",
		source: "https://github.com/zloirock/core-js"
	});
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/shared.js
var require_shared = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/shared.js"(exports, module) {
	var store$2 = require_shared_store();
	module.exports = function(key, value) {
		return store$2[key] || (store$2[key] = value || {});
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-object.js
var require_to_object = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-object.js"(exports, module) {
	var requireObjectCoercible$1 = require_require_object_coercible();
	var $Object$1 = Object;
	module.exports = function(argument) {
		return $Object$1(requireObjectCoercible$1(argument));
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/has-own-property.js
var require_has_own_property = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/has-own-property.js"(exports, module) {
	var uncurryThis$7 = require_function_uncurry_this();
	var toObject = require_to_object();
	var hasOwnProperty = uncurryThis$7({}.hasOwnProperty);
	module.exports = Object.hasOwn || function hasOwn$9(it, key) {
		return hasOwnProperty(toObject(it), key);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/uid.js
var require_uid = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/uid.js"(exports, module) {
	var uncurryThis$6 = require_function_uncurry_this();
	var id = 0;
	var postfix = Math.random();
	var toString$1 = uncurryThis$6(1.1.toString);
	module.exports = function(key) {
		return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString$1(++id + postfix, 36);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/well-known-symbol.js
var require_well_known_symbol = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/well-known-symbol.js"(exports, module) {
	var globalThis$6 = require_global_this();
	var shared$2 = require_shared();
	var hasOwn$6 = require_has_own_property();
	var uid$1 = require_uid();
	var NATIVE_SYMBOL = require_symbol_constructor_detection();
	var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
	var Symbol$1 = globalThis$6.Symbol;
	var WellKnownSymbolsStore = shared$2("wks");
	var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1["for"] || Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$1;
	module.exports = function(name$2) {
		if (!hasOwn$6(WellKnownSymbolsStore, name$2)) WellKnownSymbolsStore[name$2] = NATIVE_SYMBOL && hasOwn$6(Symbol$1, name$2) ? Symbol$1[name$2] : createWellKnownSymbol("Symbol." + name$2);
		return WellKnownSymbolsStore[name$2];
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-primitive.js
var require_to_primitive = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-primitive.js"(exports, module) {
	var call$2 = require_function_call();
	var isObject$3 = require_is_object();
	var isSymbol$1 = require_is_symbol();
	var getMethod = require_get_method();
	var ordinaryToPrimitive = require_ordinary_to_primitive();
	var wellKnownSymbol$2 = require_well_known_symbol();
	var $TypeError$2 = TypeError;
	var TO_PRIMITIVE = wellKnownSymbol$2("toPrimitive");
	module.exports = function(input, pref) {
		if (!isObject$3(input) || isSymbol$1(input)) return input;
		var exoticToPrim = getMethod(input, TO_PRIMITIVE);
		var result;
		if (exoticToPrim) {
			if (pref === void 0) pref = "default";
			result = call$2(exoticToPrim, input, pref);
			if (!isObject$3(result) || isSymbol$1(result)) return result;
			throw new $TypeError$2("Can't convert object to primitive value");
		}
		if (pref === void 0) pref = "number";
		return ordinaryToPrimitive(input, pref);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-property-key.js
var require_to_property_key = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-property-key.js"(exports, module) {
	var toPrimitive = require_to_primitive();
	var isSymbol = require_is_symbol();
	module.exports = function(argument) {
		var key = toPrimitive(argument, "string");
		return isSymbol(key) ? key : key + "";
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/document-create-element.js
var require_document_create_element = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/document-create-element.js"(exports, module) {
	var globalThis$5 = require_global_this();
	var isObject$2 = require_is_object();
	var document$1 = globalThis$5.document;
	var EXISTS$1 = isObject$2(document$1) && isObject$2(document$1.createElement);
	module.exports = function(it) {
		return EXISTS$1 ? document$1.createElement(it) : {};
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/ie8-dom-define.js
var require_ie8_dom_define = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/ie8-dom-define.js"(exports, module) {
	var DESCRIPTORS$6 = require_descriptors();
	var fails$4 = require_fails();
	var createElement = require_document_create_element();
	module.exports = !DESCRIPTORS$6 && !fails$4(function() {
		return Object.defineProperty(createElement("div"), "a", { get: function() {
			return 7;
		} }).a !== 7;
	});
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-get-own-property-descriptor.js
var require_object_get_own_property_descriptor = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-get-own-property-descriptor.js"(exports) {
	var DESCRIPTORS$5 = require_descriptors();
	var call$1 = require_function_call();
	var propertyIsEnumerableModule = require_object_property_is_enumerable();
	var createPropertyDescriptor$1 = require_create_property_descriptor();
	var toIndexedObject$2 = require_to_indexed_object();
	var toPropertyKey$1 = require_to_property_key();
	var hasOwn$5 = require_has_own_property();
	var IE8_DOM_DEFINE$1 = require_ie8_dom_define();
	var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;
	exports.f = DESCRIPTORS$5 ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor$2(O, P) {
		O = toIndexedObject$2(O);
		P = toPropertyKey$1(P);
		if (IE8_DOM_DEFINE$1) try {
			return $getOwnPropertyDescriptor$1(O, P);
		} catch (error$1) {}
		if (hasOwn$5(O, P)) return createPropertyDescriptor$1(!call$1(propertyIsEnumerableModule.f, O, P), O[P]);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/v8-prototype-define-bug.js
var require_v8_prototype_define_bug = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/v8-prototype-define-bug.js"(exports, module) {
	var DESCRIPTORS$4 = require_descriptors();
	var fails$3 = require_fails();
	module.exports = DESCRIPTORS$4 && fails$3(function() {
		return Object.defineProperty(function() {}, "prototype", {
			value: 42,
			writable: false
		}).prototype !== 42;
	});
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/an-object.js
var require_an_object = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/an-object.js"(exports, module) {
	var isObject$1 = require_is_object();
	var $String$2 = String;
	var $TypeError$1 = TypeError;
	module.exports = function(argument) {
		if (isObject$1(argument)) return argument;
		throw new $TypeError$1($String$2(argument) + " is not an object");
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-define-property.js
var require_object_define_property = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-define-property.js"(exports) {
	var DESCRIPTORS$3 = require_descriptors();
	var IE8_DOM_DEFINE = require_ie8_dom_define();
	var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
	var anObject$1 = require_an_object();
	var toPropertyKey = require_to_property_key();
	var $TypeError = TypeError;
	var $defineProperty = Object.defineProperty;
	var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var ENUMERABLE = "enumerable";
	var CONFIGURABLE$1 = "configurable";
	var WRITABLE = "writable";
	exports.f = DESCRIPTORS$3 ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty$2(O, P, Attributes) {
		anObject$1(O);
		P = toPropertyKey(P);
		anObject$1(Attributes);
		if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
			var current = $getOwnPropertyDescriptor(O, P);
			if (current && current[WRITABLE]) {
				O[P] = Attributes.value;
				Attributes = {
					configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
					enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
					writable: false
				};
			}
		}
		return $defineProperty(O, P, Attributes);
	} : $defineProperty : function defineProperty$2(O, P, Attributes) {
		anObject$1(O);
		P = toPropertyKey(P);
		anObject$1(Attributes);
		if (IE8_DOM_DEFINE) try {
			return $defineProperty(O, P, Attributes);
		} catch (error$1) {}
		if ("get" in Attributes || "set" in Attributes) throw new $TypeError("Accessors not supported");
		if ("value" in Attributes) O[P] = Attributes.value;
		return O;
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/create-non-enumerable-property.js
var require_create_non_enumerable_property = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/create-non-enumerable-property.js"(exports, module) {
	var DESCRIPTORS$2 = require_descriptors();
	var definePropertyModule$2 = require_object_define_property();
	var createPropertyDescriptor = require_create_property_descriptor();
	module.exports = DESCRIPTORS$2 ? function(object$1, key, value) {
		return definePropertyModule$2.f(object$1, key, createPropertyDescriptor(1, value));
	} : function(object$1, key, value) {
		object$1[key] = value;
		return object$1;
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/function-name.js
var require_function_name = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/function-name.js"(exports, module) {
	var DESCRIPTORS$1 = require_descriptors();
	var hasOwn$4 = require_has_own_property();
	var FunctionPrototype = Function.prototype;
	var getDescriptor = DESCRIPTORS$1 && Object.getOwnPropertyDescriptor;
	var EXISTS = hasOwn$4(FunctionPrototype, "name");
	var PROPER = EXISTS && function something() {}.name === "something";
	var CONFIGURABLE = EXISTS && (!DESCRIPTORS$1 || DESCRIPTORS$1 && getDescriptor(FunctionPrototype, "name").configurable);
	module.exports = {
		EXISTS,
		PROPER,
		CONFIGURABLE
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/inspect-source.js
var require_inspect_source = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/inspect-source.js"(exports, module) {
	var uncurryThis$5 = require_function_uncurry_this();
	var isCallable$5 = require_is_callable();
	var store$1 = require_shared_store();
	var functionToString = uncurryThis$5(Function.toString);
	if (!isCallable$5(store$1.inspectSource)) store$1.inspectSource = function(it) {
		return functionToString(it);
	};
	module.exports = store$1.inspectSource;
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/weak-map-basic-detection.js
var require_weak_map_basic_detection = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/weak-map-basic-detection.js"(exports, module) {
	var globalThis$4 = require_global_this();
	var isCallable$4 = require_is_callable();
	var WeakMap$2 = globalThis$4.WeakMap;
	module.exports = isCallable$4(WeakMap$2) && /native code/.test(String(WeakMap$2));
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/shared-key.js
var require_shared_key = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/shared-key.js"(exports, module) {
	var shared$1 = require_shared();
	var uid = require_uid();
	var keys = shared$1("keys");
	module.exports = function(key) {
		return keys[key] || (keys[key] = uid(key));
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/hidden-keys.js
var require_hidden_keys = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/hidden-keys.js"(exports, module) {
	module.exports = {};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/internal-state.js
var require_internal_state = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/internal-state.js"(exports, module) {
	var NATIVE_WEAK_MAP = require_weak_map_basic_detection();
	var globalThis$3 = require_global_this();
	var isObject = require_is_object();
	var createNonEnumerableProperty$1 = require_create_non_enumerable_property();
	var hasOwn$3 = require_has_own_property();
	var shared = require_shared_store();
	var sharedKey = require_shared_key();
	var hiddenKeys$2 = require_hidden_keys();
	var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
	var TypeError$1 = globalThis$3.TypeError;
	var WeakMap$1 = globalThis$3.WeakMap;
	var set, get, has;
	var enforce = function(it) {
		return has(it) ? get(it) : set(it, {});
	};
	var getterFor = function(TYPE$1) {
		return function(it) {
			var state;
			if (!isObject(it) || (state = get(it)).type !== TYPE$1) throw new TypeError$1("Incompatible receiver, " + TYPE$1 + " required");
			return state;
		};
	};
	if (NATIVE_WEAK_MAP || shared.state) {
		var store = shared.state || (shared.state = new WeakMap$1());
		store.get = store.get;
		store.has = store.has;
		store.set = store.set;
		set = function(it, metadata) {
			if (store.has(it)) throw new TypeError$1(OBJECT_ALREADY_INITIALIZED);
			metadata.facade = it;
			store.set(it, metadata);
			return metadata;
		};
		get = function(it) {
			return store.get(it) || {};
		};
		has = function(it) {
			return store.has(it);
		};
	} else {
		var STATE = sharedKey("state");
		hiddenKeys$2[STATE] = true;
		set = function(it, metadata) {
			if (hasOwn$3(it, STATE)) throw new TypeError$1(OBJECT_ALREADY_INITIALIZED);
			metadata.facade = it;
			createNonEnumerableProperty$1(it, STATE, metadata);
			return metadata;
		};
		get = function(it) {
			return hasOwn$3(it, STATE) ? it[STATE] : {};
		};
		has = function(it) {
			return hasOwn$3(it, STATE);
		};
	}
	module.exports = {
		set,
		get,
		has,
		enforce,
		getterFor
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/make-built-in.js
var require_make_built_in = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/make-built-in.js"(exports, module) {
	var uncurryThis$4 = require_function_uncurry_this();
	var fails$2 = require_fails();
	var isCallable$3 = require_is_callable();
	var hasOwn$2 = require_has_own_property();
	var DESCRIPTORS = require_descriptors();
	var CONFIGURABLE_FUNCTION_NAME = require_function_name().CONFIGURABLE;
	var inspectSource = require_inspect_source();
	var InternalStateModule = require_internal_state();
	var enforceInternalState = InternalStateModule.enforce;
	var getInternalState = InternalStateModule.get;
	var $String$1 = String;
	var defineProperty = Object.defineProperty;
	var stringSlice = uncurryThis$4("".slice);
	var replace = uncurryThis$4("".replace);
	var join$1 = uncurryThis$4([].join);
	var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails$2(function() {
		return defineProperty(function() {}, "length", { value: 8 }).length !== 8;
	});
	var TEMPLATE = String(String).split("String");
	var makeBuiltIn$1 = module.exports = function(value, name$2, options) {
		if (stringSlice($String$1(name$2), 0, 7) === "Symbol(") name$2 = "[" + replace($String$1(name$2), /^Symbol\(([^)]*)\).*$/, "$1") + "]";
		if (options && options.getter) name$2 = "get " + name$2;
		if (options && options.setter) name$2 = "set " + name$2;
		if (!hasOwn$2(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name$2) if (DESCRIPTORS) defineProperty(value, "name", {
			value: name$2,
			configurable: true
		});
		else value.name = name$2;
		if (CONFIGURABLE_LENGTH && options && hasOwn$2(options, "arity") && value.length !== options.arity) defineProperty(value, "length", { value: options.arity });
		try {
			if (options && hasOwn$2(options, "constructor") && options.constructor) {
				if (DESCRIPTORS) defineProperty(value, "prototype", { writable: false });
			} else if (value.prototype) value.prototype = void 0;
		} catch (error$1) {}
		var state = enforceInternalState(value);
		if (!hasOwn$2(state, "source")) state.source = join$1(TEMPLATE, typeof name$2 == "string" ? name$2 : "");
		return value;
	};
	Function.prototype.toString = makeBuiltIn$1(function toString$4() {
		return isCallable$3(this) && getInternalState(this).source || inspectSource(this);
	}, "toString");
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/define-built-in.js
var require_define_built_in = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/define-built-in.js"(exports, module) {
	var isCallable$2 = require_is_callable();
	var definePropertyModule$1 = require_object_define_property();
	var makeBuiltIn = require_make_built_in();
	var defineGlobalProperty$1 = require_define_global_property();
	module.exports = function(O, key, value, options) {
		if (!options) options = {};
		var simple = options.enumerable;
		var name$2 = options.name !== void 0 ? options.name : key;
		if (isCallable$2(value)) makeBuiltIn(value, name$2, options);
		if (options.global) if (simple) O[key] = value;
		else defineGlobalProperty$1(key, value);
		else {
			try {
				if (!options.unsafe) delete O[key];
				else if (O[key]) simple = true;
			} catch (error$1) {}
			if (simple) O[key] = value;
			else definePropertyModule$1.f(O, key, {
				value,
				enumerable: false,
				configurable: !options.nonConfigurable,
				writable: !options.nonWritable
			});
		}
		return O;
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/math-trunc.js
var require_math_trunc = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/math-trunc.js"(exports, module) {
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = Math.trunc || function trunc$1(x) {
		var n$1 = +x;
		return (n$1 > 0 ? floor : ceil)(n$1);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-integer-or-infinity.js
var require_to_integer_or_infinity = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-integer-or-infinity.js"(exports, module) {
	var trunc = require_math_trunc();
	module.exports = function(argument) {
		var number = +argument;
		return number !== number || number === 0 ? 0 : trunc(number);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-absolute-index.js
var require_to_absolute_index = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-absolute-index.js"(exports, module) {
	var toIntegerOrInfinity$1 = require_to_integer_or_infinity();
	var max = Math.max;
	var min$1 = Math.min;
	module.exports = function(index, length) {
		var integer = toIntegerOrInfinity$1(index);
		return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-length.js
var require_to_length = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-length.js"(exports, module) {
	var toIntegerOrInfinity = require_to_integer_or_infinity();
	var min = Math.min;
	module.exports = function(argument) {
		var len = toIntegerOrInfinity(argument);
		return len > 0 ? min(len, 9007199254740991) : 0;
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/length-of-array-like.js
var require_length_of_array_like = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/length-of-array-like.js"(exports, module) {
	var toLength = require_to_length();
	module.exports = function(obj) {
		return toLength(obj.length);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/array-includes.js
var require_array_includes = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/array-includes.js"(exports, module) {
	var toIndexedObject$1 = require_to_indexed_object();
	var toAbsoluteIndex = require_to_absolute_index();
	var lengthOfArrayLike = require_length_of_array_like();
	var createMethod = function(IS_INCLUDES) {
		return function($this, el, fromIndex) {
			var O = toIndexedObject$1($this);
			var length = lengthOfArrayLike(O);
			if (length === 0) return !IS_INCLUDES && -1;
			var index = toAbsoluteIndex(fromIndex, length);
			var value;
			if (IS_INCLUDES && el !== el) while (length > index) {
				value = O[index++];
				if (value !== value) return true;
			}
			else for (; length > index; index++) if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
			return !IS_INCLUDES && -1;
		};
	};
	module.exports = {
		includes: createMethod(true),
		indexOf: createMethod(false)
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-keys-internal.js
var require_object_keys_internal = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-keys-internal.js"(exports, module) {
	var uncurryThis$3 = require_function_uncurry_this();
	var hasOwn$1 = require_has_own_property();
	var toIndexedObject = require_to_indexed_object();
	var indexOf = require_array_includes().indexOf;
	var hiddenKeys$1 = require_hidden_keys();
	var push = uncurryThis$3([].push);
	module.exports = function(object$1, names) {
		var O = toIndexedObject(object$1);
		var i$1 = 0;
		var result = [];
		var key;
		for (key in O) !hasOwn$1(hiddenKeys$1, key) && hasOwn$1(O, key) && push(result, key);
		while (names.length > i$1) if (hasOwn$1(O, key = names[i$1++])) ~indexOf(result, key) || push(result, key);
		return result;
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/enum-bug-keys.js
var require_enum_bug_keys = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/enum-bug-keys.js"(exports, module) {
	module.exports = [
		"constructor",
		"hasOwnProperty",
		"isPrototypeOf",
		"propertyIsEnumerable",
		"toLocaleString",
		"toString",
		"valueOf"
	];
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-get-own-property-names.js
var require_object_get_own_property_names = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-get-own-property-names.js"(exports) {
	var internalObjectKeys = require_object_keys_internal();
	var enumBugKeys = require_enum_bug_keys();
	var hiddenKeys = enumBugKeys.concat("length", "prototype");
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
		return internalObjectKeys(O, hiddenKeys);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-get-own-property-symbols.js
var require_object_get_own_property_symbols = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/object-get-own-property-symbols.js"(exports) {
	exports.f = Object.getOwnPropertySymbols;
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/own-keys.js
var require_own_keys = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/own-keys.js"(exports, module) {
	var getBuiltIn = require_get_built_in();
	var uncurryThis$2 = require_function_uncurry_this();
	var getOwnPropertyNamesModule = require_object_get_own_property_names();
	var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
	var anObject = require_an_object();
	var concat = uncurryThis$2([].concat);
	module.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys$1(it) {
		var keys$1 = getOwnPropertyNamesModule.f(anObject(it));
		var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
		return getOwnPropertySymbols ? concat(keys$1, getOwnPropertySymbols(it)) : keys$1;
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/copy-constructor-properties.js
var require_copy_constructor_properties = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/copy-constructor-properties.js"(exports, module) {
	var hasOwn = require_has_own_property();
	var ownKeys = require_own_keys();
	var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
	var definePropertyModule = require_object_define_property();
	module.exports = function(target, source, exceptions) {
		var keys$1 = ownKeys(source);
		var defineProperty$2 = definePropertyModule.f;
		var getOwnPropertyDescriptor$2 = getOwnPropertyDescriptorModule.f;
		for (var i$1 = 0; i$1 < keys$1.length; i$1++) {
			var key = keys$1[i$1];
			if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) defineProperty$2(target, key, getOwnPropertyDescriptor$2(source, key));
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/is-forced.js
var require_is_forced = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/is-forced.js"(exports, module) {
	var fails$1 = require_fails();
	var isCallable$1 = require_is_callable();
	var replacement = /#|\.prototype\./;
	var isForced$1 = function(feature, detection) {
		var value = data[normalize(feature)];
		return value === POLYFILL ? true : value === NATIVE ? false : isCallable$1(detection) ? fails$1(detection) : !!detection;
	};
	var normalize = isForced$1.normalize = function(string) {
		return String(string).replace(replacement, ".").toLowerCase();
	};
	var data = isForced$1.data = {};
	var NATIVE = isForced$1.NATIVE = "N";
	var POLYFILL = isForced$1.POLYFILL = "P";
	module.exports = isForced$1;
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/export.js
var require_export = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/export.js"(exports, module) {
	var globalThis$2 = require_global_this();
	var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
	var createNonEnumerableProperty = require_create_non_enumerable_property();
	var defineBuiltIn = require_define_built_in();
	var defineGlobalProperty = require_define_global_property();
	var copyConstructorProperties = require_copy_constructor_properties();
	var isForced = require_is_forced();
	module.exports = function(options, source) {
		var TARGET = options.target;
		var GLOBAL = options.global;
		var STATIC = options.stat;
		var FORCED, target, key, targetProperty, sourceProperty, descriptor;
		if (GLOBAL) target = globalThis$2;
		else if (STATIC) target = globalThis$2[TARGET] || defineGlobalProperty(TARGET, {});
		else target = globalThis$2[TARGET] && globalThis$2[TARGET].prototype;
		if (target) for (key in source) {
			sourceProperty = source[key];
			if (options.dontCallGetSet) {
				descriptor = getOwnPropertyDescriptor(target, key);
				targetProperty = descriptor && descriptor.value;
			} else targetProperty = target[key];
			FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
			if (!FORCED && targetProperty !== void 0) {
				if (typeof sourceProperty == typeof targetProperty) continue;
				copyConstructorProperties(sourceProperty, targetProperty);
			}
			if (options.sham || targetProperty && targetProperty.sham) createNonEnumerableProperty(sourceProperty, "sham", true);
			defineBuiltIn(target, key, sourceProperty, options);
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-string-tag-support.js
var require_to_string_tag_support = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-string-tag-support.js"(exports, module) {
	var wellKnownSymbol$1 = require_well_known_symbol();
	var TO_STRING_TAG$1 = wellKnownSymbol$1("toStringTag");
	var test = {};
	test[TO_STRING_TAG$1] = "z";
	module.exports = String(test) === "[object z]";
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/classof.js
var require_classof = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/classof.js"(exports, module) {
	var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
	var isCallable = require_is_callable();
	var classofRaw = require_classof_raw();
	var wellKnownSymbol = require_well_known_symbol();
	var TO_STRING_TAG = wellKnownSymbol("toStringTag");
	var $Object = Object;
	var CORRECT_ARGUMENTS = classofRaw(function() {
		return arguments;
	}()) === "Arguments";
	var tryGet = function(it, key) {
		try {
			return it[key];
		} catch (error$1) {}
	};
	module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
		var O, tag, result;
		return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) === "Object" && isCallable(O.callee) ? "Arguments" : result;
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-string.js
var require_to_string = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/to-string.js"(exports, module) {
	var classof = require_classof();
	var $String = String;
	module.exports = function(argument) {
		if (classof(argument) === "Symbol") throw new TypeError("Cannot convert a Symbol value to a string");
		return $String(argument);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/modules/es.string.to-well-formed.js
var require_es_string_to_well_formed = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/modules/es.string.to-well-formed.js"() {
	var $ = require_export();
	var call = require_function_call();
	var uncurryThis$1 = require_function_uncurry_this();
	var requireObjectCoercible = require_require_object_coercible();
	var toString = require_to_string();
	var fails = require_fails();
	var $Array = Array;
	var charAt = uncurryThis$1("".charAt);
	var charCodeAt = uncurryThis$1("".charCodeAt);
	var join = uncurryThis$1([].join);
	var $toWellFormed = "".toWellFormed;
	var REPLACEMENT_CHARACTER = "�";
	var TO_STRING_CONVERSION_BUG = $toWellFormed && fails(function() {
		return call($toWellFormed, 1) !== "1";
	});
	$({
		target: "String",
		proto: true,
		forced: TO_STRING_CONVERSION_BUG
	}, { toWellFormed: function toWellFormed() {
		var S = toString(requireObjectCoercible(this));
		if (TO_STRING_CONVERSION_BUG) return call($toWellFormed, S);
		var length = S.length;
		var result = $Array(length);
		for (var i$1 = 0; i$1 < length; i$1++) {
			var charCode = charCodeAt(S, i$1);
			if ((charCode & 63488) !== 55296) result[i$1] = charAt(S, i$1);
			else if (charCode >= 56320 || i$1 + 1 >= length || (charCodeAt(S, i$1 + 1) & 64512) !== 56320) result[i$1] = REPLACEMENT_CHARACTER;
			else {
				result[i$1] = charAt(S, i$1);
				result[++i$1] = charAt(S, i$1);
			}
		}
		return join(result, "");
	} });
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/entry-unbind.js
var require_entry_unbind = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/internals/entry-unbind.js"(exports, module) {
	var globalThis$1 = require_global_this();
	var uncurryThis = require_function_uncurry_this();
	module.exports = function(CONSTRUCTOR, METHOD) {
		return uncurryThis(globalThis$1[CONSTRUCTOR].prototype[METHOD]);
	};
} });

//#endregion
//#region node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/es/string/to-well-formed.js
var require_to_well_formed = __commonJS({ "node_modules/.pnpm/core-js@3.44.0/node_modules/core-js/es/string/to-well-formed.js"(exports, module) {
	require_es_string_to_well_formed();
	module.exports = require_entry_unbind()("String", "toWellFormed");
} });

//#endregion
//#region src/run.ts
var import_core = __toESM$1(require_core(), 1);
var import_github = __toESM$1(require_github(), 1);
var import_exec = __toESM$1(require_exec(), 1);
var import_to_well_formed = __toESM$1(require_to_well_formed(), 1);
const reviewReportIdentifier = "<!-- Commented by mys1024/cr-asst-action. -->";
async function _run() {
	if (!import_github.context.payload.pull_request) {
		import_core.setFailed("This action only works for pull request events.");
		return;
	}
	const issueNumber = import_github.context.payload.pull_request.number;
	const baseRef = import_github.context.payload.pull_request.base.ref;
	const headRef = import_github.context.payload.pull_request.head.ref;
	if (typeof baseRef !== "string") {
		import_core.setFailed("Failed to get \"baseRef\" of the pull request.");
		return;
	}
	if (typeof headRef !== "string") {
		import_core.setFailed("Failed to get \"headRef\" of the pull request.");
		return;
	}
	await (0, import_exec.exec)("git", [
		"switch",
		"-C",
		baseRef,
		`origin/${baseRef}`
	], { silent: true });
	await (0, import_exec.exec)("git", [
		"switch",
		"-C",
		headRef,
		`origin/${headRef}`
	], { silent: true });
	const githubToken = import_core.getInput("github-token");
	const model = import_core.getInput("model");
	const provider = import_core.getInput("provider") ? import_core.getInput("provider") : void 0;
	const baseUrl$1 = import_core.getInput("base-url") ? import_core.getInput("base-url") : void 0;
	const apiKey = import_core.getInput("api-key");
	const include = import_core.getInput("include") ? import_core.getInput("include").split(",") : void 0;
	const exclude = import_core.getInput("exclude") ? import_core.getInput("exclude").split(",") : void 0;
	const promptFile = import_core.getInput("prompt-file") ? import_core.getInput("prompt-file") : void 0;
	const systemPromptFile = import_core.getInput("system-prompt-file") ? import_core.getInput("system-prompt-file") : void 0;
	const disableTools = import_core.getInput("disable-tools") ? import_core.getInput("disable-tools") === "true" : void 0;
	const maxSteps = import_core.getInput("max-steps") ? parseInt(import_core.getInput("max-steps")) : void 0;
	const temperature = import_core.getInput("temperature") ? parseFloat(import_core.getInput("temperature")) : void 0;
	const topP = import_core.getInput("top-p") ? parseFloat(import_core.getInput("top-p")) : void 0;
	const topK = import_core.getInput("top-k") ? parseInt(import_core.getInput("top-k")) : void 0;
	const outputFile = import_core.getInput("output-file") ? import_core.getInput("output-file") : void 0;
	import_core.info("baseRef: " + baseRef);
	import_core.info("headRef: " + headRef);
	import_core.info("\nCode review started...\n");
	const { content: reviewComment } = await codeReview({
		baseRef,
		headRef,
		model,
		provider,
		baseUrl: baseUrl$1,
		apiKey,
		include,
		exclude,
		outputFile,
		promptFile,
		systemPromptFile,
		disableTools,
		maxSteps,
		temperature,
		topP,
		topK,
		print: true
	});
	import_core.info("\nCode review finished.\n");
	const octokit = (0, import_github.getOctokit)(githubToken);
	const { data: comments } = await octokit.rest.issues.listComments({
		owner: import_github.context.repo.owner,
		repo: import_github.context.repo.repo,
		issue_number: issueNumber
	});
	const oldReports = comments.filter((comment) => comment.body?.startsWith(reviewReportIdentifier));
	const { data: newReport } = await octokit.rest.issues.createComment({
		owner: import_github.context.repo.owner,
		repo: import_github.context.repo.repo,
		issue_number: issueNumber,
		body: `${reviewReportIdentifier}\n\n${reviewComment}`
	});
	import_core.info(`Review report generated: ${newReport.html_url}`);
	for (const oldReport of oldReports) await octokit.rest.issues.updateComment({
		owner: import_github.context.repo.owner,
		repo: import_github.context.repo.repo,
		comment_id: oldReport.id,
		body: `${reviewReportIdentifier}\n\n_Review report updated, click [here](${newReport.html_url}) to see the latest review report._`
	});
}
async function run() {
	try {
		await _run();
	} catch (error$1) {
		console.error(error$1);
		import_core.setFailed(error$1 instanceof Error ? error$1 : String(error$1));
	}
}

//#endregion
//#region src/index.ts
run();

//#endregion
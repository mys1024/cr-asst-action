import * as core from '@actions/core';
import { context, getOctokit } from '@actions/github';
import { codeReview } from 'cr-asst';

const crAsstCommentIdentifier = '<!-- Generated by cr-asst. -->';

export async function run(): Promise<void> {
  try {
    // check
    if (!context.payload.pull_request) {
      core.setFailed('This action only works for pull request events.');
      return;
    }

    // get pull request info
    const issueNumber = context.payload.pull_request.number;
    const baseRef = context.payload.pull_request.base.ref;
    const headRef = context.payload.pull_request.head.ref;
    if (typeof baseRef !== 'string') {
      core.setFailed('Failed to get "baseRef" of the pull request.');
      return;
    }
    if (typeof headRef !== 'string') {
      core.setFailed('Failed to get "headRef" of the pull request.');
      return;
    }

    // get inputs
    const githubToken = core.getInput('github-token');
    const model = core.getInput('model');
    const apiKey = core.getInput('api-key');
    const baseUrl = core.getInput('base-url') ? core.getInput('base-url') : undefined;
    const promptFile = core.getInput('prompt-file') || 'en';
    const diffsCmd =
      core.getInput('diffs-cmd') ||
      `git log --no-prefix -p remotes/origin/${baseRef}..remotes/origin/${headRef} -- . :!pnpm-lock.yaml :!package-lock.json :!yarn.lock`;
    const inputPrice = core.getInput('input-price')
      ? Number.parseFloat(core.getInput('input-price'))
      : undefined;
    const outputPrice = core.getInput('output-price')
      ? Number.parseFloat(core.getInput('output-price'))
      : undefined;

    // print debug info
    core.info('baseRef: ' + baseRef);
    core.info('headRef: ' + headRef);
    core.info('diffsCmd: ' + diffsCmd);

    // code review
    core.info('\nCode review started...\n');
    const { content: reviewComment } = await codeReview({
      model,
      apiKey,
      baseUrl,
      promptFile,
      diffsCmd,
      print: true,
      printReasoning: true,
      printDebug: true,
      inputPrice,
      outputPrice,
    });
    core.info('\nCode review finished.\n');

    // octokit
    const octokit = getOctokit(githubToken);

    // find existing cr-asst comment
    const { data: comments } = await octokit.rest.issues.listComments({
      owner: context.repo.owner,
      repo: context.repo.repo,
      issue_number: issueNumber,
    });
    const existingComment = comments.find((comment) =>
      comment.body?.startsWith(crAsstCommentIdentifier),
    );

    // create or update cr-asst comment
    if (!existingComment) {
      const { data: comment } = await octokit.rest.issues.createComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        issue_number: issueNumber,
        body: `${crAsstCommentIdentifier}\n\n${reviewComment}`,
      });
      core.info(`Review comment added: ${comment.html_url}`);
    } else {
      const { data: comment } = await octokit.rest.issues.updateComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        comment_id: existingComment.id,
        body: `${crAsstCommentIdentifier}\n\n${reviewComment}`,
      });
      core.info(`Review comment updated: ${comment.html_url}`);
    }
  } catch (error) {
    if (error instanceof Error) {
      core.setFailed(error.message);
    }
  }
}
